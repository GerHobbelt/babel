(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory(require("Babel"));
  else if (typeof define === "function" && define.amd)
    define(["Babel"], factory);
  else if (typeof exports === "object")
    exports["babelPresetEnv"] = factory(require("Babel"));
  else root["babelPresetEnv"] = factory(root["Babel"]);
})(
  typeof window !== "undefined"
    ? window
    : typeof self !== "undefined"
    ? self
    : this,
  function(__WEBPACK_EXTERNAL_MODULE__21__) {
    return (function(modules) {
      // webpackBootstrap
      // The module cache
      var installedModules = {};
      /******/
      // The require function
      function __webpack_require__(moduleId) {
        /******/
        // Check if module is in cache
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        // Create a new module (and put it into the cache)
        var module = (installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {},
        });
        /******/
        // Execute the module function
        modules[moduleId].call(
          module.exports,
          module,
          module.exports,
          __webpack_require__
        );
        /******/
        // Flag the module as loaded
        module.l = true;
        /******/
        // Return the exports of the module
        return module.exports;
      }
      /******/
      /******/
      // expose the modules object (__webpack_modules__)
      __webpack_require__.m = modules;
      /******/
      // expose the module cache
      __webpack_require__.c = installedModules;
      /******/
      // define getter function for harmony exports
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter,
          });
        }
      };
      /******/
      // define __esModule on exports
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: "Module",
          });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      /******/
      // create a fake namespace object
      // mode & 1: value is a module id, require it
      // mode & 2: merge all properties of value into the ns
      // mode & 4: return value when already ns object
      // mode & 8|1: behave like require
      __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", {
          enumerable: true,
          value: value,
        });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(
              ns,
              key,
              function(key) {
                return value[key];
              }.bind(null, key)
            );
        return ns;
      };
      /******/
      // getDefaultExport function for compatibility with non-harmony modules
      __webpack_require__.n = function(module) {
        var getter =
          module && module.__esModule
            ? function getDefault() {
                return module["default"];
              }
            : function getModuleExports() {
                return module;
              };
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      /******/
      // Object.prototype.hasOwnProperty.call
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      // __webpack_public_path__
      __webpack_require__.p = "";
      /******/
      /******/
      // Load entry module and return exports
      return __webpack_require__((__webpack_require__.s = 166));
    })(
      /************************************************************************/
      [
        /* 0 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          var _exportNames = {
            react: true,
            assertNode: true,
            createTypeAnnotationBasedOnTypeof: true,
            createUnionTypeAnnotation: true,
            cloneNode: true,
            clone: true,
            cloneDeep: true,
            cloneWithoutLoc: true,
            addComment: true,
            addComments: true,
            inheritInnerComments: true,
            inheritLeadingComments: true,
            inheritsComments: true,
            inheritTrailingComments: true,
            removeComments: true,
            ensureBlock: true,
            toBindingIdentifierName: true,
            toBlock: true,
            toComputedKey: true,
            toExpression: true,
            toIdentifier: true,
            toKeyAlias: true,
            toSequenceExpression: true,
            toStatement: true,
            valueToNode: true,
            appendToMemberExpression: true,
            inherits: true,
            prependToMemberExpression: true,
            removeProperties: true,
            removePropertiesDeep: true,
            removeTypeDuplicates: true,
            getBindingIdentifiers: true,
            getOuterBindingIdentifiers: true,
            traverse: true,
            traverseFast: true,
            shallowEqual: true,
            is: true,
            isBinding: true,
            isBlockScoped: true,
            isImmutable: true,
            isLet: true,
            isNode: true,
            isNodesEquivalent: true,
            isReferenced: true,
            isScope: true,
            isSpecifierDefault: true,
            isType: true,
            isValidES3Identifier: true,
            isValidIdentifier: true,
            isVar: true,
            matchesPattern: true,
            validate: true,
            buildMatchMemberExpression: true,
          };
          Object.defineProperty(exports, "assertNode", {
            enumerable: true,
            get: function() {
              return _assertNode.default;
            },
          });
          Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
            enumerable: true,
            get: function() {
              return _createTypeAnnotationBasedOnTypeof.default;
            },
          });
          Object.defineProperty(exports, "createUnionTypeAnnotation", {
            enumerable: true,
            get: function() {
              return _createUnionTypeAnnotation.default;
            },
          });
          Object.defineProperty(exports, "cloneNode", {
            enumerable: true,
            get: function() {
              return _cloneNode.default;
            },
          });
          Object.defineProperty(exports, "clone", {
            enumerable: true,
            get: function() {
              return _clone.default;
            },
          });
          Object.defineProperty(exports, "cloneDeep", {
            enumerable: true,
            get: function() {
              return _cloneDeep.default;
            },
          });
          Object.defineProperty(exports, "cloneWithoutLoc", {
            enumerable: true,
            get: function() {
              return _cloneWithoutLoc.default;
            },
          });
          Object.defineProperty(exports, "addComment", {
            enumerable: true,
            get: function() {
              return _addComment.default;
            },
          });
          Object.defineProperty(exports, "addComments", {
            enumerable: true,
            get: function() {
              return _addComments.default;
            },
          });
          Object.defineProperty(exports, "inheritInnerComments", {
            enumerable: true,
            get: function() {
              return _inheritInnerComments.default;
            },
          });
          Object.defineProperty(exports, "inheritLeadingComments", {
            enumerable: true,
            get: function() {
              return _inheritLeadingComments.default;
            },
          });
          Object.defineProperty(exports, "inheritsComments", {
            enumerable: true,
            get: function() {
              return _inheritsComments.default;
            },
          });
          Object.defineProperty(exports, "inheritTrailingComments", {
            enumerable: true,
            get: function() {
              return _inheritTrailingComments.default;
            },
          });
          Object.defineProperty(exports, "removeComments", {
            enumerable: true,
            get: function() {
              return _removeComments.default;
            },
          });
          Object.defineProperty(exports, "ensureBlock", {
            enumerable: true,
            get: function() {
              return _ensureBlock.default;
            },
          });
          Object.defineProperty(exports, "toBindingIdentifierName", {
            enumerable: true,
            get: function() {
              return _toBindingIdentifierName.default;
            },
          });
          Object.defineProperty(exports, "toBlock", {
            enumerable: true,
            get: function() {
              return _toBlock.default;
            },
          });
          Object.defineProperty(exports, "toComputedKey", {
            enumerable: true,
            get: function() {
              return _toComputedKey.default;
            },
          });
          Object.defineProperty(exports, "toExpression", {
            enumerable: true,
            get: function() {
              return _toExpression.default;
            },
          });
          Object.defineProperty(exports, "toIdentifier", {
            enumerable: true,
            get: function() {
              return _toIdentifier.default;
            },
          });
          Object.defineProperty(exports, "toKeyAlias", {
            enumerable: true,
            get: function() {
              return _toKeyAlias.default;
            },
          });
          Object.defineProperty(exports, "toSequenceExpression", {
            enumerable: true,
            get: function() {
              return _toSequenceExpression.default;
            },
          });
          Object.defineProperty(exports, "toStatement", {
            enumerable: true,
            get: function() {
              return _toStatement.default;
            },
          });
          Object.defineProperty(exports, "valueToNode", {
            enumerable: true,
            get: function() {
              return _valueToNode.default;
            },
          });
          Object.defineProperty(exports, "appendToMemberExpression", {
            enumerable: true,
            get: function() {
              return _appendToMemberExpression.default;
            },
          });
          Object.defineProperty(exports, "inherits", {
            enumerable: true,
            get: function() {
              return _inherits.default;
            },
          });
          Object.defineProperty(exports, "prependToMemberExpression", {
            enumerable: true,
            get: function() {
              return _prependToMemberExpression.default;
            },
          });
          Object.defineProperty(exports, "removeProperties", {
            enumerable: true,
            get: function() {
              return _removeProperties.default;
            },
          });
          Object.defineProperty(exports, "removePropertiesDeep", {
            enumerable: true,
            get: function() {
              return _removePropertiesDeep.default;
            },
          });
          Object.defineProperty(exports, "removeTypeDuplicates", {
            enumerable: true,
            get: function() {
              return _removeTypeDuplicates.default;
            },
          });
          Object.defineProperty(exports, "getBindingIdentifiers", {
            enumerable: true,
            get: function() {
              return _getBindingIdentifiers.default;
            },
          });
          Object.defineProperty(exports, "getOuterBindingIdentifiers", {
            enumerable: true,
            get: function() {
              return _getOuterBindingIdentifiers.default;
            },
          });
          Object.defineProperty(exports, "traverse", {
            enumerable: true,
            get: function() {
              return _traverse.default;
            },
          });
          Object.defineProperty(exports, "traverseFast", {
            enumerable: true,
            get: function() {
              return _traverseFast.default;
            },
          });
          Object.defineProperty(exports, "shallowEqual", {
            enumerable: true,
            get: function() {
              return _shallowEqual.default;
            },
          });
          Object.defineProperty(exports, "is", {
            enumerable: true,
            get: function() {
              return _is.default;
            },
          });
          Object.defineProperty(exports, "isBinding", {
            enumerable: true,
            get: function() {
              return _isBinding.default;
            },
          });
          Object.defineProperty(exports, "isBlockScoped", {
            enumerable: true,
            get: function() {
              return _isBlockScoped.default;
            },
          });
          Object.defineProperty(exports, "isImmutable", {
            enumerable: true,
            get: function() {
              return _isImmutable.default;
            },
          });
          Object.defineProperty(exports, "isLet", {
            enumerable: true,
            get: function() {
              return _isLet.default;
            },
          });
          Object.defineProperty(exports, "isNode", {
            enumerable: true,
            get: function() {
              return _isNode.default;
            },
          });
          Object.defineProperty(exports, "isNodesEquivalent", {
            enumerable: true,
            get: function() {
              return _isNodesEquivalent.default;
            },
          });
          Object.defineProperty(exports, "isReferenced", {
            enumerable: true,
            get: function() {
              return _isReferenced.default;
            },
          });
          Object.defineProperty(exports, "isScope", {
            enumerable: true,
            get: function() {
              return _isScope.default;
            },
          });
          Object.defineProperty(exports, "isSpecifierDefault", {
            enumerable: true,
            get: function() {
              return _isSpecifierDefault.default;
            },
          });
          Object.defineProperty(exports, "isType", {
            enumerable: true,
            get: function() {
              return _isType.default;
            },
          });
          Object.defineProperty(exports, "isValidES3Identifier", {
            enumerable: true,
            get: function() {
              return _isValidES3Identifier.default;
            },
          });
          Object.defineProperty(exports, "isValidIdentifier", {
            enumerable: true,
            get: function() {
              return _isValidIdentifier.default;
            },
          });
          Object.defineProperty(exports, "isVar", {
            enumerable: true,
            get: function() {
              return _isVar.default;
            },
          });
          Object.defineProperty(exports, "matchesPattern", {
            enumerable: true,
            get: function() {
              return _matchesPattern.default;
            },
          });
          Object.defineProperty(exports, "validate", {
            enumerable: true,
            get: function() {
              return _validate.default;
            },
          });
          Object.defineProperty(exports, "buildMatchMemberExpression", {
            enumerable: true,
            get: function() {
              return _buildMatchMemberExpression.default;
            },
          });
          exports.react = void 0;

          var _isReactComponent = _interopRequireDefault(
            __webpack_require__(173)
          );

          var _isCompatTag = _interopRequireDefault(__webpack_require__(174));

          var _buildChildren = _interopRequireDefault(__webpack_require__(175));

          var _assertNode = _interopRequireDefault(__webpack_require__(246));

          var _generated = __webpack_require__(247);

          Object.keys(_generated).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _generated[key];
              },
            });
          });

          var _createTypeAnnotationBasedOnTypeof = _interopRequireDefault(
            __webpack_require__(248)
          );

          var _createUnionTypeAnnotation = _interopRequireDefault(
            __webpack_require__(249)
          );

          var _generated2 = __webpack_require__(3);

          Object.keys(_generated2).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _generated2[key];
              },
            });
          });

          var _cloneNode = _interopRequireDefault(__webpack_require__(27));

          var _clone = _interopRequireDefault(__webpack_require__(110));

          var _cloneDeep = _interopRequireDefault(__webpack_require__(250));

          var _cloneWithoutLoc = _interopRequireDefault(
            __webpack_require__(251)
          );

          var _addComment = _interopRequireDefault(__webpack_require__(252));

          var _addComments = _interopRequireDefault(__webpack_require__(111));

          var _inheritInnerComments = _interopRequireDefault(
            __webpack_require__(112)
          );

          var _inheritLeadingComments = _interopRequireDefault(
            __webpack_require__(116)
          );

          var _inheritsComments = _interopRequireDefault(
            __webpack_require__(117)
          );

          var _inheritTrailingComments = _interopRequireDefault(
            __webpack_require__(118)
          );

          var _removeComments = _interopRequireDefault(
            __webpack_require__(264)
          );

          var _generated3 = __webpack_require__(265);

          Object.keys(_generated3).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _generated3[key];
              },
            });
          });

          var _constants = __webpack_require__(13);

          Object.keys(_constants).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _constants[key];
              },
            });
          });

          var _ensureBlock = _interopRequireDefault(__webpack_require__(266));

          var _toBindingIdentifierName = _interopRequireDefault(
            __webpack_require__(267)
          );

          var _toBlock = _interopRequireDefault(__webpack_require__(119));

          var _toComputedKey = _interopRequireDefault(__webpack_require__(268));

          var _toExpression = _interopRequireDefault(__webpack_require__(269));

          var _toIdentifier = _interopRequireDefault(__webpack_require__(120));

          var _toKeyAlias = _interopRequireDefault(__webpack_require__(270));

          var _toSequenceExpression = _interopRequireDefault(
            __webpack_require__(271)
          );

          var _toStatement = _interopRequireDefault(__webpack_require__(273));

          var _valueToNode = _interopRequireDefault(__webpack_require__(274));

          var _definitions = __webpack_require__(7);

          Object.keys(_definitions).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _definitions[key];
              },
            });
          });

          var _appendToMemberExpression = _interopRequireDefault(
            __webpack_require__(278)
          );

          var _inherits = _interopRequireDefault(__webpack_require__(279));

          var _prependToMemberExpression = _interopRequireDefault(
            __webpack_require__(280)
          );

          var _removeProperties = _interopRequireDefault(
            __webpack_require__(123)
          );

          var _removePropertiesDeep = _interopRequireDefault(
            __webpack_require__(121)
          );

          var _removeTypeDuplicates = _interopRequireDefault(
            __webpack_require__(109)
          );

          var _getBindingIdentifiers = _interopRequireDefault(
            __webpack_require__(39)
          );

          var _getOuterBindingIdentifiers = _interopRequireDefault(
            __webpack_require__(281)
          );

          var _traverse = _interopRequireDefault(__webpack_require__(282));

          var _traverseFast = _interopRequireDefault(__webpack_require__(122));

          var _shallowEqual = _interopRequireDefault(__webpack_require__(51));

          var _is = _interopRequireDefault(__webpack_require__(66));

          var _isBinding = _interopRequireDefault(__webpack_require__(283));

          var _isBlockScoped = _interopRequireDefault(__webpack_require__(284));

          var _isImmutable = _interopRequireDefault(__webpack_require__(285));

          var _isLet = _interopRequireDefault(__webpack_require__(124));

          var _isNode = _interopRequireDefault(__webpack_require__(108));

          var _isNodesEquivalent = _interopRequireDefault(
            __webpack_require__(286)
          );

          var _isReferenced = _interopRequireDefault(__webpack_require__(287));

          var _isScope = _interopRequireDefault(__webpack_require__(288));

          var _isSpecifierDefault = _interopRequireDefault(
            __webpack_require__(289)
          );

          var _isType = _interopRequireDefault(__webpack_require__(67));

          var _isValidES3Identifier = _interopRequireDefault(
            __webpack_require__(290)
          );

          var _isValidIdentifier = _interopRequireDefault(
            __webpack_require__(26)
          );

          var _isVar = _interopRequireDefault(__webpack_require__(291));

          var _matchesPattern = _interopRequireDefault(__webpack_require__(87));

          var _validate = _interopRequireDefault(__webpack_require__(107));

          var _buildMatchMemberExpression = _interopRequireDefault(
            __webpack_require__(86)
          );

          var _generated4 = __webpack_require__(1);

          Object.keys(_generated4).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _generated4[key];
              },
            });
          });

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const react = {
            isReactComponent: _isReactComponent.default,
            isCompatTag: _isCompatTag.default,
            buildChildren: _buildChildren.default,
          };
          exports.react = react;
        },
        /* 1 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.isArrayExpression = isArrayExpression;
          exports.isAssignmentExpression = isAssignmentExpression;
          exports.isBinaryExpression = isBinaryExpression;
          exports.isInterpreterDirective = isInterpreterDirective;
          exports.isDirective = isDirective;
          exports.isDirectiveLiteral = isDirectiveLiteral;
          exports.isBlockStatement = isBlockStatement;
          exports.isBreakStatement = isBreakStatement;
          exports.isCallExpression = isCallExpression;
          exports.isCatchClause = isCatchClause;
          exports.isConditionalExpression = isConditionalExpression;
          exports.isContinueStatement = isContinueStatement;
          exports.isDebuggerStatement = isDebuggerStatement;
          exports.isDoWhileStatement = isDoWhileStatement;
          exports.isEmptyStatement = isEmptyStatement;
          exports.isExpressionStatement = isExpressionStatement;
          exports.isFile = isFile;
          exports.isForInStatement = isForInStatement;
          exports.isForStatement = isForStatement;
          exports.isFunctionDeclaration = isFunctionDeclaration;
          exports.isFunctionExpression = isFunctionExpression;
          exports.isIdentifier = isIdentifier;
          exports.isIfStatement = isIfStatement;
          exports.isLabeledStatement = isLabeledStatement;
          exports.isStringLiteral = isStringLiteral;
          exports.isNumericLiteral = isNumericLiteral;
          exports.isNullLiteral = isNullLiteral;
          exports.isBooleanLiteral = isBooleanLiteral;
          exports.isRegExpLiteral = isRegExpLiteral;
          exports.isLogicalExpression = isLogicalExpression;
          exports.isMemberExpression = isMemberExpression;
          exports.isNewExpression = isNewExpression;
          exports.isProgram = isProgram;
          exports.isObjectExpression = isObjectExpression;
          exports.isObjectMethod = isObjectMethod;
          exports.isObjectProperty = isObjectProperty;
          exports.isRestElement = isRestElement;
          exports.isReturnStatement = isReturnStatement;
          exports.isSequenceExpression = isSequenceExpression;
          exports.isSwitchCase = isSwitchCase;
          exports.isSwitchStatement = isSwitchStatement;
          exports.isThisExpression = isThisExpression;
          exports.isThrowStatement = isThrowStatement;
          exports.isTryStatement = isTryStatement;
          exports.isUnaryExpression = isUnaryExpression;
          exports.isUpdateExpression = isUpdateExpression;
          exports.isVariableDeclaration = isVariableDeclaration;
          exports.isVariableDeclarator = isVariableDeclarator;
          exports.isWhileStatement = isWhileStatement;
          exports.isWithStatement = isWithStatement;
          exports.isAssignmentPattern = isAssignmentPattern;
          exports.isArrayPattern = isArrayPattern;
          exports.isArrowFunctionExpression = isArrowFunctionExpression;
          exports.isClassBody = isClassBody;
          exports.isClassDeclaration = isClassDeclaration;
          exports.isClassExpression = isClassExpression;
          exports.isExportAllDeclaration = isExportAllDeclaration;
          exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
          exports.isExportNamedDeclaration = isExportNamedDeclaration;
          exports.isExportSpecifier = isExportSpecifier;
          exports.isForOfStatement = isForOfStatement;
          exports.isImportDeclaration = isImportDeclaration;
          exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
          exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
          exports.isImportSpecifier = isImportSpecifier;
          exports.isMetaProperty = isMetaProperty;
          exports.isClassMethod = isClassMethod;
          exports.isObjectPattern = isObjectPattern;
          exports.isSpreadElement = isSpreadElement;
          exports.isSuper = isSuper;
          exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
          exports.isTemplateElement = isTemplateElement;
          exports.isTemplateLiteral = isTemplateLiteral;
          exports.isYieldExpression = isYieldExpression;
          exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
          exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
          exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
          exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
          exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
          exports.isClassImplements = isClassImplements;
          exports.isDeclareClass = isDeclareClass;
          exports.isDeclareFunction = isDeclareFunction;
          exports.isDeclareInterface = isDeclareInterface;
          exports.isDeclareModule = isDeclareModule;
          exports.isDeclareModuleExports = isDeclareModuleExports;
          exports.isDeclareTypeAlias = isDeclareTypeAlias;
          exports.isDeclareOpaqueType = isDeclareOpaqueType;
          exports.isDeclareVariable = isDeclareVariable;
          exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
          exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
          exports.isDeclaredPredicate = isDeclaredPredicate;
          exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
          exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
          exports.isFunctionTypeParam = isFunctionTypeParam;
          exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
          exports.isInferredPredicate = isInferredPredicate;
          exports.isInterfaceExtends = isInterfaceExtends;
          exports.isInterfaceDeclaration = isInterfaceDeclaration;
          exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
          exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
          exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
          exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
          exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
          exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
          exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
          exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
          exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
          exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
          exports.isObjectTypeIndexer = isObjectTypeIndexer;
          exports.isObjectTypeProperty = isObjectTypeProperty;
          exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
          exports.isOpaqueType = isOpaqueType;
          exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
          exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
          exports.isStringTypeAnnotation = isStringTypeAnnotation;
          exports.isThisTypeAnnotation = isThisTypeAnnotation;
          exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
          exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
          exports.isTypeAlias = isTypeAlias;
          exports.isTypeAnnotation = isTypeAnnotation;
          exports.isTypeCastExpression = isTypeCastExpression;
          exports.isTypeParameter = isTypeParameter;
          exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
          exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
          exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
          exports.isVariance = isVariance;
          exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
          exports.isJSXAttribute = isJSXAttribute;
          exports.isJSXClosingElement = isJSXClosingElement;
          exports.isJSXElement = isJSXElement;
          exports.isJSXEmptyExpression = isJSXEmptyExpression;
          exports.isJSXExpressionContainer = isJSXExpressionContainer;
          exports.isJSXSpreadChild = isJSXSpreadChild;
          exports.isJSXIdentifier = isJSXIdentifier;
          exports.isJSXMemberExpression = isJSXMemberExpression;
          exports.isJSXNamespacedName = isJSXNamespacedName;
          exports.isJSXOpeningElement = isJSXOpeningElement;
          exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
          exports.isJSXText = isJSXText;
          exports.isJSXFragment = isJSXFragment;
          exports.isJSXOpeningFragment = isJSXOpeningFragment;
          exports.isJSXClosingFragment = isJSXClosingFragment;
          exports.isNoop = isNoop;
          exports.isParenthesizedExpression = isParenthesizedExpression;
          exports.isAwaitExpression = isAwaitExpression;
          exports.isBindExpression = isBindExpression;
          exports.isClassProperty = isClassProperty;
          exports.isOptionalMemberExpression = isOptionalMemberExpression;
          exports.isPipelineTopicExpression = isPipelineTopicExpression;
          exports.isPipelineBareFunction = isPipelineBareFunction;
          exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
          exports.isOptionalCallExpression = isOptionalCallExpression;
          exports.isClassPrivateProperty = isClassPrivateProperty;
          exports.isClassPrivateMethod = isClassPrivateMethod;
          exports.isImport = isImport;
          exports.isDecorator = isDecorator;
          exports.isDoExpression = isDoExpression;
          exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
          exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
          exports.isPrivateName = isPrivateName;
          exports.isBigIntLiteral = isBigIntLiteral;
          exports.isTSParameterProperty = isTSParameterProperty;
          exports.isTSDeclareFunction = isTSDeclareFunction;
          exports.isTSDeclareMethod = isTSDeclareMethod;
          exports.isTSQualifiedName = isTSQualifiedName;
          exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
          exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
          exports.isTSPropertySignature = isTSPropertySignature;
          exports.isTSMethodSignature = isTSMethodSignature;
          exports.isTSIndexSignature = isTSIndexSignature;
          exports.isTSAnyKeyword = isTSAnyKeyword;
          exports.isTSUnknownKeyword = isTSUnknownKeyword;
          exports.isTSNumberKeyword = isTSNumberKeyword;
          exports.isTSObjectKeyword = isTSObjectKeyword;
          exports.isTSBooleanKeyword = isTSBooleanKeyword;
          exports.isTSStringKeyword = isTSStringKeyword;
          exports.isTSSymbolKeyword = isTSSymbolKeyword;
          exports.isTSVoidKeyword = isTSVoidKeyword;
          exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
          exports.isTSNullKeyword = isTSNullKeyword;
          exports.isTSNeverKeyword = isTSNeverKeyword;
          exports.isTSThisType = isTSThisType;
          exports.isTSFunctionType = isTSFunctionType;
          exports.isTSConstructorType = isTSConstructorType;
          exports.isTSTypeReference = isTSTypeReference;
          exports.isTSTypePredicate = isTSTypePredicate;
          exports.isTSTypeQuery = isTSTypeQuery;
          exports.isTSTypeLiteral = isTSTypeLiteral;
          exports.isTSArrayType = isTSArrayType;
          exports.isTSTupleType = isTSTupleType;
          exports.isTSOptionalType = isTSOptionalType;
          exports.isTSRestType = isTSRestType;
          exports.isTSUnionType = isTSUnionType;
          exports.isTSIntersectionType = isTSIntersectionType;
          exports.isTSConditionalType = isTSConditionalType;
          exports.isTSInferType = isTSInferType;
          exports.isTSParenthesizedType = isTSParenthesizedType;
          exports.isTSTypeOperator = isTSTypeOperator;
          exports.isTSIndexedAccessType = isTSIndexedAccessType;
          exports.isTSMappedType = isTSMappedType;
          exports.isTSLiteralType = isTSLiteralType;
          exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
          exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
          exports.isTSInterfaceBody = isTSInterfaceBody;
          exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
          exports.isTSAsExpression = isTSAsExpression;
          exports.isTSTypeAssertion = isTSTypeAssertion;
          exports.isTSEnumDeclaration = isTSEnumDeclaration;
          exports.isTSEnumMember = isTSEnumMember;
          exports.isTSModuleDeclaration = isTSModuleDeclaration;
          exports.isTSModuleBlock = isTSModuleBlock;
          exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
          exports.isTSExternalModuleReference = isTSExternalModuleReference;
          exports.isTSNonNullExpression = isTSNonNullExpression;
          exports.isTSExportAssignment = isTSExportAssignment;
          exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
          exports.isTSTypeAnnotation = isTSTypeAnnotation;
          exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
          exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
          exports.isTSTypeParameter = isTSTypeParameter;
          exports.isExpression = isExpression;
          exports.isBinary = isBinary;
          exports.isScopable = isScopable;
          exports.isBlockParent = isBlockParent;
          exports.isBlock = isBlock;
          exports.isStatement = isStatement;
          exports.isTerminatorless = isTerminatorless;
          exports.isCompletionStatement = isCompletionStatement;
          exports.isConditional = isConditional;
          exports.isLoop = isLoop;
          exports.isWhile = isWhile;
          exports.isExpressionWrapper = isExpressionWrapper;
          exports.isFor = isFor;
          exports.isForXStatement = isForXStatement;
          exports.isFunction = isFunction;
          exports.isFunctionParent = isFunctionParent;
          exports.isPureish = isPureish;
          exports.isDeclaration = isDeclaration;
          exports.isPatternLike = isPatternLike;
          exports.isLVal = isLVal;
          exports.isTSEntityName = isTSEntityName;
          exports.isLiteral = isLiteral;
          exports.isImmutable = isImmutable;
          exports.isUserWhitespacable = isUserWhitespacable;
          exports.isMethod = isMethod;
          exports.isObjectMember = isObjectMember;
          exports.isProperty = isProperty;
          exports.isUnaryLike = isUnaryLike;
          exports.isPattern = isPattern;
          exports.isClass = isClass;
          exports.isModuleDeclaration = isModuleDeclaration;
          exports.isExportDeclaration = isExportDeclaration;
          exports.isModuleSpecifier = isModuleSpecifier;
          exports.isFlow = isFlow;
          exports.isFlowType = isFlowType;
          exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
          exports.isFlowDeclaration = isFlowDeclaration;
          exports.isFlowPredicate = isFlowPredicate;
          exports.isJSX = isJSX;
          exports.isPrivate = isPrivate;
          exports.isTSTypeElement = isTSTypeElement;
          exports.isTSType = isTSType;
          exports.isNumberLiteral = isNumberLiteral;
          exports.isRegexLiteral = isRegexLiteral;
          exports.isRestProperty = isRestProperty;
          exports.isSpreadProperty = isSpreadProperty;

          var _shallowEqual = _interopRequireDefault(__webpack_require__(51));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function isArrayExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ArrayExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isAssignmentExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "AssignmentExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBinaryExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BinaryExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isInterpreterDirective(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "InterpreterDirective") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDirective(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Directive") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDirectiveLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DirectiveLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBlockStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BlockStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBreakStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BreakStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isCallExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "CallExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isCatchClause(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "CatchClause") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isConditionalExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ConditionalExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isContinueStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ContinueStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDebuggerStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DebuggerStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDoWhileStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DoWhileStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isEmptyStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "EmptyStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExpressionStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExpressionStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFile(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "File") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isForInStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ForInStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isForStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ForStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunctionDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "FunctionDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunctionExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "FunctionExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isIdentifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Identifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isIfStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "IfStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isLabeledStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "LabeledStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isStringLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "StringLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNumericLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NumericLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNullLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NullLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBooleanLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BooleanLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isRegExpLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "RegExpLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isLogicalExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "LogicalExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isMemberExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "MemberExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNewExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NewExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isProgram(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Program") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectMethod(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectMethod") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isRestElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "RestElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isReturnStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ReturnStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSequenceExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "SequenceExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSwitchCase(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "SwitchCase") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSwitchStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "SwitchStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isThisExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ThisExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isThrowStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ThrowStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTryStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TryStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isUnaryExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "UnaryExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isUpdateExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "UpdateExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isVariableDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "VariableDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isVariableDeclarator(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "VariableDeclarator") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isWhileStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "WhileStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isWithStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "WithStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isAssignmentPattern(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "AssignmentPattern") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isArrayPattern(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ArrayPattern") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isArrowFunctionExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ArrowFunctionExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassBody(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassBody") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportAllDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportAllDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportDefaultDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportDefaultDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportNamedDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportNamedDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isForOfStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ForOfStatement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImportDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ImportDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImportDefaultSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ImportDefaultSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImportNamespaceSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ImportNamespaceSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImportSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ImportSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isMetaProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "MetaProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassMethod(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassMethod") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectPattern(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectPattern") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSpreadElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "SpreadElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSuper(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Super") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTaggedTemplateExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TaggedTemplateExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTemplateElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TemplateElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTemplateLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TemplateLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isYieldExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "YieldExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isAnyTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "AnyTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isArrayTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ArrayTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBooleanTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BooleanTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBooleanLiteralTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BooleanLiteralTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNullLiteralTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NullLiteralTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassImplements(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassImplements") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareClass(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareClass") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareFunction(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareFunction") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareInterface(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareInterface") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareModule(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareModule") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareModuleExports(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareModuleExports") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareTypeAlias(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareTypeAlias") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareOpaqueType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareOpaqueType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareVariable(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareVariable") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareExportDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareExportDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclareExportAllDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclareExportAllDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclaredPredicate(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DeclaredPredicate") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExistsTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExistsTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunctionTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "FunctionTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunctionTypeParam(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "FunctionTypeParam") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isGenericTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "GenericTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isInferredPredicate(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "InferredPredicate") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isInterfaceExtends(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "InterfaceExtends") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isInterfaceDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "InterfaceDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isInterfaceTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "InterfaceTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isIntersectionTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "IntersectionTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isMixedTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "MixedTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isEmptyTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "EmptyTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNullableTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NullableTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNumberLiteralTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NumberLiteralTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNumberTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NumberTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeInternalSlot(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeInternalSlot") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeCallProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeCallProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeIndexer(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeIndexer") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectTypeSpreadProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ObjectTypeSpreadProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isOpaqueType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "OpaqueType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isQualifiedTypeIdentifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "QualifiedTypeIdentifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isStringLiteralTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "StringLiteralTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isStringTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "StringTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isThisTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ThisTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTupleTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TupleTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeofTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeofTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeAlias(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeAlias") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeCastExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeCastExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeParameter(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeParameter") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeParameterDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeParameterDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTypeParameterInstantiation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TypeParameterInstantiation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isUnionTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "UnionTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isVariance(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Variance") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isVoidTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "VoidTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXAttribute(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXAttribute") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXClosingElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXClosingElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXEmptyExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXEmptyExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXExpressionContainer(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXExpressionContainer") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXSpreadChild(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXSpreadChild") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXIdentifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXIdentifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXMemberExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXMemberExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXNamespacedName(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXNamespacedName") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXOpeningElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXOpeningElement") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXSpreadAttribute(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXSpreadAttribute") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXText(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXText") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXFragment(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXFragment") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXOpeningFragment(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXOpeningFragment") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSXClosingFragment(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "JSXClosingFragment") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNoop(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Noop") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isParenthesizedExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ParenthesizedExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isAwaitExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "AwaitExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBindExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BindExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isOptionalMemberExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "OptionalMemberExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPipelineTopicExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "PipelineTopicExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPipelineBareFunction(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "PipelineBareFunction") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPipelinePrimaryTopicReference(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "PipelinePrimaryTopicReference") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isOptionalCallExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "OptionalCallExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassPrivateProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassPrivateProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClassPrivateMethod(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ClassPrivateMethod") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImport(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Import") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDecorator(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "Decorator") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDoExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "DoExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportDefaultSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportDefaultSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportNamespaceSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "ExportNamespaceSpecifier") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPrivateName(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "PrivateName") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBigIntLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "BigIntLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSParameterProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSParameterProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSDeclareFunction(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSDeclareFunction") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSDeclareMethod(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSDeclareMethod") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSQualifiedName(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSQualifiedName") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSCallSignatureDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSCallSignatureDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSConstructSignatureDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSConstructSignatureDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSPropertySignature(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSPropertySignature") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSMethodSignature(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSMethodSignature") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSIndexSignature(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSIndexSignature") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSAnyKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSAnyKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSUnknownKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSUnknownKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSNumberKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSNumberKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSObjectKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSObjectKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSBooleanKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSBooleanKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSStringKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSStringKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSSymbolKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSSymbolKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSVoidKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSVoidKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSUndefinedKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSUndefinedKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSNullKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSNullKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSNeverKeyword(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSNeverKeyword") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSThisType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSThisType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSFunctionType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSFunctionType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSConstructorType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSConstructorType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeReference(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeReference") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypePredicate(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypePredicate") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeQuery(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeQuery") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSArrayType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSArrayType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTupleType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTupleType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSOptionalType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSOptionalType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSRestType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSRestType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSUnionType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSUnionType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSIntersectionType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSIntersectionType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSConditionalType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSConditionalType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSInferType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSInferType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSParenthesizedType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSParenthesizedType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeOperator(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeOperator") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSIndexedAccessType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSIndexedAccessType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSMappedType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSMappedType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSLiteralType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSLiteralType") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSExpressionWithTypeArguments(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSExpressionWithTypeArguments") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSInterfaceDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSInterfaceDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSInterfaceBody(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSInterfaceBody") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeAliasDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeAliasDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSAsExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSAsExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeAssertion(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeAssertion") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSEnumDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSEnumDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSEnumMember(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSEnumMember") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSModuleDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSModuleDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSModuleBlock(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSModuleBlock") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSImportEqualsDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSImportEqualsDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSExternalModuleReference(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSExternalModuleReference") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSNonNullExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSNonNullExpression") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSExportAssignment(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSExportAssignment") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSNamespaceExportDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSNamespaceExportDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeAnnotation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeParameterInstantiation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeParameterInstantiation") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeParameterDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeParameterDeclaration") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeParameter(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "TSTypeParameter") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExpression(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Expression" ||
              "ArrayExpression" === nodeType ||
              "AssignmentExpression" === nodeType ||
              "BinaryExpression" === nodeType ||
              "CallExpression" === nodeType ||
              "ConditionalExpression" === nodeType ||
              "FunctionExpression" === nodeType ||
              "Identifier" === nodeType ||
              "StringLiteral" === nodeType ||
              "NumericLiteral" === nodeType ||
              "NullLiteral" === nodeType ||
              "BooleanLiteral" === nodeType ||
              "RegExpLiteral" === nodeType ||
              "LogicalExpression" === nodeType ||
              "MemberExpression" === nodeType ||
              "NewExpression" === nodeType ||
              "ObjectExpression" === nodeType ||
              "SequenceExpression" === nodeType ||
              "ThisExpression" === nodeType ||
              "UnaryExpression" === nodeType ||
              "UpdateExpression" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ClassExpression" === nodeType ||
              "MetaProperty" === nodeType ||
              "Super" === nodeType ||
              "TaggedTemplateExpression" === nodeType ||
              "TemplateLiteral" === nodeType ||
              "YieldExpression" === nodeType ||
              "TypeCastExpression" === nodeType ||
              "JSXElement" === nodeType ||
              "JSXFragment" === nodeType ||
              "ParenthesizedExpression" === nodeType ||
              "AwaitExpression" === nodeType ||
              "BindExpression" === nodeType ||
              "OptionalMemberExpression" === nodeType ||
              "PipelinePrimaryTopicReference" === nodeType ||
              "OptionalCallExpression" === nodeType ||
              "Import" === nodeType ||
              "DoExpression" === nodeType ||
              "BigIntLiteral" === nodeType ||
              "TSAsExpression" === nodeType ||
              "TSTypeAssertion" === nodeType ||
              "TSNonNullExpression" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBinary(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Binary" ||
              "BinaryExpression" === nodeType ||
              "LogicalExpression" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isScopable(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Scopable" ||
              "BlockStatement" === nodeType ||
              "CatchClause" === nodeType ||
              "DoWhileStatement" === nodeType ||
              "ForInStatement" === nodeType ||
              "ForStatement" === nodeType ||
              "FunctionDeclaration" === nodeType ||
              "FunctionExpression" === nodeType ||
              "Program" === nodeType ||
              "ObjectMethod" === nodeType ||
              "SwitchStatement" === nodeType ||
              "WhileStatement" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ClassDeclaration" === nodeType ||
              "ClassExpression" === nodeType ||
              "ForOfStatement" === nodeType ||
              "ClassMethod" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBlockParent(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "BlockParent" ||
              "BlockStatement" === nodeType ||
              "CatchClause" === nodeType ||
              "DoWhileStatement" === nodeType ||
              "ForInStatement" === nodeType ||
              "ForStatement" === nodeType ||
              "FunctionDeclaration" === nodeType ||
              "FunctionExpression" === nodeType ||
              "Program" === nodeType ||
              "ObjectMethod" === nodeType ||
              "SwitchStatement" === nodeType ||
              "WhileStatement" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ForOfStatement" === nodeType ||
              "ClassMethod" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isBlock(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Block" ||
              "BlockStatement" === nodeType ||
              "Program" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Statement" ||
              "BlockStatement" === nodeType ||
              "BreakStatement" === nodeType ||
              "ContinueStatement" === nodeType ||
              "DebuggerStatement" === nodeType ||
              "DoWhileStatement" === nodeType ||
              "EmptyStatement" === nodeType ||
              "ExpressionStatement" === nodeType ||
              "ForInStatement" === nodeType ||
              "ForStatement" === nodeType ||
              "FunctionDeclaration" === nodeType ||
              "IfStatement" === nodeType ||
              "LabeledStatement" === nodeType ||
              "ReturnStatement" === nodeType ||
              "SwitchStatement" === nodeType ||
              "ThrowStatement" === nodeType ||
              "TryStatement" === nodeType ||
              "VariableDeclaration" === nodeType ||
              "WhileStatement" === nodeType ||
              "WithStatement" === nodeType ||
              "ClassDeclaration" === nodeType ||
              "ExportAllDeclaration" === nodeType ||
              "ExportDefaultDeclaration" === nodeType ||
              "ExportNamedDeclaration" === nodeType ||
              "ForOfStatement" === nodeType ||
              "ImportDeclaration" === nodeType ||
              "DeclareClass" === nodeType ||
              "DeclareFunction" === nodeType ||
              "DeclareInterface" === nodeType ||
              "DeclareModule" === nodeType ||
              "DeclareModuleExports" === nodeType ||
              "DeclareTypeAlias" === nodeType ||
              "DeclareOpaqueType" === nodeType ||
              "DeclareVariable" === nodeType ||
              "DeclareExportDeclaration" === nodeType ||
              "DeclareExportAllDeclaration" === nodeType ||
              "InterfaceDeclaration" === nodeType ||
              "OpaqueType" === nodeType ||
              "TypeAlias" === nodeType ||
              "TSDeclareFunction" === nodeType ||
              "TSInterfaceDeclaration" === nodeType ||
              "TSTypeAliasDeclaration" === nodeType ||
              "TSEnumDeclaration" === nodeType ||
              "TSModuleDeclaration" === nodeType ||
              "TSImportEqualsDeclaration" === nodeType ||
              "TSExportAssignment" === nodeType ||
              "TSNamespaceExportDeclaration" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTerminatorless(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Terminatorless" ||
              "BreakStatement" === nodeType ||
              "ContinueStatement" === nodeType ||
              "ReturnStatement" === nodeType ||
              "ThrowStatement" === nodeType ||
              "YieldExpression" === nodeType ||
              "AwaitExpression" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isCompletionStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "CompletionStatement" ||
              "BreakStatement" === nodeType ||
              "ContinueStatement" === nodeType ||
              "ReturnStatement" === nodeType ||
              "ThrowStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isConditional(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Conditional" ||
              "ConditionalExpression" === nodeType ||
              "IfStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isLoop(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Loop" ||
              "DoWhileStatement" === nodeType ||
              "ForInStatement" === nodeType ||
              "ForStatement" === nodeType ||
              "WhileStatement" === nodeType ||
              "ForOfStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isWhile(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "While" ||
              "DoWhileStatement" === nodeType ||
              "WhileStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExpressionWrapper(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ExpressionWrapper" ||
              "ExpressionStatement" === nodeType ||
              "TypeCastExpression" === nodeType ||
              "ParenthesizedExpression" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFor(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "For" ||
              "ForInStatement" === nodeType ||
              "ForStatement" === nodeType ||
              "ForOfStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isForXStatement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ForXStatement" ||
              "ForInStatement" === nodeType ||
              "ForOfStatement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunction(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Function" ||
              "FunctionDeclaration" === nodeType ||
              "FunctionExpression" === nodeType ||
              "ObjectMethod" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ClassMethod" === nodeType ||
              "ClassPrivateMethod" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFunctionParent(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "FunctionParent" ||
              "FunctionDeclaration" === nodeType ||
              "FunctionExpression" === nodeType ||
              "ObjectMethod" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ClassMethod" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPureish(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Pureish" ||
              "FunctionDeclaration" === nodeType ||
              "FunctionExpression" === nodeType ||
              "StringLiteral" === nodeType ||
              "NumericLiteral" === nodeType ||
              "NullLiteral" === nodeType ||
              "BooleanLiteral" === nodeType ||
              "ArrowFunctionExpression" === nodeType ||
              "ClassDeclaration" === nodeType ||
              "ClassExpression" === nodeType ||
              "BigIntLiteral" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Declaration" ||
              "FunctionDeclaration" === nodeType ||
              "VariableDeclaration" === nodeType ||
              "ClassDeclaration" === nodeType ||
              "ExportAllDeclaration" === nodeType ||
              "ExportDefaultDeclaration" === nodeType ||
              "ExportNamedDeclaration" === nodeType ||
              "ImportDeclaration" === nodeType ||
              "DeclareClass" === nodeType ||
              "DeclareFunction" === nodeType ||
              "DeclareInterface" === nodeType ||
              "DeclareModule" === nodeType ||
              "DeclareModuleExports" === nodeType ||
              "DeclareTypeAlias" === nodeType ||
              "DeclareOpaqueType" === nodeType ||
              "DeclareVariable" === nodeType ||
              "DeclareExportDeclaration" === nodeType ||
              "DeclareExportAllDeclaration" === nodeType ||
              "InterfaceDeclaration" === nodeType ||
              "OpaqueType" === nodeType ||
              "TypeAlias" === nodeType ||
              "TSDeclareFunction" === nodeType ||
              "TSInterfaceDeclaration" === nodeType ||
              "TSTypeAliasDeclaration" === nodeType ||
              "TSEnumDeclaration" === nodeType ||
              "TSModuleDeclaration" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPatternLike(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "PatternLike" ||
              "Identifier" === nodeType ||
              "RestElement" === nodeType ||
              "AssignmentPattern" === nodeType ||
              "ArrayPattern" === nodeType ||
              "ObjectPattern" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isLVal(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "LVal" ||
              "Identifier" === nodeType ||
              "MemberExpression" === nodeType ||
              "RestElement" === nodeType ||
              "AssignmentPattern" === nodeType ||
              "ArrayPattern" === nodeType ||
              "ObjectPattern" === nodeType ||
              "TSParameterProperty" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSEntityName(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "TSEntityName" ||
              "Identifier" === nodeType ||
              "TSQualifiedName" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isLiteral(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Literal" ||
              "StringLiteral" === nodeType ||
              "NumericLiteral" === nodeType ||
              "NullLiteral" === nodeType ||
              "BooleanLiteral" === nodeType ||
              "RegExpLiteral" === nodeType ||
              "TemplateLiteral" === nodeType ||
              "BigIntLiteral" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isImmutable(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Immutable" ||
              "StringLiteral" === nodeType ||
              "NumericLiteral" === nodeType ||
              "NullLiteral" === nodeType ||
              "BooleanLiteral" === nodeType ||
              "JSXAttribute" === nodeType ||
              "JSXClosingElement" === nodeType ||
              "JSXElement" === nodeType ||
              "JSXExpressionContainer" === nodeType ||
              "JSXSpreadChild" === nodeType ||
              "JSXOpeningElement" === nodeType ||
              "JSXText" === nodeType ||
              "JSXFragment" === nodeType ||
              "JSXOpeningFragment" === nodeType ||
              "JSXClosingFragment" === nodeType ||
              "BigIntLiteral" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isUserWhitespacable(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "UserWhitespacable" ||
              "ObjectMethod" === nodeType ||
              "ObjectProperty" === nodeType ||
              "ObjectTypeInternalSlot" === nodeType ||
              "ObjectTypeCallProperty" === nodeType ||
              "ObjectTypeIndexer" === nodeType ||
              "ObjectTypeProperty" === nodeType ||
              "ObjectTypeSpreadProperty" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isMethod(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Method" ||
              "ObjectMethod" === nodeType ||
              "ClassMethod" === nodeType ||
              "ClassPrivateMethod" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isObjectMember(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ObjectMember" ||
              "ObjectMethod" === nodeType ||
              "ObjectProperty" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isProperty(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Property" ||
              "ObjectProperty" === nodeType ||
              "ClassProperty" === nodeType ||
              "ClassPrivateProperty" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isUnaryLike(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "UnaryLike" ||
              "UnaryExpression" === nodeType ||
              "SpreadElement" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPattern(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Pattern" ||
              "AssignmentPattern" === nodeType ||
              "ArrayPattern" === nodeType ||
              "ObjectPattern" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isClass(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Class" ||
              "ClassDeclaration" === nodeType ||
              "ClassExpression" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isModuleDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ModuleDeclaration" ||
              "ExportAllDeclaration" === nodeType ||
              "ExportDefaultDeclaration" === nodeType ||
              "ExportNamedDeclaration" === nodeType ||
              "ImportDeclaration" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isExportDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ExportDeclaration" ||
              "ExportAllDeclaration" === nodeType ||
              "ExportDefaultDeclaration" === nodeType ||
              "ExportNamedDeclaration" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isModuleSpecifier(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "ModuleSpecifier" ||
              "ExportSpecifier" === nodeType ||
              "ImportDefaultSpecifier" === nodeType ||
              "ImportNamespaceSpecifier" === nodeType ||
              "ImportSpecifier" === nodeType ||
              "ExportDefaultSpecifier" === nodeType ||
              "ExportNamespaceSpecifier" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFlow(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Flow" ||
              "AnyTypeAnnotation" === nodeType ||
              "ArrayTypeAnnotation" === nodeType ||
              "BooleanTypeAnnotation" === nodeType ||
              "BooleanLiteralTypeAnnotation" === nodeType ||
              "NullLiteralTypeAnnotation" === nodeType ||
              "ClassImplements" === nodeType ||
              "DeclareClass" === nodeType ||
              "DeclareFunction" === nodeType ||
              "DeclareInterface" === nodeType ||
              "DeclareModule" === nodeType ||
              "DeclareModuleExports" === nodeType ||
              "DeclareTypeAlias" === nodeType ||
              "DeclareOpaqueType" === nodeType ||
              "DeclareVariable" === nodeType ||
              "DeclareExportDeclaration" === nodeType ||
              "DeclareExportAllDeclaration" === nodeType ||
              "DeclaredPredicate" === nodeType ||
              "ExistsTypeAnnotation" === nodeType ||
              "FunctionTypeAnnotation" === nodeType ||
              "FunctionTypeParam" === nodeType ||
              "GenericTypeAnnotation" === nodeType ||
              "InferredPredicate" === nodeType ||
              "InterfaceExtends" === nodeType ||
              "InterfaceDeclaration" === nodeType ||
              "InterfaceTypeAnnotation" === nodeType ||
              "IntersectionTypeAnnotation" === nodeType ||
              "MixedTypeAnnotation" === nodeType ||
              "EmptyTypeAnnotation" === nodeType ||
              "NullableTypeAnnotation" === nodeType ||
              "NumberLiteralTypeAnnotation" === nodeType ||
              "NumberTypeAnnotation" === nodeType ||
              "ObjectTypeAnnotation" === nodeType ||
              "ObjectTypeInternalSlot" === nodeType ||
              "ObjectTypeCallProperty" === nodeType ||
              "ObjectTypeIndexer" === nodeType ||
              "ObjectTypeProperty" === nodeType ||
              "ObjectTypeSpreadProperty" === nodeType ||
              "OpaqueType" === nodeType ||
              "QualifiedTypeIdentifier" === nodeType ||
              "StringLiteralTypeAnnotation" === nodeType ||
              "StringTypeAnnotation" === nodeType ||
              "ThisTypeAnnotation" === nodeType ||
              "TupleTypeAnnotation" === nodeType ||
              "TypeofTypeAnnotation" === nodeType ||
              "TypeAlias" === nodeType ||
              "TypeAnnotation" === nodeType ||
              "TypeCastExpression" === nodeType ||
              "TypeParameter" === nodeType ||
              "TypeParameterDeclaration" === nodeType ||
              "TypeParameterInstantiation" === nodeType ||
              "UnionTypeAnnotation" === nodeType ||
              "Variance" === nodeType ||
              "VoidTypeAnnotation" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFlowType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "FlowType" ||
              "AnyTypeAnnotation" === nodeType ||
              "ArrayTypeAnnotation" === nodeType ||
              "BooleanTypeAnnotation" === nodeType ||
              "BooleanLiteralTypeAnnotation" === nodeType ||
              "NullLiteralTypeAnnotation" === nodeType ||
              "ExistsTypeAnnotation" === nodeType ||
              "FunctionTypeAnnotation" === nodeType ||
              "GenericTypeAnnotation" === nodeType ||
              "InterfaceTypeAnnotation" === nodeType ||
              "IntersectionTypeAnnotation" === nodeType ||
              "MixedTypeAnnotation" === nodeType ||
              "EmptyTypeAnnotation" === nodeType ||
              "NullableTypeAnnotation" === nodeType ||
              "NumberLiteralTypeAnnotation" === nodeType ||
              "NumberTypeAnnotation" === nodeType ||
              "ObjectTypeAnnotation" === nodeType ||
              "StringLiteralTypeAnnotation" === nodeType ||
              "StringTypeAnnotation" === nodeType ||
              "ThisTypeAnnotation" === nodeType ||
              "TupleTypeAnnotation" === nodeType ||
              "TypeofTypeAnnotation" === nodeType ||
              "UnionTypeAnnotation" === nodeType ||
              "VoidTypeAnnotation" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFlowBaseAnnotation(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "FlowBaseAnnotation" ||
              "AnyTypeAnnotation" === nodeType ||
              "BooleanTypeAnnotation" === nodeType ||
              "NullLiteralTypeAnnotation" === nodeType ||
              "MixedTypeAnnotation" === nodeType ||
              "EmptyTypeAnnotation" === nodeType ||
              "NumberTypeAnnotation" === nodeType ||
              "StringTypeAnnotation" === nodeType ||
              "ThisTypeAnnotation" === nodeType ||
              "VoidTypeAnnotation" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFlowDeclaration(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "FlowDeclaration" ||
              "DeclareClass" === nodeType ||
              "DeclareFunction" === nodeType ||
              "DeclareInterface" === nodeType ||
              "DeclareModule" === nodeType ||
              "DeclareModuleExports" === nodeType ||
              "DeclareTypeAlias" === nodeType ||
              "DeclareOpaqueType" === nodeType ||
              "DeclareVariable" === nodeType ||
              "DeclareExportDeclaration" === nodeType ||
              "DeclareExportAllDeclaration" === nodeType ||
              "InterfaceDeclaration" === nodeType ||
              "OpaqueType" === nodeType ||
              "TypeAlias" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isFlowPredicate(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "FlowPredicate" ||
              "DeclaredPredicate" === nodeType ||
              "InferredPredicate" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isJSX(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "JSX" ||
              "JSXAttribute" === nodeType ||
              "JSXClosingElement" === nodeType ||
              "JSXElement" === nodeType ||
              "JSXEmptyExpression" === nodeType ||
              "JSXExpressionContainer" === nodeType ||
              "JSXSpreadChild" === nodeType ||
              "JSXIdentifier" === nodeType ||
              "JSXMemberExpression" === nodeType ||
              "JSXNamespacedName" === nodeType ||
              "JSXOpeningElement" === nodeType ||
              "JSXSpreadAttribute" === nodeType ||
              "JSXText" === nodeType ||
              "JSXFragment" === nodeType ||
              "JSXOpeningFragment" === nodeType ||
              "JSXClosingFragment" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isPrivate(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "Private" ||
              "ClassPrivateProperty" === nodeType ||
              "ClassPrivateMethod" === nodeType ||
              "PrivateName" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSTypeElement(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "TSTypeElement" ||
              "TSCallSignatureDeclaration" === nodeType ||
              "TSConstructSignatureDeclaration" === nodeType ||
              "TSPropertySignature" === nodeType ||
              "TSMethodSignature" === nodeType ||
              "TSIndexSignature" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isTSType(node, opts) {
            if (!node) return false;
            const nodeType = node.type;

            if (
              nodeType === "TSType" ||
              "TSAnyKeyword" === nodeType ||
              "TSUnknownKeyword" === nodeType ||
              "TSNumberKeyword" === nodeType ||
              "TSObjectKeyword" === nodeType ||
              "TSBooleanKeyword" === nodeType ||
              "TSStringKeyword" === nodeType ||
              "TSSymbolKeyword" === nodeType ||
              "TSVoidKeyword" === nodeType ||
              "TSUndefinedKeyword" === nodeType ||
              "TSNullKeyword" === nodeType ||
              "TSNeverKeyword" === nodeType ||
              "TSThisType" === nodeType ||
              "TSFunctionType" === nodeType ||
              "TSConstructorType" === nodeType ||
              "TSTypeReference" === nodeType ||
              "TSTypePredicate" === nodeType ||
              "TSTypeQuery" === nodeType ||
              "TSTypeLiteral" === nodeType ||
              "TSArrayType" === nodeType ||
              "TSTupleType" === nodeType ||
              "TSOptionalType" === nodeType ||
              "TSRestType" === nodeType ||
              "TSUnionType" === nodeType ||
              "TSIntersectionType" === nodeType ||
              "TSConditionalType" === nodeType ||
              "TSInferType" === nodeType ||
              "TSParenthesizedType" === nodeType ||
              "TSTypeOperator" === nodeType ||
              "TSIndexedAccessType" === nodeType ||
              "TSMappedType" === nodeType ||
              "TSLiteralType" === nodeType ||
              "TSExpressionWithTypeArguments" === nodeType
            ) {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isNumberLiteral(node, opts) {
            console.trace(
              "The node type NumberLiteral has been renamed to NumericLiteral"
            );
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "NumberLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isRegexLiteral(node, opts) {
            console.trace(
              "The node type RegexLiteral has been renamed to RegExpLiteral"
            );
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "RegexLiteral") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isRestProperty(node, opts) {
            console.trace(
              "The node type RestProperty has been renamed to RestElement"
            );
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "RestProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }

          function isSpreadProperty(node, opts) {
            console.trace(
              "The node type SpreadProperty has been renamed to SpreadElement"
            );
            if (!node) return false;
            const nodeType = node.type;

            if (nodeType === "SpreadProperty") {
              if (typeof opts === "undefined") {
                return true;
              } else {
                return (0, _shallowEqual.default)(node, opts);
              }
            }

            return false;
          }
        },
        /* 2 */
        function(module, exports) {
          var process = (module.exports = {});
          var cachedSetTimeout;
          var cachedClearTimeout;

          function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
          }

          function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
          }

          (function() {
            try {
              if (typeof setTimeout === "function") {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }

            try {
              if (typeof clearTimeout === "function") {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          })();

          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              return setTimeout(fun, 0);
            }

            if (
              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
              setTimeout
            ) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }

            try {
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e) {
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }

          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              return clearTimeout(marker);
            }

            if (
              (cachedClearTimeout === defaultClearTimeout ||
                !cachedClearTimeout) &&
              clearTimeout
            ) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }

            try {
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                return cachedClearTimeout.call(null, marker);
              } catch (e) {
                return cachedClearTimeout.call(this, marker);
              }
            }
          }

          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;

          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }

            draining = false;

            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }

            if (queue.length) {
              drainQueue();
            }
          }

          function drainQueue() {
            if (draining) {
              return;
            }

            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;

            while (len) {
              currentQueue = queue;
              queue = [];

              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }

              queueIndex = -1;
              len = queue.length;
            }

            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }

          process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);

            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }

            queue.push(new Item(fun, args));

            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };

          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }

          Item.prototype.run = function() {
            this.fun.apply(null, this.array);
          };

          process.title = "browser";
          process.browser = true;
          process.env = {};
          process.argv = [];
          process.version = "";
          process.versions = {};

          function noop() {}

          process.on = noop;
          process.addListener = noop;
          process.once = noop;
          process.off = noop;
          process.removeListener = noop;
          process.removeAllListeners = noop;
          process.emit = noop;
          process.prependListener = noop;
          process.prependOnceListener = noop;

          process.listeners = function(name) {
            return [];
          };

          process.binding = function(name) {
            throw new Error("process.binding is not supported");
          };

          process.cwd = function() {
            return "/";
          };

          process.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
          };

          process.umask = function() {
            return 0;
          };
        },
        /* 3 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.arrayExpression = exports.ArrayExpression = ArrayExpression;
          exports.assignmentExpression = exports.AssignmentExpression = AssignmentExpression;
          exports.binaryExpression = exports.BinaryExpression = BinaryExpression;
          exports.interpreterDirective = exports.InterpreterDirective = InterpreterDirective;
          exports.directive = exports.Directive = Directive;
          exports.directiveLiteral = exports.DirectiveLiteral = DirectiveLiteral;
          exports.blockStatement = exports.BlockStatement = BlockStatement;
          exports.breakStatement = exports.BreakStatement = BreakStatement;
          exports.callExpression = exports.CallExpression = CallExpression;
          exports.catchClause = exports.CatchClause = CatchClause;
          exports.conditionalExpression = exports.ConditionalExpression = ConditionalExpression;
          exports.continueStatement = exports.ContinueStatement = ContinueStatement;
          exports.debuggerStatement = exports.DebuggerStatement = DebuggerStatement;
          exports.doWhileStatement = exports.DoWhileStatement = DoWhileStatement;
          exports.emptyStatement = exports.EmptyStatement = EmptyStatement;
          exports.expressionStatement = exports.ExpressionStatement = ExpressionStatement;
          exports.file = exports.File = File;
          exports.forInStatement = exports.ForInStatement = ForInStatement;
          exports.forStatement = exports.ForStatement = ForStatement;
          exports.functionDeclaration = exports.FunctionDeclaration = FunctionDeclaration;
          exports.functionExpression = exports.FunctionExpression = FunctionExpression;
          exports.identifier = exports.Identifier = Identifier;
          exports.ifStatement = exports.IfStatement = IfStatement;
          exports.labeledStatement = exports.LabeledStatement = LabeledStatement;
          exports.stringLiteral = exports.StringLiteral = StringLiteral;
          exports.numericLiteral = exports.NumericLiteral = NumericLiteral;
          exports.nullLiteral = exports.NullLiteral = NullLiteral;
          exports.booleanLiteral = exports.BooleanLiteral = BooleanLiteral;
          exports.regExpLiteral = exports.RegExpLiteral = RegExpLiteral;
          exports.logicalExpression = exports.LogicalExpression = LogicalExpression;
          exports.memberExpression = exports.MemberExpression = MemberExpression;
          exports.newExpression = exports.NewExpression = NewExpression;
          exports.program = exports.Program = Program;
          exports.objectExpression = exports.ObjectExpression = ObjectExpression;
          exports.objectMethod = exports.ObjectMethod = ObjectMethod;
          exports.objectProperty = exports.ObjectProperty = ObjectProperty;
          exports.restElement = exports.RestElement = RestElement;
          exports.returnStatement = exports.ReturnStatement = ReturnStatement;
          exports.sequenceExpression = exports.SequenceExpression = SequenceExpression;
          exports.switchCase = exports.SwitchCase = SwitchCase;
          exports.switchStatement = exports.SwitchStatement = SwitchStatement;
          exports.thisExpression = exports.ThisExpression = ThisExpression;
          exports.throwStatement = exports.ThrowStatement = ThrowStatement;
          exports.tryStatement = exports.TryStatement = TryStatement;
          exports.unaryExpression = exports.UnaryExpression = UnaryExpression;
          exports.updateExpression = exports.UpdateExpression = UpdateExpression;
          exports.variableDeclaration = exports.VariableDeclaration = VariableDeclaration;
          exports.variableDeclarator = exports.VariableDeclarator = VariableDeclarator;
          exports.whileStatement = exports.WhileStatement = WhileStatement;
          exports.withStatement = exports.WithStatement = WithStatement;
          exports.assignmentPattern = exports.AssignmentPattern = AssignmentPattern;
          exports.arrayPattern = exports.ArrayPattern = ArrayPattern;
          exports.arrowFunctionExpression = exports.ArrowFunctionExpression = ArrowFunctionExpression;
          exports.classBody = exports.ClassBody = ClassBody;
          exports.classDeclaration = exports.ClassDeclaration = ClassDeclaration;
          exports.classExpression = exports.ClassExpression = ClassExpression;
          exports.exportAllDeclaration = exports.ExportAllDeclaration = ExportAllDeclaration;
          exports.exportDefaultDeclaration = exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
          exports.exportNamedDeclaration = exports.ExportNamedDeclaration = ExportNamedDeclaration;
          exports.exportSpecifier = exports.ExportSpecifier = ExportSpecifier;
          exports.forOfStatement = exports.ForOfStatement = ForOfStatement;
          exports.importDeclaration = exports.ImportDeclaration = ImportDeclaration;
          exports.importDefaultSpecifier = exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
          exports.importNamespaceSpecifier = exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
          exports.importSpecifier = exports.ImportSpecifier = ImportSpecifier;
          exports.metaProperty = exports.MetaProperty = MetaProperty;
          exports.classMethod = exports.ClassMethod = ClassMethod;
          exports.objectPattern = exports.ObjectPattern = ObjectPattern;
          exports.spreadElement = exports.SpreadElement = SpreadElement;
          exports.super = exports.Super = Super;
          exports.taggedTemplateExpression = exports.TaggedTemplateExpression = TaggedTemplateExpression;
          exports.templateElement = exports.TemplateElement = TemplateElement;
          exports.templateLiteral = exports.TemplateLiteral = TemplateLiteral;
          exports.yieldExpression = exports.YieldExpression = YieldExpression;
          exports.anyTypeAnnotation = exports.AnyTypeAnnotation = AnyTypeAnnotation;
          exports.arrayTypeAnnotation = exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
          exports.booleanTypeAnnotation = exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
          exports.booleanLiteralTypeAnnotation = exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
          exports.nullLiteralTypeAnnotation = exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
          exports.classImplements = exports.ClassImplements = ClassImplements;
          exports.declareClass = exports.DeclareClass = DeclareClass;
          exports.declareFunction = exports.DeclareFunction = DeclareFunction;
          exports.declareInterface = exports.DeclareInterface = DeclareInterface;
          exports.declareModule = exports.DeclareModule = DeclareModule;
          exports.declareModuleExports = exports.DeclareModuleExports = DeclareModuleExports;
          exports.declareTypeAlias = exports.DeclareTypeAlias = DeclareTypeAlias;
          exports.declareOpaqueType = exports.DeclareOpaqueType = DeclareOpaqueType;
          exports.declareVariable = exports.DeclareVariable = DeclareVariable;
          exports.declareExportDeclaration = exports.DeclareExportDeclaration = DeclareExportDeclaration;
          exports.declareExportAllDeclaration = exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
          exports.declaredPredicate = exports.DeclaredPredicate = DeclaredPredicate;
          exports.existsTypeAnnotation = exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
          exports.functionTypeAnnotation = exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
          exports.functionTypeParam = exports.FunctionTypeParam = FunctionTypeParam;
          exports.genericTypeAnnotation = exports.GenericTypeAnnotation = GenericTypeAnnotation;
          exports.inferredPredicate = exports.InferredPredicate = InferredPredicate;
          exports.interfaceExtends = exports.InterfaceExtends = InterfaceExtends;
          exports.interfaceDeclaration = exports.InterfaceDeclaration = InterfaceDeclaration;
          exports.interfaceTypeAnnotation = exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
          exports.intersectionTypeAnnotation = exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
          exports.mixedTypeAnnotation = exports.MixedTypeAnnotation = MixedTypeAnnotation;
          exports.emptyTypeAnnotation = exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
          exports.nullableTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;
          exports.numberLiteralTypeAnnotation = exports.NumberLiteralTypeAnnotation = NumberLiteralTypeAnnotation;
          exports.numberTypeAnnotation = exports.NumberTypeAnnotation = NumberTypeAnnotation;
          exports.objectTypeAnnotation = exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
          exports.objectTypeInternalSlot = exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
          exports.objectTypeCallProperty = exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
          exports.objectTypeIndexer = exports.ObjectTypeIndexer = ObjectTypeIndexer;
          exports.objectTypeProperty = exports.ObjectTypeProperty = ObjectTypeProperty;
          exports.objectTypeSpreadProperty = exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
          exports.opaqueType = exports.OpaqueType = OpaqueType;
          exports.qualifiedTypeIdentifier = exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
          exports.stringLiteralTypeAnnotation = exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
          exports.stringTypeAnnotation = exports.StringTypeAnnotation = StringTypeAnnotation;
          exports.thisTypeAnnotation = exports.ThisTypeAnnotation = ThisTypeAnnotation;
          exports.tupleTypeAnnotation = exports.TupleTypeAnnotation = TupleTypeAnnotation;
          exports.typeofTypeAnnotation = exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
          exports.typeAlias = exports.TypeAlias = TypeAlias;
          exports.typeAnnotation = exports.TypeAnnotation = TypeAnnotation;
          exports.typeCastExpression = exports.TypeCastExpression = TypeCastExpression;
          exports.typeParameter = exports.TypeParameter = TypeParameter;
          exports.typeParameterDeclaration = exports.TypeParameterDeclaration = TypeParameterDeclaration;
          exports.typeParameterInstantiation = exports.TypeParameterInstantiation = TypeParameterInstantiation;
          exports.unionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
          exports.variance = exports.Variance = Variance;
          exports.voidTypeAnnotation = exports.VoidTypeAnnotation = VoidTypeAnnotation;
          exports.jSXAttribute = exports.jsxAttribute = exports.JSXAttribute = JSXAttribute;
          exports.jSXClosingElement = exports.jsxClosingElement = exports.JSXClosingElement = JSXClosingElement;
          exports.jSXElement = exports.jsxElement = exports.JSXElement = JSXElement;
          exports.jSXEmptyExpression = exports.jsxEmptyExpression = exports.JSXEmptyExpression = JSXEmptyExpression;
          exports.jSXExpressionContainer = exports.jsxExpressionContainer = exports.JSXExpressionContainer = JSXExpressionContainer;
          exports.jSXSpreadChild = exports.jsxSpreadChild = exports.JSXSpreadChild = JSXSpreadChild;
          exports.jSXIdentifier = exports.jsxIdentifier = exports.JSXIdentifier = JSXIdentifier;
          exports.jSXMemberExpression = exports.jsxMemberExpression = exports.JSXMemberExpression = JSXMemberExpression;
          exports.jSXNamespacedName = exports.jsxNamespacedName = exports.JSXNamespacedName = JSXNamespacedName;
          exports.jSXOpeningElement = exports.jsxOpeningElement = exports.JSXOpeningElement = JSXOpeningElement;
          exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = exports.JSXSpreadAttribute = JSXSpreadAttribute;
          exports.jSXText = exports.jsxText = exports.JSXText = JSXText;
          exports.jSXFragment = exports.jsxFragment = exports.JSXFragment = JSXFragment;
          exports.jSXOpeningFragment = exports.jsxOpeningFragment = exports.JSXOpeningFragment = JSXOpeningFragment;
          exports.jSXClosingFragment = exports.jsxClosingFragment = exports.JSXClosingFragment = JSXClosingFragment;
          exports.noop = exports.Noop = Noop;
          exports.parenthesizedExpression = exports.ParenthesizedExpression = ParenthesizedExpression;
          exports.awaitExpression = exports.AwaitExpression = AwaitExpression;
          exports.bindExpression = exports.BindExpression = BindExpression;
          exports.classProperty = exports.ClassProperty = ClassProperty;
          exports.optionalMemberExpression = exports.OptionalMemberExpression = OptionalMemberExpression;
          exports.pipelineTopicExpression = exports.PipelineTopicExpression = PipelineTopicExpression;
          exports.pipelineBareFunction = exports.PipelineBareFunction = PipelineBareFunction;
          exports.pipelinePrimaryTopicReference = exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
          exports.optionalCallExpression = exports.OptionalCallExpression = OptionalCallExpression;
          exports.classPrivateProperty = exports.ClassPrivateProperty = ClassPrivateProperty;
          exports.classPrivateMethod = exports.ClassPrivateMethod = ClassPrivateMethod;
          exports.import = exports.Import = Import;
          exports.decorator = exports.Decorator = Decorator;
          exports.doExpression = exports.DoExpression = DoExpression;
          exports.exportDefaultSpecifier = exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
          exports.exportNamespaceSpecifier = exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
          exports.privateName = exports.PrivateName = PrivateName;
          exports.bigIntLiteral = exports.BigIntLiteral = BigIntLiteral;
          exports.tSParameterProperty = exports.tsParameterProperty = exports.TSParameterProperty = TSParameterProperty;
          exports.tSDeclareFunction = exports.tsDeclareFunction = exports.TSDeclareFunction = TSDeclareFunction;
          exports.tSDeclareMethod = exports.tsDeclareMethod = exports.TSDeclareMethod = TSDeclareMethod;
          exports.tSQualifiedName = exports.tsQualifiedName = exports.TSQualifiedName = TSQualifiedName;
          exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
          exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
          exports.tSPropertySignature = exports.tsPropertySignature = exports.TSPropertySignature = TSPropertySignature;
          exports.tSMethodSignature = exports.tsMethodSignature = exports.TSMethodSignature = TSMethodSignature;
          exports.tSIndexSignature = exports.tsIndexSignature = exports.TSIndexSignature = TSIndexSignature;
          exports.tSAnyKeyword = exports.tsAnyKeyword = exports.TSAnyKeyword = TSAnyKeyword;
          exports.tSUnknownKeyword = exports.tsUnknownKeyword = exports.TSUnknownKeyword = TSUnknownKeyword;
          exports.tSNumberKeyword = exports.tsNumberKeyword = exports.TSNumberKeyword = TSNumberKeyword;
          exports.tSObjectKeyword = exports.tsObjectKeyword = exports.TSObjectKeyword = TSObjectKeyword;
          exports.tSBooleanKeyword = exports.tsBooleanKeyword = exports.TSBooleanKeyword = TSBooleanKeyword;
          exports.tSStringKeyword = exports.tsStringKeyword = exports.TSStringKeyword = TSStringKeyword;
          exports.tSSymbolKeyword = exports.tsSymbolKeyword = exports.TSSymbolKeyword = TSSymbolKeyword;
          exports.tSVoidKeyword = exports.tsVoidKeyword = exports.TSVoidKeyword = TSVoidKeyword;
          exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = exports.TSUndefinedKeyword = TSUndefinedKeyword;
          exports.tSNullKeyword = exports.tsNullKeyword = exports.TSNullKeyword = TSNullKeyword;
          exports.tSNeverKeyword = exports.tsNeverKeyword = exports.TSNeverKeyword = TSNeverKeyword;
          exports.tSThisType = exports.tsThisType = exports.TSThisType = TSThisType;
          exports.tSFunctionType = exports.tsFunctionType = exports.TSFunctionType = TSFunctionType;
          exports.tSConstructorType = exports.tsConstructorType = exports.TSConstructorType = TSConstructorType;
          exports.tSTypeReference = exports.tsTypeReference = exports.TSTypeReference = TSTypeReference;
          exports.tSTypePredicate = exports.tsTypePredicate = exports.TSTypePredicate = TSTypePredicate;
          exports.tSTypeQuery = exports.tsTypeQuery = exports.TSTypeQuery = TSTypeQuery;
          exports.tSTypeLiteral = exports.tsTypeLiteral = exports.TSTypeLiteral = TSTypeLiteral;
          exports.tSArrayType = exports.tsArrayType = exports.TSArrayType = TSArrayType;
          exports.tSTupleType = exports.tsTupleType = exports.TSTupleType = TSTupleType;
          exports.tSOptionalType = exports.tsOptionalType = exports.TSOptionalType = TSOptionalType;
          exports.tSRestType = exports.tsRestType = exports.TSRestType = TSRestType;
          exports.tSUnionType = exports.tsUnionType = exports.TSUnionType = TSUnionType;
          exports.tSIntersectionType = exports.tsIntersectionType = exports.TSIntersectionType = TSIntersectionType;
          exports.tSConditionalType = exports.tsConditionalType = exports.TSConditionalType = TSConditionalType;
          exports.tSInferType = exports.tsInferType = exports.TSInferType = TSInferType;
          exports.tSParenthesizedType = exports.tsParenthesizedType = exports.TSParenthesizedType = TSParenthesizedType;
          exports.tSTypeOperator = exports.tsTypeOperator = exports.TSTypeOperator = TSTypeOperator;
          exports.tSIndexedAccessType = exports.tsIndexedAccessType = exports.TSIndexedAccessType = TSIndexedAccessType;
          exports.tSMappedType = exports.tsMappedType = exports.TSMappedType = TSMappedType;
          exports.tSLiteralType = exports.tsLiteralType = exports.TSLiteralType = TSLiteralType;
          exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
          exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
          exports.tSInterfaceBody = exports.tsInterfaceBody = exports.TSInterfaceBody = TSInterfaceBody;
          exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
          exports.tSAsExpression = exports.tsAsExpression = exports.TSAsExpression = TSAsExpression;
          exports.tSTypeAssertion = exports.tsTypeAssertion = exports.TSTypeAssertion = TSTypeAssertion;
          exports.tSEnumDeclaration = exports.tsEnumDeclaration = exports.TSEnumDeclaration = TSEnumDeclaration;
          exports.tSEnumMember = exports.tsEnumMember = exports.TSEnumMember = TSEnumMember;
          exports.tSModuleDeclaration = exports.tsModuleDeclaration = exports.TSModuleDeclaration = TSModuleDeclaration;
          exports.tSModuleBlock = exports.tsModuleBlock = exports.TSModuleBlock = TSModuleBlock;
          exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
          exports.tSExternalModuleReference = exports.tsExternalModuleReference = exports.TSExternalModuleReference = TSExternalModuleReference;
          exports.tSNonNullExpression = exports.tsNonNullExpression = exports.TSNonNullExpression = TSNonNullExpression;
          exports.tSExportAssignment = exports.tsExportAssignment = exports.TSExportAssignment = TSExportAssignment;
          exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
          exports.tSTypeAnnotation = exports.tsTypeAnnotation = exports.TSTypeAnnotation = TSTypeAnnotation;
          exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
          exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = exports.TSTypeParameterDeclaration = TSTypeParameterDeclaration;
          exports.tSTypeParameter = exports.tsTypeParameter = exports.TSTypeParameter = TSTypeParameter;
          exports.numberLiteral = exports.NumberLiteral = NumberLiteral;
          exports.regexLiteral = exports.RegexLiteral = RegexLiteral;
          exports.restProperty = exports.RestProperty = RestProperty;
          exports.spreadProperty = exports.SpreadProperty = SpreadProperty;

          var _builder = _interopRequireDefault(__webpack_require__(177));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function ArrayExpression(...args) {
            return (0, _builder.default)("ArrayExpression", ...args);
          }

          function AssignmentExpression(...args) {
            return (0, _builder.default)("AssignmentExpression", ...args);
          }

          function BinaryExpression(...args) {
            return (0, _builder.default)("BinaryExpression", ...args);
          }

          function InterpreterDirective(...args) {
            return (0, _builder.default)("InterpreterDirective", ...args);
          }

          function Directive(...args) {
            return (0, _builder.default)("Directive", ...args);
          }

          function DirectiveLiteral(...args) {
            return (0, _builder.default)("DirectiveLiteral", ...args);
          }

          function BlockStatement(...args) {
            return (0, _builder.default)("BlockStatement", ...args);
          }

          function BreakStatement(...args) {
            return (0, _builder.default)("BreakStatement", ...args);
          }

          function CallExpression(...args) {
            return (0, _builder.default)("CallExpression", ...args);
          }

          function CatchClause(...args) {
            return (0, _builder.default)("CatchClause", ...args);
          }

          function ConditionalExpression(...args) {
            return (0, _builder.default)("ConditionalExpression", ...args);
          }

          function ContinueStatement(...args) {
            return (0, _builder.default)("ContinueStatement", ...args);
          }

          function DebuggerStatement(...args) {
            return (0, _builder.default)("DebuggerStatement", ...args);
          }

          function DoWhileStatement(...args) {
            return (0, _builder.default)("DoWhileStatement", ...args);
          }

          function EmptyStatement(...args) {
            return (0, _builder.default)("EmptyStatement", ...args);
          }

          function ExpressionStatement(...args) {
            return (0, _builder.default)("ExpressionStatement", ...args);
          }

          function File(...args) {
            return (0, _builder.default)("File", ...args);
          }

          function ForInStatement(...args) {
            return (0, _builder.default)("ForInStatement", ...args);
          }

          function ForStatement(...args) {
            return (0, _builder.default)("ForStatement", ...args);
          }

          function FunctionDeclaration(...args) {
            return (0, _builder.default)("FunctionDeclaration", ...args);
          }

          function FunctionExpression(...args) {
            return (0, _builder.default)("FunctionExpression", ...args);
          }

          function Identifier(...args) {
            return (0, _builder.default)("Identifier", ...args);
          }

          function IfStatement(...args) {
            return (0, _builder.default)("IfStatement", ...args);
          }

          function LabeledStatement(...args) {
            return (0, _builder.default)("LabeledStatement", ...args);
          }

          function StringLiteral(...args) {
            return (0, _builder.default)("StringLiteral", ...args);
          }

          function NumericLiteral(...args) {
            return (0, _builder.default)("NumericLiteral", ...args);
          }

          function NullLiteral(...args) {
            return (0, _builder.default)("NullLiteral", ...args);
          }

          function BooleanLiteral(...args) {
            return (0, _builder.default)("BooleanLiteral", ...args);
          }

          function RegExpLiteral(...args) {
            return (0, _builder.default)("RegExpLiteral", ...args);
          }

          function LogicalExpression(...args) {
            return (0, _builder.default)("LogicalExpression", ...args);
          }

          function MemberExpression(...args) {
            return (0, _builder.default)("MemberExpression", ...args);
          }

          function NewExpression(...args) {
            return (0, _builder.default)("NewExpression", ...args);
          }

          function Program(...args) {
            return (0, _builder.default)("Program", ...args);
          }

          function ObjectExpression(...args) {
            return (0, _builder.default)("ObjectExpression", ...args);
          }

          function ObjectMethod(...args) {
            return (0, _builder.default)("ObjectMethod", ...args);
          }

          function ObjectProperty(...args) {
            return (0, _builder.default)("ObjectProperty", ...args);
          }

          function RestElement(...args) {
            return (0, _builder.default)("RestElement", ...args);
          }

          function ReturnStatement(...args) {
            return (0, _builder.default)("ReturnStatement", ...args);
          }

          function SequenceExpression(...args) {
            return (0, _builder.default)("SequenceExpression", ...args);
          }

          function SwitchCase(...args) {
            return (0, _builder.default)("SwitchCase", ...args);
          }

          function SwitchStatement(...args) {
            return (0, _builder.default)("SwitchStatement", ...args);
          }

          function ThisExpression(...args) {
            return (0, _builder.default)("ThisExpression", ...args);
          }

          function ThrowStatement(...args) {
            return (0, _builder.default)("ThrowStatement", ...args);
          }

          function TryStatement(...args) {
            return (0, _builder.default)("TryStatement", ...args);
          }

          function UnaryExpression(...args) {
            return (0, _builder.default)("UnaryExpression", ...args);
          }

          function UpdateExpression(...args) {
            return (0, _builder.default)("UpdateExpression", ...args);
          }

          function VariableDeclaration(...args) {
            return (0, _builder.default)("VariableDeclaration", ...args);
          }

          function VariableDeclarator(...args) {
            return (0, _builder.default)("VariableDeclarator", ...args);
          }

          function WhileStatement(...args) {
            return (0, _builder.default)("WhileStatement", ...args);
          }

          function WithStatement(...args) {
            return (0, _builder.default)("WithStatement", ...args);
          }

          function AssignmentPattern(...args) {
            return (0, _builder.default)("AssignmentPattern", ...args);
          }

          function ArrayPattern(...args) {
            return (0, _builder.default)("ArrayPattern", ...args);
          }

          function ArrowFunctionExpression(...args) {
            return (0, _builder.default)("ArrowFunctionExpression", ...args);
          }

          function ClassBody(...args) {
            return (0, _builder.default)("ClassBody", ...args);
          }

          function ClassDeclaration(...args) {
            return (0, _builder.default)("ClassDeclaration", ...args);
          }

          function ClassExpression(...args) {
            return (0, _builder.default)("ClassExpression", ...args);
          }

          function ExportAllDeclaration(...args) {
            return (0, _builder.default)("ExportAllDeclaration", ...args);
          }

          function ExportDefaultDeclaration(...args) {
            return (0, _builder.default)("ExportDefaultDeclaration", ...args);
          }

          function ExportNamedDeclaration(...args) {
            return (0, _builder.default)("ExportNamedDeclaration", ...args);
          }

          function ExportSpecifier(...args) {
            return (0, _builder.default)("ExportSpecifier", ...args);
          }

          function ForOfStatement(...args) {
            return (0, _builder.default)("ForOfStatement", ...args);
          }

          function ImportDeclaration(...args) {
            return (0, _builder.default)("ImportDeclaration", ...args);
          }

          function ImportDefaultSpecifier(...args) {
            return (0, _builder.default)("ImportDefaultSpecifier", ...args);
          }

          function ImportNamespaceSpecifier(...args) {
            return (0, _builder.default)("ImportNamespaceSpecifier", ...args);
          }

          function ImportSpecifier(...args) {
            return (0, _builder.default)("ImportSpecifier", ...args);
          }

          function MetaProperty(...args) {
            return (0, _builder.default)("MetaProperty", ...args);
          }

          function ClassMethod(...args) {
            return (0, _builder.default)("ClassMethod", ...args);
          }

          function ObjectPattern(...args) {
            return (0, _builder.default)("ObjectPattern", ...args);
          }

          function SpreadElement(...args) {
            return (0, _builder.default)("SpreadElement", ...args);
          }

          function Super(...args) {
            return (0, _builder.default)("Super", ...args);
          }

          function TaggedTemplateExpression(...args) {
            return (0, _builder.default)("TaggedTemplateExpression", ...args);
          }

          function TemplateElement(...args) {
            return (0, _builder.default)("TemplateElement", ...args);
          }

          function TemplateLiteral(...args) {
            return (0, _builder.default)("TemplateLiteral", ...args);
          }

          function YieldExpression(...args) {
            return (0, _builder.default)("YieldExpression", ...args);
          }

          function AnyTypeAnnotation(...args) {
            return (0, _builder.default)("AnyTypeAnnotation", ...args);
          }

          function ArrayTypeAnnotation(...args) {
            return (0, _builder.default)("ArrayTypeAnnotation", ...args);
          }

          function BooleanTypeAnnotation(...args) {
            return (0, _builder.default)("BooleanTypeAnnotation", ...args);
          }

          function BooleanLiteralTypeAnnotation(...args) {
            return (0, _builder.default)(
              "BooleanLiteralTypeAnnotation",
              ...args
            );
          }

          function NullLiteralTypeAnnotation(...args) {
            return (0, _builder.default)("NullLiteralTypeAnnotation", ...args);
          }

          function ClassImplements(...args) {
            return (0, _builder.default)("ClassImplements", ...args);
          }

          function DeclareClass(...args) {
            return (0, _builder.default)("DeclareClass", ...args);
          }

          function DeclareFunction(...args) {
            return (0, _builder.default)("DeclareFunction", ...args);
          }

          function DeclareInterface(...args) {
            return (0, _builder.default)("DeclareInterface", ...args);
          }

          function DeclareModule(...args) {
            return (0, _builder.default)("DeclareModule", ...args);
          }

          function DeclareModuleExports(...args) {
            return (0, _builder.default)("DeclareModuleExports", ...args);
          }

          function DeclareTypeAlias(...args) {
            return (0, _builder.default)("DeclareTypeAlias", ...args);
          }

          function DeclareOpaqueType(...args) {
            return (0, _builder.default)("DeclareOpaqueType", ...args);
          }

          function DeclareVariable(...args) {
            return (0, _builder.default)("DeclareVariable", ...args);
          }

          function DeclareExportDeclaration(...args) {
            return (0, _builder.default)("DeclareExportDeclaration", ...args);
          }

          function DeclareExportAllDeclaration(...args) {
            return (0, _builder.default)(
              "DeclareExportAllDeclaration",
              ...args
            );
          }

          function DeclaredPredicate(...args) {
            return (0, _builder.default)("DeclaredPredicate", ...args);
          }

          function ExistsTypeAnnotation(...args) {
            return (0, _builder.default)("ExistsTypeAnnotation", ...args);
          }

          function FunctionTypeAnnotation(...args) {
            return (0, _builder.default)("FunctionTypeAnnotation", ...args);
          }

          function FunctionTypeParam(...args) {
            return (0, _builder.default)("FunctionTypeParam", ...args);
          }

          function GenericTypeAnnotation(...args) {
            return (0, _builder.default)("GenericTypeAnnotation", ...args);
          }

          function InferredPredicate(...args) {
            return (0, _builder.default)("InferredPredicate", ...args);
          }

          function InterfaceExtends(...args) {
            return (0, _builder.default)("InterfaceExtends", ...args);
          }

          function InterfaceDeclaration(...args) {
            return (0, _builder.default)("InterfaceDeclaration", ...args);
          }

          function InterfaceTypeAnnotation(...args) {
            return (0, _builder.default)("InterfaceTypeAnnotation", ...args);
          }

          function IntersectionTypeAnnotation(...args) {
            return (0, _builder.default)("IntersectionTypeAnnotation", ...args);
          }

          function MixedTypeAnnotation(...args) {
            return (0, _builder.default)("MixedTypeAnnotation", ...args);
          }

          function EmptyTypeAnnotation(...args) {
            return (0, _builder.default)("EmptyTypeAnnotation", ...args);
          }

          function NullableTypeAnnotation(...args) {
            return (0, _builder.default)("NullableTypeAnnotation", ...args);
          }

          function NumberLiteralTypeAnnotation(...args) {
            return (0, _builder.default)(
              "NumberLiteralTypeAnnotation",
              ...args
            );
          }

          function NumberTypeAnnotation(...args) {
            return (0, _builder.default)("NumberTypeAnnotation", ...args);
          }

          function ObjectTypeAnnotation(...args) {
            return (0, _builder.default)("ObjectTypeAnnotation", ...args);
          }

          function ObjectTypeInternalSlot(...args) {
            return (0, _builder.default)("ObjectTypeInternalSlot", ...args);
          }

          function ObjectTypeCallProperty(...args) {
            return (0, _builder.default)("ObjectTypeCallProperty", ...args);
          }

          function ObjectTypeIndexer(...args) {
            return (0, _builder.default)("ObjectTypeIndexer", ...args);
          }

          function ObjectTypeProperty(...args) {
            return (0, _builder.default)("ObjectTypeProperty", ...args);
          }

          function ObjectTypeSpreadProperty(...args) {
            return (0, _builder.default)("ObjectTypeSpreadProperty", ...args);
          }

          function OpaqueType(...args) {
            return (0, _builder.default)("OpaqueType", ...args);
          }

          function QualifiedTypeIdentifier(...args) {
            return (0, _builder.default)("QualifiedTypeIdentifier", ...args);
          }

          function StringLiteralTypeAnnotation(...args) {
            return (0, _builder.default)(
              "StringLiteralTypeAnnotation",
              ...args
            );
          }

          function StringTypeAnnotation(...args) {
            return (0, _builder.default)("StringTypeAnnotation", ...args);
          }

          function ThisTypeAnnotation(...args) {
            return (0, _builder.default)("ThisTypeAnnotation", ...args);
          }

          function TupleTypeAnnotation(...args) {
            return (0, _builder.default)("TupleTypeAnnotation", ...args);
          }

          function TypeofTypeAnnotation(...args) {
            return (0, _builder.default)("TypeofTypeAnnotation", ...args);
          }

          function TypeAlias(...args) {
            return (0, _builder.default)("TypeAlias", ...args);
          }

          function TypeAnnotation(...args) {
            return (0, _builder.default)("TypeAnnotation", ...args);
          }

          function TypeCastExpression(...args) {
            return (0, _builder.default)("TypeCastExpression", ...args);
          }

          function TypeParameter(...args) {
            return (0, _builder.default)("TypeParameter", ...args);
          }

          function TypeParameterDeclaration(...args) {
            return (0, _builder.default)("TypeParameterDeclaration", ...args);
          }

          function TypeParameterInstantiation(...args) {
            return (0, _builder.default)("TypeParameterInstantiation", ...args);
          }

          function UnionTypeAnnotation(...args) {
            return (0, _builder.default)("UnionTypeAnnotation", ...args);
          }

          function Variance(...args) {
            return (0, _builder.default)("Variance", ...args);
          }

          function VoidTypeAnnotation(...args) {
            return (0, _builder.default)("VoidTypeAnnotation", ...args);
          }

          function JSXAttribute(...args) {
            return (0, _builder.default)("JSXAttribute", ...args);
          }

          function JSXClosingElement(...args) {
            return (0, _builder.default)("JSXClosingElement", ...args);
          }

          function JSXElement(...args) {
            return (0, _builder.default)("JSXElement", ...args);
          }

          function JSXEmptyExpression(...args) {
            return (0, _builder.default)("JSXEmptyExpression", ...args);
          }

          function JSXExpressionContainer(...args) {
            return (0, _builder.default)("JSXExpressionContainer", ...args);
          }

          function JSXSpreadChild(...args) {
            return (0, _builder.default)("JSXSpreadChild", ...args);
          }

          function JSXIdentifier(...args) {
            return (0, _builder.default)("JSXIdentifier", ...args);
          }

          function JSXMemberExpression(...args) {
            return (0, _builder.default)("JSXMemberExpression", ...args);
          }

          function JSXNamespacedName(...args) {
            return (0, _builder.default)("JSXNamespacedName", ...args);
          }

          function JSXOpeningElement(...args) {
            return (0, _builder.default)("JSXOpeningElement", ...args);
          }

          function JSXSpreadAttribute(...args) {
            return (0, _builder.default)("JSXSpreadAttribute", ...args);
          }

          function JSXText(...args) {
            return (0, _builder.default)("JSXText", ...args);
          }

          function JSXFragment(...args) {
            return (0, _builder.default)("JSXFragment", ...args);
          }

          function JSXOpeningFragment(...args) {
            return (0, _builder.default)("JSXOpeningFragment", ...args);
          }

          function JSXClosingFragment(...args) {
            return (0, _builder.default)("JSXClosingFragment", ...args);
          }

          function Noop(...args) {
            return (0, _builder.default)("Noop", ...args);
          }

          function ParenthesizedExpression(...args) {
            return (0, _builder.default)("ParenthesizedExpression", ...args);
          }

          function AwaitExpression(...args) {
            return (0, _builder.default)("AwaitExpression", ...args);
          }

          function BindExpression(...args) {
            return (0, _builder.default)("BindExpression", ...args);
          }

          function ClassProperty(...args) {
            return (0, _builder.default)("ClassProperty", ...args);
          }

          function OptionalMemberExpression(...args) {
            return (0, _builder.default)("OptionalMemberExpression", ...args);
          }

          function PipelineTopicExpression(...args) {
            return (0, _builder.default)("PipelineTopicExpression", ...args);
          }

          function PipelineBareFunction(...args) {
            return (0, _builder.default)("PipelineBareFunction", ...args);
          }

          function PipelinePrimaryTopicReference(...args) {
            return (0, _builder.default)(
              "PipelinePrimaryTopicReference",
              ...args
            );
          }

          function OptionalCallExpression(...args) {
            return (0, _builder.default)("OptionalCallExpression", ...args);
          }

          function ClassPrivateProperty(...args) {
            return (0, _builder.default)("ClassPrivateProperty", ...args);
          }

          function ClassPrivateMethod(...args) {
            return (0, _builder.default)("ClassPrivateMethod", ...args);
          }

          function Import(...args) {
            return (0, _builder.default)("Import", ...args);
          }

          function Decorator(...args) {
            return (0, _builder.default)("Decorator", ...args);
          }

          function DoExpression(...args) {
            return (0, _builder.default)("DoExpression", ...args);
          }

          function ExportDefaultSpecifier(...args) {
            return (0, _builder.default)("ExportDefaultSpecifier", ...args);
          }

          function ExportNamespaceSpecifier(...args) {
            return (0, _builder.default)("ExportNamespaceSpecifier", ...args);
          }

          function PrivateName(...args) {
            return (0, _builder.default)("PrivateName", ...args);
          }

          function BigIntLiteral(...args) {
            return (0, _builder.default)("BigIntLiteral", ...args);
          }

          function TSParameterProperty(...args) {
            return (0, _builder.default)("TSParameterProperty", ...args);
          }

          function TSDeclareFunction(...args) {
            return (0, _builder.default)("TSDeclareFunction", ...args);
          }

          function TSDeclareMethod(...args) {
            return (0, _builder.default)("TSDeclareMethod", ...args);
          }

          function TSQualifiedName(...args) {
            return (0, _builder.default)("TSQualifiedName", ...args);
          }

          function TSCallSignatureDeclaration(...args) {
            return (0, _builder.default)("TSCallSignatureDeclaration", ...args);
          }

          function TSConstructSignatureDeclaration(...args) {
            return (0, _builder.default)(
              "TSConstructSignatureDeclaration",
              ...args
            );
          }

          function TSPropertySignature(...args) {
            return (0, _builder.default)("TSPropertySignature", ...args);
          }

          function TSMethodSignature(...args) {
            return (0, _builder.default)("TSMethodSignature", ...args);
          }

          function TSIndexSignature(...args) {
            return (0, _builder.default)("TSIndexSignature", ...args);
          }

          function TSAnyKeyword(...args) {
            return (0, _builder.default)("TSAnyKeyword", ...args);
          }

          function TSUnknownKeyword(...args) {
            return (0, _builder.default)("TSUnknownKeyword", ...args);
          }

          function TSNumberKeyword(...args) {
            return (0, _builder.default)("TSNumberKeyword", ...args);
          }

          function TSObjectKeyword(...args) {
            return (0, _builder.default)("TSObjectKeyword", ...args);
          }

          function TSBooleanKeyword(...args) {
            return (0, _builder.default)("TSBooleanKeyword", ...args);
          }

          function TSStringKeyword(...args) {
            return (0, _builder.default)("TSStringKeyword", ...args);
          }

          function TSSymbolKeyword(...args) {
            return (0, _builder.default)("TSSymbolKeyword", ...args);
          }

          function TSVoidKeyword(...args) {
            return (0, _builder.default)("TSVoidKeyword", ...args);
          }

          function TSUndefinedKeyword(...args) {
            return (0, _builder.default)("TSUndefinedKeyword", ...args);
          }

          function TSNullKeyword(...args) {
            return (0, _builder.default)("TSNullKeyword", ...args);
          }

          function TSNeverKeyword(...args) {
            return (0, _builder.default)("TSNeverKeyword", ...args);
          }

          function TSThisType(...args) {
            return (0, _builder.default)("TSThisType", ...args);
          }

          function TSFunctionType(...args) {
            return (0, _builder.default)("TSFunctionType", ...args);
          }

          function TSConstructorType(...args) {
            return (0, _builder.default)("TSConstructorType", ...args);
          }

          function TSTypeReference(...args) {
            return (0, _builder.default)("TSTypeReference", ...args);
          }

          function TSTypePredicate(...args) {
            return (0, _builder.default)("TSTypePredicate", ...args);
          }

          function TSTypeQuery(...args) {
            return (0, _builder.default)("TSTypeQuery", ...args);
          }

          function TSTypeLiteral(...args) {
            return (0, _builder.default)("TSTypeLiteral", ...args);
          }

          function TSArrayType(...args) {
            return (0, _builder.default)("TSArrayType", ...args);
          }

          function TSTupleType(...args) {
            return (0, _builder.default)("TSTupleType", ...args);
          }

          function TSOptionalType(...args) {
            return (0, _builder.default)("TSOptionalType", ...args);
          }

          function TSRestType(...args) {
            return (0, _builder.default)("TSRestType", ...args);
          }

          function TSUnionType(...args) {
            return (0, _builder.default)("TSUnionType", ...args);
          }

          function TSIntersectionType(...args) {
            return (0, _builder.default)("TSIntersectionType", ...args);
          }

          function TSConditionalType(...args) {
            return (0, _builder.default)("TSConditionalType", ...args);
          }

          function TSInferType(...args) {
            return (0, _builder.default)("TSInferType", ...args);
          }

          function TSParenthesizedType(...args) {
            return (0, _builder.default)("TSParenthesizedType", ...args);
          }

          function TSTypeOperator(...args) {
            return (0, _builder.default)("TSTypeOperator", ...args);
          }

          function TSIndexedAccessType(...args) {
            return (0, _builder.default)("TSIndexedAccessType", ...args);
          }

          function TSMappedType(...args) {
            return (0, _builder.default)("TSMappedType", ...args);
          }

          function TSLiteralType(...args) {
            return (0, _builder.default)("TSLiteralType", ...args);
          }

          function TSExpressionWithTypeArguments(...args) {
            return (0, _builder.default)(
              "TSExpressionWithTypeArguments",
              ...args
            );
          }

          function TSInterfaceDeclaration(...args) {
            return (0, _builder.default)("TSInterfaceDeclaration", ...args);
          }

          function TSInterfaceBody(...args) {
            return (0, _builder.default)("TSInterfaceBody", ...args);
          }

          function TSTypeAliasDeclaration(...args) {
            return (0, _builder.default)("TSTypeAliasDeclaration", ...args);
          }

          function TSAsExpression(...args) {
            return (0, _builder.default)("TSAsExpression", ...args);
          }

          function TSTypeAssertion(...args) {
            return (0, _builder.default)("TSTypeAssertion", ...args);
          }

          function TSEnumDeclaration(...args) {
            return (0, _builder.default)("TSEnumDeclaration", ...args);
          }

          function TSEnumMember(...args) {
            return (0, _builder.default)("TSEnumMember", ...args);
          }

          function TSModuleDeclaration(...args) {
            return (0, _builder.default)("TSModuleDeclaration", ...args);
          }

          function TSModuleBlock(...args) {
            return (0, _builder.default)("TSModuleBlock", ...args);
          }

          function TSImportEqualsDeclaration(...args) {
            return (0, _builder.default)("TSImportEqualsDeclaration", ...args);
          }

          function TSExternalModuleReference(...args) {
            return (0, _builder.default)("TSExternalModuleReference", ...args);
          }

          function TSNonNullExpression(...args) {
            return (0, _builder.default)("TSNonNullExpression", ...args);
          }

          function TSExportAssignment(...args) {
            return (0, _builder.default)("TSExportAssignment", ...args);
          }

          function TSNamespaceExportDeclaration(...args) {
            return (0, _builder.default)(
              "TSNamespaceExportDeclaration",
              ...args
            );
          }

          function TSTypeAnnotation(...args) {
            return (0, _builder.default)("TSTypeAnnotation", ...args);
          }

          function TSTypeParameterInstantiation(...args) {
            return (0, _builder.default)(
              "TSTypeParameterInstantiation",
              ...args
            );
          }

          function TSTypeParameterDeclaration(...args) {
            return (0, _builder.default)("TSTypeParameterDeclaration", ...args);
          }

          function TSTypeParameter(...args) {
            return (0, _builder.default)("TSTypeParameter", ...args);
          }

          function NumberLiteral(...args) {
            console.trace(
              "The node type NumberLiteral has been renamed to NumericLiteral"
            );
            return NumberLiteral("NumberLiteral", ...args);
          }

          function RegexLiteral(...args) {
            console.trace(
              "The node type RegexLiteral has been renamed to RegExpLiteral"
            );
            return RegexLiteral("RegexLiteral", ...args);
          }

          function RestProperty(...args) {
            console.trace(
              "The node type RestProperty has been renamed to RestElement"
            );
            return RestProperty("RestProperty", ...args);
          }

          function SpreadProperty(...args) {
            console.trace(
              "The node type SpreadProperty has been renamed to SpreadElement"
            );
            return SpreadProperty("SpreadProperty", ...args);
          }
        },
        /* 4 */
        function(module, exports) {
          var isArray = Array.isArray;
          module.exports = isArray;
        },
        /* 5 */
        function(module, exports, __webpack_require__) {
          var freeGlobal = __webpack_require__(91);

          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;
          var root = freeGlobal || freeSelf || Function("return this")();
          module.exports = root;
        },
        /* 6 */
        function(module, exports) {
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }

          module.exports = isObjectLike;
        },
        /* 7 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          Object.defineProperty(exports, "VISITOR_KEYS", {
            enumerable: true,
            get: function() {
              return _utils.VISITOR_KEYS;
            },
          });
          Object.defineProperty(exports, "ALIAS_KEYS", {
            enumerable: true,
            get: function() {
              return _utils.ALIAS_KEYS;
            },
          });
          Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
            enumerable: true,
            get: function() {
              return _utils.FLIPPED_ALIAS_KEYS;
            },
          });
          Object.defineProperty(exports, "NODE_FIELDS", {
            enumerable: true,
            get: function() {
              return _utils.NODE_FIELDS;
            },
          });
          Object.defineProperty(exports, "BUILDER_KEYS", {
            enumerable: true,
            get: function() {
              return _utils.BUILDER_KEYS;
            },
          });
          Object.defineProperty(exports, "DEPRECATED_KEYS", {
            enumerable: true,
            get: function() {
              return _utils.DEPRECATED_KEYS;
            },
          });
          exports.TYPES = void 0;

          function _toFastProperties() {
            const data = _interopRequireDefault(__webpack_require__(238));

            _toFastProperties = function() {
              return data;
            };

            return data;
          }

          __webpack_require__(65);

          __webpack_require__(68);

          __webpack_require__(241);

          __webpack_require__(242);

          __webpack_require__(243);

          __webpack_require__(244);

          __webpack_require__(245);

          var _utils = __webpack_require__(11);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          (0, _toFastProperties().default)(_utils.VISITOR_KEYS);
          (0, _toFastProperties().default)(_utils.ALIAS_KEYS);
          (0, _toFastProperties().default)(_utils.FLIPPED_ALIAS_KEYS);
          (0, _toFastProperties().default)(_utils.NODE_FIELDS);
          (0, _toFastProperties().default)(_utils.BUILDER_KEYS);
          (0, _toFastProperties().default)(_utils.DEPRECATED_KEYS);
          const TYPES = Object.keys(_utils.VISITOR_KEYS)
            .concat(Object.keys(_utils.FLIPPED_ALIAS_KEYS))
            .concat(Object.keys(_utils.DEPRECATED_KEYS));
          exports.TYPES = TYPES;
        },
        /* 8 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = traverse;
          Object.defineProperty(exports, "NodePath", {
            enumerable: true,
            get: function() {
              return _path.default;
            },
          });
          Object.defineProperty(exports, "Scope", {
            enumerable: true,
            get: function() {
              return _scope.default;
            },
          });
          Object.defineProperty(exports, "Hub", {
            enumerable: true,
            get: function() {
              return _hub.default;
            },
          });
          exports.visitors = void 0;

          var _context = _interopRequireDefault(__webpack_require__(314));

          var visitors = _interopRequireWildcard(__webpack_require__(393));

          exports.visitors = visitors;

          function _includes() {
            const data = _interopRequireDefault(__webpack_require__(74));

            _includes = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var cache = _interopRequireWildcard(__webpack_require__(42));

          var _path = _interopRequireDefault(__webpack_require__(20));

          var _scope = _interopRequireDefault(__webpack_require__(135));

          var _hub = _interopRequireDefault(__webpack_require__(394));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function traverse(parent, opts, scope, state, parentPath) {
            if (!parent) return;
            if (!opts) opts = {};

            if (!opts.noScope && !scope) {
              if (parent.type !== "Program" && parent.type !== "File") {
                throw new Error(
                  "You must pass a scope and parentPath unless traversing a Program/File. " +
                    `Instead of that you tried to traverse a ${
                      parent.type
                    } node without ` +
                    "passing scope and parentPath."
                );
              }
            }

            visitors.explode(opts);
            traverse.node(parent, opts, scope, state, parentPath);
          }

          traverse.visitors = visitors;
          traverse.verify = visitors.verify;
          traverse.explode = visitors.explode;

          traverse.cheap = function(node, enter) {
            return t().traverseFast(node, enter);
          };

          traverse.node = function(
            node,
            opts,
            scope,
            state,
            parentPath,
            skipKeys
          ) {
            const keys = t().VISITOR_KEYS[node.type];
            if (!keys) return;
            const context = new _context.default(
              scope,
              opts,
              state,
              parentPath
            );

            for (const key of keys) {
              if (skipKeys && skipKeys[key]) continue;
              if (context.visit(node, key)) return;
            }
          };

          traverse.clearNode = function(node, opts) {
            t().removeProperties(node, opts);
            cache.path.delete(node);
          };

          traverse.removeProperties = function(tree, opts) {
            t().traverseFast(tree, traverse.clearNode, opts);
            return tree;
          };

          function hasBlacklistedType(path, state) {
            if (path.node.type === state.type) {
              state.has = true;
              path.stop();
            }
          }

          traverse.hasType = function(tree, type, blacklistTypes) {
            if ((0, _includes().default)(blacklistTypes, tree.type))
              return false;
            if (tree.type === type) return true;
            const state = {
              has: false,
              type: type,
            };
            traverse(
              tree,
              {
                noScope: true,
                blacklist: blacklistTypes,
                enter: hasBlacklistedType,
              },
              null,
              state
            );
            return state.has;
          };

          traverse.cache = cache;
        },
        /* 9 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17),
            getRawTag = __webpack_require__(189),
            objectToString = __webpack_require__(190);

          var nullTag = "[object Null]",
            undefinedTag = "[object Undefined]";
          var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

          function baseGetTag(value) {
            if (value == null) {
              return value === undefined ? undefinedTag : nullTag;
            }

            return symToStringTag && symToStringTag in Object(value)
              ? getRawTag(value)
              : objectToString(value);
          }

          module.exports = baseGetTag;
        },
        /* 10 */
        function(module, exports) {
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }

          module.exports = isObject;
        },
        /* 11 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.validate = validate;
          exports.typeIs = typeIs;
          exports.validateType = validateType;
          exports.validateOptional = validateOptional;
          exports.validateOptionalType = validateOptionalType;
          exports.arrayOf = arrayOf;
          exports.arrayOfType = arrayOfType;
          exports.validateArrayOfType = validateArrayOfType;
          exports.assertEach = assertEach;
          exports.assertOneOf = assertOneOf;
          exports.assertNodeType = assertNodeType;
          exports.assertNodeOrValueType = assertNodeOrValueType;
          exports.assertValueType = assertValueType;
          exports.chain = chain;
          exports.default = defineType;
          exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;

          var _is = _interopRequireDefault(__webpack_require__(66));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const VISITOR_KEYS = {};
          exports.VISITOR_KEYS = VISITOR_KEYS;
          const ALIAS_KEYS = {};
          exports.ALIAS_KEYS = ALIAS_KEYS;
          const FLIPPED_ALIAS_KEYS = {};
          exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
          const NODE_FIELDS = {};
          exports.NODE_FIELDS = NODE_FIELDS;
          const BUILDER_KEYS = {};
          exports.BUILDER_KEYS = BUILDER_KEYS;
          const DEPRECATED_KEYS = {};
          exports.DEPRECATED_KEYS = DEPRECATED_KEYS;

          function getType(val) {
            if (Array.isArray(val)) {
              return "array";
            } else if (val === null) {
              return "null";
            } else if (val === undefined) {
              return "undefined";
            } else {
              return typeof val;
            }
          }

          function validate(validate) {
            return {
              validate,
            };
          }

          function typeIs(typeName) {
            return typeof typeName === "string"
              ? assertNodeType(typeName)
              : assertNodeType(...typeName);
          }

          function validateType(typeName) {
            return validate(typeIs(typeName));
          }

          function validateOptional(validate) {
            return {
              validate,
              optional: true,
            };
          }

          function validateOptionalType(typeName) {
            return {
              validate: typeIs(typeName),
              optional: true,
            };
          }

          function arrayOf(elementType) {
            return chain(assertValueType("array"), assertEach(elementType));
          }

          function arrayOfType(typeName) {
            return arrayOf(typeIs(typeName));
          }

          function validateArrayOfType(typeName) {
            return validate(arrayOfType(typeName));
          }

          function assertEach(callback) {
            function validator(node, key, val) {
              if (!Array.isArray(val)) return;

              for (let i = 0; i < val.length; i++) {
                callback(node, `${key}[${i}]`, val[i]);
              }
            }

            validator.each = callback;
            return validator;
          }

          function assertOneOf(...values) {
            function validate(node, key, val) {
              if (values.indexOf(val) < 0) {
                throw new TypeError(
                  `Property ${key} expected value to be one of ${JSON.stringify(
                    values
                  )} but got ${JSON.stringify(val)}`
                );
              }
            }

            validate.oneOf = values;
            return validate;
          }

          function assertNodeType(...types) {
            function validate(node, key, val) {
              let valid = false;

              for (const type of types) {
                if ((0, _is.default)(type, val)) {
                  valid = true;
                  break;
                }
              }

              if (!valid) {
                throw new TypeError(
                  `Property ${key} of ${
                    node.type
                  } expected node to be of a type ${JSON.stringify(types)} ` +
                    `but instead got ${JSON.stringify(val && val.type)}`
                );
              }
            }

            validate.oneOfNodeTypes = types;
            return validate;
          }

          function assertNodeOrValueType(...types) {
            function validate(node, key, val) {
              let valid = false;

              for (const type of types) {
                if (getType(val) === type || (0, _is.default)(type, val)) {
                  valid = true;
                  break;
                }
              }

              if (!valid) {
                throw new TypeError(
                  `Property ${key} of ${
                    node.type
                  } expected node to be of a type ${JSON.stringify(types)} ` +
                    `but instead got ${JSON.stringify(val && val.type)}`
                );
              }
            }

            validate.oneOfNodeOrValueTypes = types;
            return validate;
          }

          function assertValueType(type) {
            function validate(node, key, val) {
              const valid = getType(val) === type;

              if (!valid) {
                throw new TypeError(
                  `Property ${key} expected type of ${type} but got ${getType(
                    val
                  )}`
                );
              }
            }

            validate.type = type;
            return validate;
          }

          function chain(...fns) {
            function validate(...args) {
              for (const fn of fns) {
                fn(...args);
              }
            }

            validate.chainOf = fns;
            return validate;
          }

          function defineType(type, opts = {}) {
            const inherits = (opts.inherits && store[opts.inherits]) || {};
            const fields = opts.fields || inherits.fields || {};
            const visitor = opts.visitor || inherits.visitor || [];
            const aliases = opts.aliases || inherits.aliases || [];
            const builder =
              opts.builder || inherits.builder || opts.visitor || [];

            if (opts.deprecatedAlias) {
              DEPRECATED_KEYS[opts.deprecatedAlias] = type;
            }

            for (const key of visitor.concat(builder)) {
              fields[key] = fields[key] || {};
            }

            for (const key in fields) {
              const field = fields[key];

              if (builder.indexOf(key) === -1) {
                field.optional = true;
              }

              if (field.default === undefined) {
                field.default = null;
              } else if (!field.validate) {
                field.validate = assertValueType(getType(field.default));
              }
            }

            VISITOR_KEYS[type] = opts.visitor = visitor;
            BUILDER_KEYS[type] = opts.builder = builder;
            NODE_FIELDS[type] = opts.fields = fields;
            ALIAS_KEYS[type] = opts.aliases = aliases;
            aliases.forEach(alias => {
              FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
              FLIPPED_ALIAS_KEYS[alias].push(type);
            });
            store[type] = opts;
          }

          const store = {};
        },
        /* 12 */
        function(module, exports, __webpack_require__) {
          var baseIsNative = __webpack_require__(188),
            getValue = __webpack_require__(193);

          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
          }

          module.exports = getNative;
        },
        /* 13 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = void 0;
          const STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
          exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
          const FLATTENABLE_KEYS = ["body", "expressions"];
          exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
          const FOR_INIT_KEYS = ["left", "init"];
          exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
          const COMMENT_KEYS = [
            "leadingComments",
            "trailingComments",
            "innerComments",
          ];
          exports.COMMENT_KEYS = COMMENT_KEYS;
          const LOGICAL_OPERATORS = ["||", "&&", "??"];
          exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
          const UPDATE_OPERATORS = ["++", "--"];
          exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
          const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
          exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
          const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
          exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
          const COMPARISON_BINARY_OPERATORS = [
            ...EQUALITY_BINARY_OPERATORS,
            "in",
            "instanceof",
          ];
          exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
          const BOOLEAN_BINARY_OPERATORS = [
            ...COMPARISON_BINARY_OPERATORS,
            ...BOOLEAN_NUMBER_BINARY_OPERATORS,
          ];
          exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
          const NUMBER_BINARY_OPERATORS = [
            "-",
            "/",
            "%",
            "*",
            "**",
            "&",
            "|",
            ">>",
            ">>>",
            "<<",
            "^",
          ];
          exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
          const BINARY_OPERATORS = [
            "+",
            ...NUMBER_BINARY_OPERATORS,
            ...BOOLEAN_BINARY_OPERATORS,
          ];
          exports.BINARY_OPERATORS = BINARY_OPERATORS;
          const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
          exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
          const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
          exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
          const STRING_UNARY_OPERATORS = ["typeof"];
          exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
          const UNARY_OPERATORS = [
            "void",
            "throw",
            ...BOOLEAN_UNARY_OPERATORS,
            ...NUMBER_UNARY_OPERATORS,
            ...STRING_UNARY_OPERATORS,
          ];
          exports.UNARY_OPERATORS = UNARY_OPERATORS;
          const INHERIT_KEYS = {
            optional: ["typeAnnotation", "typeParameters", "returnType"],
            force: ["start", "loc", "end"],
          };
          exports.INHERIT_KEYS = INHERIT_KEYS;
          const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
          exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
          const NOT_LOCAL_BINDING = Symbol.for(
            "should not be considered a local binding"
          );
          exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
        },
        /* 14 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(process) {
            function normalizeArray(parts, allowAboveRoot) {
              var up = 0;

              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];

                if (last === ".") {
                  parts.splice(i, 1);
                } else if (last === "..") {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }

              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift("..");
                }
              }

              return parts;
            }

            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

            var splitPath = function(filename) {
              return splitPathRe.exec(filename).slice(1);
            };

            exports.resolve = function() {
              var resolvedPath = "",
                resolvedAbsolute = false;

              for (
                var i = arguments.length - 1;
                i >= -1 && !resolvedAbsolute;
                i--
              ) {
                var path = i >= 0 ? arguments[i] : process.cwd();

                if (typeof path !== "string") {
                  throw new TypeError(
                    "Arguments to path.resolve must be strings"
                  );
                } else if (!path) {
                  continue;
                }

                resolvedPath = path + "/" + resolvedPath;
                resolvedAbsolute = path.charAt(0) === "/";
              }

              resolvedPath = normalizeArray(
                filter(resolvedPath.split("/"), function(p) {
                  return !!p;
                }),
                !resolvedAbsolute
              ).join("/");
              return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
            };

            exports.normalize = function(path) {
              var isAbsolute = exports.isAbsolute(path),
                trailingSlash = substr(path, -1) === "/";
              path = normalizeArray(
                filter(path.split("/"), function(p) {
                  return !!p;
                }),
                !isAbsolute
              ).join("/");

              if (!path && !isAbsolute) {
                path = ".";
              }

              if (path && trailingSlash) {
                path += "/";
              }

              return (isAbsolute ? "/" : "") + path;
            };

            exports.isAbsolute = function(path) {
              return path.charAt(0) === "/";
            };

            exports.join = function() {
              var paths = Array.prototype.slice.call(arguments, 0);
              return exports.normalize(
                filter(paths, function(p, index) {
                  if (typeof p !== "string") {
                    throw new TypeError(
                      "Arguments to path.join must be strings"
                    );
                  }

                  return p;
                }).join("/")
              );
            };

            exports.relative = function(from, to) {
              from = exports.resolve(from).substr(1);
              to = exports.resolve(to).substr(1);

              function trim(arr) {
                var start = 0;

                for (; start < arr.length; start++) {
                  if (arr[start] !== "") break;
                }

                var end = arr.length - 1;

                for (; end >= 0; end--) {
                  if (arr[end] !== "") break;
                }

                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }

              var fromParts = trim(from.split("/"));
              var toParts = trim(to.split("/"));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;

              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }

              var outputParts = [];

              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push("..");
              }

              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join("/");
            };

            exports.sep = "/";
            exports.delimiter = ":";

            exports.dirname = function(path) {
              var result = splitPath(path),
                root = result[0],
                dir = result[1];

              if (!root && !dir) {
                return ".";
              }

              if (dir) {
                dir = dir.substr(0, dir.length - 1);
              }

              return root + dir;
            };

            exports.basename = function(path, ext) {
              var f = splitPath(path)[2];

              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }

              return f;
            };

            exports.extname = function(path) {
              return splitPath(path)[3];
            };

            function filter(xs, f) {
              if (xs.filter) return xs.filter(f);
              var res = [];

              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i]);
              }

              return res;
            }

            var substr =
              "ab".substr(-1) === "b"
                ? function(str, start, len) {
                    return str.substr(start, len);
                  }
                : function(str, start, len) {
                    if (start < 0) start = str.length + start;
                    return str.substr(start, len);
                  };
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 15 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(process) {
            exports = module.exports = SemVer;
            var debug;
            if (
              typeof process === "object" &&
              process.env &&
              undefined &&
              /\bsemver\b/i.test(undefined)
            )
              debug = function() {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift("SEMVER");
                console.log.apply(console, args);
              };
            else debug = function() {};
            exports.SEMVER_SPEC_VERSION = "2.0.0";
            var MAX_LENGTH = 256;
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
            var MAX_SAFE_COMPONENT_LENGTH = 16;
            var re = (exports.re = []);
            var src = (exports.src = []);
            var R = 0;
            var NUMERICIDENTIFIER = R++;
            src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
            var NUMERICIDENTIFIERLOOSE = R++;
            src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
            var NONNUMERICIDENTIFIER = R++;
            src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
            var MAINVERSION = R++;
            src[MAINVERSION] =
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")";
            var MAINVERSIONLOOSE = R++;
            src[MAINVERSIONLOOSE] =
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")";
            var PRERELEASEIDENTIFIER = R++;
            src[PRERELEASEIDENTIFIER] =
              "(?:" +
              src[NUMERICIDENTIFIER] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")";
            var PRERELEASEIDENTIFIERLOOSE = R++;
            src[PRERELEASEIDENTIFIERLOOSE] =
              "(?:" +
              src[NUMERICIDENTIFIERLOOSE] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")";
            var PRERELEASE = R++;
            src[PRERELEASE] =
              "(?:-(" +
              src[PRERELEASEIDENTIFIER] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIER] +
              ")*))";
            var PRERELEASELOOSE = R++;
            src[PRERELEASELOOSE] =
              "(?:-?(" +
              src[PRERELEASEIDENTIFIERLOOSE] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIERLOOSE] +
              ")*))";
            var BUILDIDENTIFIER = R++;
            src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
            var BUILD = R++;
            src[BUILD] =
              "(?:\\+(" +
              src[BUILDIDENTIFIER] +
              "(?:\\." +
              src[BUILDIDENTIFIER] +
              ")*))";
            var FULL = R++;
            var FULLPLAIN =
              "v?" +
              src[MAINVERSION] +
              src[PRERELEASE] +
              "?" +
              src[BUILD] +
              "?";
            src[FULL] = "^" + FULLPLAIN + "$";
            var LOOSEPLAIN =
              "[v=\\s]*" +
              src[MAINVERSIONLOOSE] +
              src[PRERELEASELOOSE] +
              "?" +
              src[BUILD] +
              "?";
            var LOOSE = R++;
            src[LOOSE] = "^" + LOOSEPLAIN + "$";
            var GTLT = R++;
            src[GTLT] = "((?:<|>)?=?)";
            var XRANGEIDENTIFIERLOOSE = R++;
            src[XRANGEIDENTIFIERLOOSE] =
              src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
            var XRANGEIDENTIFIER = R++;
            src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
            var XRANGEPLAIN = R++;
            src[XRANGEPLAIN] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:" +
              src[PRERELEASE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";
            var XRANGEPLAINLOOSE = R++;
            src[XRANGEPLAINLOOSE] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:" +
              src[PRERELEASELOOSE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";
            var XRANGE = R++;
            src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
            var XRANGELOOSE = R++;
            src[XRANGELOOSE] =
              "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
            var COERCE = R++;
            src[COERCE] =
              "(?:^|[^\\d])" +
              "(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "})" +
              "(?:\\.(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "}))?" +
              "(?:\\.(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "}))?" +
              "(?:$|[^\\d])";
            var LONETILDE = R++;
            src[LONETILDE] = "(?:~>?)";
            var TILDETRIM = R++;
            src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
            re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
            var tildeTrimReplace = "$1~";
            var TILDE = R++;
            src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
            var TILDELOOSE = R++;
            src[TILDELOOSE] =
              "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
            var LONECARET = R++;
            src[LONECARET] = "(?:\\^)";
            var CARETTRIM = R++;
            src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
            re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
            var caretTrimReplace = "$1^";
            var CARET = R++;
            src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
            var CARETLOOSE = R++;
            src[CARETLOOSE] =
              "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
            var COMPARATORLOOSE = R++;
            src[COMPARATORLOOSE] =
              "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
            var COMPARATOR = R++;
            src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
            var COMPARATORTRIM = R++;
            src[COMPARATORTRIM] =
              "(\\s*)" +
              src[GTLT] +
              "\\s*(" +
              LOOSEPLAIN +
              "|" +
              src[XRANGEPLAIN] +
              ")";
            re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
            var comparatorTrimReplace = "$1$2$3";
            var HYPHENRANGE = R++;
            src[HYPHENRANGE] =
              "^\\s*(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s*$";
            var HYPHENRANGELOOSE = R++;
            src[HYPHENRANGELOOSE] =
              "^\\s*(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s*$";
            var STAR = R++;
            src[STAR] = "(<|>)?=?\\s*\\*";

            for (var i = 0; i < R; i++) {
              debug(i, src[i]);
              if (!re[i]) re[i] = new RegExp(src[i]);
            }

            exports.parse = parse;

            function parse(version, options) {
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              if (version instanceof SemVer) return version;
              if (typeof version !== "string") return null;
              if (version.length > MAX_LENGTH) return null;
              var r = options.loose ? re[LOOSE] : re[FULL];
              if (!r.test(version)) return null;

              try {
                return new SemVer(version, options);
              } catch (er) {
                return null;
              }
            }

            exports.valid = valid;

            function valid(version, options) {
              var v = parse(version, options);
              return v ? v.version : null;
            }

            exports.clean = clean;

            function clean(version, options) {
              var s = parse(version.trim().replace(/^[=v]+/, ""), options);
              return s ? s.version : null;
            }

            exports.SemVer = SemVer;

            function SemVer(version, options) {
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };

              if (version instanceof SemVer) {
                if (version.loose === options.loose) return version;
                else version = version.version;
              } else if (typeof version !== "string") {
                throw new TypeError("Invalid Version: " + version);
              }

              if (version.length > MAX_LENGTH)
                throw new TypeError(
                  "version is longer than " + MAX_LENGTH + " characters"
                );
              if (!(this instanceof SemVer))
                return new SemVer(version, options);
              debug("SemVer", version, options);
              this.options = options;
              this.loose = !!options.loose;
              var m = version
                .trim()
                .match(options.loose ? re[LOOSE] : re[FULL]);
              if (!m) throw new TypeError("Invalid Version: " + version);
              this.raw = version;
              this.major = +m[1];
              this.minor = +m[2];
              this.patch = +m[3];
              if (this.major > MAX_SAFE_INTEGER || this.major < 0)
                throw new TypeError("Invalid major version");
              if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
                throw new TypeError("Invalid minor version");
              if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
                throw new TypeError("Invalid patch version");
              if (!m[4]) this.prerelease = [];
              else
                this.prerelease = m[4].split(".").map(function(id) {
                  if (/^[0-9]+$/.test(id)) {
                    var num = +id;
                    if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
                  }

                  return id;
                });
              this.build = m[5] ? m[5].split(".") : [];
              this.format();
            }

            SemVer.prototype.format = function() {
              this.version = this.major + "." + this.minor + "." + this.patch;
              if (this.prerelease.length)
                this.version += "-" + this.prerelease.join(".");
              return this.version;
            };

            SemVer.prototype.toString = function() {
              return this.version;
            };

            SemVer.prototype.compare = function(other) {
              debug("SemVer.compare", this.version, this.options, other);
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.options);
              return this.compareMain(other) || this.comparePre(other);
            };

            SemVer.prototype.compareMain = function(other) {
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.options);
              return (
                compareIdentifiers(this.major, other.major) ||
                compareIdentifiers(this.minor, other.minor) ||
                compareIdentifiers(this.patch, other.patch)
              );
            };

            SemVer.prototype.comparePre = function(other) {
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.options);
              if (this.prerelease.length && !other.prerelease.length) return -1;
              else if (!this.prerelease.length && other.prerelease.length)
                return 1;
              else if (!this.prerelease.length && !other.prerelease.length)
                return 0;
              var i = 0;

              do {
                var a = this.prerelease[i];
                var b = other.prerelease[i];
                debug("prerelease compare", i, a, b);
                if (a === undefined && b === undefined) return 0;
                else if (b === undefined) return 1;
                else if (a === undefined) return -1;
                else if (a === b) continue;
                else return compareIdentifiers(a, b);
              } while (++i);
            };

            SemVer.prototype.inc = function(release, identifier) {
              switch (release) {
                case "premajor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor = 0;
                  this.major++;
                  this.inc("pre", identifier);
                  break;

                case "preminor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor++;
                  this.inc("pre", identifier);
                  break;

                case "prepatch":
                  this.prerelease.length = 0;
                  this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;

                case "prerelease":
                  if (this.prerelease.length === 0)
                    this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;

                case "major":
                  if (
                    this.minor !== 0 ||
                    this.patch !== 0 ||
                    this.prerelease.length === 0
                  )
                    this.major++;
                  this.minor = 0;
                  this.patch = 0;
                  this.prerelease = [];
                  break;

                case "minor":
                  if (this.patch !== 0 || this.prerelease.length === 0)
                    this.minor++;
                  this.patch = 0;
                  this.prerelease = [];
                  break;

                case "patch":
                  if (this.prerelease.length === 0) this.patch++;
                  this.prerelease = [];
                  break;

                case "pre":
                  if (this.prerelease.length === 0) this.prerelease = [0];
                  else {
                    var i = this.prerelease.length;

                    while (--i >= 0) {
                      if (typeof this.prerelease[i] === "number") {
                        this.prerelease[i]++;
                        i = -2;
                      }
                    }

                    if (i === -1) this.prerelease.push(0);
                  }

                  if (identifier) {
                    if (this.prerelease[0] === identifier) {
                      if (isNaN(this.prerelease[1]))
                        this.prerelease = [identifier, 0];
                    } else this.prerelease = [identifier, 0];
                  }

                  break;

                default:
                  throw new Error("invalid increment argument: " + release);
              }

              this.format();
              this.raw = this.version;
              return this;
            };

            exports.inc = inc;

            function inc(version, release, loose, identifier) {
              if (typeof loose === "string") {
                identifier = loose;
                loose = undefined;
              }

              try {
                return new SemVer(version, loose).inc(release, identifier)
                  .version;
              } catch (er) {
                return null;
              }
            }

            exports.diff = diff;

            function diff(version1, version2) {
              if (eq(version1, version2)) {
                return null;
              } else {
                var v1 = parse(version1);
                var v2 = parse(version2);

                if (v1.prerelease.length || v2.prerelease.length) {
                  for (var key in v1) {
                    if (key === "major" || key === "minor" || key === "patch") {
                      if (v1[key] !== v2[key]) {
                        return "pre" + key;
                      }
                    }
                  }

                  return "prerelease";
                }

                for (var key in v1) {
                  if (key === "major" || key === "minor" || key === "patch") {
                    if (v1[key] !== v2[key]) {
                      return key;
                    }
                  }
                }
              }
            }

            exports.compareIdentifiers = compareIdentifiers;
            var numeric = /^[0-9]+$/;

            function compareIdentifiers(a, b) {
              var anum = numeric.test(a);
              var bnum = numeric.test(b);

              if (anum && bnum) {
                a = +a;
                b = +b;
              }

              return anum && !bnum
                ? -1
                : bnum && !anum
                ? 1
                : a < b
                ? -1
                : a > b
                ? 1
                : 0;
            }

            exports.rcompareIdentifiers = rcompareIdentifiers;

            function rcompareIdentifiers(a, b) {
              return compareIdentifiers(b, a);
            }

            exports.major = major;

            function major(a, loose) {
              return new SemVer(a, loose).major;
            }

            exports.minor = minor;

            function minor(a, loose) {
              return new SemVer(a, loose).minor;
            }

            exports.patch = patch;

            function patch(a, loose) {
              return new SemVer(a, loose).patch;
            }

            exports.compare = compare;

            function compare(a, b, loose) {
              return new SemVer(a, loose).compare(new SemVer(b, loose));
            }

            exports.compareLoose = compareLoose;

            function compareLoose(a, b) {
              return compare(a, b, true);
            }

            exports.rcompare = rcompare;

            function rcompare(a, b, loose) {
              return compare(b, a, loose);
            }

            exports.sort = sort;

            function sort(list, loose) {
              return list.sort(function(a, b) {
                return exports.compare(a, b, loose);
              });
            }

            exports.rsort = rsort;

            function rsort(list, loose) {
              return list.sort(function(a, b) {
                return exports.rcompare(a, b, loose);
              });
            }

            exports.gt = gt;

            function gt(a, b, loose) {
              return compare(a, b, loose) > 0;
            }

            exports.lt = lt;

            function lt(a, b, loose) {
              return compare(a, b, loose) < 0;
            }

            exports.eq = eq;

            function eq(a, b, loose) {
              return compare(a, b, loose) === 0;
            }

            exports.neq = neq;

            function neq(a, b, loose) {
              return compare(a, b, loose) !== 0;
            }

            exports.gte = gte;

            function gte(a, b, loose) {
              return compare(a, b, loose) >= 0;
            }

            exports.lte = lte;

            function lte(a, b, loose) {
              return compare(a, b, loose) <= 0;
            }

            exports.cmp = cmp;

            function cmp(a, op, b, loose) {
              var ret;

              switch (op) {
                case "===":
                  if (typeof a === "object") a = a.version;
                  if (typeof b === "object") b = b.version;
                  ret = a === b;
                  break;

                case "!==":
                  if (typeof a === "object") a = a.version;
                  if (typeof b === "object") b = b.version;
                  ret = a !== b;
                  break;

                case "":
                case "=":
                case "==":
                  ret = eq(a, b, loose);
                  break;

                case "!=":
                  ret = neq(a, b, loose);
                  break;

                case ">":
                  ret = gt(a, b, loose);
                  break;

                case ">=":
                  ret = gte(a, b, loose);
                  break;

                case "<":
                  ret = lt(a, b, loose);
                  break;

                case "<=":
                  ret = lte(a, b, loose);
                  break;

                default:
                  throw new TypeError("Invalid operator: " + op);
              }

              return ret;
            }

            exports.Comparator = Comparator;

            function Comparator(comp, options) {
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };

              if (comp instanceof Comparator) {
                if (comp.loose === !!options.loose) return comp;
                else comp = comp.value;
              }

              if (!(this instanceof Comparator))
                return new Comparator(comp, options);
              debug("comparator", comp, options);
              this.options = options;
              this.loose = !!options.loose;
              this.parse(comp);
              if (this.semver === ANY) this.value = "";
              else this.value = this.operator + this.semver.version;
              debug("comp", this);
            }

            var ANY = {};

            Comparator.prototype.parse = function(comp) {
              var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var m = comp.match(r);
              if (!m) throw new TypeError("Invalid comparator: " + comp);
              this.operator = m[1];
              if (this.operator === "=") this.operator = "";
              if (!m[2]) this.semver = ANY;
              else this.semver = new SemVer(m[2], this.options.loose);
            };

            Comparator.prototype.toString = function() {
              return this.value;
            };

            Comparator.prototype.test = function(version) {
              debug("Comparator.test", version, this.options.loose);
              if (this.semver === ANY) return true;
              if (typeof version === "string")
                version = new SemVer(version, this.options);
              return cmp(version, this.operator, this.semver, this.options);
            };

            Comparator.prototype.intersects = function(comp, options) {
              if (!(comp instanceof Comparator)) {
                throw new TypeError("a Comparator is required");
              }

              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              var rangeTmp;

              if (this.operator === "") {
                rangeTmp = new Range(comp.value, options);
                return satisfies(this.value, rangeTmp, options);
              } else if (comp.operator === "") {
                rangeTmp = new Range(this.value, options);
                return satisfies(comp.semver, rangeTmp, options);
              }

              var sameDirectionIncreasing =
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === ">=" || comp.operator === ">");
              var sameDirectionDecreasing =
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === "<=" || comp.operator === "<");
              var sameSemVer = this.semver.version === comp.semver.version;
              var differentDirectionsInclusive =
                (this.operator === ">=" || this.operator === "<=") &&
                (comp.operator === ">=" || comp.operator === "<=");
              var oppositeDirectionsLessThan =
                cmp(this.semver, "<", comp.semver, options) &&
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === "<=" || comp.operator === "<");
              var oppositeDirectionsGreaterThan =
                cmp(this.semver, ">", comp.semver, options) &&
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === ">=" || comp.operator === ">");
              return (
                sameDirectionIncreasing ||
                sameDirectionDecreasing ||
                (sameSemVer && differentDirectionsInclusive) ||
                oppositeDirectionsLessThan ||
                oppositeDirectionsGreaterThan
              );
            };

            exports.Range = Range;

            function Range(range, options) {
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };

              if (range instanceof Range) {
                if (
                  range.loose === !!options.loose &&
                  range.includePrerelease === !!options.includePrerelease
                ) {
                  return range;
                } else {
                  return new Range(range.raw, options);
                }
              }

              if (range instanceof Comparator) {
                return new Range(range.value, options);
              }

              if (!(this instanceof Range)) return new Range(range, options);
              this.options = options;
              this.loose = !!options.loose;
              this.includePrerelease = !!options.includePrerelease;
              this.raw = range;
              this.set = range
                .split(/\s*\|\|\s*/)
                .map(function(range) {
                  return this.parseRange(range.trim());
                }, this)
                .filter(function(c) {
                  return c.length;
                });

              if (!this.set.length) {
                throw new TypeError("Invalid SemVer Range: " + range);
              }

              this.format();
            }

            Range.prototype.format = function() {
              this.range = this.set
                .map(function(comps) {
                  return comps.join(" ").trim();
                })
                .join("||")
                .trim();
              return this.range;
            };

            Range.prototype.toString = function() {
              return this.range;
            };

            Range.prototype.parseRange = function(range) {
              var loose = this.options.loose;
              range = range.trim();
              var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
              range = range.replace(hr, hyphenReplace);
              debug("hyphen replace", range);
              range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
              debug("comparator trim", range, re[COMPARATORTRIM]);
              range = range.replace(re[TILDETRIM], tildeTrimReplace);
              range = range.replace(re[CARETTRIM], caretTrimReplace);
              range = range.split(/\s+/).join(" ");
              var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var set = range
                .split(" ")
                .map(function(comp) {
                  return parseComparator(comp, this.options);
                }, this)
                .join(" ")
                .split(/\s+/);

              if (this.options.loose) {
                set = set.filter(function(comp) {
                  return !!comp.match(compRe);
                });
              }

              set = set.map(function(comp) {
                return new Comparator(comp, this.options);
              }, this);
              return set;
            };

            Range.prototype.intersects = function(range, options) {
              if (!(range instanceof Range)) {
                throw new TypeError("a Range is required");
              }

              return this.set.some(function(thisComparators) {
                return thisComparators.every(function(thisComparator) {
                  return range.set.some(function(rangeComparators) {
                    return rangeComparators.every(function(rangeComparator) {
                      return thisComparator.intersects(
                        rangeComparator,
                        options
                      );
                    });
                  });
                });
              });
            };

            exports.toComparators = toComparators;

            function toComparators(range, options) {
              return new Range(range, options).set.map(function(comp) {
                return comp
                  .map(function(c) {
                    return c.value;
                  })
                  .join(" ")
                  .trim()
                  .split(" ");
              });
            }

            function parseComparator(comp, options) {
              debug("comp", comp, options);
              comp = replaceCarets(comp, options);
              debug("caret", comp);
              comp = replaceTildes(comp, options);
              debug("tildes", comp);
              comp = replaceXRanges(comp, options);
              debug("xrange", comp);
              comp = replaceStars(comp, options);
              debug("stars", comp);
              return comp;
            }

            function isX(id) {
              return !id || id.toLowerCase() === "x" || id === "*";
            }

            function replaceTildes(comp, options) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function(comp) {
                  return replaceTilde(comp, options);
                })
                .join(" ");
            }

            function replaceTilde(comp, options) {
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              var r = options.loose ? re[TILDELOOSE] : re[TILDE];
              return comp.replace(r, function(_, M, m, p, pr) {
                debug("tilde", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) ret = "";
                else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                else if (isX(p))
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                else if (pr) {
                  debug("replaceTilde pr", pr);
                  if (pr.charAt(0) !== "-") pr = "-" + pr;
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    pr +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                } else
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                debug("tilde return", ret);
                return ret;
              });
            }

            function replaceCarets(comp, options) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function(comp) {
                  return replaceCaret(comp, options);
                })
                .join(" ");
            }

            function replaceCaret(comp, options) {
              debug("caret", comp, options);
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              var r = options.loose ? re[CARETLOOSE] : re[CARET];
              return comp.replace(r, function(_, M, m, p, pr) {
                debug("caret", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) ret = "";
                else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                else if (isX(p)) {
                  if (M === "0")
                    ret =
                      ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                  else ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
                } else if (pr) {
                  debug("replaceCaret pr", pr);
                  if (pr.charAt(0) !== "-") pr = "-" + pr;

                  if (M === "0") {
                    if (m === "0")
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        pr +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    else
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        pr +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                  } else
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      pr +
                      " <" +
                      (+M + 1) +
                      ".0.0";
                } else {
                  debug("no pr");

                  if (M === "0") {
                    if (m === "0")
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    else
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                  } else
                    ret =
                      ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
                }
                debug("caret return", ret);
                return ret;
              });
            }

            function replaceXRanges(comp, options) {
              debug("replaceXRanges", comp, options);
              return comp
                .split(/\s+/)
                .map(function(comp) {
                  return replaceXRange(comp, options);
                })
                .join(" ");
            }

            function replaceXRange(comp, options) {
              comp = comp.trim();
              if (!options || typeof options !== "object")
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
              return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
                debug("xRange", comp, ret, gtlt, M, m, p, pr);
                var xM = isX(M);
                var xm = xM || isX(m);
                var xp = xm || isX(p);
                var anyX = xp;
                if (gtlt === "=" && anyX) gtlt = "";

                if (xM) {
                  if (gtlt === ">" || gtlt === "<") {
                    ret = "<0.0.0";
                  } else {
                    ret = "*";
                  }
                } else if (gtlt && anyX) {
                  if (xm) m = 0;
                  if (xp) p = 0;

                  if (gtlt === ">") {
                    gtlt = ">=";

                    if (xm) {
                      M = +M + 1;
                      m = 0;
                      p = 0;
                    } else if (xp) {
                      m = +m + 1;
                      p = 0;
                    }
                  } else if (gtlt === "<=") {
                    gtlt = "<";
                    if (xm) M = +M + 1;
                    else m = +m + 1;
                  }

                  ret = gtlt + M + "." + m + "." + p;
                } else if (xm) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (xp) {
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                }

                debug("xRange return", ret);
                return ret;
              });
            }

            function replaceStars(comp, options) {
              debug("replaceStars", comp, options);
              return comp.trim().replace(re[STAR], "");
            }

            function hyphenReplace(
              $0,
              from,
              fM,
              fm,
              fp,
              fpr,
              fb,
              to,
              tM,
              tm,
              tp,
              tpr,
              tb
            ) {
              if (isX(fM)) from = "";
              else if (isX(fm)) from = ">=" + fM + ".0.0";
              else if (isX(fp)) from = ">=" + fM + "." + fm + ".0";
              else from = ">=" + from;
              if (isX(tM)) to = "";
              else if (isX(tm)) to = "<" + (+tM + 1) + ".0.0";
              else if (isX(tp)) to = "<" + tM + "." + (+tm + 1) + ".0";
              else if (tpr) to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
              else to = "<=" + to;
              return (from + " " + to).trim();
            }

            Range.prototype.test = function(version) {
              if (!version) return false;
              if (typeof version === "string")
                version = new SemVer(version, this.options);

              for (var i = 0; i < this.set.length; i++) {
                if (testSet(this.set[i], version, this.options)) return true;
              }

              return false;
            };

            function testSet(set, version, options) {
              for (var i = 0; i < set.length; i++) {
                if (!set[i].test(version)) return false;
              }

              if (!options) options = {};

              if (version.prerelease.length && !options.includePrerelease) {
                for (var i = 0; i < set.length; i++) {
                  debug(set[i].semver);
                  if (set[i].semver === ANY) continue;

                  if (set[i].semver.prerelease.length > 0) {
                    var allowed = set[i].semver;
                    if (
                      allowed.major === version.major &&
                      allowed.minor === version.minor &&
                      allowed.patch === version.patch
                    )
                      return true;
                  }
                }

                return false;
              }

              return true;
            }

            exports.satisfies = satisfies;

            function satisfies(version, range, options) {
              try {
                range = new Range(range, options);
              } catch (er) {
                return false;
              }

              return range.test(version);
            }

            exports.maxSatisfying = maxSatisfying;

            function maxSatisfying(versions, range, options) {
              var max = null;
              var maxSV = null;

              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }

              versions.forEach(function(v) {
                if (rangeObj.test(v)) {
                  if (!max || maxSV.compare(v) === -1) {
                    max = v;
                    maxSV = new SemVer(max, options);
                  }
                }
              });
              return max;
            }

            exports.minSatisfying = minSatisfying;

            function minSatisfying(versions, range, options) {
              var min = null;
              var minSV = null;

              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }

              versions.forEach(function(v) {
                if (rangeObj.test(v)) {
                  if (!min || minSV.compare(v) === 1) {
                    min = v;
                    minSV = new SemVer(min, options);
                  }
                }
              });
              return min;
            }

            exports.validRange = validRange;

            function validRange(range, options) {
              try {
                return new Range(range, options).range || "*";
              } catch (er) {
                return null;
              }
            }

            exports.ltr = ltr;

            function ltr(version, range, options) {
              return outside(version, range, "<", options);
            }

            exports.gtr = gtr;

            function gtr(version, range, options) {
              return outside(version, range, ">", options);
            }

            exports.outside = outside;

            function outside(version, range, hilo, options) {
              version = new SemVer(version, options);
              range = new Range(range, options);
              var gtfn, ltefn, ltfn, comp, ecomp;

              switch (hilo) {
                case ">":
                  gtfn = gt;
                  ltefn = lte;
                  ltfn = lt;
                  comp = ">";
                  ecomp = ">=";
                  break;

                case "<":
                  gtfn = lt;
                  ltefn = gte;
                  ltfn = gt;
                  comp = "<";
                  ecomp = "<=";
                  break;

                default:
                  throw new TypeError('Must provide a hilo val of "<" or ">"');
              }

              if (satisfies(version, range, options)) {
                return false;
              }

              for (var i = 0; i < range.set.length; ++i) {
                var comparators = range.set[i];
                var high = null;
                var low = null;
                comparators.forEach(function(comparator) {
                  if (comparator.semver === ANY) {
                    comparator = new Comparator(">=0.0.0");
                  }

                  high = high || comparator;
                  low = low || comparator;

                  if (gtfn(comparator.semver, high.semver, options)) {
                    high = comparator;
                  } else if (ltfn(comparator.semver, low.semver, options)) {
                    low = comparator;
                  }
                });

                if (high.operator === comp || high.operator === ecomp) {
                  return false;
                }

                if (
                  (!low.operator || low.operator === comp) &&
                  ltefn(version, low.semver)
                ) {
                  return false;
                } else if (
                  low.operator === ecomp &&
                  ltfn(version, low.semver)
                ) {
                  return false;
                }
              }

              return true;
            }

            exports.prerelease = prerelease;

            function prerelease(version, options) {
              var parsed = parse(version, options);
              return parsed && parsed.prerelease.length
                ? parsed.prerelease
                : null;
            }

            exports.intersects = intersects;

            function intersects(r1, r2, options) {
              r1 = new Range(r1, options);
              r2 = new Range(r2, options);
              return r1.intersects(r2);
            }

            exports.coerce = coerce;

            function coerce(version) {
              if (version instanceof SemVer) return version;
              if (typeof version !== "string") return null;
              var match = version.match(re[COERCE]);
              if (match == null) return null;
              return parse(
                (match[1] || "0") +
                  "." +
                  (match[2] || "0") +
                  "." +
                  (match[3] || "0")
              );
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 16 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.isRequire = exports.createImport = exports.getModulePath = exports.isPolyfillSource = exports.filterStageFromList = exports.getLowestUnreleased = exports.isUnreleasedVersion = exports.prettifyTargets = exports.prettifyVersion = exports.findSuggestion = exports.getValues = exports.roundToMinor = exports.semverify = void 0;

          function _assert() {
            const data = _interopRequireDefault(__webpack_require__(22));

            _assert = function() {
              return data;
            };

            return data;
          }

          function _semver() {
            const data = _interopRequireDefault(__webpack_require__(15));

            _semver = function() {
              return data;
            };

            return data;
          }

          function _jsLevenshtein() {
            const data = _interopRequireDefault(__webpack_require__(170));

            _jsLevenshtein = function() {
              return data;
            };

            return data;
          }

          function _babelHelperModuleImports() {
            const data = __webpack_require__(171);

            _babelHelperModuleImports = function() {
              return data;
            };

            return data;
          }

          var _unreleasedLabels = _interopRequireDefault(
            __webpack_require__(293)
          );

          var _targetsParser = __webpack_require__(71);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const versionRegExp = /^(\d+|\d+.\d+)$/;

          const semverify = version => {
            if (
              typeof version === "string" &&
              _semver().default.valid(version)
            ) {
              return version;
            }

            (0, _assert().default)(
              typeof version === "number" ||
                (typeof version === "string" && versionRegExp.test(version)),
              `'${version}' is not a valid version`
            );
            const split = version.toString().split(".");

            while (split.length < 3) {
              split.push("0");
            }

            return split.join(".");
          };

          exports.semverify = semverify;

          const roundToMinor = version => {
            return `${_semver().default.major(
              version
            )}.${_semver().default.minor(version)}.0`;
          };

          exports.roundToMinor = roundToMinor;

          const getValues = object =>
            Object.keys(object).map(key => object[key]);

          exports.getValues = getValues;

          const findSuggestion = (options, option) => {
            let levenshteinValue = Infinity;
            return options.reduce((suggestion, validOption) => {
              const value = (0, _jsLevenshtein().default)(validOption, option);

              if (value < levenshteinValue) {
                levenshteinValue = value;
                return validOption;
              }

              return suggestion;
            }, undefined);
          };

          exports.findSuggestion = findSuggestion;

          const prettifyVersion = version => {
            if (typeof version !== "string") {
              return version;
            }

            const parts = [_semver().default.major(version)];

            const minor = _semver().default.minor(version);

            const patch = _semver().default.patch(version);

            if (minor || patch) {
              parts.push(minor);
            }

            if (patch) {
              parts.push(patch);
            }

            return parts.join(".");
          };

          exports.prettifyVersion = prettifyVersion;

          const prettifyTargets = targets => {
            return Object.keys(targets).reduce((results, target) => {
              let value = targets[target];
              const unreleasedLabel = _unreleasedLabels.default[target];

              if (typeof value === "string" && unreleasedLabel !== value) {
                value = prettifyVersion(value);
              }

              results[target] = value;
              return results;
            }, {});
          };

          exports.prettifyTargets = prettifyTargets;

          const isUnreleasedVersion = (version, env) => {
            const unreleasedLabel = _unreleasedLabels.default[env];
            return (
              !!unreleasedLabel &&
              unreleasedLabel === version.toString().toLowerCase()
            );
          };

          exports.isUnreleasedVersion = isUnreleasedVersion;

          const getLowestUnreleased = (a, b, env) => {
            const unreleasedLabel = _unreleasedLabels.default[env];
            const hasUnreleased = [a, b].some(item => item === unreleasedLabel);

            if (hasUnreleased) {
              return a === hasUnreleased ? b : a || b;
            }

            return (0, _targetsParser.semverMin)(a, b);
          };

          exports.getLowestUnreleased = getLowestUnreleased;

          const filterStageFromList = (list, stageList) => {
            return Object.keys(list).reduce((result, item) => {
              if (!stageList[item]) {
                result[item] = list[item];
              }

              return result;
            }, {});
          };

          exports.filterStageFromList = filterStageFromList;

          const isPolyfillSource = source =>
            source === "@gerhobbelt/babel-polyfill" || source === "core-js";

          exports.isPolyfillSource = isPolyfillSource;
          const modulePathMap = {
            "regenerator-runtime": "regenerator-runtime/runtime",
          };

          const getModulePath = mod =>
            modulePathMap[mod] || `core-js/modules/${mod}`;

          exports.getModulePath = getModulePath;

          const createImport = (path, mod) =>
            (0, _babelHelperModuleImports().addSideEffect)(
              path,
              getModulePath(mod)
            );

          exports.createImport = createImport;

          const isRequire = (t, path) =>
            t.isExpressionStatement(path.node) &&
            t.isCallExpression(path.node.expression) &&
            t.isIdentifier(path.node.expression.callee) &&
            path.node.expression.callee.name === "require" &&
            path.node.expression.arguments.length === 1 &&
            t.isStringLiteral(path.node.expression.arguments[0]) &&
            isPolyfillSource(path.node.expression.arguments[0].value);

          exports.isRequire = isRequire;
        },
        /* 17 */
        function(module, exports, __webpack_require__) {
          var root = __webpack_require__(5);

          var Symbol = root.Symbol;
          module.exports = Symbol;
        },
        /* 18 */
        function(module, exports, __webpack_require__) {
          var arrayLikeKeys = __webpack_require__(96),
            baseKeys = __webpack_require__(212),
            isArrayLike = __webpack_require__(19);

          function keys(object) {
            return isArrayLike(object)
              ? arrayLikeKeys(object)
              : baseKeys(object);
          }

          module.exports = keys;
        },
        /* 19 */
        function(module, exports, __webpack_require__) {
          var isFunction = __webpack_require__(90),
            isLength = __webpack_require__(58);

          function isArrayLike(value) {
            return (
              value != null && isLength(value.length) && !isFunction(value)
            );
          }

          module.exports = isArrayLike;
        },
        /* 20 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          var virtualTypes = _interopRequireWildcard(__webpack_require__(134));

          function _debug() {
            const data = _interopRequireDefault(__webpack_require__(73));

            _debug = function() {
              return data;
            };

            return data;
          }

          var _index = _interopRequireDefault(__webpack_require__(8));

          var _scope = _interopRequireDefault(__webpack_require__(135));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _cache = __webpack_require__(42);

          function _babelGenerator() {
            const data = _interopRequireDefault(__webpack_require__(79));

            _babelGenerator = function() {
              return data;
            };

            return data;
          }

          var NodePath_ancestry = _interopRequireWildcard(
            __webpack_require__(362)
          );

          var NodePath_inference = _interopRequireWildcard(
            __webpack_require__(363)
          );

          var NodePath_replacement = _interopRequireWildcard(
            __webpack_require__(366)
          );

          var NodePath_evaluation = _interopRequireWildcard(
            __webpack_require__(377)
          );

          var NodePath_conversion = _interopRequireWildcard(
            __webpack_require__(378)
          );

          var NodePath_introspection = _interopRequireWildcard(
            __webpack_require__(385)
          );

          var NodePath_context = _interopRequireWildcard(
            __webpack_require__(386)
          );

          var NodePath_removal = _interopRequireWildcard(
            __webpack_require__(387)
          );

          var NodePath_modification = _interopRequireWildcard(
            __webpack_require__(389)
          );

          var NodePath_family = _interopRequireWildcard(
            __webpack_require__(391)
          );

          var NodePath_comments = _interopRequireWildcard(
            __webpack_require__(392)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const debug = (0, _debug().default)("babel");

          class NodePath {
            constructor(hub, parent) {
              this.parent = parent;
              this.hub = hub;
              this.contexts = [];
              this.data = {};
              this.shouldSkip = false;
              this.shouldStop = false;
              this.removed = false;
              this.state = null;
              this.opts = null;
              this.skipKeys = null;
              this.parentPath = null;
              this.context = null;
              this.container = null;
              this.listKey = null;
              this.inList = false;
              this.parentKey = null;
              this.key = null;
              this.node = null;
              this.scope = null;
              this.type = null;
              this.typeAnnotation = null;
            }

            static get({ hub, parentPath, parent, container, listKey, key }) {
              if (!hub && parentPath) {
                hub = parentPath.hub;
              }

              if (!parent) {
                throw new Error("To get a node path the parent needs to exist");
              }

              const targetNode = container[key];
              const paths = _cache.path.get(parent) || [];

              if (!_cache.path.has(parent)) {
                _cache.path.set(parent, paths);
              }

              let path;

              for (let i = 0; i < paths.length; i++) {
                const pathCheck = paths[i];

                if (pathCheck.node === targetNode) {
                  path = pathCheck;
                  break;
                }
              }

              if (!path) {
                path = new NodePath(hub, parent);
                paths.push(path);
              }

              path.setup(parentPath, container, listKey, key);
              return path;
            }

            getScope(scope) {
              return this.isScope() ? new _scope.default(this) : scope;
            }

            setData(key, val) {
              return (this.data[key] = val);
            }

            getData(key, def) {
              let val = this.data[key];
              if (!val && def) val = this.data[key] = def;
              return val;
            }

            buildCodeFrameError(msg, Error = SyntaxError) {
              return this.hub.buildError(this.node, msg, Error);
            }

            traverse(visitor, state) {
              (0, _index.default)(this.node, visitor, this.scope, state, this);
            }

            set(key, node) {
              t().validate(this.node, key, node);
              this.node[key] = node;
            }

            getPathLocation() {
              const parts = [];
              let path = this;

              do {
                let key = path.key;
                if (path.inList) key = `${path.listKey}[${key}]`;
                parts.unshift(key);
              } while ((path = path.parentPath));

              return parts.join(".");
            }

            debug(message) {
              if (!debug.enabled) return;
              debug(`${this.getPathLocation()} ${this.type}: ${message}`);
            }

            toString() {
              return (0, _babelGenerator().default)(this.node).code;
            }
          }

          exports.default = NodePath;
          Object.assign(
            NodePath.prototype,
            NodePath_ancestry,
            NodePath_inference,
            NodePath_replacement,
            NodePath_evaluation,
            NodePath_conversion,
            NodePath_introspection,
            NodePath_context,
            NodePath_removal,
            NodePath_modification,
            NodePath_family,
            NodePath_comments
          );

          for (const type of t().TYPES) {
            const typeKey = `is${type}`;
            const fn = t()[typeKey];

            NodePath.prototype[typeKey] = function(opts) {
              return fn(this.node, opts);
            };

            NodePath.prototype[`assert${type}`] = function(opts) {
              if (!fn(this.node, opts)) {
                throw new TypeError(`Expected node path of type ${type}`);
              }
            };
          }

          for (const type in virtualTypes) {
            if (type[0] === "_") continue;
            if (t().TYPES.indexOf(type) < 0) t().TYPES.push(type);
            const virtualType = virtualTypes[type];

            NodePath.prototype[`is${type}`] = function(opts) {
              return virtualType.checkPath(this, opts);
            };
          }
        },
        /* 21 */
        function(module, exports) {
          module.exports = __WEBPACK_EXTERNAL_MODULE__21__;
        },
        /* 22 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(global) {
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */

            function compare(a, b) {
              if (a === b) {
                return 0;
              }

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) {
                return -1;
              }

              if (y < x) {
                return 1;
              }

              return 0;
            }

            function isBuffer(b) {
              if (
                global.Buffer &&
                typeof global.Buffer.isBuffer === "function"
              ) {
                return global.Buffer.isBuffer(b);
              }

              return !!(b != null && b._isBuffer);
            }

            var util = __webpack_require__(167);

            var hasOwn = Object.prototype.hasOwnProperty;
            var pSlice = Array.prototype.slice;

            var functionsHaveNames = (function() {
              return function foo() {}.name === "foo";
            })();

            function pToString(obj) {
              return Object.prototype.toString.call(obj);
            }

            function isView(arrbuf) {
              if (isBuffer(arrbuf)) {
                return false;
              }

              if (typeof global.ArrayBuffer !== "function") {
                return false;
              }

              if (typeof ArrayBuffer.isView === "function") {
                return ArrayBuffer.isView(arrbuf);
              }

              if (!arrbuf) {
                return false;
              }

              if (arrbuf instanceof DataView) {
                return true;
              }

              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true;
              }

              return false;
            }

            var assert = (module.exports = ok);
            var regex = /\s*function\s+([^\(\s]*)\s*/;

            function getName(func) {
              if (!util.isFunction(func)) {
                return;
              }

              if (functionsHaveNames) {
                return func.name;
              }

              var str = func.toString();
              var match = str.match(regex);
              return match && match[1];
            }

            assert.AssertionError = function AssertionError(options) {
              this.name = "AssertionError";
              this.actual = options.actual;
              this.expected = options.expected;
              this.operator = options.operator;

              if (options.message) {
                this.message = options.message;
                this.generatedMessage = false;
              } else {
                this.message = getMessage(this);
                this.generatedMessage = true;
              }

              var stackStartFunction = options.stackStartFunction || fail;

              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction);
              } else {
                var err = new Error();

                if (err.stack) {
                  var out = err.stack;
                  var fn_name = getName(stackStartFunction);
                  var idx = out.indexOf("\n" + fn_name);

                  if (idx >= 0) {
                    var next_line = out.indexOf("\n", idx + 1);
                    out = out.substring(next_line + 1);
                  }

                  this.stack = out;
                }
              }
            };

            util.inherits(assert.AssertionError, Error);

            function truncate(s, n) {
              if (typeof s === "string") {
                return s.length < n ? s : s.slice(0, n);
              } else {
                return s;
              }
            }

            function inspect(something) {
              if (functionsHaveNames || !util.isFunction(something)) {
                return util.inspect(something);
              }

              var rawname = getName(something);
              var name = rawname ? ": " + rawname : "";
              return "[Function" + name + "]";
            }

            function getMessage(self) {
              return (
                truncate(inspect(self.actual), 128) +
                " " +
                self.operator +
                " " +
                truncate(inspect(self.expected), 128)
              );
            }

            function fail(
              actual,
              expected,
              message,
              operator,
              stackStartFunction
            ) {
              throw new assert.AssertionError({
                message: message,
                actual: actual,
                expected: expected,
                operator: operator,
                stackStartFunction: stackStartFunction,
              });
            }

            assert.fail = fail;

            function ok(value, message) {
              if (!value) fail(value, true, message, "==", assert.ok);
            }

            assert.ok = ok;

            assert.equal = function equal(actual, expected, message) {
              if (actual != expected)
                fail(actual, expected, message, "==", assert.equal);
            };

            assert.notEqual = function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, "!=", assert.notEqual);
              }
            };

            assert.deepEqual = function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, "deepEqual", assert.deepEqual);
              }
            };

            assert.deepStrictEqual = function deepStrictEqual(
              actual,
              expected,
              message
            ) {
              if (!_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  "deepStrictEqual",
                  assert.deepStrictEqual
                );
              }
            };

            function _deepEqual(actual, expected, strict, memos) {
              if (actual === expected) {
                return true;
              } else if (isBuffer(actual) && isBuffer(expected)) {
                return compare(actual, expected) === 0;
              } else if (util.isDate(actual) && util.isDate(expected)) {
                return actual.getTime() === expected.getTime();
              } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                return (
                  actual.source === expected.source &&
                  actual.global === expected.global &&
                  actual.multiline === expected.multiline &&
                  actual.lastIndex === expected.lastIndex &&
                  actual.ignoreCase === expected.ignoreCase
                );
              } else if (
                (actual === null || typeof actual !== "object") &&
                (expected === null || typeof expected !== "object")
              ) {
                return strict ? actual === expected : actual == expected;
              } else if (
                isView(actual) &&
                isView(expected) &&
                pToString(actual) === pToString(expected) &&
                !(
                  actual instanceof Float32Array ||
                  actual instanceof Float64Array
                )
              ) {
                return (
                  compare(
                    new Uint8Array(actual.buffer),
                    new Uint8Array(expected.buffer)
                  ) === 0
                );
              } else if (isBuffer(actual) !== isBuffer(expected)) {
                return false;
              } else {
                memos = memos || {
                  actual: [],
                  expected: [],
                };
                var actualIndex = memos.actual.indexOf(actual);

                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true;
                  }
                }

                memos.actual.push(actual);
                memos.expected.push(expected);
                return objEquiv(actual, expected, strict, memos);
              }
            }

            function isArguments(object) {
              return (
                Object.prototype.toString.call(object) == "[object Arguments]"
              );
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
              if (
                a === null ||
                a === undefined ||
                b === null ||
                b === undefined
              )
                return false;
              if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
              if (
                strict &&
                Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)
              )
                return false;
              var aIsArgs = isArguments(a);
              var bIsArgs = isArguments(b);
              if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs)) return false;

              if (aIsArgs) {
                a = pSlice.call(a);
                b = pSlice.call(b);
                return _deepEqual(a, b, strict);
              }

              var ka = objectKeys(a);
              var kb = objectKeys(b);
              var key, i;
              if (ka.length !== kb.length) return false;
              ka.sort();
              kb.sort();

              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i]) return false;
              }

              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                  return false;
              }

              return true;
            }

            assert.notDeepEqual = function notDeepEqual(
              actual,
              expected,
              message
            ) {
              if (_deepEqual(actual, expected, false)) {
                fail(
                  actual,
                  expected,
                  message,
                  "notDeepEqual",
                  assert.notDeepEqual
                );
              }
            };

            assert.notDeepStrictEqual = notDeepStrictEqual;

            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  "notDeepStrictEqual",
                  notDeepStrictEqual
                );
              }
            }

            assert.strictEqual = function strictEqual(
              actual,
              expected,
              message
            ) {
              if (actual !== expected) {
                fail(actual, expected, message, "===", assert.strictEqual);
              }
            };

            assert.notStrictEqual = function notStrictEqual(
              actual,
              expected,
              message
            ) {
              if (actual === expected) {
                fail(actual, expected, message, "!==", assert.notStrictEqual);
              }
            };

            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false;
              }

              if (
                Object.prototype.toString.call(expected) == "[object RegExp]"
              ) {
                return expected.test(actual);
              }

              try {
                if (actual instanceof expected) {
                  return true;
                }
              } catch (e) {}

              if (Error.isPrototypeOf(expected)) {
                return false;
              }

              return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
              var error;

              try {
                block();
              } catch (e) {
                error = e;
              }

              return error;
            }

            function _throws(shouldThrow, block, expected, message) {
              var actual;

              if (typeof block !== "function") {
                throw new TypeError('"block" argument must be a function');
              }

              if (typeof expected === "string") {
                message = expected;
                expected = null;
              }

              actual = _tryBlock(block);
              message =
                (expected && expected.name
                  ? " (" + expected.name + ")."
                  : ".") + (message ? " " + message : ".");

              if (shouldThrow && !actual) {
                fail(actual, expected, "Missing expected exception" + message);
              }

              var userProvidedMessage = typeof message === "string";
              var isUnwantedException = !shouldThrow && util.isError(actual);
              var isUnexpectedException = !shouldThrow && actual && !expected;

              if (
                (isUnwantedException &&
                  userProvidedMessage &&
                  expectedException(actual, expected)) ||
                isUnexpectedException
              ) {
                fail(actual, expected, "Got unwanted exception" + message);
              }

              if (
                (shouldThrow &&
                  actual &&
                  expected &&
                  !expectedException(actual, expected)) ||
                (!shouldThrow && actual)
              ) {
                throw actual;
              }
            }

            assert.throws = function(block, error, message) {
              _throws(true, block, error, message);
            };

            assert.doesNotThrow = function(block, error, message) {
              _throws(false, block, error, message);
            };

            assert.ifError = function(err) {
              if (err) throw err;
            };

            var objectKeys =
              Object.keys ||
              function(obj) {
                var keys = [];

                for (var key in obj) {
                  if (hasOwn.call(obj, key)) keys.push(key);
                }

                return keys;
              };
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(23)));
        },
        /* 23 */
        function(module, exports) {
          var g;

          g = (function() {
            return this;
          })();

          try {
            g = g || new Function("return this")();
          } catch (e) {
            if (typeof window === "object") g = window;
          }

          module.exports = g;
        },
        /* 24 */
        function(module, exports) {
          function eq(value, other) {
            return value === other || (value !== value && other !== other);
          }

          module.exports = eq;
        },
        /* 25 */
        function(module, exports) {
          function baseUnary(func) {
            return function(value) {
              return func(value);
            };
          }

          module.exports = baseUnary;
        },
        /* 26 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isValidIdentifier;

          function _esutils() {
            const data = _interopRequireDefault(__webpack_require__(105));

            _esutils = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function isValidIdentifier(name) {
            if (
              typeof name !== "string" ||
              _esutils().default.keyword.isReservedWordES6(name, true)
            ) {
              return false;
            } else if (name === "await") {
              return false;
            } else {
              return _esutils().default.keyword.isIdentifierNameES6(name);
            }
          }
        },
        /* 27 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = cloneNode;

          var _definitions = __webpack_require__(7);

          const has = Function.call.bind(Object.prototype.hasOwnProperty);

          function cloneIfNode(obj, deep) {
            if (
              obj &&
              typeof obj.type === "string" &&
              obj.type !== "CommentLine" &&
              obj.type !== "CommentBlock"
            ) {
              return cloneNode(obj, deep);
            }

            return obj;
          }

          function cloneIfNodeOrArray(obj, deep) {
            if (Array.isArray(obj)) {
              return obj.map(node => cloneIfNode(node, deep));
            }

            return cloneIfNode(obj, deep);
          }

          function cloneNode(node, deep = true) {
            if (!node) return node;
            const { type } = node;
            const newNode = {
              type,
            };

            if (type === "Identifier") {
              newNode.name = node.name;

              if (has(node, "typeAnnotation")) {
                newNode.typeAnnotation = deep
                  ? cloneIfNodeOrArray(node.typeAnnotation, true)
                  : node.typeAnnotation;
              }
            } else if (!has(_definitions.NODE_FIELDS, type)) {
              throw new Error(`Unknown node type: "${type}"`);
            } else {
              for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {
                if (has(node, field)) {
                  newNode[field] = deep
                    ? cloneIfNodeOrArray(node[field], true)
                    : node[field];
                }
              }
            }

            if (has(node, "loc")) {
              newNode.loc = node.loc;
            }

            if (has(node, "leadingComments")) {
              newNode.leadingComments = node.leadingComments;
            }

            if (has(node, "innerComments")) {
              newNode.innerComments = node.innerCmments;
            }

            if (has(node, "trailingComments")) {
              newNode.trailingComments = node.trailingComments;
            }

            if (has(node, "extra")) {
              newNode.extra = Object.assign({}, node.extra);
            }

            return newNode;
          }
        },
        /* 28 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isObjectLike = __webpack_require__(6);

          var symbolTag = "[object Symbol]";

          function isSymbol(value) {
            return (
              typeof value == "symbol" ||
              (isObjectLike(value) && baseGetTag(value) == symbolTag)
            );
          }

          module.exports = isSymbol;
        },
        /* 29 */
        function(module, exports) {
          function getArg(aArgs, aName, aDefaultValue) {
            if (aName in aArgs) {
              return aArgs[aName];
            } else if (arguments.length === 3) {
              return aDefaultValue;
            } else {
              throw new Error('"' + aName + '" is a required argument.');
            }
          }

          exports.getArg = getArg;
          var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
          var dataUrlRegexp = /^data:.+\,.+$/;

          function urlParse(aUrl) {
            var match = aUrl.match(urlRegexp);

            if (!match) {
              return null;
            }

            return {
              scheme: match[1],
              auth: match[2],
              host: match[3],
              port: match[4],
              path: match[5],
            };
          }

          exports.urlParse = urlParse;

          function urlGenerate(aParsedUrl) {
            var url = "";

            if (aParsedUrl.scheme) {
              url += aParsedUrl.scheme + ":";
            }

            url += "//";

            if (aParsedUrl.auth) {
              url += aParsedUrl.auth + "@";
            }

            if (aParsedUrl.host) {
              url += aParsedUrl.host;
            }

            if (aParsedUrl.port) {
              url += ":" + aParsedUrl.port;
            }

            if (aParsedUrl.path) {
              url += aParsedUrl.path;
            }

            return url;
          }

          exports.urlGenerate = urlGenerate;

          function normalize(aPath) {
            var path = aPath;
            var url = urlParse(aPath);

            if (url) {
              if (!url.path) {
                return aPath;
              }

              path = url.path;
            }

            var isAbsolute = exports.isAbsolute(path);
            var parts = path.split(/\/+/);

            for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
              part = parts[i];

              if (part === ".") {
                parts.splice(i, 1);
              } else if (part === "..") {
                up++;
              } else if (up > 0) {
                if (part === "") {
                  parts.splice(i + 1, up);
                  up = 0;
                } else {
                  parts.splice(i, 2);
                  up--;
                }
              }
            }

            path = parts.join("/");

            if (path === "") {
              path = isAbsolute ? "/" : ".";
            }

            if (url) {
              url.path = path;
              return urlGenerate(url);
            }

            return path;
          }

          exports.normalize = normalize;

          function join(aRoot, aPath) {
            if (aRoot === "") {
              aRoot = ".";
            }

            if (aPath === "") {
              aPath = ".";
            }

            var aPathUrl = urlParse(aPath);
            var aRootUrl = urlParse(aRoot);

            if (aRootUrl) {
              aRoot = aRootUrl.path || "/";
            }

            if (aPathUrl && !aPathUrl.scheme) {
              if (aRootUrl) {
                aPathUrl.scheme = aRootUrl.scheme;
              }

              return urlGenerate(aPathUrl);
            }

            if (aPathUrl || aPath.match(dataUrlRegexp)) {
              return aPath;
            }

            if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
              aRootUrl.host = aPath;
              return urlGenerate(aRootUrl);
            }

            var joined =
              aPath.charAt(0) === "/"
                ? aPath
                : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

            if (aRootUrl) {
              aRootUrl.path = joined;
              return urlGenerate(aRootUrl);
            }

            return joined;
          }

          exports.join = join;

          exports.isAbsolute = function(aPath) {
            return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
          };

          function relative(aRoot, aPath) {
            if (aRoot === "") {
              aRoot = ".";
            }

            aRoot = aRoot.replace(/\/$/, "");
            var level = 0;

            while (aPath.indexOf(aRoot + "/") !== 0) {
              var index = aRoot.lastIndexOf("/");

              if (index < 0) {
                return aPath;
              }

              aRoot = aRoot.slice(0, index);

              if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                return aPath;
              }

              ++level;
            }

            return (
              Array(level + 1).join("../") + aPath.substr(aRoot.length + 1)
            );
          }

          exports.relative = relative;

          var supportsNullProto = (function() {
            var obj = Object.create(null);
            return !("__proto__" in obj);
          })();

          function identity(s) {
            return s;
          }

          function toSetString(aStr) {
            if (isProtoString(aStr)) {
              return "$" + aStr;
            }

            return aStr;
          }

          exports.toSetString = supportsNullProto ? identity : toSetString;

          function fromSetString(aStr) {
            if (isProtoString(aStr)) {
              return aStr.slice(1);
            }

            return aStr;
          }

          exports.fromSetString = supportsNullProto ? identity : fromSetString;

          function isProtoString(s) {
            if (!s) {
              return false;
            }

            var length = s.length;

            if (length < 9) {
              return false;
            }

            if (
              s.charCodeAt(length - 1) !== 95 ||
              s.charCodeAt(length - 2) !== 95 ||
              s.charCodeAt(length - 3) !== 111 ||
              s.charCodeAt(length - 4) !== 116 ||
              s.charCodeAt(length - 5) !== 111 ||
              s.charCodeAt(length - 6) !== 114 ||
              s.charCodeAt(length - 7) !== 112 ||
              s.charCodeAt(length - 8) !== 95 ||
              s.charCodeAt(length - 9) !== 95
            ) {
              return false;
            }

            for (var i = length - 10; i >= 0; i--) {
              if (s.charCodeAt(i) !== 36) {
                return false;
              }
            }

            return true;
          }

          function compareByOriginalPositions(
            mappingA,
            mappingB,
            onlyCompareOriginal
          ) {
            var cmp = strcmp(mappingA.source, mappingB.source);

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;

            if (cmp !== 0 || onlyCompareOriginal) {
              return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.generatedLine - mappingB.generatedLine;

            if (cmp !== 0) {
              return cmp;
            }

            return strcmp(mappingA.name, mappingB.name);
          }

          exports.compareByOriginalPositions = compareByOriginalPositions;

          function compareByGeneratedPositionsDeflated(
            mappingA,
            mappingB,
            onlyCompareGenerated
          ) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;

            if (cmp !== 0 || onlyCompareGenerated) {
              return cmp;
            }

            cmp = strcmp(mappingA.source, mappingB.source);

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;

            if (cmp !== 0) {
              return cmp;
            }

            return strcmp(mappingA.name, mappingB.name);
          }

          exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

          function strcmp(aStr1, aStr2) {
            if (aStr1 === aStr2) {
              return 0;
            }

            if (aStr1 === null) {
              return 1;
            }

            if (aStr2 === null) {
              return -1;
            }

            if (aStr1 > aStr2) {
              return 1;
            }

            return -1;
          }

          function compareByGeneratedPositionsInflated(mappingA, mappingB) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = strcmp(mappingA.source, mappingB.source);

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;

            if (cmp !== 0) {
              return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;

            if (cmp !== 0) {
              return cmp;
            }

            return strcmp(mappingA.name, mappingB.name);
          }

          exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

          function parseSourceMapInput(str) {
            return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
          }

          exports.parseSourceMapInput = parseSourceMapInput;

          function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
            sourceURL = sourceURL || "";

            if (sourceRoot) {
              if (
                sourceRoot[sourceRoot.length - 1] !== "/" &&
                sourceURL[0] !== "/"
              ) {
                sourceRoot += "/";
              }

              sourceURL = sourceRoot + sourceURL;
            }

            if (sourceMapURL) {
              var parsed = urlParse(sourceMapURL);

              if (!parsed) {
                throw new Error("sourceMapURL could not be parsed");
              }

              if (parsed.path) {
                var index = parsed.path.lastIndexOf("/");

                if (index >= 0) {
                  parsed.path = parsed.path.substring(0, index + 1);
                }
              }

              sourceURL = join(urlGenerate(parsed), sourceURL);
            }

            return normalize(sourceURL);
          }

          exports.computeSourceURL = computeSourceURL;
        },
        /* 30 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.loadOptions = loadOptions;
          Object.defineProperty(exports, "default", {
            enumerable: true,
            get: function() {
              return _full.default;
            },
          });
          Object.defineProperty(exports, "loadPartialConfig", {
            enumerable: true,
            get: function() {
              return _partial.loadPartialConfig;
            },
          });

          var _full = _interopRequireDefault(__webpack_require__(399));

          var _partial = __webpack_require__(154);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function loadOptions(opts) {
            const config = (0, _full.default)(opts);
            return config ? config.options : null;
          }
        },
        /* 31 */
        function(module, exports, __webpack_require__) {
          var listCacheClear = __webpack_require__(178),
            listCacheDelete = __webpack_require__(179),
            listCacheGet = __webpack_require__(180),
            listCacheHas = __webpack_require__(181),
            listCacheSet = __webpack_require__(182);

          function ListCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          module.exports = ListCache;
        },
        /* 32 */
        function(module, exports, __webpack_require__) {
          var eq = __webpack_require__(24);

          function assocIndexOf(array, key) {
            var length = array.length;

            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }

            return -1;
          }

          module.exports = assocIndexOf;
        },
        /* 33 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12);

          var nativeCreate = getNative(Object, "create");
          module.exports = nativeCreate;
        },
        /* 34 */
        function(module, exports, __webpack_require__) {
          var isKeyable = __webpack_require__(202);

          function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key)
              ? data[typeof key == "string" ? "string" : "hash"]
              : data.map;
          }

          module.exports = getMapData;
        },
        /* 35 */
        function(module, exports, __webpack_require__) {
          var assignValue = __webpack_require__(93),
            baseAssignValue = __webpack_require__(94);

          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1,
              length = props.length;

            while (++index < length) {
              var key = props[index];
              var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : undefined;

              if (newValue === undefined) {
                newValue = source[key];
              }

              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }

            return object;
          }

          module.exports = copyObject;
        },
        /* 36 */
        function(module, exports) {
          module.exports = function(module) {
            if (!module.webpackPolyfill) {
              module.deprecate = function() {};

              module.paths = [];
              if (!module.children) module.children = [];
              Object.defineProperty(module, "loaded", {
                enumerable: true,
                get: function() {
                  return module.l;
                },
              });
              Object.defineProperty(module, "id", {
                enumerable: true,
                get: function() {
                  return module.i;
                },
              });
              module.webpackPolyfill = 1;
            }

            return module;
          };
        },
        /* 37 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(module) {
            var freeGlobal = __webpack_require__(91);

            var freeExports = true && exports && !exports.nodeType && exports;
            var freeModule =
              freeExports &&
              typeof module == "object" &&
              module &&
              !module.nodeType &&
              module;
            var moduleExports =
              freeModule && freeModule.exports === freeExports;
            var freeProcess = moduleExports && freeGlobal.process;

            var nodeUtil = (function() {
              try {
                var types =
                  freeModule &&
                  freeModule.require &&
                  freeModule.require("util").types;

                if (types) {
                  return types;
                }

                return (
                  freeProcess &&
                  freeProcess.binding &&
                  freeProcess.binding("util")
                );
              } catch (e) {}
            })();

            module.exports = nodeUtil;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(36)(module)));
        },
        /* 38 */
        function(module, exports, __webpack_require__) {
          var DataView = __webpack_require__(223),
            Map = __webpack_require__(53),
            Promise = __webpack_require__(224),
            Set = __webpack_require__(103),
            WeakMap = __webpack_require__(225),
            baseGetTag = __webpack_require__(9),
            toSource = __webpack_require__(92);

          var mapTag = "[object Map]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            setTag = "[object Set]",
            weakMapTag = "[object WeakMap]";
          var dataViewTag = "[object DataView]";
          var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);
          var getTag = baseGetTag;

          if (
            (DataView &&
              getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map()) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set()) != setTag) ||
            (WeakMap && getTag(new WeakMap()) != weakMapTag)
          ) {
            getTag = function(value) {
              var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : "";

              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;

                  case mapCtorString:
                    return mapTag;

                  case promiseCtorString:
                    return promiseTag;

                  case setCtorString:
                    return setTag;

                  case weakMapCtorString:
                    return weakMapTag;
                }
              }

              return result;
            };
          }

          module.exports = getTag;
        },
        /* 39 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = getBindingIdentifiers;

          var _generated = __webpack_require__(1);

          function getBindingIdentifiers(node, duplicates, outerOnly) {
            let search = [].concat(node);
            const ids = Object.create(null);

            while (search.length) {
              const id = search.shift();
              if (!id) continue;
              const keys = getBindingIdentifiers.keys[id.type];

              if ((0, _generated.isIdentifier)(id)) {
                if (duplicates) {
                  const _ids = (ids[id.name] = ids[id.name] || []);

                  _ids.push(id);
                } else {
                  ids[id.name] = id;
                }

                continue;
              }

              if ((0, _generated.isExportDeclaration)(id)) {
                if ((0, _generated.isDeclaration)(id.declaration)) {
                  search.push(id.declaration);
                }

                continue;
              }

              if (outerOnly) {
                if ((0, _generated.isFunctionDeclaration)(id)) {
                  search.push(id.id);
                  continue;
                }

                if ((0, _generated.isFunctionExpression)(id)) {
                  continue;
                }
              }

              if (keys) {
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i];

                  if (id[key]) {
                    search = search.concat(id[key]);
                  }
                }
              }
            }

            return ids;
          }

          getBindingIdentifiers.keys = {
            DeclareClass: ["id"],
            DeclareFunction: ["id"],
            DeclareModule: ["id"],
            DeclareVariable: ["id"],
            DeclareInterface: ["id"],
            DeclareTypeAlias: ["id"],
            DeclareOpaqueType: ["id"],
            InterfaceDeclaration: ["id"],
            TypeAlias: ["id"],
            OpaqueType: ["id"],
            CatchClause: ["param"],
            LabeledStatement: ["label"],
            UnaryExpression: ["argument"],
            AssignmentExpression: ["left"],
            ImportSpecifier: ["local"],
            ImportNamespaceSpecifier: ["local"],
            ImportDefaultSpecifier: ["local"],
            ImportDeclaration: ["specifiers"],
            ExportSpecifier: ["exported"],
            ExportNamespaceSpecifier: ["exported"],
            ExportDefaultSpecifier: ["exported"],
            FunctionDeclaration: ["id", "params"],
            FunctionExpression: ["id", "params"],
            ArrowFunctionExpression: ["params"],
            ObjectMethod: ["params"],
            ClassMethod: ["params"],
            ForInStatement: ["left"],
            ForOfStatement: ["left"],
            ClassDeclaration: ["id"],
            ClassExpression: ["id"],
            RestElement: ["argument"],
            UpdateExpression: ["argument"],
            ObjectProperty: ["value"],
            AssignmentPattern: ["left"],
            ArrayPattern: ["elements"],
            ObjectPattern: ["properties"],
            VariableDeclaration: ["declarations"],
            VariableDeclarator: ["id"],
          };
        },
        /* 40 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.declare = declare;

          function declare(builder) {
            return (api, options, dirname) => {
              if (!api.assertVersion) {
                api = Object.assign(copyApiObject(api), {
                  assertVersion(range) {
                    throwVersionError(range, api.version);
                  },
                });
              }

              return builder(api, options || {}, dirname);
            };
          }

          function copyApiObject(api) {
            let proto = null;

            if (typeof api.version === "string" && /^7\./.test(api.version)) {
              proto = Object.getPrototypeOf(api);

              if (
                proto &&
                (!has(proto, "version") ||
                  !has(proto, "transform") ||
                  !has(proto, "template") ||
                  !has(proto, "types"))
              ) {
                proto = null;
              }
            }

            return Object.assign({}, proto, api);
          }

          function has(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
          }

          function throwVersionError(range, version) {
            if (typeof range === "number") {
              if (!Number.isInteger(range)) {
                throw new Error("Expected string or integer value.");
              }

              range = `^${range}.0.0-0`;
            }

            if (typeof range !== "string") {
              throw new Error("Expected string or integer value.");
            }

            const limit = Error.stackTraceLimit;

            if (typeof limit === "number" && limit < 25) {
              Error.stackTraceLimit = 25;
            }

            let err;

            if (version.slice(0, 2) === "7.") {
              err = new Error(
                `Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". ` +
                  `You'll need to update your @gerhobbelt/babel-core version.`
              );
            } else {
              err = new Error(
                `Requires Babel "${range}", but was loaded with "${version}". ` +
                  `If you are sure you have a compatible version of @gerhobbelt/babel-core, ` +
                  `it is likely that something in your build process is loading the ` +
                  `wrong version. Inspect the stack trace of this error to look for ` +
                  `the first entry that doesn't mention "@gerhobbelt/babel-core" or "babel-core" ` +
                  `to see what is calling Babel.`
              );
            }

            if (typeof limit === "number") {
              Error.stackTraceLimit = limit;
            }

            throw Object.assign(err, {
              code: "BABEL_VERSION_UNSUPPORTED",
              version,
              range,
            });
          }
        },
        /* 41 */
        function(module, exports) {
          function identity(value) {
            return value;
          }

          module.exports = identity;
        },
        /* 42 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.clear = clear;
          exports.clearPath = clearPath;
          exports.clearScope = clearScope;
          exports.scope = exports.path = void 0;
          let path = new WeakMap();
          exports.path = path;
          let scope = new WeakMap();
          exports.scope = scope;

          function clear() {
            clearPath();
            clearScope();
          }

          function clearPath() {
            exports.path = path = new WeakMap();
          }

          function clearScope() {
            exports.scope = scope = new WeakMap();
          }
        },
        /* 43 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.codeFrameColumns = codeFrameColumns;
            exports.default = _default;

            function _babelHighlight() {
              const data = _interopRequireWildcard(__webpack_require__(367));

              _babelHighlight = function() {
                return data;
              };

              return data;
            }

            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};

                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                      var desc =
                        Object.defineProperty && Object.getOwnPropertyDescriptor
                          ? Object.getOwnPropertyDescriptor(obj, key)
                          : {};

                      if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                      } else {
                        newObj[key] = obj[key];
                      }
                    }
                  }
                }

                newObj.default = obj;
                return newObj;
              }
            }

            let deprecationWarningShown = false;

            function getDefs(chalk) {
              return {
                gutter: chalk.grey,
                marker: chalk.red.bold,
                message: chalk.red.bold,
              };
            }

            const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

            function getMarkerLines(loc, source, opts) {
              const startLoc = Object.assign(
                {
                  column: 0,
                  line: -1,
                },
                loc.start
              );
              const endLoc = Object.assign({}, startLoc, loc.end);
              const { linesAbove = 2, linesBelow = 3 } = opts || {};
              const startLine = startLoc.line;
              const startColumn = startLoc.column;
              const endLine = endLoc.line;
              const endColumn = endLoc.column;
              let start = Math.max(startLine - (linesAbove + 1), 0);
              let end = Math.min(source.length, endLine + linesBelow);

              if (startLine === -1) {
                start = 0;
              }

              if (endLine === -1) {
                end = source.length;
              }

              const lineDiff = endLine - startLine;
              const markerLines = {};

              if (lineDiff) {
                for (let i = 0; i <= lineDiff; i++) {
                  const lineNumber = i + startLine;

                  if (!startColumn) {
                    markerLines[lineNumber] = true;
                  } else if (i === 0) {
                    const sourceLength = source[lineNumber - 1].length;
                    markerLines[lineNumber] = [
                      startColumn,
                      sourceLength - startColumn,
                    ];
                  } else if (i === lineDiff) {
                    markerLines[lineNumber] = [0, endColumn];
                  } else {
                    const sourceLength = source[lineNumber - i].length;
                    markerLines[lineNumber] = [0, sourceLength];
                  }
                }
              } else {
                if (startColumn === endColumn) {
                  if (startColumn) {
                    markerLines[startLine] = [startColumn, 0];
                  } else {
                    markerLines[startLine] = true;
                  }
                } else {
                  markerLines[startLine] = [
                    startColumn,
                    endColumn - startColumn,
                  ];
                }
              }

              return {
                start,
                end,
                markerLines,
              };
            }

            function codeFrameColumns(rawLines, loc, opts = {}) {
              const highlighted =
                (opts.highlightCode || opts.forceColor) &&
                (0, _babelHighlight().shouldHighlight)(opts);
              const chalk = (0, _babelHighlight().getChalk)(opts);
              const defs = getDefs(chalk);

              const maybeHighlight = (chalkFn, string) => {
                return highlighted ? chalkFn(string) : string;
              };

              if (highlighted)
                rawLines = (0, _babelHighlight().default)(rawLines, opts);
              const lines = rawLines.split(NEWLINE);
              const { start, end, markerLines } = getMarkerLines(
                loc,
                lines,
                opts
              );
              const hasColumns =
                loc.start && typeof loc.start.column === "number";
              const numberMaxWidth = String(end).length;
              let frame = lines
                .slice(start, end)
                .map((line, index) => {
                  const number = start + 1 + index;
                  const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
                  const gutter = ` ${paddedNumber} | `;
                  const hasMarker = markerLines[number];
                  const lastMarkerLine = !markerLines[number + 1];

                  if (hasMarker) {
                    let markerLine = "";

                    if (Array.isArray(hasMarker)) {
                      const markerSpacing = line
                        .slice(0, Math.max(hasMarker[0] - 1, 0))
                        .replace(/[^\t]/g, " ");
                      const numberOfMarkers = hasMarker[1] || 1;
                      markerLine = [
                        "\n ",
                        maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                        markerSpacing,
                        maybeHighlight(defs.marker, "^").repeat(
                          numberOfMarkers
                        ),
                      ].join("");

                      if (lastMarkerLine && opts.message) {
                        markerLine +=
                          " " + maybeHighlight(defs.message, opts.message);
                      }
                    }

                    return [
                      maybeHighlight(defs.marker, ">"),
                      maybeHighlight(defs.gutter, gutter),
                      line,
                      markerLine,
                    ].join("");
                  } else {
                    return ` ${maybeHighlight(defs.gutter, gutter)}${line}`;
                  }
                })
                .join("\n");

              if (opts.message && !hasColumns) {
                frame = `${" ".repeat(numberMaxWidth + 1)}${
                  opts.message
                }\n${frame}`;
              }

              if (highlighted) {
                return chalk.reset(frame);
              } else {
                return frame;
              }
            }

            function _default(rawLines, lineNumber, colNumber, opts = {}) {
              if (!deprecationWarningShown) {
                deprecationWarningShown = true;
                const message =
                  "Passing lineNumber and colNumber is deprecated to @gerhobbelt/babel-code-frame. Please use `codeFrameColumns`.";

                if (process.emitWarning) {
                  process.emitWarning(message, "DeprecationWarning");
                } else {
                  const deprecationError = new Error(message);
                  deprecationError.name = "DeprecationWarning";
                  console.warn(new Error(message));
                }
              }

              colNumber = Math.max(colNumber, 0);
              const location = {
                start: {
                  column: colNumber,
                  line: lineNumber,
                },
              };
              return codeFrameColumns(rawLines, location, opts);
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 44 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          const beforeExpr = true;
          const startsExpr = true;
          const isLoop = true;
          const isAssign = true;
          const prefix = true;
          const postfix = true;

          class TokenType {
            constructor(label, conf = {}) {
              this.label = label;
              this.keyword = conf.keyword;
              this.beforeExpr = !!conf.beforeExpr;
              this.startsExpr = !!conf.startsExpr;
              this.rightAssociative = !!conf.rightAssociative;
              this.isLoop = !!conf.isLoop;
              this.isAssign = !!conf.isAssign;
              this.prefix = !!conf.prefix;
              this.postfix = !!conf.postfix;
              this.binop = conf.binop === 0 ? 0 : conf.binop || null;
              this.updateContext = null;
            }
          }

          function KeywordTokenType(keyword, options = {}) {
            return new TokenType(
              keyword,
              Object.assign({}, options, {
                keyword,
              })
            );
          }

          function BinopTokenType(name, binop) {
            return new TokenType(name, {
              beforeExpr,
              binop,
            });
          }

          const types = {
            num: new TokenType("num", {
              startsExpr,
            }),
            bigint: new TokenType("bigint", {
              startsExpr,
            }),
            regexp: new TokenType("regexp", {
              startsExpr,
            }),
            string: new TokenType("string", {
              startsExpr,
            }),
            name: new TokenType("name", {
              startsExpr,
            }),
            eof: new TokenType("eof"),
            bracketL: new TokenType("[", {
              beforeExpr,
              startsExpr,
            }),
            bracketR: new TokenType("]"),
            braceL: new TokenType("{", {
              beforeExpr,
              startsExpr,
            }),
            braceBarL: new TokenType("{|", {
              beforeExpr,
              startsExpr,
            }),
            braceR: new TokenType("}"),
            braceBarR: new TokenType("|}"),
            parenL: new TokenType("(", {
              beforeExpr,
              startsExpr,
            }),
            parenR: new TokenType(")"),
            comma: new TokenType(",", {
              beforeExpr,
            }),
            semi: new TokenType(";", {
              beforeExpr,
            }),
            colon: new TokenType(":", {
              beforeExpr,
            }),
            doubleColon: new TokenType("::", {
              beforeExpr,
            }),
            dot: new TokenType("."),
            question: new TokenType("?", {
              beforeExpr,
            }),
            questionDot: new TokenType("?."),
            arrow: new TokenType("=>", {
              beforeExpr,
            }),
            template: new TokenType("template"),
            ellipsis: new TokenType("...", {
              beforeExpr,
            }),
            backQuote: new TokenType("`", {
              startsExpr,
            }),
            dollarBraceL: new TokenType("${", {
              beforeExpr,
              startsExpr,
            }),
            at: new TokenType("@"),
            hash: new TokenType("#"),
            interpreterDirective: new TokenType("#!..."),
            eq: new TokenType("=", {
              beforeExpr,
              isAssign,
            }),
            assign: new TokenType("_=", {
              beforeExpr,
              isAssign,
            }),
            incDec: new TokenType("++/--", {
              prefix,
              postfix,
              startsExpr,
            }),
            bang: new TokenType("!", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
            tilde: new TokenType("~", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
            pipeline: new BinopTokenType("|>", 0),
            nullishCoalescing: new BinopTokenType("??", 1),
            logicalOR: new BinopTokenType("||", 1),
            logicalAND: new BinopTokenType("&&", 2),
            bitwiseOR: new BinopTokenType("|", 3),
            bitwiseXOR: new BinopTokenType("^", 4),
            bitwiseAND: new BinopTokenType("&", 5),
            equality: new BinopTokenType("==/!=", 6),
            relational: new BinopTokenType("</>", 7),
            bitShift: new BinopTokenType("<</>>", 8),
            plusMin: new TokenType("+/-", {
              beforeExpr,
              binop: 9,
              prefix,
              startsExpr,
            }),
            modulo: new BinopTokenType("%", 10),
            star: new BinopTokenType("*", 10),
            slash: new BinopTokenType("/", 10),
            exponent: new TokenType("**", {
              beforeExpr,
              binop: 11,
              rightAssociative: true,
            }),
          };
          const keywords = {
            break: new KeywordTokenType("break"),
            case: new KeywordTokenType("case", {
              beforeExpr,
            }),
            catch: new KeywordTokenType("catch"),
            continue: new KeywordTokenType("continue"),
            debugger: new KeywordTokenType("debugger"),
            default: new KeywordTokenType("default", {
              beforeExpr,
            }),
            do: new KeywordTokenType("do", {
              isLoop,
              beforeExpr,
            }),
            else: new KeywordTokenType("else", {
              beforeExpr,
            }),
            finally: new KeywordTokenType("finally"),
            for: new KeywordTokenType("for", {
              isLoop,
            }),
            function: new KeywordTokenType("function", {
              startsExpr,
            }),
            if: new KeywordTokenType("if"),
            return: new KeywordTokenType("return", {
              beforeExpr,
            }),
            switch: new KeywordTokenType("switch"),
            throw: new KeywordTokenType("throw", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
            try: new KeywordTokenType("try"),
            var: new KeywordTokenType("var"),
            let: new KeywordTokenType("let"),
            const: new KeywordTokenType("const"),
            while: new KeywordTokenType("while", {
              isLoop,
            }),
            with: new KeywordTokenType("with"),
            new: new KeywordTokenType("new", {
              beforeExpr,
              startsExpr,
            }),
            this: new KeywordTokenType("this", {
              startsExpr,
            }),
            super: new KeywordTokenType("super", {
              startsExpr,
            }),
            class: new KeywordTokenType("class", {
              startsExpr,
            }),
            extends: new KeywordTokenType("extends", {
              beforeExpr,
            }),
            export: new KeywordTokenType("export"),
            import: new KeywordTokenType("import", {
              startsExpr,
            }),
            yield: new KeywordTokenType("yield", {
              beforeExpr,
              startsExpr,
            }),
            null: new KeywordTokenType("null", {
              startsExpr,
            }),
            true: new KeywordTokenType("true", {
              startsExpr,
            }),
            false: new KeywordTokenType("false", {
              startsExpr,
            }),
            in: new KeywordTokenType("in", {
              beforeExpr,
              binop: 7,
            }),
            instanceof: new KeywordTokenType("instanceof", {
              beforeExpr,
              binop: 7,
            }),
            typeof: new KeywordTokenType("typeof", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
            void: new KeywordTokenType("void", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
            delete: new KeywordTokenType("delete", {
              beforeExpr,
              prefix,
              startsExpr,
            }),
          };
          Object.keys(keywords).forEach(name => {
            types["_" + name] = keywords[name];
          });

          function isSimpleProperty(node) {
            return (
              node != null &&
              node.type === "Property" &&
              node.kind === "init" &&
              node.method === false
            );
          }

          var estree = superClass =>
            class extends superClass {
              estreeParseRegExpLiteral({ pattern, flags }) {
                let regex = null;

                try {
                  regex = new RegExp(pattern, flags);
                } catch (e) {}

                const node = this.estreeParseLiteral(regex);
                node.regex = {
                  pattern,
                  flags,
                };
                return node;
              }

              estreeParseLiteral(value) {
                return this.parseLiteral(value, "Literal");
              }

              directiveToStmt(directive) {
                const directiveLiteral = directive.value;
                const stmt = this.startNodeAt(
                  directive.start,
                  directive.loc.start
                );
                const expression = this.startNodeAt(
                  directiveLiteral.start,
                  directiveLiteral.loc.start
                );
                expression.value = directiveLiteral.value;
                expression.raw = directiveLiteral.extra.raw;
                stmt.expression = this.finishNodeAt(
                  expression,
                  "Literal",
                  directiveLiteral.end,
                  directiveLiteral.loc.end
                );
                stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
                return this.finishNodeAt(
                  stmt,
                  "ExpressionStatement",
                  directive.end,
                  directive.loc.end
                );
              }

              initFunction(node, isAsync) {
                super.initFunction(node, isAsync);
                node.expression = false;
              }

              checkDeclaration(node) {
                if (isSimpleProperty(node)) {
                  this.checkDeclaration(node.value);
                } else {
                  super.checkDeclaration(node);
                }
              }

              checkGetterSetterParams(method) {
                const prop = method;
                const paramCount = prop.kind === "get" ? 0 : 1;
                const start = prop.start;

                if (prop.value.params.length !== paramCount) {
                  if (prop.kind === "get") {
                    this.raise(
                      start,
                      "getter must not have any formal parameters"
                    );
                  } else {
                    this.raise(
                      start,
                      "setter must have exactly one formal parameter"
                    );
                  }
                }

                if (
                  prop.kind === "set" &&
                  prop.value.params[0].type === "RestElement"
                ) {
                  this.raise(
                    start,
                    "setter function argument must not be a rest parameter"
                  );
                }
              }

              checkLVal(expr, isBinding, checkClashes, contextDescription) {
                switch (expr.type) {
                  case "ObjectPattern":
                    expr.properties.forEach(prop => {
                      this.checkLVal(
                        prop.type === "Property" ? prop.value : prop,
                        isBinding,
                        checkClashes,
                        "object destructuring pattern"
                      );
                    });
                    break;

                  default:
                    super.checkLVal(
                      expr,
                      isBinding,
                      checkClashes,
                      contextDescription
                    );
                }
              }

              checkPropClash(prop, propHash) {
                if (prop.computed || !isSimpleProperty(prop)) return;
                const key = prop.key;
                const name =
                  key.type === "Identifier" ? key.name : String(key.value);

                if (name === "__proto__") {
                  if (propHash.proto) {
                    this.raise(key.start, "Redefinition of __proto__ property");
                  }

                  propHash.proto = true;
                }
              }

              isStrictBody(node) {
                const isBlockStatement = node.body.type === "BlockStatement";

                if (isBlockStatement && node.body.body.length > 0) {
                  for (
                    let _i = 0, _node$body$body = node.body.body;
                    _i < _node$body$body.length;
                    _i++
                  ) {
                    const directive = _node$body$body[_i];

                    if (
                      directive.type === "ExpressionStatement" &&
                      directive.expression.type === "Literal"
                    ) {
                      if (directive.expression.value === "use strict")
                        return true;
                    } else {
                      break;
                    }
                  }
                }

                return false;
              }

              isValidDirective(stmt) {
                return (
                  stmt.type === "ExpressionStatement" &&
                  stmt.expression.type === "Literal" &&
                  typeof stmt.expression.value === "string" &&
                  (!stmt.expression.extra ||
                    !stmt.expression.extra.parenthesized)
                );
              }

              stmtToDirective(stmt) {
                const directive = super.stmtToDirective(stmt);
                const value = stmt.expression.value;
                directive.value.value = value;
                return directive;
              }

              parseBlockBody(node, allowDirectives, topLevel, end) {
                super.parseBlockBody(node, allowDirectives, topLevel, end);
                const directiveStatements = node.directives.map(d =>
                  this.directiveToStmt(d)
                );
                node.body = directiveStatements.concat(node.body);
                delete node.directives;
              }

              pushClassMethod(
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor
              ) {
                this.parseMethod(
                  method,
                  isGenerator,
                  isAsync,
                  isConstructor,
                  "MethodDefinition"
                );

                if (method.typeParameters) {
                  method.value.typeParameters = method.typeParameters;
                  delete method.typeParameters;
                }

                classBody.body.push(method);
              }

              parseExprAtom(refShorthandDefaultPos) {
                switch (this.state.type) {
                  case types.regexp:
                    return this.estreeParseRegExpLiteral(this.state.value);

                  case types.num:
                  case types.string:
                    return this.estreeParseLiteral(this.state.value);

                  case types._null:
                    return this.estreeParseLiteral(null);

                  case types._true:
                    return this.estreeParseLiteral(true);

                  case types._false:
                    return this.estreeParseLiteral(false);

                  default:
                    return super.parseExprAtom(refShorthandDefaultPos);
                }
              }

              parseLiteral(value, type, startPos, startLoc) {
                const node = super.parseLiteral(
                  value,
                  type,
                  startPos,
                  startLoc
                );
                node.raw = node.extra.raw;
                delete node.extra;
                return node;
              }

              parseFunctionBody(node, allowExpression) {
                super.parseFunctionBody(node, allowExpression);
                node.expression = node.body.type !== "BlockStatement";
              }

              parseMethod(node, isGenerator, isAsync, isConstructor, type) {
                let funcNode = this.startNode();
                funcNode.kind = node.kind;
                funcNode = super.parseMethod(
                  funcNode,
                  isGenerator,
                  isAsync,
                  isConstructor,
                  "FunctionExpression"
                );
                delete funcNode.kind;
                node.value = funcNode;
                return this.finishNode(node, type);
              }

              parseObjectMethod(
                prop,
                isGenerator,
                isAsync,
                isPattern,
                containsEsc
              ) {
                const node = super.parseObjectMethod(
                  prop,
                  isGenerator,
                  isAsync,
                  isPattern,
                  containsEsc
                );

                if (node) {
                  node.type = "Property";
                  if (node.kind === "method") node.kind = "init";
                  node.shorthand = false;
                }

                return node;
              }

              parseObjectProperty(
                prop,
                startPos,
                startLoc,
                isPattern,
                refShorthandDefaultPos
              ) {
                const node = super.parseObjectProperty(
                  prop,
                  startPos,
                  startLoc,
                  isPattern,
                  refShorthandDefaultPos
                );

                if (node) {
                  node.kind = "init";
                  node.type = "Property";
                }

                return node;
              }

              toAssignable(node, isBinding, contextDescription) {
                if (isSimpleProperty(node)) {
                  this.toAssignable(node.value, isBinding, contextDescription);
                  return node;
                }

                return super.toAssignable(node, isBinding, contextDescription);
              }

              toAssignableObjectExpressionProp(prop, isBinding, isLast) {
                if (prop.kind === "get" || prop.kind === "set") {
                  this.raise(
                    prop.key.start,
                    "Object pattern can't contain getter or setter"
                  );
                } else if (prop.method) {
                  this.raise(
                    prop.key.start,
                    "Object pattern can't contain methods"
                  );
                } else {
                  super.toAssignableObjectExpressionProp(
                    prop,
                    isBinding,
                    isLast
                  );
                }
              }
            };

          const lineBreak = /\r\n?|\n|\u2028|\u2029/;
          const lineBreakG = new RegExp(lineBreak.source, "g");

          function isNewLine(code) {
            switch (code) {
              case 10:
              case 13:
              case 8232:
              case 8233:
                return true;

              default:
                return false;
            }
          }

          const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

          function isWhitespace(code) {
            switch (code) {
              case 0x0009:
              case 0x000b:
              case 0x000c:
              case 32:
              case 160:
              case 5760:
              case 0x2000:
              case 0x2001:
              case 0x2002:
              case 0x2003:
              case 0x2004:
              case 0x2005:
              case 0x2006:
              case 0x2007:
              case 0x2008:
              case 0x2009:
              case 0x200a:
              case 0x202f:
              case 0x205f:
              case 0x3000:
              case 0xfeff:
                return true;

              default:
                return false;
            }
          }

          class TokContext {
            constructor(token, isExpr, preserveSpace, override) {
              this.token = token;
              this.isExpr = !!isExpr;
              this.preserveSpace = !!preserveSpace;
              this.override = override;
            }
          }

          const types$1 = {
            braceStatement: new TokContext("{", false),
            braceExpression: new TokContext("{", true),
            templateQuasi: new TokContext("${", false),
            parenStatement: new TokContext("(", false),
            parenExpression: new TokContext("(", true),
            template: new TokContext("`", true, true, p => p.readTmplToken()),
            functionExpression: new TokContext("function", true),
            functionStatement: new TokContext("function", false),
          };

          types.parenR.updateContext = types.braceR.updateContext = function() {
            if (this.state.context.length === 1) {
              this.state.exprAllowed = true;
              return;
            }

            let out = this.state.context.pop();

            if (
              out === types$1.braceStatement &&
              this.curContext().token === "function"
            ) {
              out = this.state.context.pop();
            }

            this.state.exprAllowed = !out.isExpr;
          };

          types.name.updateContext = function(prevType) {
            let allowed = false;

            if (prevType !== types.dot) {
              if (
                (this.state.value === "of" && !this.state.exprAllowed) ||
                (this.state.value === "yield" && this.state.inGenerator)
              ) {
                allowed = true;
              }
            }

            this.state.exprAllowed = allowed;

            if (this.state.isIterator) {
              this.state.isIterator = false;
            }
          };

          types.braceL.updateContext = function(prevType) {
            this.state.context.push(
              this.braceIsBlock(prevType)
                ? types$1.braceStatement
                : types$1.braceExpression
            );
            this.state.exprAllowed = true;
          };

          types.dollarBraceL.updateContext = function() {
            this.state.context.push(types$1.templateQuasi);
            this.state.exprAllowed = true;
          };

          types.parenL.updateContext = function(prevType) {
            const statementParens =
              prevType === types._if ||
              prevType === types._for ||
              prevType === types._with ||
              prevType === types._while;
            this.state.context.push(
              statementParens ? types$1.parenStatement : types$1.parenExpression
            );
            this.state.exprAllowed = true;
          };

          types.incDec.updateContext = function() {};

          types._function.updateContext = types._class.updateContext = function(
            prevType
          ) {
            if (
              prevType.beforeExpr &&
              prevType !== types.semi &&
              prevType !== types._else &&
              !(
                prevType === types._return &&
                lineBreak.test(
                  this.input.slice(this.state.lastTokEnd, this.state.start)
                )
              ) &&
              !(
                (prevType === types.colon || prevType === types.braceL) &&
                this.curContext() === types$1.b_stat
              )
            ) {
              this.state.context.push(types$1.functionExpression);
            } else {
              this.state.context.push(types$1.functionStatement);
            }

            this.state.exprAllowed = false;
          };

          types.backQuote.updateContext = function() {
            if (this.curContext() === types$1.template) {
              this.state.context.pop();
            } else {
              this.state.context.push(types$1.template);
            }

            this.state.exprAllowed = false;
          };

          function makePredicate(words) {
            const wordsArr = words.split(" ");
            return function(str) {
              return wordsArr.indexOf(str) >= 0;
            };
          }

          const reservedWords = {
            "6": makePredicate("enum await"),
            strict: makePredicate(
              "implements interface let package private protected public static yield"
            ),
            strictBind: makePredicate("eval arguments"),
          };
          const isKeyword = makePredicate(
            "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super"
          );
          let nonASCIIidentifierStartChars =
            "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fef\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7b9\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
          let nonASCIIidentifierChars =
            "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
          const nonASCIIidentifierStart = new RegExp(
            "[" + nonASCIIidentifierStartChars + "]"
          );
          const nonASCIIidentifier = new RegExp(
            "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
          );
          nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
          const astralIdentifierStartCodes = [
            0,
            11,
            2,
            25,
            2,
            18,
            2,
            1,
            2,
            14,
            3,
            13,
            35,
            122,
            70,
            52,
            268,
            28,
            4,
            48,
            48,
            31,
            14,
            29,
            6,
            37,
            11,
            29,
            3,
            35,
            5,
            7,
            2,
            4,
            43,
            157,
            19,
            35,
            5,
            35,
            5,
            39,
            9,
            51,
            157,
            310,
            10,
            21,
            11,
            7,
            153,
            5,
            3,
            0,
            2,
            43,
            2,
            1,
            4,
            0,
            3,
            22,
            11,
            22,
            10,
            30,
            66,
            18,
            2,
            1,
            11,
            21,
            11,
            25,
            71,
            55,
            7,
            1,
            65,
            0,
            16,
            3,
            2,
            2,
            2,
            28,
            43,
            28,
            4,
            28,
            36,
            7,
            2,
            27,
            28,
            53,
            11,
            21,
            11,
            18,
            14,
            17,
            111,
            72,
            56,
            50,
            14,
            50,
            14,
            35,
            477,
            28,
            11,
            0,
            9,
            21,
            190,
            52,
            76,
            44,
            33,
            24,
            27,
            35,
            30,
            0,
            12,
            34,
            4,
            0,
            13,
            47,
            15,
            3,
            22,
            0,
            2,
            0,
            36,
            17,
            2,
            24,
            85,
            6,
            2,
            0,
            2,
            3,
            2,
            14,
            2,
            9,
            8,
            46,
            39,
            7,
            3,
            1,
            3,
            21,
            2,
            6,
            2,
            1,
            2,
            4,
            4,
            0,
            19,
            0,
            13,
            4,
            159,
            52,
            19,
            3,
            54,
            47,
            21,
            1,
            2,
            0,
            185,
            46,
            42,
            3,
            37,
            47,
            21,
            0,
            60,
            42,
            86,
            26,
            230,
            43,
            117,
            63,
            32,
            0,
            257,
            0,
            11,
            39,
            8,
            0,
            22,
            0,
            12,
            39,
            3,
            3,
            20,
            0,
            35,
            56,
            264,
            8,
            2,
            36,
            18,
            0,
            50,
            29,
            113,
            6,
            2,
            1,
            2,
            37,
            22,
            0,
            26,
            5,
            2,
            1,
            2,
            31,
            15,
            0,
            328,
            18,
            270,
            921,
            103,
            110,
            18,
            195,
            2749,
            1070,
            4050,
            582,
            8634,
            568,
            8,
            30,
            114,
            29,
            19,
            47,
            17,
            3,
            32,
            20,
            6,
            18,
            689,
            63,
            129,
            68,
            12,
            0,
            67,
            12,
            65,
            1,
            31,
            6129,
            15,
            754,
            9486,
            286,
            82,
            395,
            2309,
            106,
            6,
            12,
            4,
            8,
            8,
            9,
            5991,
            84,
            2,
            70,
            2,
            1,
            3,
            0,
            3,
            1,
            3,
            3,
            2,
            11,
            2,
            0,
            2,
            6,
            2,
            64,
            2,
            3,
            3,
            7,
            2,
            6,
            2,
            27,
            2,
            3,
            2,
            4,
            2,
            0,
            4,
            6,
            2,
            339,
            3,
            24,
            2,
            24,
            2,
            30,
            2,
            24,
            2,
            30,
            2,
            24,
            2,
            30,
            2,
            24,
            2,
            30,
            2,
            24,
            2,
            7,
            4149,
            196,
            60,
            67,
            1213,
            3,
            2,
            26,
            2,
            1,
            2,
            0,
            3,
            0,
            2,
            9,
            2,
            3,
            2,
            0,
            2,
            0,
            7,
            0,
            5,
            0,
            2,
            0,
            2,
            0,
            2,
            2,
            2,
            1,
            2,
            0,
            3,
            0,
            2,
            0,
            2,
            0,
            2,
            0,
            2,
            0,
            2,
            1,
            2,
            0,
            3,
            3,
            2,
            6,
            2,
            3,
            2,
            3,
            2,
            0,
            2,
            9,
            2,
            16,
            6,
            2,
            2,
            4,
            2,
            16,
            4421,
            42710,
            42,
            4148,
            12,
            221,
            3,
            5761,
            15,
            7472,
            3104,
            541,
          ];
          const astralIdentifierCodes = [
            509,
            0,
            227,
            0,
            150,
            4,
            294,
            9,
            1368,
            2,
            2,
            1,
            6,
            3,
            41,
            2,
            5,
            0,
            166,
            1,
            574,
            3,
            9,
            9,
            525,
            10,
            176,
            2,
            54,
            14,
            32,
            9,
            16,
            3,
            46,
            10,
            54,
            9,
            7,
            2,
            37,
            13,
            2,
            9,
            6,
            1,
            45,
            0,
            13,
            2,
            49,
            13,
            9,
            3,
            4,
            9,
            83,
            11,
            7,
            0,
            161,
            11,
            6,
            9,
            7,
            3,
            56,
            1,
            2,
            6,
            3,
            1,
            3,
            2,
            10,
            0,
            11,
            1,
            3,
            6,
            4,
            4,
            193,
            17,
            10,
            9,
            5,
            0,
            82,
            19,
            13,
            9,
            214,
            6,
            3,
            8,
            28,
            1,
            83,
            16,
            16,
            9,
            82,
            12,
            9,
            9,
            84,
            14,
            5,
            9,
            243,
            14,
            166,
            9,
            280,
            9,
            41,
            6,
            2,
            3,
            9,
            0,
            10,
            10,
            47,
            15,
            406,
            7,
            2,
            7,
            17,
            9,
            57,
            21,
            2,
            13,
            123,
            5,
            4,
            0,
            2,
            1,
            2,
            6,
            2,
            0,
            9,
            9,
            49,
            4,
            2,
            1,
            2,
            4,
            9,
            9,
            330,
            3,
            19306,
            9,
            135,
            4,
            60,
            6,
            26,
            9,
            1016,
            45,
            17,
            3,
            19723,
            1,
            5319,
            4,
            4,
            5,
            9,
            7,
            3,
            6,
            31,
            3,
            149,
            2,
            1418,
            49,
            513,
            54,
            5,
            49,
            9,
            0,
            15,
            0,
            23,
            4,
            2,
            14,
            1361,
            6,
            2,
            16,
            3,
            6,
            2,
            1,
            2,
            4,
            2214,
            6,
            110,
            6,
            6,
            9,
            792487,
            239,
          ];

          function isInAstralSet(code, set) {
            let pos = 0x10000;

            for (let i = 0; i < set.length; i += 2) {
              pos += set[i];
              if (pos > code) return false;
              pos += set[i + 1];
              if (pos >= code) return true;
            }

            return false;
          }

          function isIdentifierStart(code) {
            if (code < 65) return code === 36;
            if (code <= 90) return true;
            if (code < 97) return code === 95;
            if (code <= 122) return true;

            if (code <= 0xffff) {
              return (
                code >= 0xaa &&
                nonASCIIidentifierStart.test(String.fromCharCode(code))
              );
            }

            return isInAstralSet(code, astralIdentifierStartCodes);
          }

          function isIteratorStart(current, next) {
            return current === 64 && next === 64;
          }

          function isIdentifierChar(code) {
            if (code < 48) return code === 36;
            if (code < 58) return true;
            if (code < 65) return false;
            if (code <= 90) return true;
            if (code < 97) return code === 95;
            if (code <= 122) return true;

            if (code <= 0xffff) {
              return (
                code >= 0xaa &&
                nonASCIIidentifier.test(String.fromCharCode(code))
              );
            }

            return (
              isInAstralSet(code, astralIdentifierStartCodes) ||
              isInAstralSet(code, astralIdentifierCodes)
            );
          }

          const reservedTypes = [
            "any",
            "bool",
            "boolean",
            "empty",
            "false",
            "mixed",
            "null",
            "number",
            "static",
            "string",
            "true",
            "typeof",
            "void",
            "interface",
            "extends",
            "_",
          ];

          function isEsModuleType(bodyElement) {
            return (
              bodyElement.type === "DeclareExportAllDeclaration" ||
              (bodyElement.type === "DeclareExportDeclaration" &&
                (!bodyElement.declaration ||
                  (bodyElement.declaration.type !== "TypeAlias" &&
                    bodyElement.declaration.type !== "InterfaceDeclaration")))
            );
          }

          function hasTypeImportKind(node) {
            return node.importKind === "type" || node.importKind === "typeof";
          }

          function isMaybeDefaultImport(state) {
            return (
              (state.type === types.name || !!state.type.keyword) &&
              state.value !== "from"
            );
          }

          const exportSuggestions = {
            const: "declare export var",
            let: "declare export var",
            type: "export type",
            interface: "export interface",
          };

          function partition(list, test) {
            const list1 = [];
            const list2 = [];

            for (let i = 0; i < list.length; i++) {
              (test(list[i], i, list) ? list1 : list2).push(list[i]);
            }

            return [list1, list2];
          }

          const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;

          var flow = superClass =>
            class extends superClass {
              constructor(options, input) {
                super(options, input);
                this.flowPragma = undefined;
              }

              shouldParseTypes() {
                return (
                  this.getPluginOption("flow", "all") ||
                  this.flowPragma === "flow"
                );
              }

              addComment(comment) {
                if (this.flowPragma === undefined) {
                  const matches = FLOW_PRAGMA_REGEX.exec(comment.value);

                  if (!matches) {
                    this.flowPragma = null;
                  } else if (matches[1] === "flow") {
                    this.flowPragma = "flow";
                  } else if (matches[1] === "noflow") {
                    this.flowPragma = "noflow";
                  } else {
                    throw new Error("Unexpected flow pragma");
                  }
                }

                return super.addComment(comment);
              }

              flowParseTypeInitialiser(tok) {
                const oldInType = this.state.inType;
                this.state.inType = true;
                this.expect(tok || types.colon);
                const type = this.flowParseType();
                this.state.inType = oldInType;
                return type;
              }

              flowParsePredicate() {
                const node = this.startNode();
                const moduloLoc = this.state.startLoc;
                const moduloPos = this.state.start;
                this.expect(types.modulo);
                const checksLoc = this.state.startLoc;
                this.expectContextual("checks");

                if (
                  moduloLoc.line !== checksLoc.line ||
                  moduloLoc.column !== checksLoc.column - 1
                ) {
                  this.raise(
                    moduloPos,
                    "Spaces between ´%´ and ´checks´ are not allowed here."
                  );
                }

                if (this.eat(types.parenL)) {
                  node.value = this.parseExpression();
                  this.expect(types.parenR);
                  return this.finishNode(node, "DeclaredPredicate");
                } else {
                  return this.finishNode(node, "InferredPredicate");
                }
              }

              flowParseTypeAndPredicateInitialiser() {
                const oldInType = this.state.inType;
                this.state.inType = true;
                this.expect(types.colon);
                let type = null;
                let predicate = null;

                if (this.match(types.modulo)) {
                  this.state.inType = oldInType;
                  predicate = this.flowParsePredicate();
                } else {
                  type = this.flowParseType();
                  this.state.inType = oldInType;

                  if (this.match(types.modulo)) {
                    predicate = this.flowParsePredicate();
                  }
                }

                return [type, predicate];
              }

              flowParseDeclareClass(node) {
                this.next();
                this.flowParseInterfaceish(node, true);
                return this.finishNode(node, "DeclareClass");
              }

              flowParseDeclareFunction(node) {
                this.next();
                const id = (node.id = this.parseIdentifier());
                const typeNode = this.startNode();
                const typeContainer = this.startNode();

                if (this.isRelational("<")) {
                  typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
                } else {
                  typeNode.typeParameters = null;
                }

                this.expect(types.parenL);
                const tmp = this.flowParseFunctionTypeParams();
                typeNode.params = tmp.params;
                typeNode.rest = tmp.rest;
                this.expect(types.parenR);
                [
                  typeNode.returnType,
                  node.predicate,
                ] = this.flowParseTypeAndPredicateInitialiser();
                typeContainer.typeAnnotation = this.finishNode(
                  typeNode,
                  "FunctionTypeAnnotation"
                );
                id.typeAnnotation = this.finishNode(
                  typeContainer,
                  "TypeAnnotation"
                );
                this.finishNode(id, id.type);
                this.semicolon();
                return this.finishNode(node, "DeclareFunction");
              }

              flowParseDeclare(node, insideModule) {
                if (this.match(types._class)) {
                  return this.flowParseDeclareClass(node);
                } else if (this.match(types._function)) {
                  return this.flowParseDeclareFunction(node);
                } else if (this.match(types._var)) {
                  return this.flowParseDeclareVariable(node);
                } else if (this.isContextual("module")) {
                  if (this.lookahead().type === types.dot) {
                    return this.flowParseDeclareModuleExports(node);
                  } else {
                    if (insideModule) {
                      this.unexpected(
                        null,
                        "`declare module` cannot be used inside another `declare module`"
                      );
                    }

                    return this.flowParseDeclareModule(node);
                  }
                } else if (this.isContextual("type")) {
                  return this.flowParseDeclareTypeAlias(node);
                } else if (this.isContextual("opaque")) {
                  return this.flowParseDeclareOpaqueType(node);
                } else if (this.isContextual("interface")) {
                  return this.flowParseDeclareInterface(node);
                } else if (this.match(types._export)) {
                  return this.flowParseDeclareExportDeclaration(
                    node,
                    insideModule
                  );
                } else {
                  throw this.unexpected();
                }
              }

              flowParseDeclareVariable(node) {
                this.next();
                node.id = this.flowParseTypeAnnotatableIdentifier(true);
                this.semicolon();
                return this.finishNode(node, "DeclareVariable");
              }

              flowParseDeclareModule(node) {
                this.next();

                if (this.match(types.string)) {
                  node.id = this.parseExprAtom();
                } else {
                  node.id = this.parseIdentifier();
                }

                const bodyNode = (node.body = this.startNode());
                const body = (bodyNode.body = []);
                this.expect(types.braceL);

                while (!this.match(types.braceR)) {
                  let bodyNode = this.startNode();

                  if (this.match(types._import)) {
                    const lookahead = this.lookahead();

                    if (
                      lookahead.value !== "type" &&
                      lookahead.value !== "typeof"
                    ) {
                      this.unexpected(
                        null,
                        "Imports within a `declare module` body must always be `import type` or `import typeof`"
                      );
                    }

                    this.next();
                    this.parseImport(bodyNode);
                  } else {
                    this.expectContextual(
                      "declare",
                      "Only declares and type imports are allowed inside declare module"
                    );
                    bodyNode = this.flowParseDeclare(bodyNode, true);
                  }

                  body.push(bodyNode);
                }

                this.expect(types.braceR);
                this.finishNode(bodyNode, "BlockStatement");
                let kind = null;
                let hasModuleExport = false;
                const errorMessage =
                  "Found both `declare module.exports` and `declare export` in the same module. " +
                  "Modules can only have 1 since they are either an ES module or they are a CommonJS module";
                body.forEach(bodyElement => {
                  if (isEsModuleType(bodyElement)) {
                    if (kind === "CommonJS") {
                      this.unexpected(bodyElement.start, errorMessage);
                    }

                    kind = "ES";
                  } else if (bodyElement.type === "DeclareModuleExports") {
                    if (hasModuleExport) {
                      this.unexpected(
                        bodyElement.start,
                        "Duplicate `declare module.exports` statement"
                      );
                    }

                    if (kind === "ES")
                      this.unexpected(bodyElement.start, errorMessage);
                    kind = "CommonJS";
                    hasModuleExport = true;
                  }
                });
                node.kind = kind || "CommonJS";
                return this.finishNode(node, "DeclareModule");
              }

              flowParseDeclareExportDeclaration(node, insideModule) {
                this.expect(types._export);

                if (this.eat(types._default)) {
                  if (this.match(types._function) || this.match(types._class)) {
                    node.declaration = this.flowParseDeclare(this.startNode());
                  } else {
                    node.declaration = this.flowParseType();
                    this.semicolon();
                  }

                  node.default = true;
                  return this.finishNode(node, "DeclareExportDeclaration");
                } else {
                  if (
                    this.match(types._const) ||
                    this.match(types._let) ||
                    ((this.isContextual("type") ||
                      this.isContextual("interface")) &&
                      !insideModule)
                  ) {
                    const label = this.state.value;
                    const suggestion = exportSuggestions[label];
                    this.unexpected(
                      this.state.start,
                      `\`declare export ${label}\` is not supported. Use \`${suggestion}\` instead`
                    );
                  }

                  if (
                    this.match(types._var) ||
                    this.match(types._function) ||
                    this.match(types._class) ||
                    this.isContextual("opaque")
                  ) {
                    node.declaration = this.flowParseDeclare(this.startNode());
                    node.default = false;
                    return this.finishNode(node, "DeclareExportDeclaration");
                  } else if (
                    this.match(types.star) ||
                    this.match(types.braceL) ||
                    this.isContextual("interface") ||
                    this.isContextual("type") ||
                    this.isContextual("opaque")
                  ) {
                    node = this.parseExport(node);

                    if (node.type === "ExportNamedDeclaration") {
                      node.type = "ExportDeclaration";
                      node.default = false;
                      delete node.exportKind;
                    }

                    node.type = "Declare" + node.type;
                    return node;
                  }
                }

                throw this.unexpected();
              }

              flowParseDeclareModuleExports(node) {
                this.expectContextual("module");
                this.expect(types.dot);
                this.expectContextual("exports");
                node.typeAnnotation = this.flowParseTypeAnnotation();
                this.semicolon();
                return this.finishNode(node, "DeclareModuleExports");
              }

              flowParseDeclareTypeAlias(node) {
                this.next();
                this.flowParseTypeAlias(node);
                return this.finishNode(node, "DeclareTypeAlias");
              }

              flowParseDeclareOpaqueType(node) {
                this.next();
                this.flowParseOpaqueType(node, true);
                return this.finishNode(node, "DeclareOpaqueType");
              }

              flowParseDeclareInterface(node) {
                this.next();
                this.flowParseInterfaceish(node);
                return this.finishNode(node, "DeclareInterface");
              }

              flowParseInterfaceish(node, isClass = false) {
                node.id = this.flowParseRestrictedIdentifier(!isClass);

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                } else {
                  node.typeParameters = null;
                }

                node.extends = [];
                node.implements = [];
                node.mixins = [];

                if (this.eat(types._extends)) {
                  do {
                    node.extends.push(this.flowParseInterfaceExtends());
                  } while (!isClass && this.eat(types.comma));
                }

                if (this.isContextual("mixins")) {
                  this.next();

                  do {
                    node.mixins.push(this.flowParseInterfaceExtends());
                  } while (this.eat(types.comma));
                }

                if (this.isContextual("implements")) {
                  this.next();

                  do {
                    node.implements.push(this.flowParseInterfaceExtends());
                  } while (this.eat(types.comma));
                }

                node.body = this.flowParseObjectType({
                  allowStatic: isClass,
                  allowExact: false,
                  allowSpread: false,
                  allowProto: isClass,
                  allowInexact: false,
                });
              }

              flowParseInterfaceExtends() {
                const node = this.startNode();
                node.id = this.flowParseQualifiedTypeIdentifier();

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterInstantiation();
                } else {
                  node.typeParameters = null;
                }

                return this.finishNode(node, "InterfaceExtends");
              }

              flowParseInterface(node) {
                this.flowParseInterfaceish(node);
                return this.finishNode(node, "InterfaceDeclaration");
              }

              checkNotUnderscore(word) {
                if (word === "_") {
                  throw this.unexpected(
                    null,
                    "`_` is only allowed as a type argument to call or new"
                  );
                }
              }

              checkReservedType(word, startLoc) {
                if (reservedTypes.indexOf(word) > -1) {
                  this.raise(
                    startLoc,
                    `Cannot overwrite reserved type ${word}`
                  );
                }
              }

              flowParseRestrictedIdentifier(liberal) {
                this.checkReservedType(this.state.value, this.state.start);
                return this.parseIdentifier(liberal);
              }

              flowParseTypeAlias(node) {
                node.id = this.flowParseRestrictedIdentifier();

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                } else {
                  node.typeParameters = null;
                }

                node.right = this.flowParseTypeInitialiser(types.eq);
                this.semicolon();
                return this.finishNode(node, "TypeAlias");
              }

              flowParseOpaqueType(node, declare) {
                this.expectContextual("type");
                node.id = this.flowParseRestrictedIdentifier(true);

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                } else {
                  node.typeParameters = null;
                }

                node.supertype = null;

                if (this.match(types.colon)) {
                  node.supertype = this.flowParseTypeInitialiser(types.colon);
                }

                node.impltype = null;

                if (!declare) {
                  node.impltype = this.flowParseTypeInitialiser(types.eq);
                }

                this.semicolon();
                return this.finishNode(node, "OpaqueType");
              }

              flowParseTypeParameter(
                allowDefault = true,
                requireDefault = false
              ) {
                if (!allowDefault && requireDefault) {
                  throw new Error(
                    "Cannot disallow a default value (`allowDefault`) while also requiring it (`requireDefault`)."
                  );
                }

                const nodeStart = this.state.start;
                const node = this.startNode();
                const variance = this.flowParseVariance();
                const ident = this.flowParseTypeAnnotatableIdentifier();
                node.name = ident.name;
                node.variance = variance;
                node.bound = ident.typeAnnotation;

                if (this.match(types.eq)) {
                  if (allowDefault) {
                    this.eat(types.eq);
                    node.default = this.flowParseType();
                  } else {
                    this.unexpected();
                  }
                } else {
                  if (requireDefault) {
                    this.unexpected(
                      nodeStart,
                      "Type parameter declaration needs a default, since a preceding type parameter declaration has a default."
                    );
                  }
                }

                return this.finishNode(node, "TypeParameter");
              }

              flowParseTypeParameterDeclaration(allowDefault = true) {
                const oldInType = this.state.inType;
                const node = this.startNode();
                node.params = [];
                this.state.inType = true;

                if (this.isRelational("<") || this.match(types.jsxTagStart)) {
                  this.next();
                } else {
                  this.unexpected();
                }

                let defaultRequired = false;

                do {
                  const typeParameter = this.flowParseTypeParameter(
                    allowDefault,
                    defaultRequired
                  );
                  node.params.push(typeParameter);

                  if (typeParameter.default) {
                    defaultRequired = true;
                  }

                  if (!this.isRelational(">")) {
                    this.expect(types.comma);
                  }
                } while (!this.isRelational(">"));

                this.expectRelational(">");
                this.state.inType = oldInType;
                return this.finishNode(node, "TypeParameterDeclaration");
              }

              flowParseTypeParameterInstantiation() {
                const node = this.startNode();
                const oldInType = this.state.inType;
                node.params = [];
                this.state.inType = true;
                this.expectRelational("<");
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = false;

                while (!this.isRelational(">")) {
                  node.params.push(this.flowParseType());

                  if (!this.isRelational(">")) {
                    this.expect(types.comma);
                  }
                }

                this.state.noAnonFunctionType = oldNoAnonFunctionType;
                this.expectRelational(">");
                this.state.inType = oldInType;
                return this.finishNode(node, "TypeParameterInstantiation");
              }

              flowParseTypeParameterInstantiationCallOrNew() {
                const node = this.startNode();
                const oldInType = this.state.inType;
                node.params = [];
                this.state.inType = true;
                this.expectRelational("<");

                while (!this.isRelational(">")) {
                  node.params.push(this.flowParseTypeOrImplicitInstantiation());

                  if (!this.isRelational(">")) {
                    this.expect(types.comma);
                  }
                }

                this.expectRelational(">");
                this.state.inType = oldInType;
                return this.finishNode(node, "TypeParameterInstantiation");
              }

              flowParseInterfaceType() {
                const node = this.startNode();
                this.expectContextual("interface");
                node.extends = [];

                if (this.eat(types._extends)) {
                  do {
                    node.extends.push(this.flowParseInterfaceExtends());
                  } while (this.eat(types.comma));
                }

                node.body = this.flowParseObjectType({
                  allowStatic: false,
                  allowExact: false,
                  allowSpread: false,
                  allowProto: false,
                  allowInexact: false,
                });
                return this.finishNode(node, "InterfaceTypeAnnotation");
              }

              flowParseObjectPropertyKey() {
                return this.match(types.num) || this.match(types.string)
                  ? this.parseExprAtom()
                  : this.parseIdentifier(true);
              }

              flowParseObjectTypeIndexer(node, isStatic, variance) {
                node.static = isStatic;

                if (this.lookahead().type === types.colon) {
                  node.id = this.flowParseObjectPropertyKey();
                  node.key = this.flowParseTypeInitialiser();
                } else {
                  node.id = null;
                  node.key = this.flowParseType();
                }

                this.expect(types.bracketR);
                node.value = this.flowParseTypeInitialiser();
                node.variance = variance;
                return this.finishNode(node, "ObjectTypeIndexer");
              }

              flowParseObjectTypeInternalSlot(node, isStatic) {
                node.static = isStatic;
                node.id = this.flowParseObjectPropertyKey();
                this.expect(types.bracketR);
                this.expect(types.bracketR);

                if (this.isRelational("<") || this.match(types.parenL)) {
                  node.method = true;
                  node.optional = false;
                  node.value = this.flowParseObjectTypeMethodish(
                    this.startNodeAt(node.start, node.loc.start)
                  );
                } else {
                  node.method = false;

                  if (this.eat(types.question)) {
                    node.optional = true;
                  }

                  node.value = this.flowParseTypeInitialiser();
                }

                return this.finishNode(node, "ObjectTypeInternalSlot");
              }

              flowParseObjectTypeMethodish(node) {
                node.params = [];
                node.rest = null;
                node.typeParameters = null;

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration(
                    false
                  );
                }

                this.expect(types.parenL);

                while (
                  !this.match(types.parenR) &&
                  !this.match(types.ellipsis)
                ) {
                  node.params.push(this.flowParseFunctionTypeParam());

                  if (!this.match(types.parenR)) {
                    this.expect(types.comma);
                  }
                }

                if (this.eat(types.ellipsis)) {
                  node.rest = this.flowParseFunctionTypeParam();
                }

                this.expect(types.parenR);
                node.returnType = this.flowParseTypeInitialiser();
                return this.finishNode(node, "FunctionTypeAnnotation");
              }

              flowParseObjectTypeCallProperty(node, isStatic) {
                const valueNode = this.startNode();
                node.static = isStatic;
                node.value = this.flowParseObjectTypeMethodish(valueNode);
                return this.finishNode(node, "ObjectTypeCallProperty");
              }

              flowParseObjectType({
                allowStatic,
                allowExact,
                allowSpread,
                allowProto,
                allowInexact,
              }) {
                const oldInType = this.state.inType;
                this.state.inType = true;
                const nodeStart = this.startNode();
                nodeStart.callProperties = [];
                nodeStart.properties = [];
                nodeStart.indexers = [];
                nodeStart.internalSlots = [];
                let endDelim;
                let exact;
                let inexact = false;

                if (allowExact && this.match(types.braceBarL)) {
                  this.expect(types.braceBarL);
                  endDelim = types.braceBarR;
                  exact = true;
                } else {
                  this.expect(types.braceL);
                  endDelim = types.braceR;
                  exact = false;
                }

                nodeStart.exact = exact;

                while (!this.match(endDelim)) {
                  let isStatic = false;
                  let protoStart = null;
                  const node = this.startNode();

                  if (allowProto && this.isContextual("proto")) {
                    const lookahead = this.lookahead();

                    if (
                      lookahead.type !== types.colon &&
                      lookahead.type !== types.question
                    ) {
                      this.next();
                      protoStart = this.state.start;
                      allowStatic = false;
                    }
                  }

                  if (allowStatic && this.isContextual("static")) {
                    const lookahead = this.lookahead();

                    if (
                      lookahead.type !== types.colon &&
                      lookahead.type !== types.question
                    ) {
                      this.next();
                      isStatic = true;
                    }
                  }

                  const variance = this.flowParseVariance();

                  if (this.eat(types.bracketL)) {
                    if (protoStart != null) {
                      this.unexpected(protoStart);
                    }

                    if (this.eat(types.bracketL)) {
                      if (variance) {
                        this.unexpected(variance.start);
                      }

                      nodeStart.internalSlots.push(
                        this.flowParseObjectTypeInternalSlot(node, isStatic)
                      );
                    } else {
                      nodeStart.indexers.push(
                        this.flowParseObjectTypeIndexer(
                          node,
                          isStatic,
                          variance
                        )
                      );
                    }
                  } else if (
                    this.match(types.parenL) ||
                    this.isRelational("<")
                  ) {
                    if (protoStart != null) {
                      this.unexpected(protoStart);
                    }

                    if (variance) {
                      this.unexpected(variance.start);
                    }

                    nodeStart.callProperties.push(
                      this.flowParseObjectTypeCallProperty(node, isStatic)
                    );
                  } else {
                    let kind = "init";

                    if (this.isContextual("get") || this.isContextual("set")) {
                      const lookahead = this.lookahead();

                      if (
                        lookahead.type === types.name ||
                        lookahead.type === types.string ||
                        lookahead.type === types.num
                      ) {
                        kind = this.state.value;
                        this.next();
                      }
                    }

                    const propOrInexact = this.flowParseObjectTypeProperty(
                      node,
                      isStatic,
                      protoStart,
                      variance,
                      kind,
                      allowSpread,
                      allowInexact
                    );

                    if (propOrInexact === null) {
                      inexact = true;
                    } else {
                      nodeStart.properties.push(propOrInexact);
                    }
                  }

                  this.flowObjectTypeSemicolon();
                }

                this.expect(endDelim);

                if (allowSpread) {
                  nodeStart.inexact = inexact;
                }

                const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
                this.state.inType = oldInType;
                return out;
              }

              flowParseObjectTypeProperty(
                node,
                isStatic,
                protoStart,
                variance,
                kind,
                allowSpread,
                allowInexact
              ) {
                if (this.match(types.ellipsis)) {
                  if (!allowSpread) {
                    this.unexpected(
                      null,
                      "Spread operator cannot appear in class or interface definitions"
                    );
                  }

                  if (protoStart != null) {
                    this.unexpected(protoStart);
                  }

                  if (variance) {
                    this.unexpected(
                      variance.start,
                      "Spread properties cannot have variance"
                    );
                  }

                  this.expect(types.ellipsis);
                  const isInexactToken =
                    this.eat(types.comma) || this.eat(types.semi);

                  if (this.match(types.braceR)) {
                    if (allowInexact) return null;
                    this.unexpected(
                      null,
                      "Explicit inexact syntax is only allowed inside inexact objects"
                    );
                  }

                  if (this.match(types.braceBarR)) {
                    this.unexpected(
                      null,
                      "Explicit inexact syntax cannot appear inside an explicit exact object type"
                    );
                  }

                  if (isInexactToken) {
                    this.unexpected(
                      null,
                      "Explicit inexact syntax must appear at the end of an inexact object"
                    );
                  }

                  node.argument = this.flowParseType();
                  return this.finishNode(node, "ObjectTypeSpreadProperty");
                } else {
                  node.key = this.flowParseObjectPropertyKey();
                  node.static = isStatic;
                  node.proto = protoStart != null;
                  node.kind = kind;
                  let optional = false;

                  if (this.isRelational("<") || this.match(types.parenL)) {
                    node.method = true;

                    if (protoStart != null) {
                      this.unexpected(protoStart);
                    }

                    if (variance) {
                      this.unexpected(variance.start);
                    }

                    node.value = this.flowParseObjectTypeMethodish(
                      this.startNodeAt(node.start, node.loc.start)
                    );

                    if (kind === "get" || kind === "set") {
                      this.flowCheckGetterSetterParams(node);
                    }
                  } else {
                    if (kind !== "init") this.unexpected();
                    node.method = false;

                    if (this.eat(types.question)) {
                      optional = true;
                    }

                    node.value = this.flowParseTypeInitialiser();
                    node.variance = variance;
                  }

                  node.optional = optional;
                  return this.finishNode(node, "ObjectTypeProperty");
                }
              }

              flowCheckGetterSetterParams(property) {
                const paramCount = property.kind === "get" ? 0 : 1;
                const start = property.start;
                const length =
                  property.value.params.length + (property.value.rest ? 1 : 0);

                if (length !== paramCount) {
                  if (property.kind === "get") {
                    this.raise(
                      start,
                      "getter must not have any formal parameters"
                    );
                  } else {
                    this.raise(
                      start,
                      "setter must have exactly one formal parameter"
                    );
                  }
                }

                if (property.kind === "set" && property.value.rest) {
                  this.raise(
                    start,
                    "setter function argument must not be a rest parameter"
                  );
                }
              }

              flowObjectTypeSemicolon() {
                if (
                  !this.eat(types.semi) &&
                  !this.eat(types.comma) &&
                  !this.match(types.braceR) &&
                  !this.match(types.braceBarR)
                ) {
                  this.unexpected();
                }
              }

              flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
                startPos = startPos || this.state.start;
                startLoc = startLoc || this.state.startLoc;
                let node = id || this.parseIdentifier();

                while (this.eat(types.dot)) {
                  const node2 = this.startNodeAt(startPos, startLoc);
                  node2.qualification = node;
                  node2.id = this.parseIdentifier();
                  node = this.finishNode(node2, "QualifiedTypeIdentifier");
                }

                return node;
              }

              flowParseGenericType(startPos, startLoc, id) {
                const node = this.startNodeAt(startPos, startLoc);
                node.typeParameters = null;
                node.id = this.flowParseQualifiedTypeIdentifier(
                  startPos,
                  startLoc,
                  id
                );

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterInstantiation();
                }

                return this.finishNode(node, "GenericTypeAnnotation");
              }

              flowParseTypeofType() {
                const node = this.startNode();
                this.expect(types._typeof);
                node.argument = this.flowParsePrimaryType();
                return this.finishNode(node, "TypeofTypeAnnotation");
              }

              flowParseTupleType() {
                const node = this.startNode();
                node.types = [];
                this.expect(types.bracketL);

                while (
                  this.state.pos < this.input.length &&
                  !this.match(types.bracketR)
                ) {
                  node.types.push(this.flowParseType());
                  if (this.match(types.bracketR)) break;
                  this.expect(types.comma);
                }

                this.expect(types.bracketR);
                return this.finishNode(node, "TupleTypeAnnotation");
              }

              flowParseFunctionTypeParam() {
                let name = null;
                let optional = false;
                let typeAnnotation = null;
                const node = this.startNode();
                const lh = this.lookahead();

                if (lh.type === types.colon || lh.type === types.question) {
                  name = this.parseIdentifier();

                  if (this.eat(types.question)) {
                    optional = true;
                  }

                  typeAnnotation = this.flowParseTypeInitialiser();
                } else {
                  typeAnnotation = this.flowParseType();
                }

                node.name = name;
                node.optional = optional;
                node.typeAnnotation = typeAnnotation;
                return this.finishNode(node, "FunctionTypeParam");
              }

              reinterpretTypeAsFunctionTypeParam(type) {
                const node = this.startNodeAt(type.start, type.loc.start);
                node.name = null;
                node.optional = false;
                node.typeAnnotation = type;
                return this.finishNode(node, "FunctionTypeParam");
              }

              flowParseFunctionTypeParams(params = []) {
                let rest = null;

                while (
                  !this.match(types.parenR) &&
                  !this.match(types.ellipsis)
                ) {
                  params.push(this.flowParseFunctionTypeParam());

                  if (!this.match(types.parenR)) {
                    this.expect(types.comma);
                  }
                }

                if (this.eat(types.ellipsis)) {
                  rest = this.flowParseFunctionTypeParam();
                }

                return {
                  params,
                  rest,
                };
              }

              flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
                switch (id.name) {
                  case "any":
                    return this.finishNode(node, "AnyTypeAnnotation");

                  case "void":
                    return this.finishNode(node, "VoidTypeAnnotation");

                  case "bool":
                  case "boolean":
                    return this.finishNode(node, "BooleanTypeAnnotation");

                  case "mixed":
                    return this.finishNode(node, "MixedTypeAnnotation");

                  case "empty":
                    return this.finishNode(node, "EmptyTypeAnnotation");

                  case "number":
                    return this.finishNode(node, "NumberTypeAnnotation");

                  case "string":
                    return this.finishNode(node, "StringTypeAnnotation");

                  default:
                    this.checkNotUnderscore(id.name);
                    return this.flowParseGenericType(startPos, startLoc, id);
                }
              }

              flowParsePrimaryType() {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                const node = this.startNode();
                let tmp;
                let type;
                let isGroupedType = false;
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;

                switch (this.state.type) {
                  case types.name:
                    if (this.isContextual("interface")) {
                      return this.flowParseInterfaceType();
                    }

                    return this.flowIdentToTypeAnnotation(
                      startPos,
                      startLoc,
                      node,
                      this.parseIdentifier()
                    );

                  case types.braceL:
                    return this.flowParseObjectType({
                      allowStatic: false,
                      allowExact: false,
                      allowSpread: true,
                      allowProto: false,
                      allowInexact: true,
                    });

                  case types.braceBarL:
                    return this.flowParseObjectType({
                      allowStatic: false,
                      allowExact: true,
                      allowSpread: true,
                      allowProto: false,
                      allowInexact: false,
                    });

                  case types.bracketL:
                    return this.flowParseTupleType();

                  case types.relational:
                    if (this.state.value === "<") {
                      node.typeParameters = this.flowParseTypeParameterDeclaration(
                        false
                      );
                      this.expect(types.parenL);
                      tmp = this.flowParseFunctionTypeParams();
                      node.params = tmp.params;
                      node.rest = tmp.rest;
                      this.expect(types.parenR);
                      this.expect(types.arrow);
                      node.returnType = this.flowParseType();
                      return this.finishNode(node, "FunctionTypeAnnotation");
                    }

                    break;

                  case types.parenL:
                    this.next();

                    if (
                      !this.match(types.parenR) &&
                      !this.match(types.ellipsis)
                    ) {
                      if (this.match(types.name)) {
                        const token = this.lookahead().type;
                        isGroupedType =
                          token !== types.question && token !== types.colon;
                      } else {
                        isGroupedType = true;
                      }
                    }

                    if (isGroupedType) {
                      this.state.noAnonFunctionType = false;
                      type = this.flowParseType();
                      this.state.noAnonFunctionType = oldNoAnonFunctionType;

                      if (
                        this.state.noAnonFunctionType ||
                        !(
                          this.match(types.comma) ||
                          (this.match(types.parenR) &&
                            this.lookahead().type === types.arrow)
                        )
                      ) {
                        this.expect(types.parenR);
                        return type;
                      } else {
                        this.eat(types.comma);
                      }
                    }

                    if (type) {
                      tmp = this.flowParseFunctionTypeParams([
                        this.reinterpretTypeAsFunctionTypeParam(type),
                      ]);
                    } else {
                      tmp = this.flowParseFunctionTypeParams();
                    }

                    node.params = tmp.params;
                    node.rest = tmp.rest;
                    this.expect(types.parenR);
                    this.expect(types.arrow);
                    node.returnType = this.flowParseType();
                    node.typeParameters = null;
                    return this.finishNode(node, "FunctionTypeAnnotation");

                  case types.string:
                    return this.parseLiteral(
                      this.state.value,
                      "StringLiteralTypeAnnotation"
                    );

                  case types._true:
                  case types._false:
                    node.value = this.match(types._true);
                    this.next();
                    return this.finishNode(
                      node,
                      "BooleanLiteralTypeAnnotation"
                    );

                  case types.plusMin:
                    if (this.state.value === "-") {
                      this.next();

                      if (!this.match(types.num)) {
                        this.unexpected(
                          null,
                          `Unexpected token, expected "number"`
                        );
                      }

                      return this.parseLiteral(
                        -this.state.value,
                        "NumberLiteralTypeAnnotation",
                        node.start,
                        node.loc.start
                      );
                    }

                    this.unexpected();

                  case types.num:
                    return this.parseLiteral(
                      this.state.value,
                      "NumberLiteralTypeAnnotation"
                    );

                  case types._null:
                    this.next();
                    return this.finishNode(node, "NullLiteralTypeAnnotation");

                  case types._this:
                    this.next();
                    return this.finishNode(node, "ThisTypeAnnotation");

                  case types.star:
                    this.next();
                    return this.finishNode(node, "ExistsTypeAnnotation");

                  default:
                    if (this.state.type.keyword === "typeof") {
                      return this.flowParseTypeofType();
                    }
                }

                throw this.unexpected();
              }

              flowParsePostfixType() {
                const startPos = this.state.start,
                  startLoc = this.state.startLoc;
                let type = this.flowParsePrimaryType();

                while (
                  !this.canInsertSemicolon() &&
                  this.match(types.bracketL)
                ) {
                  const node = this.startNodeAt(startPos, startLoc);
                  node.elementType = type;
                  this.expect(types.bracketL);
                  this.expect(types.bracketR);
                  type = this.finishNode(node, "ArrayTypeAnnotation");
                }

                return type;
              }

              flowParsePrefixType() {
                const node = this.startNode();

                if (this.eat(types.question)) {
                  node.typeAnnotation = this.flowParsePrefixType();
                  return this.finishNode(node, "NullableTypeAnnotation");
                } else {
                  return this.flowParsePostfixType();
                }
              }

              flowParseAnonFunctionWithoutParens() {
                const param = this.flowParsePrefixType();

                if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {
                  const node = this.startNodeAt(param.start, param.loc.start);
                  node.params = [
                    this.reinterpretTypeAsFunctionTypeParam(param),
                  ];
                  node.rest = null;
                  node.returnType = this.flowParseType();
                  node.typeParameters = null;
                  return this.finishNode(node, "FunctionTypeAnnotation");
                }

                return param;
              }

              flowParseIntersectionType() {
                const node = this.startNode();
                this.eat(types.bitwiseAND);
                const type = this.flowParseAnonFunctionWithoutParens();
                node.types = [type];

                while (this.eat(types.bitwiseAND)) {
                  node.types.push(this.flowParseAnonFunctionWithoutParens());
                }

                return node.types.length === 1
                  ? type
                  : this.finishNode(node, "IntersectionTypeAnnotation");
              }

              flowParseUnionType() {
                const node = this.startNode();
                this.eat(types.bitwiseOR);
                const type = this.flowParseIntersectionType();
                node.types = [type];

                while (this.eat(types.bitwiseOR)) {
                  node.types.push(this.flowParseIntersectionType());
                }

                return node.types.length === 1
                  ? type
                  : this.finishNode(node, "UnionTypeAnnotation");
              }

              flowParseType() {
                const oldInType = this.state.inType;
                this.state.inType = true;
                const type = this.flowParseUnionType();
                this.state.inType = oldInType;
                this.state.exprAllowed =
                  this.state.exprAllowed || this.state.noAnonFunctionType;
                return type;
              }

              flowParseTypeOrImplicitInstantiation() {
                if (
                  this.state.type === types.name &&
                  this.state.value === "_"
                ) {
                  const startPos = this.state.start;
                  const startLoc = this.state.startLoc;
                  const node = this.parseIdentifier();
                  return this.flowParseGenericType(startPos, startLoc, node);
                } else {
                  return this.flowParseType();
                }
              }

              flowParseTypeAnnotation() {
                const node = this.startNode();
                node.typeAnnotation = this.flowParseTypeInitialiser();
                return this.finishNode(node, "TypeAnnotation");
              }

              flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
                const ident = allowPrimitiveOverride
                  ? this.parseIdentifier()
                  : this.flowParseRestrictedIdentifier();

                if (this.match(types.colon)) {
                  ident.typeAnnotation = this.flowParseTypeAnnotation();
                  this.finishNode(ident, ident.type);
                }

                return ident;
              }

              typeCastToParameter(node) {
                node.expression.typeAnnotation = node.typeAnnotation;
                return this.finishNodeAt(
                  node.expression,
                  node.expression.type,
                  node.typeAnnotation.end,
                  node.typeAnnotation.loc.end
                );
              }

              flowParseVariance() {
                let variance = null;

                if (this.match(types.plusMin)) {
                  variance = this.startNode();

                  if (this.state.value === "+") {
                    variance.kind = "plus";
                  } else {
                    variance.kind = "minus";
                  }

                  this.next();
                  this.finishNode(variance, "Variance");
                }

                return variance;
              }

              parseFunctionBody(node, allowExpressionBody) {
                if (allowExpressionBody) {
                  return this.forwardNoArrowParamsConversionAt(node, () =>
                    super.parseFunctionBody(node, true)
                  );
                }

                return super.parseFunctionBody(node, false);
              }

              parseFunctionBodyAndFinish(node, type, allowExpressionBody) {
                if (!allowExpressionBody && this.match(types.colon)) {
                  const typeNode = this.startNode();
                  [
                    typeNode.typeAnnotation,
                    node.predicate,
                  ] = this.flowParseTypeAndPredicateInitialiser();
                  node.returnType = typeNode.typeAnnotation
                    ? this.finishNode(typeNode, "TypeAnnotation")
                    : null;
                }

                super.parseFunctionBodyAndFinish(
                  node,
                  type,
                  allowExpressionBody
                );
              }

              parseStatement(declaration, topLevel) {
                if (
                  this.state.strict &&
                  this.match(types.name) &&
                  this.state.value === "interface"
                ) {
                  const node = this.startNode();
                  this.next();
                  return this.flowParseInterface(node);
                } else {
                  const stmt = super.parseStatement(declaration, topLevel);

                  if (
                    this.flowPragma === undefined &&
                    !this.isValidDirective(stmt)
                  ) {
                    this.flowPragma = null;
                  }

                  return stmt;
                }
              }

              parseExpressionStatement(node, expr) {
                if (expr.type === "Identifier") {
                  if (expr.name === "declare") {
                    if (
                      this.match(types._class) ||
                      this.match(types.name) ||
                      this.match(types._function) ||
                      this.match(types._var) ||
                      this.match(types._export)
                    ) {
                      return this.flowParseDeclare(node);
                    }
                  } else if (this.match(types.name)) {
                    if (expr.name === "interface") {
                      return this.flowParseInterface(node);
                    } else if (expr.name === "type") {
                      return this.flowParseTypeAlias(node);
                    } else if (expr.name === "opaque") {
                      return this.flowParseOpaqueType(node, false);
                    }
                  }
                }

                return super.parseExpressionStatement(node, expr);
              }

              shouldParseExportDeclaration() {
                return (
                  this.isContextual("type") ||
                  this.isContextual("interface") ||
                  this.isContextual("opaque") ||
                  super.shouldParseExportDeclaration()
                );
              }

              isExportDefaultSpecifier() {
                if (
                  this.match(types.name) &&
                  (this.state.value === "type" ||
                    this.state.value === "interface" ||
                    this.state.value == "opaque")
                ) {
                  return false;
                }

                return super.isExportDefaultSpecifier();
              }

              parseConditional(
                expr,
                noIn,
                startPos,
                startLoc,
                refNeedsArrowPos
              ) {
                if (!this.match(types.question)) return expr;

                if (refNeedsArrowPos) {
                  const state = this.state.clone();

                  try {
                    return super.parseConditional(
                      expr,
                      noIn,
                      startPos,
                      startLoc
                    );
                  } catch (err) {
                    if (err instanceof SyntaxError) {
                      this.state = state;
                      refNeedsArrowPos.start = err.pos || this.state.start;
                      return expr;
                    } else {
                      throw err;
                    }
                  }
                }

                this.expect(types.question);
                const state = this.state.clone();
                const originalNoArrowAt = this.state.noArrowAt;
                const node = this.startNodeAt(startPos, startLoc);
                let {
                  consequent,
                  failed,
                } = this.tryParseConditionalConsequent();
                let [valid, invalid] = this.getArrowLikeExpressions(consequent);

                if (failed || invalid.length > 0) {
                  const noArrowAt = [...originalNoArrowAt];

                  if (invalid.length > 0) {
                    this.state = state;
                    this.state.noArrowAt = noArrowAt;

                    for (let i = 0; i < invalid.length; i++) {
                      noArrowAt.push(invalid[i].start);
                    }

                    ({
                      consequent,
                      failed,
                    } = this.tryParseConditionalConsequent());
                    [valid, invalid] = this.getArrowLikeExpressions(consequent);
                  }

                  if (failed && valid.length > 1) {
                    this.raise(
                      state.start,
                      "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate."
                    );
                  }

                  if (failed && valid.length === 1) {
                    this.state = state;
                    this.state.noArrowAt = noArrowAt.concat(valid[0].start);
                    ({
                      consequent,
                      failed,
                    } = this.tryParseConditionalConsequent());
                  }

                  this.getArrowLikeExpressions(consequent, true);
                }

                this.state.noArrowAt = originalNoArrowAt;
                this.expect(types.colon);
                node.test = expr;
                node.consequent = consequent;
                node.alternate = this.forwardNoArrowParamsConversionAt(
                  node,
                  () =>
                    this.parseMaybeAssign(noIn, undefined, undefined, undefined)
                );
                return this.finishNode(node, "ConditionalExpression");
              }

              tryParseConditionalConsequent() {
                this.state.noArrowParamsConversionAt.push(this.state.start);
                const consequent = this.parseMaybeAssign();
                const failed = !this.match(types.colon);
                this.state.noArrowParamsConversionAt.pop();
                return {
                  consequent,
                  failed,
                };
              }

              getArrowLikeExpressions(node, disallowInvalid) {
                const stack = [node];
                const arrows = [];

                while (stack.length !== 0) {
                  const node = stack.pop();

                  if (node.type === "ArrowFunctionExpression") {
                    if (node.typeParameters || !node.returnType) {
                      this.toAssignableList(
                        node.params,
                        true,
                        "arrow function parameters"
                      );
                      super.checkFunctionNameAndParams(node, true);
                    } else {
                      arrows.push(node);
                    }

                    stack.push(node.body);
                  } else if (node.type === "ConditionalExpression") {
                    stack.push(node.consequent);
                    stack.push(node.alternate);
                  }
                }

                if (disallowInvalid) {
                  for (let i = 0; i < arrows.length; i++) {
                    this.toAssignableList(
                      node.params,
                      true,
                      "arrow function parameters"
                    );
                  }

                  return [arrows, []];
                }

                return partition(arrows, node => {
                  try {
                    this.toAssignableList(
                      node.params,
                      true,
                      "arrow function parameters"
                    );
                    return true;
                  } catch (err) {
                    return false;
                  }
                });
              }

              forwardNoArrowParamsConversionAt(node, parse) {
                let result;

                if (
                  this.state.noArrowParamsConversionAt.indexOf(node.start) !==
                  -1
                ) {
                  this.state.noArrowParamsConversionAt.push(this.state.start);
                  result = parse();
                  this.state.noArrowParamsConversionAt.pop();
                } else {
                  result = parse();
                }

                return result;
              }

              parseParenItem(node, startPos, startLoc) {
                node = super.parseParenItem(node, startPos, startLoc);

                if (this.eat(types.question)) {
                  node.optional = true;
                }

                if (this.match(types.colon)) {
                  const typeCastNode = this.startNodeAt(startPos, startLoc);
                  typeCastNode.expression = node;
                  typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
                  return this.finishNode(typeCastNode, "TypeCastExpression");
                }

                return node;
              }

              assertModuleNodeAllowed(node) {
                if (
                  (node.type === "ImportDeclaration" &&
                    (node.importKind === "type" ||
                      node.importKind === "typeof")) ||
                  (node.type === "ExportNamedDeclaration" &&
                    node.exportKind === "type") ||
                  (node.type === "ExportAllDeclaration" &&
                    node.exportKind === "type")
                ) {
                  return;
                }

                super.assertModuleNodeAllowed(node);
              }

              parseExport(node) {
                node = super.parseExport(node);

                if (
                  node.type === "ExportNamedDeclaration" ||
                  node.type === "ExportAllDeclaration"
                ) {
                  node.exportKind = node.exportKind || "value";
                }

                return node;
              }

              parseExportDeclaration(node) {
                if (this.isContextual("type")) {
                  node.exportKind = "type";
                  const declarationNode = this.startNode();
                  this.next();

                  if (this.match(types.braceL)) {
                    node.specifiers = this.parseExportSpecifiers();
                    this.parseExportFrom(node);
                    return null;
                  } else {
                    return this.flowParseTypeAlias(declarationNode);
                  }
                } else if (this.isContextual("opaque")) {
                  node.exportKind = "type";
                  const declarationNode = this.startNode();
                  this.next();
                  return this.flowParseOpaqueType(declarationNode, false);
                } else if (this.isContextual("interface")) {
                  node.exportKind = "type";
                  const declarationNode = this.startNode();
                  this.next();
                  return this.flowParseInterface(declarationNode);
                } else {
                  return super.parseExportDeclaration(node);
                }
              }

              shouldParseExportStar() {
                return (
                  super.shouldParseExportStar() ||
                  (this.isContextual("type") &&
                    this.lookahead().type === types.star)
                );
              }

              parseExportStar(node) {
                if (this.eatContextual("type")) {
                  node.exportKind = "type";
                }

                return super.parseExportStar(node);
              }

              parseExportNamespace(node) {
                if (node.exportKind === "type") {
                  this.unexpected();
                }

                return super.parseExportNamespace(node);
              }

              parseClassId(node, isStatement, optionalId) {
                super.parseClassId(node, isStatement, optionalId);

                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                }
              }

              isKeyword(name) {
                if (this.state.inType && name === "void") {
                  return false;
                } else {
                  return super.isKeyword(name);
                }
              }

              readToken(code) {
                const next = this.input.charCodeAt(this.state.pos + 1);

                if (this.state.inType && (code === 62 || code === 60)) {
                  return this.finishOp(types.relational, 1);
                } else if (
                  !this.options.jisonVariables &&
                  isIteratorStart(code, next)
                ) {
                  this.state.isIterator = true;
                  return super.readWord();
                } else {
                  return super.readToken(code);
                }
              }

              toAssignable(node, isBinding, contextDescription) {
                if (node.type === "TypeCastExpression") {
                  return super.toAssignable(
                    this.typeCastToParameter(node),
                    isBinding,
                    contextDescription
                  );
                } else {
                  return super.toAssignable(
                    node,
                    isBinding,
                    contextDescription
                  );
                }
              }

              toAssignableList(exprList, isBinding, contextDescription) {
                for (let i = 0; i < exprList.length; i++) {
                  const expr = exprList[i];

                  if (expr && expr.type === "TypeCastExpression") {
                    exprList[i] = this.typeCastToParameter(expr);
                  }
                }

                return super.toAssignableList(
                  exprList,
                  isBinding,
                  contextDescription
                );
              }

              toReferencedList(exprList, isParenthesizedExpr) {
                for (let i = 0; i < exprList.length; i++) {
                  const expr = exprList[i];

                  if (
                    expr &&
                    expr.type === "TypeCastExpression" &&
                    (!expr.extra || !expr.extra.parenthesized) &&
                    (exprList.length > 1 || !isParenthesizedExpr)
                  ) {
                    this.raise(
                      expr.typeAnnotation.start,
                      "The type cast expression is expected to be wrapped with parenthesis"
                    );
                  }
                }

                return exprList;
              }

              checkLVal(expr, isBinding, checkClashes, contextDescription) {
                if (expr.type !== "TypeCastExpression") {
                  return super.checkLVal(
                    expr,
                    isBinding,
                    checkClashes,
                    contextDescription
                  );
                }
              }

              parseClassProperty(node) {
                if (this.match(types.colon)) {
                  node.typeAnnotation = this.flowParseTypeAnnotation();
                }

                return super.parseClassProperty(node);
              }

              parseClassPrivateProperty(node) {
                if (this.match(types.colon)) {
                  node.typeAnnotation = this.flowParseTypeAnnotation();
                }

                return super.parseClassPrivateProperty(node);
              }

              isClassMethod() {
                return this.isRelational("<") || super.isClassMethod();
              }

              isClassProperty() {
                return this.match(types.colon) || super.isClassProperty();
              }

              isNonstaticConstructor(method) {
                return (
                  !this.match(types.colon) &&
                  super.isNonstaticConstructor(method)
                );
              }

              pushClassMethod(
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor
              ) {
                if (method.variance) {
                  this.unexpected(method.variance.start);
                }

                delete method.variance;

                if (this.isRelational("<")) {
                  method.typeParameters = this.flowParseTypeParameterDeclaration(
                    false
                  );
                }

                super.pushClassMethod(
                  classBody,
                  method,
                  isGenerator,
                  isAsync,
                  isConstructor
                );
              }

              pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
                if (method.variance) {
                  this.unexpected(method.variance.start);
                }

                delete method.variance;

                if (this.isRelational("<")) {
                  method.typeParameters = this.flowParseTypeParameterDeclaration();
                }

                super.pushClassPrivateMethod(
                  classBody,
                  method,
                  isGenerator,
                  isAsync
                );
              }

              parseClassSuper(node) {
                super.parseClassSuper(node);

                if (node.superClass && this.isRelational("<")) {
                  node.superTypeParameters = this.flowParseTypeParameterInstantiation();
                }

                if (this.isContextual("implements")) {
                  this.next();
                  const implemented = (node.implements = []);

                  do {
                    const node = this.startNode();
                    node.id = this.flowParseRestrictedIdentifier(true);

                    if (this.isRelational("<")) {
                      node.typeParameters = this.flowParseTypeParameterInstantiation();
                    } else {
                      node.typeParameters = null;
                    }

                    implemented.push(this.finishNode(node, "ClassImplements"));
                  } while (this.eat(types.comma));
                }
              }

              parsePropertyName(node) {
                const variance = this.flowParseVariance();
                const key = super.parsePropertyName(node);
                node.variance = variance;
                return key;
              }

              parseObjPropValue(
                prop,
                startPos,
                startLoc,
                isGenerator,
                isAsync,
                isPattern,
                refShorthandDefaultPos,
                containsEsc
              ) {
                if (prop.variance) {
                  this.unexpected(prop.variance.start);
                }

                delete prop.variance;
                let typeParameters;

                if (this.isRelational("<")) {
                  typeParameters = this.flowParseTypeParameterDeclaration(
                    false
                  );
                  if (!this.match(types.parenL)) this.unexpected();
                }

                super.parseObjPropValue(
                  prop,
                  startPos,
                  startLoc,
                  isGenerator,
                  isAsync,
                  isPattern,
                  refShorthandDefaultPos,
                  containsEsc
                );

                if (typeParameters) {
                  (prop.value || prop).typeParameters = typeParameters;
                }
              }

              parseAssignableListItemTypes(param) {
                if (this.eat(types.question)) {
                  if (param.type !== "Identifier") {
                    throw this.raise(
                      param.start,
                      "A binding pattern parameter cannot be optional in an implementation signature."
                    );
                  }

                  param.optional = true;
                }

                if (this.match(types.colon)) {
                  param.typeAnnotation = this.flowParseTypeAnnotation();
                }

                this.finishNode(param, param.type);
                return param;
              }

              parseMaybeDefault(startPos, startLoc, left) {
                const node = super.parseMaybeDefault(startPos, startLoc, left);

                if (
                  node.type === "AssignmentPattern" &&
                  node.typeAnnotation &&
                  node.right.start < node.typeAnnotation.start
                ) {
                  this.raise(
                    node.typeAnnotation.start,
                    "Type annotations must come before default assignments, " +
                      "e.g. instead of `age = 25: number` use `age: number = 25`"
                  );
                }

                return node;
              }

              shouldParseDefaultImport(node) {
                if (!hasTypeImportKind(node)) {
                  return super.shouldParseDefaultImport(node);
                }

                return isMaybeDefaultImport(this.state);
              }

              parseImportSpecifierLocal(
                node,
                specifier,
                type,
                contextDescription
              ) {
                specifier.local = hasTypeImportKind(node)
                  ? this.flowParseRestrictedIdentifier(true)
                  : this.parseIdentifier();
                this.checkLVal(
                  specifier.local,
                  true,
                  undefined,
                  contextDescription
                );
                node.specifiers.push(this.finishNode(specifier, type));
              }

              parseImportSpecifiers(node) {
                node.importKind = "value";
                let kind = null;

                if (this.match(types._typeof)) {
                  kind = "typeof";
                } else if (this.isContextual("type")) {
                  kind = "type";
                }

                if (kind) {
                  const lh = this.lookahead();

                  if (kind === "type" && lh.type === types.star) {
                    this.unexpected(lh.start);
                  }

                  if (
                    isMaybeDefaultImport(lh) ||
                    lh.type === types.braceL ||
                    lh.type === types.star
                  ) {
                    this.next();
                    node.importKind = kind;
                  }
                }

                super.parseImportSpecifiers(node);
              }

              parseImportSpecifier(node) {
                const specifier = this.startNode();
                const firstIdentLoc = this.state.start;
                const firstIdent = this.parseIdentifier(true);
                let specifierTypeKind = null;

                if (firstIdent.name === "type") {
                  specifierTypeKind = "type";
                } else if (firstIdent.name === "typeof") {
                  specifierTypeKind = "typeof";
                }

                let isBinding = false;

                if (
                  this.isContextual("as") &&
                  !this.isLookaheadContextual("as")
                ) {
                  const as_ident = this.parseIdentifier(true);

                  if (
                    specifierTypeKind !== null &&
                    !this.match(types.name) &&
                    !this.state.type.keyword
                  ) {
                    specifier.imported = as_ident;
                    specifier.importKind = specifierTypeKind;
                    specifier.local = as_ident.__clone();
                  } else {
                    specifier.imported = firstIdent;
                    specifier.importKind = null;
                    specifier.local = this.parseIdentifier();
                  }
                } else if (
                  specifierTypeKind !== null &&
                  (this.match(types.name) || this.state.type.keyword)
                ) {
                  specifier.imported = this.parseIdentifier(true);
                  specifier.importKind = specifierTypeKind;

                  if (this.eatContextual("as")) {
                    specifier.local = this.parseIdentifier();
                  } else {
                    isBinding = true;
                    specifier.local = specifier.imported.__clone();
                  }
                } else {
                  isBinding = true;
                  specifier.imported = firstIdent;
                  specifier.importKind = null;
                  specifier.local = specifier.imported.__clone();
                }

                const nodeIsTypeImport = hasTypeImportKind(node);
                const specifierIsTypeImport = hasTypeImportKind(specifier);

                if (nodeIsTypeImport && specifierIsTypeImport) {
                  this.raise(
                    firstIdentLoc,
                    "The `type` and `typeof` keywords on named imports can only be used on regular " +
                      "`import` statements. It cannot be used with `import type` or `import typeof` statements"
                  );
                }

                if (nodeIsTypeImport || specifierIsTypeImport) {
                  this.checkReservedType(
                    specifier.local.name,
                    specifier.local.start
                  );
                }

                if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
                  this.checkReservedWord(
                    specifier.local.name,
                    specifier.start,
                    true,
                    true
                  );
                }

                this.checkLVal(
                  specifier.local,
                  true,
                  undefined,
                  "import specifier"
                );
                node.specifiers.push(
                  this.finishNode(specifier, "ImportSpecifier")
                );
              }

              parseFunctionParams(node) {
                const kind = node.kind;

                if (
                  kind !== "get" &&
                  kind !== "set" &&
                  this.isRelational("<")
                ) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration(
                    false
                  );
                }

                super.parseFunctionParams(node);
              }

              parseVarHead(decl) {
                super.parseVarHead(decl);

                if (this.match(types.colon)) {
                  decl.id.typeAnnotation = this.flowParseTypeAnnotation();
                  this.finishNode(decl.id, decl.id.type);
                }
              }

              parseAsyncArrowFromCallExpression(node, call) {
                if (this.match(types.colon)) {
                  const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                  this.state.noAnonFunctionType = true;
                  node.returnType = this.flowParseTypeAnnotation();
                  this.state.noAnonFunctionType = oldNoAnonFunctionType;
                }

                return super.parseAsyncArrowFromCallExpression(node, call);
              }

              shouldParseAsyncArrow() {
                return this.match(types.colon) || super.shouldParseAsyncArrow();
              }

              parseMaybeAssign(
                noIn,
                refShorthandDefaultPos,
                afterLeftParse,
                refNeedsArrowPos
              ) {
                let jsxError = null;

                if (
                  this.hasPlugin("jsx") &&
                  (this.match(types.jsxTagStart) || this.isRelational("<"))
                ) {
                  const state = this.state.clone();

                  try {
                    return super.parseMaybeAssign(
                      noIn,
                      refShorthandDefaultPos,
                      afterLeftParse,
                      refNeedsArrowPos
                    );
                  } catch (err) {
                    if (err instanceof SyntaxError) {
                      this.state = state;
                      const cLength = this.state.context.length;

                      if (this.state.context[cLength - 1] === types$1.j_oTag) {
                        this.state.context.length -= 2;
                      }

                      jsxError = err;
                    } else {
                      throw err;
                    }
                  }
                }

                if (jsxError != null || this.isRelational("<")) {
                  let arrowExpression;
                  let typeParameters;

                  try {
                    typeParameters = this.flowParseTypeParameterDeclaration();
                    arrowExpression = this.forwardNoArrowParamsConversionAt(
                      typeParameters,
                      () =>
                        super.parseMaybeAssign(
                          noIn,
                          refShorthandDefaultPos,
                          afterLeftParse,
                          refNeedsArrowPos
                        )
                    );
                    arrowExpression.typeParameters = typeParameters;
                    this.resetStartLocationFromNode(
                      arrowExpression,
                      typeParameters
                    );
                  } catch (err) {
                    throw jsxError || err;
                  }

                  if (arrowExpression.type === "ArrowFunctionExpression") {
                    return arrowExpression;
                  } else if (jsxError != null) {
                    throw jsxError;
                  } else {
                    this.raise(
                      typeParameters.start,
                      "Expected an arrow function after this type parameter declaration"
                    );
                  }
                }

                return super.parseMaybeAssign(
                  noIn,
                  refShorthandDefaultPos,
                  afterLeftParse,
                  refNeedsArrowPos
                );
              }

              parseArrow(node) {
                if (this.match(types.colon)) {
                  const state = this.state.clone();

                  try {
                    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                    this.state.noAnonFunctionType = true;
                    const typeNode = this.startNode();
                    [
                      typeNode.typeAnnotation,
                      node.predicate,
                    ] = this.flowParseTypeAndPredicateInitialiser();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;
                    if (this.canInsertSemicolon()) this.unexpected();
                    if (!this.match(types.arrow)) this.unexpected();
                    node.returnType = typeNode.typeAnnotation
                      ? this.finishNode(typeNode, "TypeAnnotation")
                      : null;
                  } catch (err) {
                    if (err instanceof SyntaxError) {
                      this.state = state;
                    } else {
                      throw err;
                    }
                  }
                }

                return super.parseArrow(node);
              }

              shouldParseArrow() {
                return this.match(types.colon) || super.shouldParseArrow();
              }

              setArrowFunctionParameters(node, params) {
                if (
                  this.state.noArrowParamsConversionAt.indexOf(node.start) !==
                  -1
                ) {
                  node.params = params;
                } else {
                  super.setArrowFunctionParameters(node, params);
                }
              }

              checkFunctionNameAndParams(node, isArrowFunction) {
                if (
                  isArrowFunction &&
                  this.state.noArrowParamsConversionAt.indexOf(node.start) !==
                    -1
                ) {
                  return;
                }

                return super.checkFunctionNameAndParams(node, isArrowFunction);
              }

              parseParenAndDistinguishExpression(canBeArrow) {
                return super.parseParenAndDistinguishExpression(
                  canBeArrow &&
                    this.state.noArrowAt.indexOf(this.state.start) === -1
                );
              }

              parseSubscripts(base, startPos, startLoc, noCalls) {
                if (
                  base.type === "Identifier" &&
                  base.name === "async" &&
                  this.state.noArrowAt.indexOf(startPos) !== -1
                ) {
                  this.next();
                  const node = this.startNodeAt(startPos, startLoc);
                  node.callee = base;
                  node.arguments = this.parseCallExpressionArguments(
                    types.parenR,
                    false
                  );
                  base = this.finishNode(node, "CallExpression");
                } else if (
                  base.type === "Identifier" &&
                  base.name === "async" &&
                  this.isRelational("<")
                ) {
                  const state = this.state.clone();
                  let error;

                  try {
                    const node = this.parseAsyncArrowWithTypeParameters(
                      startPos,
                      startLoc
                    );
                    if (node) return node;
                  } catch (e) {
                    error = e;
                  }

                  this.state = state;

                  try {
                    return super.parseSubscripts(
                      base,
                      startPos,
                      startLoc,
                      noCalls
                    );
                  } catch (e) {
                    throw error || e;
                  }
                }

                return super.parseSubscripts(base, startPos, startLoc, noCalls);
              }

              parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                subscriptState
              ) {
                if (
                  this.match(types.questionDot) &&
                  this.isLookaheadRelational("<")
                ) {
                  this.expectPlugin("optionalChaining");
                  subscriptState.optionalChainMember = true;

                  if (noCalls) {
                    subscriptState.stop = true;
                    return base;
                  }

                  this.next();
                  const node = this.startNodeAt(startPos, startLoc);
                  node.callee = base;
                  node.typeArguments = this.flowParseTypeParameterInstantiation();
                  this.expect(types.parenL);
                  node.arguments = this.parseCallExpressionArguments(
                    types.parenR,
                    false
                  );
                  node.optional = true;
                  return this.finishNode(node, "OptionalCallExpression");
                } else if (
                  !noCalls &&
                  this.shouldParseTypes() &&
                  this.isRelational("<")
                ) {
                  const node = this.startNodeAt(startPos, startLoc);
                  node.callee = base;
                  const state = this.state.clone();

                  try {
                    node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
                    this.expect(types.parenL);
                    node.arguments = this.parseCallExpressionArguments(
                      types.parenR,
                      false
                    );

                    if (subscriptState.optionalChainMember) {
                      node.optional = false;
                      return this.finishNode(node, "OptionalCallExpression");
                    }

                    return this.finishNode(node, "CallExpression");
                  } catch (e) {
                    if (e instanceof SyntaxError) {
                      this.state = state;
                    } else {
                      throw e;
                    }
                  }
                }

                return super.parseSubscript(
                  base,
                  startPos,
                  startLoc,
                  noCalls,
                  subscriptState
                );
              }

              parseNewArguments(node) {
                let targs = null;

                if (this.shouldParseTypes() && this.isRelational("<")) {
                  const state = this.state.clone();

                  try {
                    targs = this.flowParseTypeParameterInstantiationCallOrNew();
                  } catch (e) {
                    if (e instanceof SyntaxError) {
                      this.state = state;
                    } else {
                      throw e;
                    }
                  }
                }

                node.typeArguments = targs;
                super.parseNewArguments(node);
              }

              parseAsyncArrowWithTypeParameters(startPos, startLoc) {
                const node = this.startNodeAt(startPos, startLoc);
                this.parseFunctionParams(node);
                if (!this.parseArrow(node)) return;
                return this.parseArrowExpression(node, undefined, true);
              }

              readToken_mult_modulo(code) {
                const next = this.input.charCodeAt(this.state.pos + 1);

                if (code === 42 && next === 47 && this.state.hasFlowComment) {
                  this.state.hasFlowComment = false;
                  this.state.pos += 2;
                  this.nextToken();
                  return;
                }

                super.readToken_mult_modulo(code);
              }

              parseTopLevel(file, program) {
                const fileNode = super.parseTopLevel(file, program);

                if (this.state.hasFlowComment) {
                  this.unexpected(null, "Unterminated flow-comment");
                }

                return fileNode;
              }

              skipBlockComment() {
                if (
                  this.hasPlugin("flow") &&
                  this.hasPlugin("flowComments") &&
                  this.skipFlowComment()
                ) {
                  if (this.state.hasFlowComment) {
                    this.unexpected(
                      null,
                      "Cannot have a flow comment inside another flow comment"
                    );
                  }

                  this.hasFlowCommentCompletion();
                  this.state.pos += this.skipFlowComment();
                  this.state.hasFlowComment = true;
                  return;
                }

                if (this.hasPlugin("flow") && this.state.hasFlowComment) {
                  const end = this.input.indexOf("*-/", (this.state.pos += 2));
                  if (end === -1)
                    this.raise(this.state.pos - 2, "Unterminated comment");
                  this.state.pos = end + 3;
                  return;
                }

                super.skipBlockComment();
              }

              skipFlowComment() {
                const { pos } = this.state;
                let shiftToFirstNonWhiteSpace = 2;

                while (
                  [32, 9].includes(
                    this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)
                  )
                ) {
                  shiftToFirstNonWhiteSpace++;
                }

                const ch2 = this.input.charCodeAt(
                  shiftToFirstNonWhiteSpace + pos
                );
                const ch3 = this.input.charCodeAt(
                  shiftToFirstNonWhiteSpace + pos + 1
                );

                if (ch2 === 58 && ch3 === 58) {
                  return shiftToFirstNonWhiteSpace + 2;
                }

                if (
                  this.input.slice(
                    shiftToFirstNonWhiteSpace + pos,
                    shiftToFirstNonWhiteSpace + pos + 12
                  ) === "flow-include"
                ) {
                  return shiftToFirstNonWhiteSpace + 12;
                }

                if (ch2 === 58 && ch3 !== 58) {
                  return shiftToFirstNonWhiteSpace;
                }

                return false;
              }

              hasFlowCommentCompletion() {
                const end = this.input.indexOf("*/", this.state.pos);

                if (end === -1) {
                  this.raise(this.state.pos, "Unterminated comment");
                }
              }
            };

          const entities = {
            quot: "\u0022",
            amp: "&",
            apos: "\u0027",
            lt: "<",
            gt: ">",
            nbsp: "\u00A0",
            iexcl: "\u00A1",
            cent: "\u00A2",
            pound: "\u00A3",
            curren: "\u00A4",
            yen: "\u00A5",
            brvbar: "\u00A6",
            sect: "\u00A7",
            uml: "\u00A8",
            copy: "\u00A9",
            ordf: "\u00AA",
            laquo: "\u00AB",
            not: "\u00AC",
            shy: "\u00AD",
            reg: "\u00AE",
            macr: "\u00AF",
            deg: "\u00B0",
            plusmn: "\u00B1",
            sup2: "\u00B2",
            sup3: "\u00B3",
            acute: "\u00B4",
            micro: "\u00B5",
            para: "\u00B6",
            middot: "\u00B7",
            cedil: "\u00B8",
            sup1: "\u00B9",
            ordm: "\u00BA",
            raquo: "\u00BB",
            frac14: "\u00BC",
            frac12: "\u00BD",
            frac34: "\u00BE",
            iquest: "\u00BF",
            Agrave: "\u00C0",
            Aacute: "\u00C1",
            Acirc: "\u00C2",
            Atilde: "\u00C3",
            Auml: "\u00C4",
            Aring: "\u00C5",
            AElig: "\u00C6",
            Ccedil: "\u00C7",
            Egrave: "\u00C8",
            Eacute: "\u00C9",
            Ecirc: "\u00CA",
            Euml: "\u00CB",
            Igrave: "\u00CC",
            Iacute: "\u00CD",
            Icirc: "\u00CE",
            Iuml: "\u00CF",
            ETH: "\u00D0",
            Ntilde: "\u00D1",
            Ograve: "\u00D2",
            Oacute: "\u00D3",
            Ocirc: "\u00D4",
            Otilde: "\u00D5",
            Ouml: "\u00D6",
            times: "\u00D7",
            Oslash: "\u00D8",
            Ugrave: "\u00D9",
            Uacute: "\u00DA",
            Ucirc: "\u00DB",
            Uuml: "\u00DC",
            Yacute: "\u00DD",
            THORN: "\u00DE",
            szlig: "\u00DF",
            agrave: "\u00E0",
            aacute: "\u00E1",
            acirc: "\u00E2",
            atilde: "\u00E3",
            auml: "\u00E4",
            aring: "\u00E5",
            aelig: "\u00E6",
            ccedil: "\u00E7",
            egrave: "\u00E8",
            eacute: "\u00E9",
            ecirc: "\u00EA",
            euml: "\u00EB",
            igrave: "\u00EC",
            iacute: "\u00ED",
            icirc: "\u00EE",
            iuml: "\u00EF",
            eth: "\u00F0",
            ntilde: "\u00F1",
            ograve: "\u00F2",
            oacute: "\u00F3",
            ocirc: "\u00F4",
            otilde: "\u00F5",
            ouml: "\u00F6",
            divide: "\u00F7",
            oslash: "\u00F8",
            ugrave: "\u00F9",
            uacute: "\u00FA",
            ucirc: "\u00FB",
            uuml: "\u00FC",
            yacute: "\u00FD",
            thorn: "\u00FE",
            yuml: "\u00FF",
            OElig: "\u0152",
            oelig: "\u0153",
            Scaron: "\u0160",
            scaron: "\u0161",
            Yuml: "\u0178",
            fnof: "\u0192",
            circ: "\u02C6",
            tilde: "\u02DC",
            Alpha: "\u0391",
            Beta: "\u0392",
            Gamma: "\u0393",
            Delta: "\u0394",
            Epsilon: "\u0395",
            Zeta: "\u0396",
            Eta: "\u0397",
            Theta: "\u0398",
            Iota: "\u0399",
            Kappa: "\u039A",
            Lambda: "\u039B",
            Mu: "\u039C",
            Nu: "\u039D",
            Xi: "\u039E",
            Omicron: "\u039F",
            Pi: "\u03A0",
            Rho: "\u03A1",
            Sigma: "\u03A3",
            Tau: "\u03A4",
            Upsilon: "\u03A5",
            Phi: "\u03A6",
            Chi: "\u03A7",
            Psi: "\u03A8",
            Omega: "\u03A9",
            alpha: "\u03B1",
            beta: "\u03B2",
            gamma: "\u03B3",
            delta: "\u03B4",
            epsilon: "\u03B5",
            zeta: "\u03B6",
            eta: "\u03B7",
            theta: "\u03B8",
            iota: "\u03B9",
            kappa: "\u03BA",
            lambda: "\u03BB",
            mu: "\u03BC",
            nu: "\u03BD",
            xi: "\u03BE",
            omicron: "\u03BF",
            pi: "\u03C0",
            rho: "\u03C1",
            sigmaf: "\u03C2",
            sigma: "\u03C3",
            tau: "\u03C4",
            upsilon: "\u03C5",
            phi: "\u03C6",
            chi: "\u03C7",
            psi: "\u03C8",
            omega: "\u03C9",
            thetasym: "\u03D1",
            upsih: "\u03D2",
            piv: "\u03D6",
            ensp: "\u2002",
            emsp: "\u2003",
            thinsp: "\u2009",
            zwnj: "\u200C",
            zwj: "\u200D",
            lrm: "\u200E",
            rlm: "\u200F",
            ndash: "\u2013",
            mdash: "\u2014",
            lsquo: "\u2018",
            rsquo: "\u2019",
            sbquo: "\u201A",
            ldquo: "\u201C",
            rdquo: "\u201D",
            bdquo: "\u201E",
            dagger: "\u2020",
            Dagger: "\u2021",
            bull: "\u2022",
            hellip: "\u2026",
            permil: "\u2030",
            prime: "\u2032",
            Prime: "\u2033",
            lsaquo: "\u2039",
            rsaquo: "\u203A",
            oline: "\u203E",
            frasl: "\u2044",
            euro: "\u20AC",
            image: "\u2111",
            weierp: "\u2118",
            real: "\u211C",
            trade: "\u2122",
            alefsym: "\u2135",
            larr: "\u2190",
            uarr: "\u2191",
            rarr: "\u2192",
            darr: "\u2193",
            harr: "\u2194",
            crarr: "\u21B5",
            lArr: "\u21D0",
            uArr: "\u21D1",
            rArr: "\u21D2",
            dArr: "\u21D3",
            hArr: "\u21D4",
            forall: "\u2200",
            part: "\u2202",
            exist: "\u2203",
            empty: "\u2205",
            nabla: "\u2207",
            isin: "\u2208",
            notin: "\u2209",
            ni: "\u220B",
            prod: "\u220F",
            sum: "\u2211",
            minus: "\u2212",
            lowast: "\u2217",
            radic: "\u221A",
            prop: "\u221D",
            infin: "\u221E",
            ang: "\u2220",
            and: "\u2227",
            or: "\u2228",
            cap: "\u2229",
            cup: "\u222A",
            int: "\u222B",
            there4: "\u2234",
            sim: "\u223C",
            cong: "\u2245",
            asymp: "\u2248",
            ne: "\u2260",
            equiv: "\u2261",
            le: "\u2264",
            ge: "\u2265",
            sub: "\u2282",
            sup: "\u2283",
            nsub: "\u2284",
            sube: "\u2286",
            supe: "\u2287",
            oplus: "\u2295",
            otimes: "\u2297",
            perp: "\u22A5",
            sdot: "\u22C5",
            lceil: "\u2308",
            rceil: "\u2309",
            lfloor: "\u230A",
            rfloor: "\u230B",
            lang: "\u2329",
            rang: "\u232A",
            loz: "\u25CA",
            spades: "\u2660",
            clubs: "\u2663",
            hearts: "\u2665",
            diams: "\u2666",
          };
          const HEX_NUMBER = /^[\da-fA-F]+$/;
          const DECIMAL_NUMBER = /^\d+$/;
          types$1.j_oTag = new TokContext("<tag", false);
          types$1.j_cTag = new TokContext("</tag", false);
          types$1.j_expr = new TokContext("<tag>...</tag>", true, true);
          types.jsxName = new TokenType("jsxName");
          types.jsxText = new TokenType("jsxText", {
            beforeExpr: true,
          });
          types.jsxTagStart = new TokenType("jsxTagStart", {
            startsExpr: true,
          });
          types.jsxTagEnd = new TokenType("jsxTagEnd");

          types.jsxTagStart.updateContext = function() {
            this.state.context.push(types$1.j_expr);
            this.state.context.push(types$1.j_oTag);
            this.state.exprAllowed = false;
          };

          types.jsxTagEnd.updateContext = function(prevType) {
            const out = this.state.context.pop();

            if (
              (out === types$1.j_oTag && prevType === types.slash) ||
              out === types$1.j_cTag
            ) {
              this.state.context.pop();
              this.state.exprAllowed = this.curContext() === types$1.j_expr;
            } else {
              this.state.exprAllowed = true;
            }
          };

          function isFragment(object) {
            return object
              ? object.type === "JSXOpeningFragment" ||
                  object.type === "JSXClosingFragment"
              : false;
          }

          function getQualifiedJSXName(object) {
            if (object.type === "JSXIdentifier") {
              return object.name;
            }

            if (object.type === "JSXNamespacedName") {
              return object.namespace.name + ":" + object.name.name;
            }

            if (object.type === "JSXMemberExpression") {
              return (
                getQualifiedJSXName(object.object) +
                "." +
                getQualifiedJSXName(object.property)
              );
            }

            throw new Error("Node had unexpected type: " + object.type);
          }

          var jsx = superClass =>
            class extends superClass {
              jsxReadToken() {
                let out = "";
                let chunkStart = this.state.pos;

                for (;;) {
                  if (this.state.pos >= this.input.length) {
                    this.raise(this.state.start, "Unterminated JSX contents");
                  }

                  const ch = this.input.charCodeAt(this.state.pos);

                  switch (ch) {
                    case 60:
                    case 123:
                      if (this.state.pos === this.state.start) {
                        if (ch === 60 && this.state.exprAllowed) {
                          ++this.state.pos;
                          return this.finishToken(types.jsxTagStart);
                        }

                        return this.getTokenFromCode(ch);
                      }

                      out += this.input.slice(chunkStart, this.state.pos);
                      return this.finishToken(types.jsxText, out);

                    case 38:
                      out += this.input.slice(chunkStart, this.state.pos);
                      out += this.jsxReadEntity();
                      chunkStart = this.state.pos;
                      break;

                    default:
                      if (isNewLine(ch)) {
                        out += this.input.slice(chunkStart, this.state.pos);
                        out += this.jsxReadNewLine(true);
                        chunkStart = this.state.pos;
                      } else {
                        ++this.state.pos;
                      }
                  }
                }
              }

              jsxReadNewLine(normalizeCRLF) {
                const ch = this.input.charCodeAt(this.state.pos);
                let out;
                ++this.state.pos;

                if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                  out = normalizeCRLF ? "\n" : "\r\n";
                } else {
                  out = String.fromCharCode(ch);
                }

                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                return out;
              }

              jsxReadString(quote) {
                let out = "";
                let chunkStart = ++this.state.pos;

                for (;;) {
                  if (this.state.pos >= this.input.length) {
                    this.raise(
                      this.state.start,
                      "Unterminated string constant"
                    );
                  }

                  const ch = this.input.charCodeAt(this.state.pos);
                  if (ch === quote) break;

                  if (ch === 38) {
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadEntity();
                    chunkStart = this.state.pos;
                  } else if (isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadNewLine(false);
                    chunkStart = this.state.pos;
                  } else {
                    ++this.state.pos;
                  }
                }

                out += this.input.slice(chunkStart, this.state.pos++);
                return this.finishToken(types.string, out);
              }

              jsxReadEntity() {
                let str = "";
                let count = 0;
                let entity;
                let ch = this.input[this.state.pos];
                const startPos = ++this.state.pos;

                while (this.state.pos < this.input.length && count++ < 10) {
                  ch = this.input[this.state.pos++];

                  if (ch === ";") {
                    if (str[0] === "#") {
                      if (str[1] === "x") {
                        str = str.substr(2);

                        if (HEX_NUMBER.test(str)) {
                          entity = String.fromCodePoint(parseInt(str, 16));
                        }
                      } else {
                        str = str.substr(1);

                        if (DECIMAL_NUMBER.test(str)) {
                          entity = String.fromCodePoint(parseInt(str, 10));
                        }
                      }
                    } else {
                      entity = entities[str];
                    }

                    break;
                  }

                  str += ch;
                }

                if (!entity) {
                  this.state.pos = startPos;
                  return "&";
                }

                return entity;
              }

              jsxReadWord() {
                let ch;
                const start = this.state.pos;

                do {
                  ch = this.input.charCodeAt(++this.state.pos);
                } while (isIdentifierChar(ch) || ch === 45);

                return this.finishToken(
                  types.jsxName,
                  this.input.slice(start, this.state.pos)
                );
              }

              jsxParseIdentifier() {
                const node = this.startNode();

                if (this.match(types.jsxName)) {
                  node.name = this.state.value;
                } else if (this.state.type.keyword) {
                  node.name = this.state.type.keyword;
                } else {
                  this.unexpected();
                }

                this.next();
                return this.finishNode(node, "JSXIdentifier");
              }

              jsxParseNamespacedName() {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                const name = this.jsxParseIdentifier();
                if (!this.eat(types.colon)) return name;
                const node = this.startNodeAt(startPos, startLoc);
                node.namespace = name;
                node.name = this.jsxParseIdentifier();
                return this.finishNode(node, "JSXNamespacedName");
              }

              jsxParseElementName() {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                let node = this.jsxParseNamespacedName();

                while (this.eat(types.dot)) {
                  const newNode = this.startNodeAt(startPos, startLoc);
                  newNode.object = node;
                  newNode.property = this.jsxParseIdentifier();
                  node = this.finishNode(newNode, "JSXMemberExpression");
                }

                return node;
              }

              jsxParseAttributeValue() {
                let node;

                switch (this.state.type) {
                  case types.braceL:
                    node = this.jsxParseExpressionContainer();

                    if (node.expression.type === "JSXEmptyExpression") {
                      throw this.raise(
                        node.start,
                        "JSX attributes must only be assigned a non-empty expression"
                      );
                    } else {
                      return node;
                    }

                  case types.jsxTagStart:
                  case types.string:
                    return this.parseExprAtom();

                  default:
                    throw this.raise(
                      this.state.start,
                      "JSX value should be either an expression or a quoted JSX text"
                    );
                }
              }

              jsxParseEmptyExpression() {
                const node = this.startNodeAt(
                  this.state.lastTokEnd,
                  this.state.lastTokEndLoc
                );
                return this.finishNodeAt(
                  node,
                  "JSXEmptyExpression",
                  this.state.start,
                  this.state.startLoc
                );
              }

              jsxParseSpreadChild() {
                const node = this.startNode();
                this.expect(types.braceL);
                this.expect(types.ellipsis);
                node.expression = this.parseExpression();
                this.expect(types.braceR);
                return this.finishNode(node, "JSXSpreadChild");
              }

              jsxParseExpressionContainer() {
                const node = this.startNode();
                this.next();

                if (this.match(types.braceR)) {
                  node.expression = this.jsxParseEmptyExpression();
                } else {
                  node.expression = this.parseExpression();
                }

                this.expect(types.braceR);
                return this.finishNode(node, "JSXExpressionContainer");
              }

              jsxParseAttribute() {
                const node = this.startNode();

                if (this.eat(types.braceL)) {
                  this.expect(types.ellipsis);
                  node.argument = this.parseMaybeAssign();
                  this.expect(types.braceR);
                  return this.finishNode(node, "JSXSpreadAttribute");
                }

                node.name = this.jsxParseNamespacedName();
                node.value = this.eat(types.eq)
                  ? this.jsxParseAttributeValue()
                  : null;
                return this.finishNode(node, "JSXAttribute");
              }

              jsxParseOpeningElementAt(startPos, startLoc) {
                const node = this.startNodeAt(startPos, startLoc);

                if (this.match(types.jsxTagEnd)) {
                  this.expect(types.jsxTagEnd);
                  return this.finishNode(node, "JSXOpeningFragment");
                }

                node.name = this.jsxParseElementName();
                return this.jsxParseOpeningElementAfterName(node);
              }

              jsxParseOpeningElementAfterName(node) {
                const attributes = [];

                while (
                  !this.match(types.slash) &&
                  !this.match(types.jsxTagEnd)
                ) {
                  attributes.push(this.jsxParseAttribute());
                }

                node.attributes = attributes;
                node.selfClosing = this.eat(types.slash);
                this.expect(types.jsxTagEnd);
                return this.finishNode(node, "JSXOpeningElement");
              }

              jsxParseClosingElementAt(startPos, startLoc) {
                const node = this.startNodeAt(startPos, startLoc);

                if (this.match(types.jsxTagEnd)) {
                  this.expect(types.jsxTagEnd);
                  return this.finishNode(node, "JSXClosingFragment");
                }

                node.name = this.jsxParseElementName();
                this.expect(types.jsxTagEnd);
                return this.finishNode(node, "JSXClosingElement");
              }

              jsxParseElementAt(startPos, startLoc) {
                const node = this.startNodeAt(startPos, startLoc);
                const children = [];
                const openingElement = this.jsxParseOpeningElementAt(
                  startPos,
                  startLoc
                );
                let closingElement = null;

                if (!openingElement.selfClosing) {
                  contents: for (;;) {
                    switch (this.state.type) {
                      case types.jsxTagStart:
                        startPos = this.state.start;
                        startLoc = this.state.startLoc;
                        this.next();

                        if (this.eat(types.slash)) {
                          closingElement = this.jsxParseClosingElementAt(
                            startPos,
                            startLoc
                          );
                          break contents;
                        }

                        children.push(
                          this.jsxParseElementAt(startPos, startLoc)
                        );
                        break;

                      case types.jsxText:
                        children.push(this.parseExprAtom());
                        break;

                      case types.braceL:
                        if (this.lookahead().type === types.ellipsis) {
                          children.push(this.jsxParseSpreadChild());
                        } else {
                          children.push(this.jsxParseExpressionContainer());
                        }

                        break;

                      default:
                        throw this.unexpected();
                    }
                  }

                  if (
                    isFragment(openingElement) &&
                    !isFragment(closingElement)
                  ) {
                    this.raise(
                      closingElement.start,
                      "Expected corresponding JSX closing tag for <>"
                    );
                  } else if (
                    !isFragment(openingElement) &&
                    isFragment(closingElement)
                  ) {
                    this.raise(
                      closingElement.start,
                      "Expected corresponding JSX closing tag for <" +
                        getQualifiedJSXName(openingElement.name) +
                        ">"
                    );
                  } else if (
                    !isFragment(openingElement) &&
                    !isFragment(closingElement)
                  ) {
                    if (
                      getQualifiedJSXName(closingElement.name) !==
                      getQualifiedJSXName(openingElement.name)
                    ) {
                      this.raise(
                        closingElement.start,
                        "Expected corresponding JSX closing tag for <" +
                          getQualifiedJSXName(openingElement.name) +
                          ">"
                      );
                    }
                  }
                }

                if (isFragment(openingElement)) {
                  node.openingFragment = openingElement;
                  node.closingFragment = closingElement;
                } else {
                  node.openingElement = openingElement;
                  node.closingElement = closingElement;
                }

                node.children = children;

                if (this.match(types.relational) && this.state.value === "<") {
                  this.raise(
                    this.state.start,
                    "Adjacent JSX elements must be wrapped in an enclosing tag. " +
                      "Did you want a JSX fragment <>...</>?"
                  );
                }

                return isFragment(openingElement)
                  ? this.finishNode(node, "JSXFragment")
                  : this.finishNode(node, "JSXElement");
              }

              jsxParseElement() {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                this.next();
                return this.jsxParseElementAt(startPos, startLoc);
              }

              parseExprAtom(refShortHandDefaultPos) {
                if (this.match(types.jsxText)) {
                  return this.parseLiteral(this.state.value, "JSXText");
                } else if (this.match(types.jsxTagStart)) {
                  return this.jsxParseElement();
                } else if (
                  this.isRelational("<") &&
                  this.state.input.charCodeAt(this.state.pos) !== 33
                ) {
                  this.finishToken(types.jsxTagStart);
                  return this.jsxParseElement();
                } else {
                  return super.parseExprAtom(refShortHandDefaultPos);
                }
              }

              readToken(code) {
                if (this.state.inPropertyName) return super.readToken(code);
                const context = this.curContext();

                if (context === types$1.j_expr) {
                  return this.jsxReadToken();
                }

                if (context === types$1.j_oTag || context === types$1.j_cTag) {
                  if (isIdentifierStart(code)) {
                    return this.jsxReadWord();
                  }

                  if (code === 62) {
                    ++this.state.pos;
                    return this.finishToken(types.jsxTagEnd);
                  }

                  if (
                    (code === 34 || code === 39) &&
                    context === types$1.j_oTag
                  ) {
                    return this.jsxReadString(code);
                  }
                }

                if (
                  code === 60 &&
                  this.state.exprAllowed &&
                  this.state.input.charCodeAt(this.state.pos + 1) !== 33
                ) {
                  ++this.state.pos;
                  return this.finishToken(types.jsxTagStart);
                }

                return super.readToken(code);
              }

              updateContext(prevType) {
                if (this.match(types.braceL)) {
                  const curContext = this.curContext();

                  if (curContext === types$1.j_oTag) {
                    this.state.context.push(types$1.braceExpression);
                  } else if (curContext === types$1.j_expr) {
                    this.state.context.push(types$1.templateQuasi);
                  } else {
                    super.updateContext(prevType);
                  }

                  this.state.exprAllowed = true;
                } else if (
                  this.match(types.slash) &&
                  prevType === types.jsxTagStart
                ) {
                  this.state.context.length -= 2;
                  this.state.context.push(types$1.j_cTag);
                  this.state.exprAllowed = false;
                } else {
                  return super.updateContext(prevType);
                }
              }
            };

          const defaultOptions = {
            sourceType: "script",
            sourceFilename: undefined,
            startLine: 1,
            allowAwaitOutsideFunction: false,
            allowReturnOutsideFunction: false,
            allowImportExportEverywhere: false,
            allowSuperOutsideMethod: false,
            plugins: [],
            strictMode: null,
            ranges: false,
            tokens: false,
            jisonVariables: false,
          };

          function getOptions(opts) {
            const options = {};

            for (const key in defaultOptions) {
              options[key] =
                opts && opts[key] != null ? opts[key] : defaultOptions[key];
            }

            return options;
          }

          class Position {
            constructor(line, col) {
              this.line = line;
              this.column = col;
            }
          }

          class SourceLocation {
            constructor(start, end) {
              this.start = start;
              this.end = end;
            }
          }

          function getLineInfo(input, offset) {
            let line = 1;
            let lineStart = 0;
            let match;
            lineBreakG.lastIndex = 0;

            while ((match = lineBreakG.exec(input)) && match.index < offset) {
              line++;
              lineStart = lineBreakG.lastIndex;
            }

            return new Position(line, offset - lineStart);
          }

          class BaseParser {
            constructor() {
              this.sawUnambiguousESM = false;
            }

            isReservedWord(word) {
              if (word === "await") {
                return this.inModule;
              } else {
                return reservedWords[6](word);
              }
            }

            hasPlugin(name) {
              return Object.hasOwnProperty.call(this.plugins, name);
            }

            getPluginOption(plugin, name) {
              if (this.hasPlugin(plugin)) return this.plugins[plugin][name];
            }
          }

          function last(stack) {
            return stack[stack.length - 1];
          }

          class CommentsParser extends BaseParser {
            addComment(comment) {
              if (this.filename) comment.loc.filename = this.filename;
              this.state.trailingComments.push(comment);
              this.state.leadingComments.push(comment);
            }

            processComment(node) {
              if (node.type === "Program" && node.body.length > 0) return;
              const stack = this.state.commentStack;
              let firstChild, lastChild, trailingComments, i, j;

              if (this.state.trailingComments.length > 0) {
                if (this.state.trailingComments[0].start >= node.end) {
                  trailingComments = this.state.trailingComments;
                  this.state.trailingComments = [];
                } else {
                  this.state.trailingComments.length = 0;
                }
              } else if (stack.length > 0) {
                const lastInStack = last(stack);

                if (
                  lastInStack.trailingComments &&
                  lastInStack.trailingComments[0].start >= node.end
                ) {
                  trailingComments = lastInStack.trailingComments;
                  delete lastInStack.trailingComments;
                }
              }

              if (stack.length > 0 && last(stack).start >= node.start) {
                firstChild = stack.pop();
              }

              while (stack.length > 0 && last(stack).start >= node.start) {
                lastChild = stack.pop();
              }

              if (!lastChild && firstChild) lastChild = firstChild;

              if (firstChild && this.state.leadingComments.length > 0) {
                const lastComment = last(this.state.leadingComments);

                if (firstChild.type === "ObjectProperty") {
                  if (lastComment.start >= node.start) {
                    if (this.state.commentPreviousNode) {
                      for (j = 0; j < this.state.leadingComments.length; j++) {
                        if (
                          this.state.leadingComments[j].end <
                          this.state.commentPreviousNode.end
                        ) {
                          this.state.leadingComments.splice(j, 1);
                          j--;
                        }
                      }

                      if (this.state.leadingComments.length > 0) {
                        firstChild.trailingComments = this.state.leadingComments;
                        this.state.leadingComments = [];
                      }
                    }
                  }
                } else if (
                  node.type === "CallExpression" &&
                  node.arguments &&
                  node.arguments.length
                ) {
                  const lastArg = last(node.arguments);

                  if (
                    lastArg &&
                    lastComment.start >= lastArg.start &&
                    lastComment.end <= node.end
                  ) {
                    if (this.state.commentPreviousNode) {
                      for (j = 0; j < this.state.leadingComments.length; j++) {
                        if (
                          this.state.leadingComments[j].end <
                          this.state.commentPreviousNode.end
                        ) {
                          this.state.leadingComments.splice(j, 1);
                          j--;
                        }
                      }

                      if (this.state.leadingComments.length > 0) {
                        lastArg.trailingComments = this.state.leadingComments;
                        this.state.leadingComments = [];
                      }
                    }
                  }
                }
              }

              if (lastChild) {
                if (lastChild.leadingComments) {
                  if (
                    lastChild !== node &&
                    lastChild.leadingComments.length > 0 &&
                    last(lastChild.leadingComments).end <= node.start
                  ) {
                    node.leadingComments = lastChild.leadingComments;
                    delete lastChild.leadingComments;
                  } else {
                    for (
                      i = lastChild.leadingComments.length - 2;
                      i >= 0;
                      --i
                    ) {
                      if (lastChild.leadingComments[i].end <= node.start) {
                        node.leadingComments = lastChild.leadingComments.splice(
                          0,
                          i + 1
                        );
                        break;
                      }
                    }
                  }
                }
              } else if (this.state.leadingComments.length > 0) {
                if (last(this.state.leadingComments).end <= node.start) {
                  if (this.state.commentPreviousNode) {
                    for (j = 0; j < this.state.leadingComments.length; j++) {
                      if (
                        this.state.leadingComments[j].end <
                        this.state.commentPreviousNode.end
                      ) {
                        this.state.leadingComments.splice(j, 1);
                        j--;
                      }
                    }
                  }

                  if (this.state.leadingComments.length > 0) {
                    node.leadingComments = this.state.leadingComments;
                    this.state.leadingComments = [];
                  }
                } else {
                  for (i = 0; i < this.state.leadingComments.length; i++) {
                    if (this.state.leadingComments[i].end > node.start) {
                      break;
                    }
                  }

                  const leadingComments = this.state.leadingComments.slice(
                    0,
                    i
                  );

                  if (leadingComments.length) {
                    node.leadingComments = leadingComments;
                  }

                  trailingComments = this.state.leadingComments.slice(i);

                  if (trailingComments.length === 0) {
                    trailingComments = null;
                  }
                }
              }

              this.state.commentPreviousNode = node;

              if (trailingComments) {
                if (
                  trailingComments.length &&
                  trailingComments[0].start >= node.start &&
                  last(trailingComments).end <= node.end
                ) {
                  node.innerComments = trailingComments;
                } else {
                  node.trailingComments = trailingComments;
                }
              }

              stack.push(node);
            }
          }

          class LocationParser extends CommentsParser {
            raise(pos, message, { missingPluginNames, code } = {}) {
              const loc = getLineInfo(this.input, pos);
              message += ` (${loc.line}:${loc.column})`;
              const err = new SyntaxError(message);
              err.pos = pos;
              err.loc = loc;

              if (missingPluginNames) {
                err.missingPlugin = missingPluginNames;
              }

              if (code !== undefined) {
                err.code = code;
              }

              throw err;
            }
          }

          class State {
            init(options, input) {
              this.strict =
                options.strictMode === false
                  ? false
                  : options.sourceType === "module";
              this.input = input;
              this.potentialArrowAt = -1;
              this.noArrowAt = [];
              this.noArrowParamsConversionAt = [];
              this.inMethod = false;
              this.inFunction = false;
              this.inArrowFunction = false;
              this.inNonArrowFunction = false;
              this.inParameters = false;
              this.maybeInArrowParameters = false;
              this.inGenerator = false;
              this.inAsync = false;
              this.inPipeline = false;
              this.inPropertyName = false;
              this.inType = false;
              this.inClassProperty = false;
              this.noAnonFunctionType = false;
              this.hasFlowComment = false;
              this.isIterator = false;
              this.topicContext = {
                maxNumOfResolvableTopics: 0,
                maxTopicIndex: null,
              };
              this.classLevel = 0;
              this.labels = [];
              this.decoratorStack = [[]];
              this.yieldOrAwaitInPossibleArrowParameters = null;
              this.tokens = [];
              this.comments = [];
              this.trailingComments = [];
              this.leadingComments = [];
              this.commentStack = [];
              this.commentPreviousNode = null;
              this.pos = this.lineStart = 0;
              this.curLine = options.startLine;
              this.type = types.eof;
              this.value = null;
              this.start = this.end = this.pos;
              this.startLoc = this.endLoc = this.curPosition();
              this.lastTokEndLoc = this.lastTokStartLoc = null;
              this.lastTokStart = this.lastTokEnd = this.pos;
              this.context = [types$1.braceStatement];
              this.exprAllowed = true;
              this.containsEsc = this.containsOctal = false;
              this.octalPosition = null;
              this.invalidTemplateEscapePosition = null;
              this.exportedIdentifiers = [];
            }

            curPosition() {
              return new Position(this.curLine, this.pos - this.lineStart);
            }

            clone(skipArrays) {
              const state = new State();
              Object.keys(this).forEach(key => {
                let val = this[key];

                if ((!skipArrays || key === "context") && Array.isArray(val)) {
                  val = val.slice();
                }

                state[key] = val;
              });
              return state;
            }
          }

          var _isDigit = function isDigit(code) {
            return code >= 48 && code <= 57;
          };

          const VALID_REGEX_FLAGS = "gmsiyu";
          const forbiddenNumericSeparatorSiblings = {
            decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
            hex: [46, 88, 95, 120],
          };
          const allowedNumericSeparatorSiblings = {};
          allowedNumericSeparatorSiblings.bin = [48, 49];
          allowedNumericSeparatorSiblings.oct = [
            ...allowedNumericSeparatorSiblings.bin,
            50,
            51,
            52,
            53,
            54,
            55,
          ];
          allowedNumericSeparatorSiblings.dec = [
            ...allowedNumericSeparatorSiblings.oct,
            56,
            57,
          ];
          allowedNumericSeparatorSiblings.hex = [
            ...allowedNumericSeparatorSiblings.dec,
            65,
            66,
            67,
            68,
            69,
            70,
            97,
            98,
            99,
            100,
            101,
            102,
          ];

          class Token {
            constructor(state) {
              this.type = state.type;
              this.value = state.value;
              this.start = state.start;
              this.end = state.end;
              this.loc = new SourceLocation(state.startLoc, state.endLoc);
            }
          }

          class Tokenizer extends LocationParser {
            constructor(options, input) {
              super();
              this.state = new State();
              this.state.init(options, input);
              this.isLookahead = false;
            }

            next() {
              if (this.options.tokens && !this.isLookahead) {
                this.state.tokens.push(new Token(this.state));
              }

              this.state.lastTokEnd = this.state.end;
              this.state.lastTokStart = this.state.start;
              this.state.lastTokEndLoc = this.state.endLoc;
              this.state.lastTokStartLoc = this.state.startLoc;
              this.nextToken();
            }

            eat(type) {
              if (this.match(type)) {
                this.next();
                return true;
              } else {
                return false;
              }
            }

            match(type) {
              return this.state.type === type;
            }

            isKeyword(word) {
              return isKeyword(word);
            }

            lookahead() {
              const old = this.state;
              this.state = old.clone(true);
              this.isLookahead = true;
              this.next();
              this.isLookahead = false;
              const curr = this.state;
              this.state = old;
              return curr;
            }

            setStrict(strict) {
              this.state.strict = strict;
              if (!this.match(types.num) && !this.match(types.string)) return;
              this.state.pos = this.state.start;

              while (this.state.pos < this.state.lineStart) {
                this.state.lineStart =
                  this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
                --this.state.curLine;
              }

              this.nextToken();
            }

            curContext() {
              return this.state.context[this.state.context.length - 1];
            }

            nextToken() {
              const curContext = this.curContext();
              if (!curContext || !curContext.preserveSpace) this.skipSpace();
              this.state.containsOctal = false;
              this.state.octalPosition = null;
              this.state.start = this.state.pos;
              this.state.startLoc = this.state.curPosition();

              if (this.state.pos >= this.input.length) {
                this.finishToken(types.eof);
                return;
              }

              if (curContext.override) {
                curContext.override(this);
              } else {
                this.readToken(this.input.codePointAt(this.state.pos));
              }
            }

            readToken(code) {
              if (
                this.options.jisonVariables &&
                !this.state.isIterator &&
                !this.state.inType &&
                (code === 35 || code === 64 || code === 36)
              ) {
                const type = types.name;
                const chunkStart = this.state.pos;

                for (;;) {
                  const ch = this.input.charCodeAt(this.state.pos);

                  if (ch === code) {
                    this.state.pos++;
                  } else {
                    break;
                  }
                }

                const code1 = this.input.charCodeAt(this.state.pos);

                if (code1 === 45) {
                  const code2 = this.input.charCodeAt(this.state.pos + 1);

                  if (code2 >= 0x30 && code2 <= 0x39) {
                    this.state.pos++;
                  }
                }

                const identifierStart = this.state.pos;
                this.readWord1();

                if (this.state.pos === identifierStart && code !== 36) {
                  this.raise(
                    chunkStart,
                    `Invalid JISON identifier ${this.input.slice(
                      chunkStart,
                      this.state.pos
                    )}`
                  );
                }

                for (;;) {
                  const ch = this.input.charCodeAt(this.state.pos);

                  if (ch === code) {
                    this.state.pos++;
                  } else {
                    break;
                  }
                }

                const word = this.input.slice(chunkStart, this.state.pos);
                this.finishToken(type, word);
              } else if (isIdentifierStart(code) || code === 92) {
                this.readWord();
              } else {
                this.getTokenFromCode(code);
              }
            }

            pushComment(block, text, start, end, startLoc, endLoc) {
              const comment = {
                type: block ? "CommentBlock" : "CommentLine",
                value: text,
                start: start,
                end: end,
                loc: new SourceLocation(startLoc, endLoc),
              };

              if (!this.isLookahead) {
                if (this.options.tokens) this.state.tokens.push(comment);
                this.state.comments.push(comment);
                this.addComment(comment);
              }
            }

            skipBlockComment() {
              const startLoc = this.state.curPosition();
              const start = this.state.pos;
              const end = this.input.indexOf("*/", (this.state.pos += 2));
              if (end === -1)
                this.raise(this.state.pos - 2, "Unterminated comment");
              this.state.pos = end + 2;
              lineBreakG.lastIndex = start;
              let match;

              while (
                (match = lineBreakG.exec(this.input)) &&
                match.index < this.state.pos
              ) {
                ++this.state.curLine;
                this.state.lineStart = match.index + match[0].length;
              }

              this.pushComment(
                true,
                this.input.slice(start + 2, end),
                start,
                this.state.pos,
                startLoc,
                this.state.curPosition()
              );
            }

            skipLineComment(startSkip) {
              const start = this.state.pos;
              const startLoc = this.state.curPosition();
              let ch = this.input.charCodeAt((this.state.pos += startSkip));

              if (this.state.pos < this.input.length) {
                while (
                  ch !== 10 &&
                  ch !== 13 &&
                  ch !== 8232 &&
                  ch !== 8233 &&
                  ++this.state.pos < this.input.length
                ) {
                  ch = this.input.charCodeAt(this.state.pos);
                }
              }

              this.pushComment(
                false,
                this.input.slice(start + startSkip, this.state.pos),
                start,
                this.state.pos,
                startLoc,
                this.state.curPosition()
              );
            }

            skipSpace() {
              loop: while (this.state.pos < this.input.length) {
                const ch = this.input.charCodeAt(this.state.pos);

                switch (ch) {
                  case 13:
                    if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                      ++this.state.pos;
                    }

                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos;
                    ++this.state.curLine;
                    this.state.lineStart = this.state.pos;
                    break;

                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42:
                        this.skipBlockComment();
                        break;

                      case 47:
                        this.skipLineComment(2);
                        break;

                      default:
                        break loop;
                    }

                    break;

                  default:
                    if (isWhitespace(ch)) {
                      ++this.state.pos;
                    } else {
                      break loop;
                    }
                }
              }
            }

            finishToken(type, val) {
              this.state.end = this.state.pos;
              this.state.endLoc = this.state.curPosition();
              const prevType = this.state.type;
              this.state.type = type;
              this.state.value = val;
              this.updateContext(prevType);
            }

            readToken_numberSign() {
              if (this.state.pos === 0 && this.readToken_interpreter()) {
                return;
              }

              const nextPos = this.state.pos + 1;
              const next = this.input.charCodeAt(nextPos);

              if (next >= 48 && next <= 57) {
                this.raise(this.state.pos, "Unexpected digit after hash token");
              }

              if (
                (this.hasPlugin("classPrivateProperties") ||
                  this.hasPlugin("classPrivateMethods")) &&
                this.state.classLevel > 0
              ) {
                ++this.state.pos;
                this.finishToken(types.hash);
                return;
              } else if (
                this.getPluginOption("pipelineOperator", "proposal") === "smart"
              ) {
                this.finishOp(types.hash, 1);
              } else {
                this.raise(this.state.pos, "Unexpected character '#'");
              }
            }

            readToken_dot() {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next >= 48 && next <= 57) {
                this.readNumber(true);
                return;
              }

              const next2 = this.input.charCodeAt(this.state.pos + 2);

              if (next === 46 && next2 === 46) {
                this.state.pos += 3;
                this.finishToken(types.ellipsis);
              } else {
                ++this.state.pos;
                this.finishToken(types.dot);
              }
            }

            readToken_slash() {
              if (this.state.exprAllowed && !this.state.inType) {
                ++this.state.pos;
                this.readRegexp();
                return;
              }

              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === 61) {
                this.finishOp(types.assign, 2);
              } else {
                this.finishOp(types.slash, 1);
              }
            }

            readToken_interpreter() {
              if (this.state.pos !== 0 || this.state.input.length < 2)
                return false;
              const start = this.state.pos;
              this.state.pos += 1;
              let ch = this.input.charCodeAt(this.state.pos);
              if (ch !== 33) return false;

              while (
                ch !== 10 &&
                ch !== 13 &&
                ch !== 8232 &&
                ch !== 8233 &&
                ++this.state.pos < this.input.length
              ) {
                ch = this.input.charCodeAt(this.state.pos);
              }

              const value = this.input.slice(start + 2, this.state.pos);
              this.finishToken(types.interpreterDirective, value);
              return true;
            }

            readToken_mult_modulo(code) {
              let type = code === 42 ? types.star : types.modulo;
              let width = 1;
              let next = this.input.charCodeAt(this.state.pos + 1);
              const exprAllowed = this.state.exprAllowed;

              if (code === 42 && next === 42) {
                width++;
                next = this.input.charCodeAt(this.state.pos + 2);
                type = types.exponent;
              }

              if (next === 61 && !exprAllowed) {
                width++;
                type = types.assign;
              }

              this.finishOp(type, width);
            }

            readToken_pipe_amp(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === code) {
                if (this.input.charCodeAt(this.state.pos + 2) === 61) {
                  this.finishOp(types.assign, 3);
                } else {
                  this.finishOp(
                    code === 124 ? types.logicalOR : types.logicalAND,
                    2
                  );
                }

                return;
              }

              if (code === 124) {
                if (next === 62) {
                  this.finishOp(types.pipeline, 2);
                  return;
                } else if (next === 125 && this.hasPlugin("flow")) {
                  this.finishOp(types.braceBarR, 2);
                  return;
                }
              }

              if (next === 61) {
                this.finishOp(types.assign, 2);
                return;
              }

              this.finishOp(
                code === 124 ? types.bitwiseOR : types.bitwiseAND,
                1
              );
            }

            readToken_caret() {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === 61) {
                this.finishOp(types.assign, 2);
              } else {
                this.finishOp(types.bitwiseXOR, 1);
              }
            }

            readToken_plus_min(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === code) {
                if (
                  next === 45 &&
                  !this.inModule &&
                  this.input.charCodeAt(this.state.pos + 2) === 62 &&
                  lineBreak.test(
                    this.input.slice(this.state.lastTokEnd, this.state.pos)
                  )
                ) {
                  this.skipLineComment(3);
                  this.skipSpace();
                  this.nextToken();
                  return;
                }

                this.finishOp(types.incDec, 2);
                return;
              }

              if (next === 61) {
                this.finishOp(types.assign, 2);
              } else {
                this.finishOp(types.plusMin, 1);
              }
            }

            readToken_lt_gt(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);
              let size = 1;

              if (next === code) {
                size =
                  code === 62 &&
                  this.input.charCodeAt(this.state.pos + 2) === 62
                    ? 3
                    : 2;

                if (this.input.charCodeAt(this.state.pos + size) === 61) {
                  this.finishOp(types.assign, size + 1);
                  return;
                }

                this.finishOp(types.bitShift, size);
                return;
              }

              if (
                next === 33 &&
                code === 60 &&
                !this.inModule &&
                this.input.charCodeAt(this.state.pos + 2) === 45 &&
                this.input.charCodeAt(this.state.pos + 3) === 45
              ) {
                this.skipLineComment(4);
                this.skipSpace();
                this.nextToken();
                return;
              }

              if (next === 61) {
                size = 2;
              }

              this.finishOp(types.relational, size);
            }

            readToken_eq_excl(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === 61) {
                this.finishOp(
                  types.equality,
                  this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2
                );
                return;
              }

              if (code === 61 && next === 62) {
                this.state.pos += 2;
                this.finishToken(types.arrow);
                return;
              }

              this.finishOp(code === 61 ? types.eq : types.bang, 1);
            }

            readToken_question() {
              const next = this.input.charCodeAt(this.state.pos + 1);
              const next2 = this.input.charCodeAt(this.state.pos + 2);

              if (next === 63 && !this.state.inType) {
                if (next2 === 61) {
                  this.finishOp(types.assign, 3);
                } else {
                  this.finishOp(types.nullishCoalescing, 2);
                }
              } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
                this.state.pos += 2;
                this.finishToken(types.questionDot);
              } else {
                ++this.state.pos;
                this.finishToken(types.question);
              }
            }

            getTokenFromCode(code) {
              switch (code) {
                case 35:
                  this.readToken_numberSign();
                  return;

                case 46:
                  this.readToken_dot();
                  return;

                case 40:
                  ++this.state.pos;
                  this.finishToken(types.parenL);
                  return;

                case 41:
                  ++this.state.pos;
                  this.finishToken(types.parenR);
                  return;

                case 59:
                  ++this.state.pos;
                  this.finishToken(types.semi);
                  return;

                case 44:
                  ++this.state.pos;
                  this.finishToken(types.comma);
                  return;

                case 91:
                  ++this.state.pos;
                  this.finishToken(types.bracketL);
                  return;

                case 93:
                  ++this.state.pos;
                  this.finishToken(types.bracketR);
                  return;

                case 123:
                  if (
                    this.hasPlugin("flow") &&
                    this.input.charCodeAt(this.state.pos + 1) === 124
                  ) {
                    this.finishOp(types.braceBarL, 2);
                  } else {
                    ++this.state.pos;
                    this.finishToken(types.braceL);
                  }

                  return;

                case 125:
                  ++this.state.pos;
                  this.finishToken(types.braceR);
                  return;

                case 58:
                  if (
                    this.hasPlugin("functionBind") &&
                    this.input.charCodeAt(this.state.pos + 1) === 58
                  ) {
                    this.finishOp(types.doubleColon, 2);
                  } else {
                    ++this.state.pos;
                    this.finishToken(types.colon);
                  }

                  return;

                case 63:
                  this.readToken_question();
                  return;

                case 64:
                  ++this.state.pos;
                  this.finishToken(types.at);
                  return;

                case 96:
                  ++this.state.pos;
                  this.finishToken(types.backQuote);
                  return;

                case 48: {
                  const next = this.input.charCodeAt(this.state.pos + 1);

                  if (next === 120 || next === 88) {
                    this.readRadixNumber(16);
                    return;
                  }

                  if (next === 111 || next === 79) {
                    this.readRadixNumber(8);
                    return;
                  }

                  if (next === 98 || next === 66) {
                    this.readRadixNumber(2);
                    return;
                  }
                }

                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  this.readNumber(false);
                  return;

                case 34:
                case 39:
                  this.readString(code);
                  return;

                case 47:
                  this.readToken_slash();
                  return;

                case 37:
                case 42:
                  this.readToken_mult_modulo(code);
                  return;

                case 124:
                case 38:
                  this.readToken_pipe_amp(code);
                  return;

                case 94:
                  this.readToken_caret();
                  return;

                case 43:
                case 45:
                  this.readToken_plus_min(code);
                  return;

                case 60:
                case 62:
                  this.readToken_lt_gt(code);
                  return;

                case 61:
                case 33:
                  this.readToken_eq_excl(code);
                  return;

                case 126:
                  this.finishOp(types.tilde, 1);
                  return;
              }

              this.raise(
                this.state.pos,
                `Unexpected character '${String.fromCodePoint(code)}'`
              );
            }

            finishOp(type, size) {
              const str = this.input.slice(
                this.state.pos,
                this.state.pos + size
              );
              this.state.pos += size;
              this.finishToken(type, str);
            }

            readRegexp() {
              const start = this.state.pos;
              let escaped, inClass;

              for (;;) {
                if (this.state.pos >= this.input.length) {
                  this.raise(start, "Unterminated regular expression");
                }

                const ch = this.input.charAt(this.state.pos);

                if (lineBreak.test(ch)) {
                  this.raise(start, "Unterminated regular expression");
                }

                if (escaped) {
                  escaped = false;
                } else {
                  if (ch === "[") {
                    inClass = true;
                  } else if (ch === "]" && inClass) {
                    inClass = false;
                  } else if (ch === "/" && !inClass) {
                    break;
                  }

                  escaped = ch === "\\";
                }

                ++this.state.pos;
              }

              const content = this.input.slice(start, this.state.pos);
              ++this.state.pos;
              let mods = "";

              while (this.state.pos < this.input.length) {
                const char = this.input[this.state.pos];
                const charCode = this.input.codePointAt(this.state.pos);

                if (VALID_REGEX_FLAGS.indexOf(char) > -1) {
                  if (mods.indexOf(char) > -1) {
                    this.raise(
                      this.state.pos + 1,
                      "Duplicate regular expression flag"
                    );
                  }

                  ++this.state.pos;
                  mods += char;
                } else if (isIdentifierChar(charCode) || charCode === 92) {
                  this.raise(
                    this.state.pos + 1,
                    "Invalid regular expression flag"
                  );
                } else {
                  break;
                }
              }

              this.finishToken(types.regexp, {
                pattern: content,
                flags: mods,
              });
            }

            readInt(radix, len) {
              const start = this.state.pos;
              const forbiddenSiblings =
                radix === 16
                  ? forbiddenNumericSeparatorSiblings.hex
                  : forbiddenNumericSeparatorSiblings.decBinOct;
              const allowedSiblings =
                radix === 16
                  ? allowedNumericSeparatorSiblings.hex
                  : radix === 10
                  ? allowedNumericSeparatorSiblings.dec
                  : radix === 8
                  ? allowedNumericSeparatorSiblings.oct
                  : allowedNumericSeparatorSiblings.bin;
              let total = 0;

              for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                const code = this.input.charCodeAt(this.state.pos);
                let val;

                if (this.hasPlugin("numericSeparator")) {
                  const prev = this.input.charCodeAt(this.state.pos - 1);
                  const next = this.input.charCodeAt(this.state.pos + 1);

                  if (code === 95) {
                    if (allowedSiblings.indexOf(next) === -1) {
                      this.raise(this.state.pos, "Invalid or unexpected token");
                    }

                    if (
                      forbiddenSiblings.indexOf(prev) > -1 ||
                      forbiddenSiblings.indexOf(next) > -1 ||
                      Number.isNaN(next)
                    ) {
                      this.raise(this.state.pos, "Invalid or unexpected token");
                    }

                    ++this.state.pos;
                    continue;
                  }
                }

                if (code >= 97) {
                  val = code - 97 + 10;
                } else if (code >= 65) {
                  val = code - 65 + 10;
                } else if (_isDigit(code)) {
                  val = code - 48;
                } else {
                  val = Infinity;
                }

                if (val >= radix) break;
                ++this.state.pos;
                total = total * radix + val;
              }

              if (
                this.state.pos === start ||
                (len != null && this.state.pos - start !== len)
              ) {
                return null;
              }

              return total;
            }

            readRadixNumber(radix) {
              const start = this.state.pos;
              let isBigInt = false;
              this.state.pos += 2;
              const val = this.readInt(radix);

              if (val == null) {
                this.raise(
                  this.state.start + 2,
                  "Expected number in radix " + radix
                );
              }

              if (this.hasPlugin("bigInt")) {
                if (this.input.charCodeAt(this.state.pos) === 110) {
                  ++this.state.pos;
                  isBigInt = true;
                }
              }

              if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {
                this.raise(this.state.pos, "Identifier directly after number");
              }

              if (isBigInt) {
                const str = this.input
                  .slice(start, this.state.pos)
                  .replace(/[_n]/g, "");
                this.finishToken(types.bigint, str);
                return;
              }

              this.finishToken(types.num, val);
            }

            readNumber(startsWithDot) {
              const start = this.state.pos;
              let isFloat = false;
              let isBigInt = false;

              if (!startsWithDot && this.readInt(10) === null) {
                this.raise(start, "Invalid number");
              }

              let octal =
                this.state.pos - start >= 2 &&
                this.input.charCodeAt(start) === 48;

              if (octal) {
                if (this.state.strict) {
                  this.raise(
                    start,
                    "Legacy octal literals are not allowed in strict mode"
                  );
                }

                if (/[89]/.test(this.input.slice(start, this.state.pos))) {
                  octal = false;
                }
              }

              let next = this.input.charCodeAt(this.state.pos);

              if (next === 46 && !octal) {
                ++this.state.pos;
                this.readInt(10);
                isFloat = true;
                next = this.input.charCodeAt(this.state.pos);
              }

              if ((next === 69 || next === 101) && !octal) {
                next = this.input.charCodeAt(++this.state.pos);

                if (next === 43 || next === 45) {
                  ++this.state.pos;
                }

                if (this.readInt(10) === null)
                  this.raise(start, "Invalid number");
                isFloat = true;
                next = this.input.charCodeAt(this.state.pos);
              }

              if (this.hasPlugin("bigInt")) {
                if (next === 110) {
                  if (isFloat || octal)
                    this.raise(start, "Invalid BigIntLiteral");
                  ++this.state.pos;
                  isBigInt = true;
                }
              }

              if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {
                this.raise(this.state.pos, "Identifier directly after number");
              }

              const str = this.input
                .slice(start, this.state.pos)
                .replace(/[_n]/g, "");

              if (isBigInt) {
                this.finishToken(types.bigint, str);
                return;
              }

              const val = octal ? parseInt(str, 8) : parseFloat(str);
              this.finishToken(types.num, val);
            }

            readCodePoint(throwOnInvalid) {
              const ch = this.input.charCodeAt(this.state.pos);
              let code;

              if (ch === 123) {
                const codePos = ++this.state.pos;
                code = this.readHexChar(
                  this.input.indexOf("}", this.state.pos) - this.state.pos,
                  throwOnInvalid
                );
                ++this.state.pos;

                if (code === null) {
                  --this.state.invalidTemplateEscapePosition;
                } else if (code > 0x10ffff) {
                  if (throwOnInvalid) {
                    this.raise(codePos, "Code point out of bounds");
                  } else {
                    this.state.invalidTemplateEscapePosition = codePos - 2;
                    return null;
                  }
                }
              } else {
                code = this.readHexChar(4, throwOnInvalid);
              }

              return code;
            }

            readString(quote) {
              let out = "",
                chunkStart = ++this.state.pos;

              for (;;) {
                if (this.state.pos >= this.input.length) {
                  this.raise(this.state.start, "Unterminated string constant");
                }

                const ch = this.input.charCodeAt(this.state.pos);
                if (ch === quote) break;

                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.readEscapedChar(false);
                  chunkStart = this.state.pos;
                } else if (ch === 8232 || ch === 8233) {
                  ++this.state.pos;
                  ++this.state.curLine;
                } else if (isNewLine(ch)) {
                  this.raise(this.state.start, "Unterminated string constant");
                } else {
                  ++this.state.pos;
                }
              }

              out += this.input.slice(chunkStart, this.state.pos++);
              this.finishToken(types.string, out);
            }

            readTmplToken() {
              let out = "",
                chunkStart = this.state.pos,
                containsInvalid = false;

              for (;;) {
                if (this.state.pos >= this.input.length) {
                  this.raise(this.state.start, "Unterminated template");
                }

                const ch = this.input.charCodeAt(this.state.pos);

                if (
                  ch === 96 ||
                  (ch === 36 &&
                    this.input.charCodeAt(this.state.pos + 1) === 123)
                ) {
                  if (
                    this.state.pos === this.state.start &&
                    this.match(types.template)
                  ) {
                    if (ch === 36) {
                      this.state.pos += 2;
                      this.finishToken(types.dollarBraceL);
                      return;
                    } else {
                      ++this.state.pos;
                      this.finishToken(types.backQuote);
                      return;
                    }
                  }

                  out += this.input.slice(chunkStart, this.state.pos);
                  this.finishToken(
                    types.template,
                    containsInvalid ? null : out
                  );
                  return;
                }

                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  const escaped = this.readEscapedChar(true);

                  if (escaped === null) {
                    containsInvalid = true;
                  } else {
                    out += escaped;
                  }

                  chunkStart = this.state.pos;
                } else if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  ++this.state.pos;

                  switch (ch) {
                    case 13:
                      if (this.input.charCodeAt(this.state.pos) === 10) {
                        ++this.state.pos;
                      }

                    case 10:
                      out += "\n";
                      break;

                    default:
                      out += String.fromCharCode(ch);
                      break;
                  }

                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
              }
            }

            readEscapedChar(inTemplate) {
              const throwOnInvalid = !inTemplate;
              const ch = this.input.charCodeAt(++this.state.pos);
              ++this.state.pos;

              switch (ch) {
                case 110:
                  return "\n";

                case 114:
                  return "\r";

                case 120: {
                  const code = this.readHexChar(2, throwOnInvalid);
                  return code === null ? null : String.fromCharCode(code);
                }

                case 117: {
                  const code = this.readCodePoint(throwOnInvalid);
                  return code === null ? null : String.fromCodePoint(code);
                }

                case 116:
                  return "\t";

                case 98:
                  return "\b";

                case 118:
                  return "\u000b";

                case 102:
                  return "\f";

                case 13:
                  if (this.input.charCodeAt(this.state.pos) === 10) {
                    ++this.state.pos;
                  }

                case 10:
                  this.state.lineStart = this.state.pos;
                  ++this.state.curLine;
                  return "";

                default:
                  if (ch >= 48 && ch <= 55) {
                    const codePos = this.state.pos - 1;
                    let octalStr = this.input
                      .substr(this.state.pos - 1, 3)
                      .match(/^[0-7]+/)[0];
                    let octal = parseInt(octalStr, 8);

                    if (octal > 255) {
                      octalStr = octalStr.slice(0, -1);
                      octal = parseInt(octalStr, 8);
                    }

                    if (octal > 0) {
                      if (inTemplate) {
                        this.state.invalidTemplateEscapePosition = codePos;
                        return null;
                      } else if (this.state.strict) {
                        this.raise(codePos, "Octal literal in strict mode");
                      } else if (!this.state.containsOctal) {
                        this.state.containsOctal = true;
                        this.state.octalPosition = codePos;
                      }
                    }

                    this.state.pos += octalStr.length - 1;
                    return String.fromCharCode(octal);
                  }

                  return String.fromCharCode(ch);
              }
            }

            readHexChar(len, throwOnInvalid) {
              const codePos = this.state.pos;
              const n = this.readInt(16, len);

              if (n === null) {
                if (throwOnInvalid) {
                  this.raise(codePos, "Bad character escape sequence");
                } else {
                  this.state.pos = codePos - 1;
                  this.state.invalidTemplateEscapePosition = codePos - 1;
                }
              }

              return n;
            }

            readWord1() {
              this.state.containsEsc = false;
              let word = "",
                first = true,
                chunkStart = this.state.pos;

              while (this.state.pos < this.input.length) {
                const ch = this.input.codePointAt(this.state.pos);

                if (isIdentifierChar(ch)) {
                  this.state.pos += ch <= 0xffff ? 1 : 2;
                } else if (this.state.isIterator && ch === 64) {
                  this.state.pos += 1;
                } else if (ch === 92) {
                  this.state.containsEsc = true;
                  word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.pos;

                  if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(
                      this.state.pos,
                      "Expecting Unicode escape sequence \\uXXXX"
                    );
                  }

                  ++this.state.pos;
                  const esc = this.readCodePoint(true);

                  if (
                    !(first ? isIdentifierStart : isIdentifierChar)(esc, true)
                  ) {
                    this.raise(escStart, "Invalid Unicode escape");
                  }

                  word += String.fromCodePoint(esc);
                  chunkStart = this.state.pos;
                } else {
                  break;
                }

                first = false;
              }

              return word + this.input.slice(chunkStart, this.state.pos);
            }

            isIterator(word) {
              return word === "@@iterator" || word === "@@asyncIterator";
            }

            readWord() {
              const word = this.readWord1();
              let type = types.name;

              if (this.isKeyword(word)) {
                if (this.state.containsEsc) {
                  this.raise(
                    this.state.pos,
                    `Escape sequence in keyword ${word}`
                  );
                }

                type = keywords[word];
              }

              if (
                this.state.isIterator &&
                (!this.isIterator(word) || !this.state.inType)
              ) {
                this.raise(this.state.pos, `Invalid identifier ${word}`);
              }

              this.finishToken(type, word);
            }

            braceIsBlock(prevType) {
              const parent = this.curContext();

              if (
                parent === types$1.functionExpression ||
                parent === types$1.functionStatement
              ) {
                return true;
              }

              if (
                prevType === types.colon &&
                (parent === types$1.braceStatement ||
                  parent === types$1.braceExpression)
              ) {
                return !parent.isExpr;
              }

              if (
                prevType === types._return ||
                prevType === types._yield ||
                (prevType === types.name && this.state.exprAllowed)
              ) {
                return lineBreak.test(
                  this.input.slice(this.state.lastTokEnd, this.state.start)
                );
              }

              if (
                prevType === types._else ||
                prevType === types.semi ||
                prevType === types.eof ||
                prevType === types.parenR ||
                prevType === types.arrow
              ) {
                return true;
              }

              if (prevType === types.braceL) {
                return parent === types$1.braceStatement;
              }

              if (
                prevType === types._var ||
                prevType === types._let ||
                prevType === types._const
              ) {
                return false;
              }

              if (prevType === types.relational) {
                return true;
              }

              return !this.state.exprAllowed;
            }

            updateContext(prevType) {
              const type = this.state.type;
              let update;

              if (
                type.keyword &&
                (prevType === types.dot || prevType === types.questionDot)
              ) {
                this.state.exprAllowed = false;
              } else if ((update = type.updateContext)) {
                update.call(this, prevType);
              } else {
                this.state.exprAllowed = type.beforeExpr;
              }
            }
          }

          class UtilParser extends Tokenizer {
            addExtra(node, key, val) {
              if (!node) return;
              const extra = (node.extra = node.extra || {});
              extra[key] = val;
            }

            isRelational(op) {
              return this.match(types.relational) && this.state.value === op;
            }

            isLookaheadRelational(op) {
              const l = this.lookahead();
              return l.type == types.relational && l.value == op;
            }

            expectRelational(op) {
              if (this.isRelational(op)) {
                this.next();
              } else {
                this.unexpected(null, types.relational);
              }
            }

            eatRelational(op) {
              if (this.isRelational(op)) {
                this.next();
                return true;
              }

              return false;
            }

            isContextual(name) {
              return (
                this.match(types.name) &&
                this.state.value === name &&
                !this.state.containsEsc
              );
            }

            isLookaheadContextual(name) {
              const l = this.lookahead();
              return l.type === types.name && l.value === name;
            }

            eatContextual(name) {
              return this.isContextual(name) && this.eat(types.name);
            }

            expectContextual(name, message) {
              if (!this.eatContextual(name)) this.unexpected(null, message);
            }

            canInsertSemicolon() {
              return (
                this.match(types.eof) ||
                this.match(types.braceR) ||
                this.hasPrecedingLineBreak()
              );
            }

            hasPrecedingLineBreak() {
              return lineBreak.test(
                this.input.slice(this.state.lastTokEnd, this.state.start)
              );
            }

            isLineTerminator() {
              return this.eat(types.semi) || this.canInsertSemicolon();
            }

            semicolon() {
              if (!this.isLineTerminator()) this.unexpected(null, types.semi);
            }

            expect(type, pos) {
              this.eat(type) || this.unexpected(pos, type);
            }

            unexpected(pos, messageOrType = "Unexpected token") {
              if (typeof messageOrType !== "string") {
                messageOrType = `Unexpected token, expected "${
                  messageOrType.label
                }"`;
              }

              throw this.raise(
                pos != null ? pos : this.state.start,
                messageOrType
              );
            }

            expectPlugin(name, pos) {
              if (!this.hasPlugin(name)) {
                throw this.raise(
                  pos != null ? pos : this.state.start,
                  `This experimental syntax requires enabling the parser plugin: '${name}'`,
                  {
                    missingPluginNames: [name],
                  }
                );
              }

              return true;
            }

            expectOnePlugin(names, pos) {
              if (!names.some(n => this.hasPlugin(n))) {
                throw this.raise(
                  pos != null ? pos : this.state.start,
                  `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(
                    ", "
                  )}'`,
                  {
                    missingPluginNames: names,
                  }
                );
              }
            }
          }

          const commentKeys = [
            "leadingComments",
            "trailingComments",
            "innerComments",
          ];

          class Node {
            constructor(parser, pos, loc) {
              this.type = "";
              this.start = pos;
              this.end = 0;
              this.loc = new SourceLocation(loc);
              if (parser && parser.options.ranges) this.range = [pos, 0];
              if (parser && parser.filename)
                this.loc.filename = parser.filename;
            }

            __clone() {
              const node2 = new Node();
              Object.keys(this).forEach(key => {
                if (commentKeys.indexOf(key) < 0) {
                  node2[key] = this[key];
                }
              });
              return node2;
            }
          }

          class NodeUtils extends UtilParser {
            startNode() {
              return new Node(this, this.state.start, this.state.startLoc);
            }

            startNodeAt(pos, loc) {
              return new Node(this, pos, loc);
            }

            startNodeAtNode(type) {
              return this.startNodeAt(type.start, type.loc.start);
            }

            finishNode(node, type) {
              return this.finishNodeAt(
                node,
                type,
                this.state.lastTokEnd,
                this.state.lastTokEndLoc
              );
            }

            finishNodeAt(node, type, pos, loc) {
              node.type = type;
              node.end = pos;
              node.loc.end = loc;
              if (this.options.ranges) node.range[1] = pos;
              this.processComment(node);
              return node;
            }

            resetStartLocationFromNode(node, locationNode) {
              node.start = locationNode.start;
              node.loc.start = locationNode.loc.start;
              if (this.options.ranges) node.range[0] = locationNode.range[0];
            }
          }

          class LValParser extends NodeUtils {
            toAssignable(node, isBinding, contextDescription) {
              if (node) {
                switch (node.type) {
                  case "Identifier":
                  case "ObjectPattern":
                  case "ArrayPattern":
                  case "AssignmentPattern":
                    break;

                  case "ObjectExpression":
                    node.type = "ObjectPattern";

                    for (
                      let index = 0;
                      index < node.properties.length;
                      index++
                    ) {
                      const prop = node.properties[index];
                      const isLast = index === node.properties.length - 1;
                      this.toAssignableObjectExpressionProp(
                        prop,
                        isBinding,
                        isLast
                      );
                    }

                    break;

                  case "ObjectProperty":
                    this.toAssignable(
                      node.value,
                      isBinding,
                      contextDescription
                    );
                    break;

                  case "SpreadElement": {
                    this.checkToRestConversion(node);
                    node.type = "RestElement";
                    const arg = node.argument;
                    this.toAssignable(arg, isBinding, contextDescription);
                    break;
                  }

                  case "ArrayExpression":
                    node.type = "ArrayPattern";
                    this.toAssignableList(
                      node.elements,
                      isBinding,
                      contextDescription
                    );
                    break;

                  case "AssignmentExpression":
                    if (node.operator === "=") {
                      node.type = "AssignmentPattern";
                      delete node.operator;
                    } else {
                      this.raise(
                        node.left.end,
                        "Only '=' operator can be used for specifying default value."
                      );
                    }

                    break;

                  case "MemberExpression":
                    if (!isBinding) break;

                  default: {
                    const message =
                      "Invalid left-hand side" +
                      (contextDescription
                        ? " in " + contextDescription
                        : "expression");
                    this.raise(node.start, message);
                  }
                }
              }

              return node;
            }

            toAssignableObjectExpressionProp(prop, isBinding, isLast) {
              if (prop.type === "ObjectMethod") {
                const error =
                  prop.kind === "get" || prop.kind === "set"
                    ? "Object pattern can't contain getter or setter"
                    : "Object pattern can't contain methods";
                this.raise(prop.key.start, error);
              } else if (prop.type === "SpreadElement" && !isLast) {
                this.raise(
                  prop.start,
                  "The rest element has to be the last element when destructuring"
                );
              } else {
                this.toAssignable(
                  prop,
                  isBinding,
                  "object destructuring pattern"
                );
              }
            }

            toAssignableList(exprList, isBinding, contextDescription) {
              let end = exprList.length;

              if (end) {
                const last = exprList[end - 1];

                if (last && last.type === "RestElement") {
                  --end;
                } else if (last && last.type === "SpreadElement") {
                  last.type = "RestElement";
                  const arg = last.argument;
                  this.toAssignable(arg, isBinding, contextDescription);

                  if (
                    [
                      "Identifier",
                      "MemberExpression",
                      "ArrayPattern",
                      "ObjectPattern",
                    ].indexOf(arg.type) === -1
                  ) {
                    this.unexpected(arg.start);
                  }

                  --end;
                }
              }

              for (let i = 0; i < end; i++) {
                const elt = exprList[i];

                if (elt && elt.type === "SpreadElement") {
                  this.raise(
                    elt.start,
                    "The rest element has to be the last element when destructuring"
                  );
                }

                if (elt) this.toAssignable(elt, isBinding, contextDescription);
              }

              return exprList;
            }

            toReferencedList(exprList, isParenthesizedExpr) {
              return exprList;
            }

            toReferencedListDeep(exprList, isParenthesizedExpr) {
              this.toReferencedList(exprList, isParenthesizedExpr);

              for (let _i = 0; _i < exprList.length; _i++) {
                const expr = exprList[_i];

                if (expr && expr.type === "ArrayExpression") {
                  this.toReferencedListDeep(expr.elements);
                }
              }

              return exprList;
            }

            parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {
              const node = this.startNode();
              this.next();
              node.argument = this.parseMaybeAssign(
                false,
                refShorthandDefaultPos,
                undefined,
                refNeedsArrowPos
              );
              return this.finishNode(node, "SpreadElement");
            }

            parseRest() {
              const node = this.startNode();
              this.next();
              node.argument = this.parseBindingAtom();
              return this.finishNode(node, "RestElement");
            }

            shouldAllowYieldIdentifier() {
              return (
                this.match(types._yield) &&
                !this.state.strict &&
                !this.state.inGenerator
              );
            }

            parseBindingIdentifier() {
              return this.parseIdentifier(this.shouldAllowYieldIdentifier());
            }

            parseBindingAtom() {
              switch (this.state.type) {
                case types._yield:
                case types.name:
                  return this.parseBindingIdentifier();

                case types.bracketL: {
                  const node = this.startNode();
                  this.next();
                  node.elements = this.parseBindingList(types.bracketR, true);
                  return this.finishNode(node, "ArrayPattern");
                }

                case types.braceL:
                  return this.parseObj(true);

                default:
                  throw this.unexpected();
              }
            }

            parseBindingList(close, allowEmpty, allowModifiers) {
              const elts = [];
              let first = true;

              while (!this.eat(close)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma);
                }

                if (allowEmpty && this.match(types.comma)) {
                  elts.push(null);
                } else if (this.eat(close)) {
                  break;
                } else if (this.match(types.ellipsis)) {
                  elts.push(
                    this.parseAssignableListItemTypes(this.parseRest())
                  );

                  if (
                    this.state.inFunction &&
                    this.state.inParameters &&
                    this.match(types.comma)
                  ) {
                    const nextTokenType = this.lookahead().type;
                    const errorMessage =
                      nextTokenType === types.parenR
                        ? "A trailing comma is not permitted after the rest element"
                        : "Rest parameter must be last formal parameter";
                    this.raise(this.state.start, errorMessage);
                  } else {
                    this.expect(close);
                  }

                  break;
                } else {
                  const decorators = [];

                  if (this.match(types.at) && this.hasPlugin("decorators")) {
                    this.raise(
                      this.state.start,
                      "Stage 2 decorators cannot be used to decorate parameters"
                    );
                  }

                  while (this.match(types.at)) {
                    decorators.push(this.parseDecorator());
                  }

                  elts.push(
                    this.parseAssignableListItem(allowModifiers, decorators)
                  );
                }
              }

              return elts;
            }

            parseAssignableListItem(allowModifiers, decorators) {
              const left = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(left);
              const elt = this.parseMaybeDefault(
                left.start,
                left.loc.start,
                left
              );

              if (decorators.length) {
                left.decorators = decorators;
              }

              return elt;
            }

            parseAssignableListItemTypes(param) {
              return param;
            }

            parseMaybeDefault(startPos, startLoc, left) {
              startLoc = startLoc || this.state.startLoc;
              startPos = startPos || this.state.start;
              left = left || this.parseBindingAtom();
              if (!this.eat(types.eq)) return left;
              const node = this.startNodeAt(startPos, startLoc);
              node.left = left;
              node.right = this.parseMaybeAssign();
              return this.finishNode(node, "AssignmentPattern");
            }

            checkLVal(expr, isBinding, checkClashes, contextDescription) {
              switch (expr.type) {
                case "Identifier":
                  this.checkReservedWord(expr.name, expr.start, false, true);

                  if (checkClashes) {
                    const key = `_${expr.name}`;

                    if (checkClashes[key]) {
                      this.raise(
                        expr.start,
                        "Argument name clash in strict mode"
                      );
                    } else {
                      checkClashes[key] = true;
                    }
                  }

                  break;

                case "MemberExpression":
                  if (isBinding)
                    this.raise(expr.start, "Binding member expression");
                  break;

                case "ObjectPattern":
                  for (
                    let _i2 = 0, _expr$properties = expr.properties;
                    _i2 < _expr$properties.length;
                    _i2++
                  ) {
                    let prop = _expr$properties[_i2];
                    if (prop.type === "ObjectProperty") prop = prop.value;
                    this.checkLVal(
                      prop,
                      isBinding,
                      checkClashes,
                      "object destructuring pattern"
                    );
                  }

                  break;

                case "ArrayPattern":
                  for (
                    let _i3 = 0, _expr$elements = expr.elements;
                    _i3 < _expr$elements.length;
                    _i3++
                  ) {
                    const elem = _expr$elements[_i3];

                    if (elem) {
                      this.checkLVal(
                        elem,
                        isBinding,
                        checkClashes,
                        "array destructuring pattern"
                      );
                    }
                  }

                  break;

                case "AssignmentPattern":
                  this.checkLVal(
                    expr.left,
                    isBinding,
                    checkClashes,
                    "assignment pattern"
                  );
                  break;

                case "RestElement":
                  this.checkLVal(
                    expr.argument,
                    isBinding,
                    checkClashes,
                    "rest element"
                  );
                  break;

                default: {
                  const message =
                    (isBinding ? "Binding invalid" : "Invalid") +
                    " left-hand side" +
                    (contextDescription
                      ? " in " + contextDescription
                      : "expression");
                  this.raise(expr.start, message);
                }
              }
            }

            checkToRestConversion(node) {
              const validArgumentTypes = ["Identifier", "MemberExpression"];

              if (validArgumentTypes.indexOf(node.argument.type) !== -1) {
                return;
              }

              this.raise(
                node.argument.start,
                "Invalid rest operator's argument"
              );
            }
          }

          class ExpressionParser extends LValParser {
            checkPropClash(prop, propHash) {
              if (prop.computed || prop.kind) return;
              const key = prop.key;
              const name =
                key.type === "Identifier" ? key.name : String(key.value);

              if (name === "__proto__") {
                if (propHash.proto) {
                  this.raise(key.start, "Redefinition of __proto__ property");
                }

                propHash.proto = true;
              }
            }

            getExpression() {
              this.nextToken();
              const expr = this.parseExpression();

              if (!this.match(types.eof)) {
                this.unexpected();
              }

              expr.comments = this.state.comments;
              return expr;
            }

            parseExpression(noIn, refShorthandDefaultPos) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);

              if (this.match(types.comma)) {
                const node = this.startNodeAt(startPos, startLoc);
                node.expressions = [expr];

                while (this.eat(types.comma)) {
                  node.expressions.push(
                    this.parseMaybeAssign(noIn, refShorthandDefaultPos)
                  );
                }

                this.toReferencedList(node.expressions);
                return this.finishNode(node, "SequenceExpression");
              }

              return expr;
            }

            parseMaybeAssign(
              noIn,
              refShorthandDefaultPos,
              afterLeftParse,
              refNeedsArrowPos
            ) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;

              if (this.match(types._yield) && this.state.inGenerator) {
                let left = this.parseYield();

                if (afterLeftParse) {
                  left = afterLeftParse.call(this, left, startPos, startLoc);
                }

                return left;
              }

              let failOnShorthandAssign;

              if (refShorthandDefaultPos) {
                failOnShorthandAssign = false;
              } else {
                refShorthandDefaultPos = {
                  start: 0,
                };
                failOnShorthandAssign = true;
              }

              if (
                this.match(types.parenL) ||
                this.match(types.name) ||
                this.match(types._yield)
              ) {
                this.state.potentialArrowAt = this.state.start;
              }

              let left = this.parseMaybeConditional(
                noIn,
                refShorthandDefaultPos,
                refNeedsArrowPos
              );

              if (afterLeftParse) {
                left = afterLeftParse.call(this, left, startPos, startLoc);
              }

              if (this.state.type.isAssign) {
                const node = this.startNodeAt(startPos, startLoc);
                const operator = this.state.value;
                node.operator = operator;

                if (operator === "??=") {
                  this.expectPlugin("nullishCoalescingOperator");
                  this.expectPlugin("logicalAssignment");
                }

                if (operator === "||=" || operator === "&&=") {
                  this.expectPlugin("logicalAssignment");
                }

                node.left = this.match(types.eq)
                  ? this.toAssignable(left, undefined, "assignment expression")
                  : left;
                refShorthandDefaultPos.start = 0;
                this.checkLVal(
                  left,
                  undefined,
                  undefined,
                  "assignment expression"
                );

                if (left.extra && left.extra.parenthesized) {
                  let errorMsg;

                  if (left.type === "ObjectPattern") {
                    errorMsg = "`({a}) = 0` use `({a} = 0)`";
                  } else if (left.type === "ArrayPattern") {
                    errorMsg = "`([a]) = 0` use `([a] = 0)`";
                  }

                  if (errorMsg) {
                    this.raise(
                      left.start,
                      `You're trying to assign to a parenthesized expression, eg. instead of ${errorMsg}`
                    );
                  }
                }

                this.next();
                node.right = this.parseMaybeAssign(noIn);
                return this.finishNode(node, "AssignmentExpression");
              } else if (
                failOnShorthandAssign &&
                refShorthandDefaultPos.start
              ) {
                this.unexpected(refShorthandDefaultPos.start);
              }

              return left;
            }

            parseMaybeConditional(
              noIn,
              refShorthandDefaultPos,
              refNeedsArrowPos
            ) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const potentialArrowAt = this.state.potentialArrowAt;
              const expr = this.parseExprOps(noIn, refShorthandDefaultPos);

              if (
                expr.type === "ArrowFunctionExpression" &&
                expr.start === potentialArrowAt
              ) {
                return expr;
              }

              if (refShorthandDefaultPos && refShorthandDefaultPos.start)
                return expr;
              return this.parseConditional(
                expr,
                noIn,
                startPos,
                startLoc,
                refNeedsArrowPos
              );
            }

            parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {
              if (this.eat(types.question)) {
                const node = this.startNodeAt(startPos, startLoc);
                node.test = expr;
                node.consequent = this.parseMaybeAssign();
                this.expect(types.colon);
                node.alternate = this.parseMaybeAssign(noIn);
                return this.finishNode(node, "ConditionalExpression");
              }

              return expr;
            }

            parseExprOps(noIn, refShorthandDefaultPos) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const potentialArrowAt = this.state.potentialArrowAt;
              const expr = this.parseMaybeUnary(refShorthandDefaultPos);

              if (
                expr.type === "ArrowFunctionExpression" &&
                expr.start === potentialArrowAt
              ) {
                return expr;
              }

              if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
                return expr;
              }

              return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
            }

            parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {
              const prec = this.state.type.binop;

              if (prec != null && (!noIn || !this.match(types._in))) {
                if (prec > minPrec) {
                  const node = this.startNodeAt(leftStartPos, leftStartLoc);
                  const operator = this.state.value;
                  node.left = left;
                  node.operator = operator;

                  if (
                    operator === "**" &&
                    left.type === "UnaryExpression" &&
                    !(left.extra && left.extra.parenthesized)
                  ) {
                    this.raise(
                      left.argument.start,
                      "Illegal expression. Wrap left hand side or entire exponentiation in parentheses."
                    );
                  }

                  const op = this.state.type;

                  if (op === types.pipeline) {
                    this.expectPlugin("pipelineOperator");
                    this.state.inPipeline = true;
                    this.checkPipelineAtInfixOperator(left, leftStartPos);
                  } else if (op === types.nullishCoalescing) {
                    this.expectPlugin("nullishCoalescingOperator");
                  }

                  this.next();

                  if (
                    op === types.pipeline &&
                    this.getPluginOption("pipelineOperator", "proposal") ===
                      "minimal"
                  ) {
                    if (
                      this.match(types.name) &&
                      this.state.value === "await" &&
                      this.state.inAsync
                    ) {
                      throw this.raise(
                        this.state.start,
                        `Unexpected "await" after pipeline body; await must have parentheses in minimal proposal`
                      );
                    }
                  }

                  node.right = this.parseExprOpRightExpr(op, prec, noIn);
                  this.finishNode(
                    node,
                    op === types.logicalOR ||
                      op === types.logicalAND ||
                      op === types.nullishCoalescing
                      ? "LogicalExpression"
                      : "BinaryExpression"
                  );
                  return this.parseExprOp(
                    node,
                    leftStartPos,
                    leftStartLoc,
                    minPrec,
                    noIn
                  );
                }
              }

              return left;
            }

            parseExprOpRightExpr(op, prec, noIn) {
              switch (op) {
                case types.pipeline:
                  if (
                    this.getPluginOption("pipelineOperator", "proposal") ===
                    "smart"
                  ) {
                    const startPos = this.state.start;
                    const startLoc = this.state.startLoc;
                    return this.withTopicPermittingContext(() => {
                      return this.parseSmartPipelineBody(
                        this.parseExprOpBaseRightExpr(op, prec, noIn),
                        startPos,
                        startLoc
                      );
                    });
                  }

                default:
                  return this.parseExprOpBaseRightExpr(op, prec, noIn);
              }
            }

            parseExprOpBaseRightExpr(op, prec, noIn) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              return this.parseExprOp(
                this.parseMaybeUnary(),
                startPos,
                startLoc,
                op.rightAssociative ? prec - 1 : prec,
                noIn
              );
            }

            parseMaybeUnary(refShorthandDefaultPos) {
              if (this.state.type.prefix) {
                const node = this.startNode();
                const update = this.match(types.incDec);
                node.operator = this.state.value;
                node.prefix = true;

                if (node.operator === "throw") {
                  this.expectPlugin("throwExpressions");
                }

                this.next();
                node.argument = this.parseMaybeUnary();

                if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
                  this.unexpected(refShorthandDefaultPos.start);
                }

                if (update) {
                  this.checkLVal(
                    node.argument,
                    undefined,
                    undefined,
                    "prefix operation"
                  );
                } else if (this.state.strict && node.operator === "delete") {
                  const arg = node.argument;

                  if (arg.type === "Identifier") {
                    this.raise(
                      node.start,
                      "Deleting local variable in strict mode"
                    );
                  } else if (
                    arg.type === "MemberExpression" &&
                    arg.property.type === "PrivateName"
                  ) {
                    this.raise(
                      node.start,
                      "Deleting a private field is not allowed"
                    );
                  }
                }

                return this.finishNode(
                  node,
                  update ? "UpdateExpression" : "UnaryExpression"
                );
              }

              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let expr = this.parseExprSubscripts(refShorthandDefaultPos);
              if (refShorthandDefaultPos && refShorthandDefaultPos.start)
                return expr;

              while (this.state.type.postfix && !this.canInsertSemicolon()) {
                const node = this.startNodeAt(startPos, startLoc);
                node.operator = this.state.value;
                node.prefix = false;
                node.argument = expr;
                this.checkLVal(expr, undefined, undefined, "postfix operation");
                this.next();
                expr = this.finishNode(node, "UpdateExpression");
              }

              return expr;
            }

            parseExprSubscripts(refShorthandDefaultPos) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const potentialArrowAt = this.state.potentialArrowAt;
              const expr = this.parseExprAtom(refShorthandDefaultPos);

              if (
                expr.type === "ArrowFunctionExpression" &&
                expr.start === potentialArrowAt
              ) {
                return expr;
              }

              if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
                return expr;
              }

              return this.parseSubscripts(expr, startPos, startLoc);
            }

            parseSubscripts(base, startPos, startLoc, noCalls) {
              const state = {
                optionalChainMember: false,
                stop: false,
              };

              do {
                base = this.parseSubscript(
                  base,
                  startPos,
                  startLoc,
                  noCalls,
                  state
                );
              } while (!state.stop);

              return base;
            }

            parseSubscript(base, startPos, startLoc, noCalls, state) {
              if (!noCalls && this.eat(types.doubleColon)) {
                const node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.callee = this.parseNoCallExpr();
                state.stop = true;
                return this.parseSubscripts(
                  this.finishNode(node, "BindExpression"),
                  startPos,
                  startLoc,
                  noCalls
                );
              } else if (this.match(types.questionDot)) {
                this.expectPlugin("optionalChaining");
                state.optionalChainMember = true;

                if (noCalls && this.lookahead().type == types.parenL) {
                  state.stop = true;
                  return base;
                }

                this.next();
                const node = this.startNodeAt(startPos, startLoc);

                if (this.eat(types.bracketL)) {
                  node.object = base;
                  node.property = this.parseExpression();
                  node.computed = true;
                  node.optional = true;
                  this.expect(types.bracketR);
                  return this.finishNode(node, "OptionalMemberExpression");
                } else if (this.eat(types.parenL)) {
                  const possibleAsync = this.atPossibleAsync(base);
                  node.callee = base;
                  node.arguments = this.parseCallExpressionArguments(
                    types.parenR,
                    possibleAsync
                  );
                  node.optional = true;
                  return this.finishNode(node, "OptionalCallExpression");
                } else {
                  node.object = base;
                  node.property = this.parseIdentifier(true);
                  node.computed = false;
                  node.optional = true;
                  return this.finishNode(node, "OptionalMemberExpression");
                }
              } else if (this.eat(types.dot)) {
                const node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.property = this.parseMaybePrivateName();
                node.computed = false;

                if (state.optionalChainMember) {
                  node.optional = false;
                  return this.finishNode(node, "OptionalMemberExpression");
                }

                return this.finishNode(node, "MemberExpression");
              } else if (this.eat(types.bracketL)) {
                const node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.property = this.parseExpression();
                node.computed = true;
                this.expect(types.bracketR);

                if (state.optionalChainMember) {
                  node.optional = false;
                  return this.finishNode(node, "OptionalMemberExpression");
                }

                return this.finishNode(node, "MemberExpression");
              } else if (!noCalls && this.match(types.parenL)) {
                const oldMaybeInArrowParameters = this.state
                  .maybeInArrowParameters;
                const oldYOAIPAP = this.state
                  .yieldOrAwaitInPossibleArrowParameters;
                this.state.maybeInArrowParameters = true;
                this.state.yieldOrAwaitInPossibleArrowParameters = null;
                const possibleAsync = this.atPossibleAsync(base);
                this.next();
                let node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                const refTrailingCommaPos = {
                  start: -1,
                };
                node.arguments = this.parseCallExpressionArguments(
                  types.parenR,
                  possibleAsync,
                  refTrailingCommaPos
                );

                if (!state.optionalChainMember) {
                  this.finishCallExpression(node);
                } else {
                  this.finishOptionalCallExpression(node);
                }

                if (possibleAsync && this.shouldParseAsyncArrow()) {
                  state.stop = true;

                  if (refTrailingCommaPos.start > -1) {
                    this.raise(
                      refTrailingCommaPos.start,
                      "A trailing comma is not permitted after the rest element"
                    );
                  }

                  node = this.parseAsyncArrowFromCallExpression(
                    this.startNodeAt(startPos, startLoc),
                    node
                  );
                  this.state.yieldOrAwaitInPossibleArrowParameters = oldYOAIPAP;
                } else {
                  this.toReferencedListDeep(node.arguments);
                  this.state.yieldOrAwaitInPossibleArrowParameters =
                    this.state.yieldOrAwaitInPossibleArrowParameters ||
                    oldYOAIPAP;
                }

                this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
                return node;
              } else if (this.match(types.backQuote)) {
                return this.parseTaggedTemplateExpression(
                  startPos,
                  startLoc,
                  base,
                  state
                );
              } else {
                state.stop = true;
                return base;
              }
            }

            parseTaggedTemplateExpression(
              startPos,
              startLoc,
              base,
              state,
              typeArguments
            ) {
              const node = this.startNodeAt(startPos, startLoc);
              node.tag = base;
              node.quasi = this.parseTemplate(true);
              if (typeArguments) node.typeParameters = typeArguments;

              if (state.optionalChainMember) {
                this.raise(
                  startPos,
                  "Tagged Template Literals are not allowed in optionalChain"
                );
              }

              return this.finishNode(node, "TaggedTemplateExpression");
            }

            atPossibleAsync(base) {
              return (
                !this.state.containsEsc &&
                this.state.potentialArrowAt === base.start &&
                base.type === "Identifier" &&
                base.name === "async" &&
                !this.canInsertSemicolon()
              );
            }

            finishCallExpression(node) {
              if (node.callee.type === "Import") {
                if (node.arguments.length !== 1) {
                  this.raise(
                    node.start,
                    "import() requires exactly one argument"
                  );
                }

                const importArg = node.arguments[0];

                if (importArg && importArg.type === "SpreadElement") {
                  this.raise(importArg.start, "... is not allowed in import()");
                }
              }

              return this.finishNode(node, "CallExpression");
            }

            finishOptionalCallExpression(node) {
              if (node.callee.type === "Import") {
                if (node.arguments.length !== 1) {
                  this.raise(
                    node.start,
                    "import() requires exactly one argument"
                  );
                }

                const importArg = node.arguments[0];

                if (importArg && importArg.type === "SpreadElement") {
                  this.raise(importArg.start, "... is not allowed in import()");
                }
              }

              return this.finishNode(node, "OptionalCallExpression");
            }

            parseCallExpressionArguments(
              close,
              possibleAsyncArrow,
              refTrailingCommaPos
            ) {
              const elts = [];
              let innerParenStart;
              let first = true;

              while (!this.eat(close)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma);
                  if (this.eat(close)) break;
                }

                if (this.match(types.parenL) && !innerParenStart) {
                  innerParenStart = this.state.start;
                }

                elts.push(
                  this.parseExprListItem(
                    false,
                    possibleAsyncArrow
                      ? {
                          start: 0,
                        }
                      : undefined,
                    possibleAsyncArrow
                      ? {
                          start: 0,
                        }
                      : undefined,
                    possibleAsyncArrow ? refTrailingCommaPos : undefined
                  )
                );
              }

              if (
                possibleAsyncArrow &&
                innerParenStart &&
                this.shouldParseAsyncArrow()
              ) {
                this.unexpected();
              }

              return elts;
            }

            shouldParseAsyncArrow() {
              return this.match(types.arrow);
            }

            parseAsyncArrowFromCallExpression(node, call) {
              this.expect(types.arrow);
              this.parseArrowExpression(node, call.arguments, true);
              return node;
            }

            parseNoCallExpr() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              return this.parseSubscripts(
                this.parseExprAtom(),
                startPos,
                startLoc,
                true
              );
            }

            parseExprAtom(refShorthandDefaultPos) {
              if (this.state.type === types.slash) this.readRegexp();
              const canBeArrow =
                this.state.potentialArrowAt === this.state.start;
              let node;

              switch (this.state.type) {
                case types._super:
                  if (
                    !this.state.inMethod &&
                    !this.state.inClassProperty &&
                    !this.options.allowSuperOutsideMethod
                  ) {
                    this.raise(
                      this.state.start,
                      "super is only allowed in object methods and classes"
                    );
                  }

                  node = this.startNode();
                  this.next();

                  if (
                    !this.match(types.parenL) &&
                    !this.match(types.bracketL) &&
                    !this.match(types.dot)
                  ) {
                    this.unexpected();
                  }

                  if (
                    this.match(types.parenL) &&
                    this.state.inMethod !== "constructor" &&
                    !this.options.allowSuperOutsideMethod
                  ) {
                    this.raise(
                      node.start,
                      "super() is only valid inside a class constructor. " +
                        "Make sure the method name is spelled exactly as 'constructor'."
                    );
                  }

                  return this.finishNode(node, "Super");

                case types._import:
                  if (this.lookahead().type === types.dot) {
                    return this.parseImportMetaProperty();
                  }

                  this.expectPlugin("dynamicImport");
                  node = this.startNode();
                  this.next();

                  if (!this.match(types.parenL)) {
                    this.unexpected(null, types.parenL);
                  }

                  return this.finishNode(node, "Import");

                case types._this:
                  node = this.startNode();
                  this.next();
                  return this.finishNode(node, "ThisExpression");

                case types._yield:
                  if (this.state.inGenerator) this.unexpected();

                case types.name: {
                  node = this.startNode();
                  const allowAwait =
                    this.state.value === "await" &&
                    (this.state.inAsync ||
                      (!this.state.inFunction &&
                        this.options.allowAwaitOutsideFunction));
                  const containsEsc = this.state.containsEsc;
                  const allowYield = this.shouldAllowYieldIdentifier();
                  const id = this.parseIdentifier(allowAwait || allowYield);

                  if (id.name === "await") {
                    if (
                      this.state.inAsync ||
                      this.inModule ||
                      (!this.state.inFunction &&
                        this.options.allowAwaitOutsideFunction)
                    ) {
                      return this.parseAwait(node);
                    }
                  } else if (
                    !containsEsc &&
                    id.name === "async" &&
                    this.match(types._function) &&
                    !this.canInsertSemicolon()
                  ) {
                    this.next();
                    return this.parseFunction(node, false, false, true);
                  } else if (
                    canBeArrow &&
                    !this.canInsertSemicolon() &&
                    id.name === "async" &&
                    this.match(types.name)
                  ) {
                    const oldYOAIPAP = this.state
                      .yieldOrAwaitInPossibleArrowParameters;
                    const oldInAsync = this.state.inAsync;
                    this.state.yieldOrAwaitInPossibleArrowParameters = null;
                    this.state.inAsync = true;
                    const params = [this.parseIdentifier()];
                    this.expect(types.arrow);
                    this.parseArrowExpression(node, params, true);
                    this.state.yieldOrAwaitInPossibleArrowParameters = oldYOAIPAP;
                    this.state.inAsync = oldInAsync;
                    return node;
                  }

                  if (
                    canBeArrow &&
                    !this.canInsertSemicolon() &&
                    this.eat(types.arrow)
                  ) {
                    const oldYOAIPAP = this.state
                      .yieldOrAwaitInPossibleArrowParameters;
                    this.state.yieldOrAwaitInPossibleArrowParameters = null;
                    this.parseArrowExpression(node, [id]);
                    this.state.yieldOrAwaitInPossibleArrowParameters = oldYOAIPAP;
                    return node;
                  }

                  return id;
                }

                case types._do: {
                  this.expectPlugin("doExpressions");
                  const node = this.startNode();
                  this.next();
                  const oldInFunction = this.state.inFunction;
                  const oldLabels = this.state.labels;
                  this.state.labels = [];
                  this.state.inFunction = false;
                  node.body = this.parseBlock(false);
                  this.state.inFunction = oldInFunction;
                  this.state.labels = oldLabels;
                  return this.finishNode(node, "DoExpression");
                }

                case types.regexp: {
                  const value = this.state.value;
                  node = this.parseLiteral(value.value, "RegExpLiteral");
                  node.pattern = value.pattern;
                  node.flags = value.flags;
                  return node;
                }

                case types.num:
                  return this.parseLiteral(this.state.value, "NumericLiteral");

                case types.bigint:
                  return this.parseLiteral(this.state.value, "BigIntLiteral");

                case types.string:
                  return this.parseLiteral(this.state.value, "StringLiteral");

                case types._null:
                  node = this.startNode();
                  this.next();
                  return this.finishNode(node, "NullLiteral");

                case types._true:
                case types._false:
                  return this.parseBooleanLiteral();

                case types.parenL:
                  return this.parseParenAndDistinguishExpression(canBeArrow);

                case types.bracketL:
                  node = this.startNode();
                  this.next();
                  node.elements = this.parseExprList(
                    types.bracketR,
                    true,
                    refShorthandDefaultPos
                  );

                  if (!this.state.maybeInArrowParameters) {
                    this.toReferencedList(node.elements);
                  }

                  return this.finishNode(node, "ArrayExpression");

                case types.braceL:
                  return this.parseObj(false, refShorthandDefaultPos);

                case types._function:
                  return this.parseFunctionExpression();

                case types.at:
                  this.parseDecorators();

                case types._class:
                  node = this.startNode();
                  this.takeDecorators(node);
                  return this.parseClass(node, false);

                case types._new:
                  return this.parseNew();

                case types.backQuote:
                  return this.parseTemplate(false);

                case types.doubleColon: {
                  node = this.startNode();
                  this.next();
                  node.object = null;
                  const callee = (node.callee = this.parseNoCallExpr());

                  if (callee.type === "MemberExpression") {
                    return this.finishNode(node, "BindExpression");
                  } else {
                    throw this.raise(
                      callee.start,
                      "Binding should be performed on object property."
                    );
                  }
                }

                case types.hash: {
                  if (this.state.inPipeline) {
                    node = this.startNode();

                    if (
                      this.getPluginOption("pipelineOperator", "proposal") !==
                      "smart"
                    ) {
                      this.raise(
                        node.start,
                        "Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option."
                      );
                    }

                    this.next();

                    if (
                      this.primaryTopicReferenceIsAllowedInCurrentTopicContext()
                    ) {
                      this.registerTopicReference();
                      return this.finishNode(
                        node,
                        "PipelinePrimaryTopicReference"
                      );
                    } else {
                      throw this.raise(
                        node.start,
                        `Topic reference was used in a lexical context without topic binding`
                      );
                    }
                  }
                }

                default:
                  throw this.unexpected();
              }
            }

            parseBooleanLiteral() {
              const node = this.startNode();
              node.value = this.match(types._true);
              this.next();
              return this.finishNode(node, "BooleanLiteral");
            }

            parseMaybePrivateName() {
              const isPrivate = this.match(types.hash);

              if (isPrivate) {
                this.expectOnePlugin([
                  "classPrivateProperties",
                  "classPrivateMethods",
                ]);
                const node = this.startNode();
                const columnHashEnd = this.state.end;
                this.next();
                const columnIdentifierStart = this.state.start;
                const spacesBetweenHashAndIdentifier =
                  columnIdentifierStart - columnHashEnd;

                if (spacesBetweenHashAndIdentifier != 0) {
                  this.raise(
                    columnIdentifierStart,
                    "Unexpected space between # and identifier"
                  );
                }

                node.id = this.parseIdentifier(true);
                return this.finishNode(node, "PrivateName");
              } else {
                return this.parseIdentifier(true);
              }
            }

            parseFunctionExpression() {
              const node = this.startNode();
              let meta = this.startNode();
              this.next();
              meta = this.createIdentifier(meta, "function");

              if (this.state.inGenerator && this.eat(types.dot)) {
                return this.parseMetaProperty(node, meta, "sent");
              }

              return this.parseFunction(node, false);
            }

            parseMetaProperty(node, meta, propertyName) {
              node.meta = meta;

              if (meta.name === "function" && propertyName === "sent") {
                if (this.isContextual(propertyName)) {
                  this.expectPlugin("functionSent");
                } else if (!this.hasPlugin("functionSent")) {
                  this.unexpected();
                }
              }

              const containsEsc = this.state.containsEsc;
              node.property = this.parseIdentifier(true);

              if (node.property.name !== propertyName || containsEsc) {
                this.raise(
                  node.property.start,
                  `The only valid meta property for ${meta.name} is ${
                    meta.name
                  }.${propertyName}`
                );
              }

              return this.finishNode(node, "MetaProperty");
            }

            parseImportMetaProperty() {
              const node = this.startNode();
              const id = this.parseIdentifier(true);
              this.expect(types.dot);

              if (id.name === "import") {
                if (this.isContextual("meta")) {
                  this.expectPlugin("importMeta");
                } else if (!this.hasPlugin("importMeta")) {
                  this.raise(
                    id.start,
                    `Dynamic imports require a parameter: import('a.js')`
                  );
                }
              }

              if (!this.inModule) {
                this.raise(
                  id.start,
                  `import.meta may appear only with 'sourceType: "module"'`,
                  {
                    code: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED",
                  }
                );
              }

              this.sawUnambiguousESM = true;
              return this.parseMetaProperty(node, id, "meta");
            }

            parseLiteral(value, type, startPos, startLoc) {
              startPos = startPos || this.state.start;
              startLoc = startLoc || this.state.startLoc;
              const node = this.startNodeAt(startPos, startLoc);
              this.addExtra(node, "rawValue", value);
              this.addExtra(
                node,
                "raw",
                this.input.slice(startPos, this.state.end)
              );
              node.value = value;
              this.next();
              return this.finishNode(node, type);
            }

            parseParenExpression() {
              this.expect(types.parenL);
              const val = this.parseExpression();
              this.expect(types.parenR);
              return val;
            }

            parseParenAndDistinguishExpression(canBeArrow) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let val;
              this.expect(types.parenL);
              const oldMaybeInArrowParameters = this.state
                .maybeInArrowParameters;
              const oldYOAIPAP = this.state
                .yieldOrAwaitInPossibleArrowParameters;
              this.state.maybeInArrowParameters = true;
              this.state.yieldOrAwaitInPossibleArrowParameters = null;
              const innerStartPos = this.state.start;
              const innerStartLoc = this.state.startLoc;
              const exprList = [];
              const refShorthandDefaultPos = {
                start: 0,
              };
              const refNeedsArrowPos = {
                start: 0,
              };
              let first = true;
              let spreadStart;
              let optionalCommaStart;

              while (!this.match(types.parenR)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma, refNeedsArrowPos.start || null);

                  if (this.match(types.parenR)) {
                    optionalCommaStart = this.state.start;
                    break;
                  }
                }

                if (this.match(types.ellipsis)) {
                  const spreadNodeStartPos = this.state.start;
                  const spreadNodeStartLoc = this.state.startLoc;
                  spreadStart = this.state.start;
                  exprList.push(
                    this.parseParenItem(
                      this.parseRest(),
                      spreadNodeStartPos,
                      spreadNodeStartLoc
                    )
                  );

                  if (this.match(types.comma)) {
                    const nextTokenType = this.lookahead().type;
                    const errorMessage =
                      nextTokenType === types.parenR
                        ? "A trailing comma is not permitted after the rest element"
                        : "Rest parameter must be last formal parameter";
                    this.raise(this.state.start, errorMessage);
                  }

                  break;
                } else {
                  exprList.push(
                    this.parseMaybeAssign(
                      false,
                      refShorthandDefaultPos,
                      this.parseParenItem,
                      refNeedsArrowPos
                    )
                  );
                }
              }

              const innerEndPos = this.state.start;
              const innerEndLoc = this.state.startLoc;
              this.expect(types.parenR);
              this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
              let arrowNode = this.startNodeAt(startPos, startLoc);

              if (
                canBeArrow &&
                this.shouldParseArrow() &&
                (arrowNode = this.parseArrow(arrowNode))
              ) {
                for (let _i = 0; _i < exprList.length; _i++) {
                  const param = exprList[_i];

                  if (param.extra && param.extra.parenthesized) {
                    this.unexpected(param.extra.parenStart);
                  }
                }

                this.parseArrowExpression(arrowNode, exprList);
                this.state.yieldOrAwaitInPossibleArrowParameters = oldYOAIPAP;
                return arrowNode;
              }

              this.state.yieldOrAwaitInPossibleArrowParameters =
                this.state.yieldOrAwaitInPossibleArrowParameters || oldYOAIPAP;

              if (!exprList.length) {
                this.unexpected(this.state.lastTokStart);
              }

              if (optionalCommaStart) this.unexpected(optionalCommaStart);
              if (spreadStart) this.unexpected(spreadStart);

              if (refShorthandDefaultPos.start) {
                this.unexpected(refShorthandDefaultPos.start);
              }

              if (refNeedsArrowPos.start)
                this.unexpected(refNeedsArrowPos.start);
              this.toReferencedListDeep(exprList, true);

              if (exprList.length > 1) {
                val = this.startNodeAt(innerStartPos, innerStartLoc);
                val.expressions = exprList;
                this.finishNodeAt(
                  val,
                  "SequenceExpression",
                  innerEndPos,
                  innerEndLoc
                );
              } else {
                val = exprList[0];
              }

              this.addExtra(val, "parenthesized", true);
              this.addExtra(val, "parenStart", startPos);
              return val;
            }

            shouldParseArrow() {
              return !this.canInsertSemicolon();
            }

            parseArrow(node) {
              if (this.eat(types.arrow)) {
                return node;
              }
            }

            parseParenItem(node, startPos, startLoc) {
              return node;
            }

            parseNew() {
              const node = this.startNode();
              const meta = this.parseIdentifier(true);

              if (this.eat(types.dot)) {
                const metaProp = this.parseMetaProperty(node, meta, "target");

                if (
                  !this.state.inNonArrowFunction &&
                  !this.state.inClassProperty
                ) {
                  let error = "new.target can only be used in functions";

                  if (this.hasPlugin("classProperties")) {
                    error += " or class properties";
                  }

                  this.raise(metaProp.start, error);
                }

                return metaProp;
              }

              node.callee = this.parseNoCallExpr();

              if (
                node.callee.type === "OptionalMemberExpression" ||
                node.callee.type === "OptionalCallExpression"
              ) {
                this.raise(
                  this.state.lastTokEnd,
                  "constructors in/after an Optional Chain are not allowed"
                );
              }

              if (this.eat(types.questionDot)) {
                this.raise(
                  this.state.start,
                  "constructors in/after an Optional Chain are not allowed"
                );
              }

              this.parseNewArguments(node);
              return this.finishNode(node, "NewExpression");
            }

            parseNewArguments(node) {
              if (this.eat(types.parenL)) {
                const args = this.parseExprList(types.parenR);
                this.toReferencedList(args);
                node.arguments = args;
              } else {
                node.arguments = [];
              }
            }

            parseTemplateElement(isTagged) {
              const elem = this.startNode();

              if (this.state.value === null) {
                if (!isTagged) {
                  this.raise(
                    this.state.invalidTemplateEscapePosition || 0,
                    "Invalid escape sequence in template"
                  );
                } else {
                  this.state.invalidTemplateEscapePosition = null;
                }
              }

              elem.value = {
                raw: this.input
                  .slice(this.state.start, this.state.end)
                  .replace(/\r\n?/g, "\n"),
                cooked: this.state.value,
              };
              this.next();
              elem.tail = this.match(types.backQuote);
              return this.finishNode(elem, "TemplateElement");
            }

            parseTemplate(isTagged) {
              const node = this.startNode();
              this.next();
              node.expressions = [];
              let curElt = this.parseTemplateElement(isTagged);
              node.quasis = [curElt];

              while (!curElt.tail) {
                this.expect(types.dollarBraceL);
                node.expressions.push(this.parseExpression());
                this.expect(types.braceR);
                node.quasis.push(
                  (curElt = this.parseTemplateElement(isTagged))
                );
              }

              this.next();
              return this.finishNode(node, "TemplateLiteral");
            }

            parseObj(isPattern, refShorthandDefaultPos) {
              let decorators = [];
              const propHash = Object.create(null);
              let first = true;
              const node = this.startNode();
              node.properties = [];
              this.next();
              let firstRestLocation = null;

              while (!this.eat(types.braceR)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma);
                  if (this.eat(types.braceR)) break;
                }

                if (this.match(types.at)) {
                  if (this.hasPlugin("decorators")) {
                    this.raise(
                      this.state.start,
                      "Stage 2 decorators disallow object literal property decorators"
                    );
                  } else {
                    while (this.match(types.at)) {
                      decorators.push(this.parseDecorator());
                    }
                  }
                }

                let prop = this.startNode(),
                  isGenerator = false,
                  isAsync = false,
                  startPos,
                  startLoc;

                if (decorators.length) {
                  prop.decorators = decorators;
                  decorators = [];
                }

                if (this.match(types.ellipsis)) {
                  prop = this.parseSpread(
                    isPattern
                      ? {
                          start: 0,
                        }
                      : undefined
                  );

                  if (isPattern) {
                    this.toAssignable(prop, true, "object pattern");
                  }

                  node.properties.push(prop);

                  if (isPattern) {
                    const position = this.state.start;

                    if (firstRestLocation !== null) {
                      this.unexpected(
                        firstRestLocation,
                        "Cannot have multiple rest elements when destructuring"
                      );
                    } else if (this.eat(types.braceR)) {
                      break;
                    } else if (
                      this.match(types.comma) &&
                      this.lookahead().type === types.braceR
                    ) {
                      this.unexpected(
                        position,
                        "A trailing comma is not permitted after the rest element"
                      );
                    } else {
                      firstRestLocation = position;
                      continue;
                    }
                  } else {
                    continue;
                  }
                }

                prop.method = false;

                if (isPattern || refShorthandDefaultPos) {
                  startPos = this.state.start;
                  startLoc = this.state.startLoc;
                }

                if (!isPattern) {
                  isGenerator = this.eat(types.star);
                }

                const containsEsc = this.state.containsEsc;

                if (!isPattern && this.isContextual("async")) {
                  if (isGenerator) this.unexpected();
                  const asyncId = this.parseIdentifier();

                  if (
                    this.match(types.colon) ||
                    this.match(types.parenL) ||
                    this.match(types.braceR) ||
                    this.match(types.eq) ||
                    this.match(types.comma)
                  ) {
                    prop.key = asyncId;
                    prop.computed = false;
                  } else {
                    isAsync = true;
                    isGenerator = this.eat(types.star);
                    this.parsePropertyName(prop);
                  }
                } else {
                  this.parsePropertyName(prop);
                }

                this.parseObjPropValue(
                  prop,
                  startPos,
                  startLoc,
                  isGenerator,
                  isAsync,
                  isPattern,
                  refShorthandDefaultPos,
                  containsEsc
                );
                this.checkPropClash(prop, propHash);

                if (prop.shorthand) {
                  this.addExtra(prop, "shorthand", true);
                }

                node.properties.push(prop);
              }

              if (firstRestLocation !== null) {
                this.unexpected(
                  firstRestLocation,
                  "The rest element has to be the last element when destructuring"
                );
              }

              if (decorators.length) {
                this.raise(
                  this.state.start,
                  "You have trailing decorators with no property"
                );
              }

              return this.finishNode(
                node,
                isPattern ? "ObjectPattern" : "ObjectExpression"
              );
            }

            isGetterOrSetterMethod(prop, isPattern) {
              return (
                !isPattern &&
                !prop.computed &&
                prop.key.type === "Identifier" &&
                (prop.key.name === "get" || prop.key.name === "set") &&
                (this.match(types.string) ||
                  this.match(types.num) ||
                  this.match(types.bracketL) ||
                  this.match(types.name) ||
                  !!this.state.type.keyword)
              );
            }

            checkGetterSetterParams(method) {
              const paramCount = method.kind === "get" ? 0 : 1;
              const start = method.start;

              if (method.params.length !== paramCount) {
                if (method.kind === "get") {
                  this.raise(
                    start,
                    "getter must not have any formal parameters"
                  );
                } else {
                  this.raise(
                    start,
                    "setter must have exactly one formal parameter"
                  );
                }
              }

              if (
                method.kind === "set" &&
                method.params[0].type === "RestElement"
              ) {
                this.raise(
                  start,
                  "setter function argument must not be a rest parameter"
                );
              }
            }

            parseObjectMethod(
              prop,
              isGenerator,
              isAsync,
              isPattern,
              containsEsc
            ) {
              if (isAsync || isGenerator || this.match(types.parenL)) {
                if (isPattern) this.unexpected();
                prop.kind = "method";
                prop.method = true;
                return this.parseMethod(
                  prop,
                  isGenerator,
                  isAsync,
                  false,
                  "ObjectMethod"
                );
              }

              if (
                !containsEsc &&
                this.isGetterOrSetterMethod(prop, isPattern)
              ) {
                if (isGenerator || isAsync) this.unexpected();
                prop.kind = prop.key.name;
                this.parsePropertyName(prop);
                this.parseMethod(prop, false, false, false, "ObjectMethod");
                this.checkGetterSetterParams(prop);
                return prop;
              }
            }

            parseObjectProperty(
              prop,
              startPos,
              startLoc,
              isPattern,
              refShorthandDefaultPos
            ) {
              prop.shorthand = false;

              if (this.eat(types.colon)) {
                prop.value = isPattern
                  ? this.parseMaybeDefault(
                      this.state.start,
                      this.state.startLoc
                    )
                  : this.parseMaybeAssign(false, refShorthandDefaultPos);
                return this.finishNode(prop, "ObjectProperty");
              }

              if (!prop.computed && prop.key.type === "Identifier") {
                this.checkReservedWord(
                  prop.key.name,
                  prop.key.start,
                  true,
                  true
                );

                if (isPattern) {
                  prop.value = this.parseMaybeDefault(
                    startPos,
                    startLoc,
                    prop.key.__clone()
                  );
                } else if (this.match(types.eq) && refShorthandDefaultPos) {
                  if (!refShorthandDefaultPos.start) {
                    refShorthandDefaultPos.start = this.state.start;
                  }

                  prop.value = this.parseMaybeDefault(
                    startPos,
                    startLoc,
                    prop.key.__clone()
                  );
                } else {
                  prop.value = prop.key.__clone();
                }

                prop.shorthand = true;
                return this.finishNode(prop, "ObjectProperty");
              }
            }

            parseObjPropValue(
              prop,
              startPos,
              startLoc,
              isGenerator,
              isAsync,
              isPattern,
              refShorthandDefaultPos,
              containsEsc
            ) {
              const node =
                this.parseObjectMethod(
                  prop,
                  isGenerator,
                  isAsync,
                  isPattern,
                  containsEsc
                ) ||
                this.parseObjectProperty(
                  prop,
                  startPos,
                  startLoc,
                  isPattern,
                  refShorthandDefaultPos
                );
              if (!node) this.unexpected();
              return node;
            }

            parsePropertyName(prop) {
              if (this.eat(types.bracketL)) {
                prop.computed = true;
                prop.key = this.parseMaybeAssign();
                this.expect(types.bracketR);
              } else {
                const oldInPropertyName = this.state.inPropertyName;
                this.state.inPropertyName = true;
                prop.key =
                  this.match(types.num) || this.match(types.string)
                    ? this.parseExprAtom()
                    : this.parseMaybePrivateName();

                if (prop.key.type !== "PrivateName") {
                  prop.computed = false;
                }

                this.state.inPropertyName = oldInPropertyName;
              }

              return prop.key;
            }

            initFunction(node, isAsync) {
              node.id = null;
              node.generator = false;
              node.async = !!isAsync;
            }

            parseMethod(node, isGenerator, isAsync, isConstructor, type) {
              const oldInFunc = this.state.inFunction;
              const oldInMethod = this.state.inMethod;
              const oldInAsync = this.state.inAsync;
              const oldInGenerator = this.state.inGenerator;
              this.state.inFunction = true;
              this.state.inMethod = node.kind || true;
              this.state.inAsync = isAsync;
              this.state.inGenerator = isGenerator;
              this.initFunction(node, isAsync);
              node.generator = !!isGenerator;
              const allowModifiers = isConstructor;
              this.parseFunctionParams(node, allowModifiers);
              this.parseFunctionBodyAndFinish(node, type);
              this.state.inFunction = oldInFunc;
              this.state.inMethod = oldInMethod;
              this.state.inAsync = oldInAsync;
              this.state.inGenerator = oldInGenerator;
              return node;
            }

            parseArrowExpression(node, params, isAsync = false) {
              const yOAIPAP = this.state.yieldOrAwaitInPossibleArrowParameters;

              if (yOAIPAP) {
                if (yOAIPAP.type === "YieldExpression") {
                  this.raise(
                    yOAIPAP.start,
                    "yield is not allowed in the parameters of an arrow function" +
                      " inside a generator"
                  );
                } else {
                  this.raise(
                    yOAIPAP.start,
                    "await is not allowed in the parameters of an arrow function" +
                      " inside an async function"
                  );
                }
              }

              const oldInFunc = this.state.inFunction;
              this.state.inFunction = true;
              this.initFunction(node, isAsync);
              if (params) this.setArrowFunctionParameters(node, params);
              const oldInAsync = this.state.inAsync;
              const oldInGenerator = this.state.inGenerator;
              const oldMaybeInArrowParameters = this.state
                .maybeInArrowParameters;
              this.state.inAsync = isAsync;
              this.state.inGenerator = false;
              this.state.maybeInArrowParameters = false;
              this.parseFunctionBody(
                node,
                true,
                !this.state.inNonArrowFunction
              );
              this.state.inAsync = oldInAsync;
              this.state.inGenerator = oldInGenerator;
              this.state.inFunction = oldInFunc;
              this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
              return this.finishNode(node, "ArrowFunctionExpression");
            }

            setArrowFunctionParameters(node, params) {
              node.params = this.toAssignableList(
                params,
                true,
                "arrow function parameters"
              );
            }

            isStrictBody(node) {
              const isBlockStatement = node.body.type === "BlockStatement";

              if (isBlockStatement && node.body.directives.length) {
                for (
                  let _i2 = 0, _node$body$directives = node.body.directives;
                  _i2 < _node$body$directives.length;
                  _i2++
                ) {
                  const directive = _node$body$directives[_i2];

                  if (directive.value.value === "use strict") {
                    return true;
                  }
                }
              }

              return false;
            }

            parseFunctionBodyAndFinish(node, type, allowExpressionBody) {
              this.parseFunctionBody(node, allowExpressionBody, false);
              this.finishNode(node, type);
            }

            parseFunctionBody(
              node,
              allowExpression,
              shouldResetInNonArrowFunctionFlag = false
            ) {
              const isExpression = allowExpression && !this.match(types.braceL);
              const oldInParameters = this.state.inParameters;
              this.state.inParameters = false;

              if (isExpression) {
                node.body = this.parseMaybeAssign();
              } else {
                const oldInGen = this.state.inGenerator;
                const oldInFunc = this.state.inFunction;
                const oldLabels = this.state.labels;
                this.state.inGenerator = node.generator;
                this.state.inFunction = true;
                this.state.labels = [];
                node.body = this.parseBlock(true);
                this.state.inFunction = oldInFunc;
                this.state.inGenerator = oldInGen;
                this.state.labels = oldLabels;
              }

              this.checkFunctionNameAndParams(node, allowExpression);
              this.state.inParameters = oldInParameters;

              if (shouldResetInNonArrowFunctionFlag) {
                this.state.inNonArrowFunction = false;
              }
            }

            checkFunctionNameAndParams(node, isArrowFunction) {
              const isStrict = this.isStrictBody(node);
              const checkLVal =
                this.state.strict || isStrict || isArrowFunction;
              const oldStrict = this.state.strict;
              if (isStrict) this.state.strict = isStrict;

              if (checkLVal) {
                const nameHash = Object.create(null);

                if (node.id) {
                  this.checkLVal(node.id, true, undefined, "function name");
                }

                for (
                  let _i3 = 0, _node$params = node.params;
                  _i3 < _node$params.length;
                  _i3++
                ) {
                  const param = _node$params[_i3];

                  if (isStrict && param.type !== "Identifier") {
                    this.raise(
                      param.start,
                      "Non-simple parameter in strict mode"
                    );
                  }

                  this.checkLVal(
                    param,
                    true,
                    nameHash,
                    "function parameter list"
                  );
                }
              }

              this.state.strict = oldStrict;
            }

            parseExprList(close, allowEmpty, refShorthandDefaultPos) {
              const elts = [];
              let first = true;

              while (!this.eat(close)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma);
                  if (this.eat(close)) break;
                }

                elts.push(
                  this.parseExprListItem(allowEmpty, refShorthandDefaultPos)
                );
              }

              return elts;
            }

            parseExprListItem(
              allowEmpty,
              refShorthandDefaultPos,
              refNeedsArrowPos,
              refTrailingCommaPos
            ) {
              let elt;

              if (allowEmpty && this.match(types.comma)) {
                elt = null;
              } else if (this.match(types.ellipsis)) {
                const spreadNodeStartPos = this.state.start;
                const spreadNodeStartLoc = this.state.startLoc;
                elt = this.parseParenItem(
                  this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos),
                  spreadNodeStartPos,
                  spreadNodeStartLoc
                );

                if (refTrailingCommaPos && this.match(types.comma)) {
                  refTrailingCommaPos.start = this.state.start;
                }
              } else {
                elt = this.parseMaybeAssign(
                  false,
                  refShorthandDefaultPos,
                  this.parseParenItem,
                  refNeedsArrowPos
                );
              }

              return elt;
            }

            parseIdentifier(liberal) {
              const node = this.startNode();
              const name = this.parseIdentifierName(node.start, liberal);
              return this.createIdentifier(node, name);
            }

            createIdentifier(node, name) {
              node.name = name;
              node.loc.identifierName = name;
              return this.finishNode(node, "Identifier");
            }

            parseIdentifierName(pos, liberal) {
              if (!liberal) {
                this.checkReservedWord(
                  this.state.value,
                  this.state.start,
                  !!this.state.type.keyword,
                  false
                );
              }

              let name;

              if (this.match(types.name)) {
                name = this.state.value;
              } else if (this.state.type.keyword) {
                name = this.state.type.keyword;

                if (
                  (name === "class" || name === "function") &&
                  (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||
                    this.input.charCodeAt(this.state.lastTokStart) !== 46)
                ) {
                  this.state.context.pop();
                }
              } else {
                throw this.unexpected();
              }

              if (!liberal && name === "await" && this.state.inAsync) {
                this.raise(
                  pos,
                  "invalid use of await inside of an async function"
                );
              }

              this.next();
              return name;
            }

            checkReservedWord(word, startLoc, checkKeywords, isBinding) {
              if (
                this.state.strict &&
                (reservedWords.strict(word) ||
                  (isBinding && reservedWords.strictBind(word)))
              ) {
                this.raise(
                  startLoc,
                  word + " is a reserved word in strict mode"
                );
              }

              if (this.state.inGenerator && word === "yield") {
                this.raise(
                  startLoc,
                  "yield is a reserved word inside generator functions"
                );
              }

              if (this.state.inClassProperty && word === "arguments") {
                this.raise(
                  startLoc,
                  "'arguments' is not allowed in class field initializer"
                );
              }

              if (
                this.isReservedWord(word) ||
                (checkKeywords && this.isKeyword(word))
              ) {
                this.raise(startLoc, word + " is a reserved word");
              }
            }

            parseAwait(node) {
              if (
                !this.state.inAsync &&
                (this.state.inFunction ||
                  !this.options.allowAwaitOutsideFunction)
              ) {
                this.unexpected();
              }

              if (this.state.inParameters) {
                this.raise(
                  node.start,
                  "await is not allowed in async function parameters"
                );
              }

              if (this.match(types.star)) {
                this.raise(
                  node.start,
                  "await* has been removed from the async functions proposal. Use Promise.all() instead."
                );
              }

              if (
                this.state.maybeInArrowParameters &&
                !this.state.yieldOrAwaitInPossibleArrowParameters
              ) {
                this.state.yieldOrAwaitInPossibleArrowParameters = node;
              }

              node.argument = this.parseMaybeUnary();
              return this.finishNode(node, "AwaitExpression");
            }

            parseYield() {
              const node = this.startNode();

              if (this.state.inParameters) {
                this.raise(
                  node.start,
                  "yield is not allowed in generator parameters"
                );
              }

              if (
                this.state.maybeInArrowParameters &&
                !this.state.yieldOrAwaitInPossibleArrowParameters
              ) {
                this.state.yieldOrAwaitInPossibleArrowParameters = node;
              }

              this.next();

              if (
                this.match(types.semi) ||
                this.canInsertSemicolon() ||
                (!this.match(types.star) && !this.state.type.startsExpr)
              ) {
                node.delegate = false;
                node.argument = null;
              } else {
                node.delegate = this.eat(types.star);
                node.argument = this.parseMaybeAssign();
              }

              return this.finishNode(node, "YieldExpression");
            }

            checkPipelineAtInfixOperator(left, leftStartPos) {
              if (
                this.getPluginOption("pipelineOperator", "proposal") === "smart"
              ) {
                if (left.type === "SequenceExpression") {
                  throw this.raise(
                    leftStartPos,
                    `Pipeline head should not be a comma-separated sequence expression`
                  );
                }
              }
            }

            parseSmartPipelineBody(childExpression, startPos, startLoc) {
              const pipelineStyle = this.checkSmartPipelineBodyStyle(
                childExpression
              );
              this.checkSmartPipelineBodyEarlyErrors(
                childExpression,
                pipelineStyle,
                startPos
              );
              return this.parseSmartPipelineBodyInStyle(
                childExpression,
                pipelineStyle,
                startPos,
                startLoc
              );
            }

            checkSmartPipelineBodyEarlyErrors(
              childExpression,
              pipelineStyle,
              startPos
            ) {
              if (this.match(types.arrow)) {
                throw this.raise(
                  this.state.start,
                  `Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized`
                );
              } else if (
                pipelineStyle === "PipelineTopicExpression" &&
                childExpression.type === "SequenceExpression"
              ) {
                throw this.raise(
                  startPos,
                  `Pipeline body may not be a comma-separated sequence expression`
                );
              }
            }

            parseSmartPipelineBodyInStyle(
              childExpression,
              pipelineStyle,
              startPos,
              startLoc
            ) {
              const bodyNode = this.startNodeAt(startPos, startLoc);

              switch (pipelineStyle) {
                case "PipelineBareFunction":
                  bodyNode.callee = childExpression;
                  break;

                case "PipelineBareConstructor":
                  bodyNode.callee = childExpression.callee;
                  break;

                case "PipelineBareAwaitedFunction":
                  bodyNode.callee = childExpression.argument;
                  break;

                case "PipelineTopicExpression":
                  if (!this.topicReferenceWasUsedInCurrentTopicContext()) {
                    throw this.raise(
                      startPos,
                      `Pipeline is in topic style but does not use topic reference`
                    );
                  }

                  bodyNode.expression = childExpression;
                  break;

                default:
                  throw this.raise(
                    startPos,
                    `Unknown pipeline style ${pipelineStyle}`
                  );
              }

              return this.finishNode(bodyNode, pipelineStyle);
            }

            checkSmartPipelineBodyStyle(expression) {
              switch (expression.type) {
                default:
                  return this.isSimpleReference(expression)
                    ? "PipelineBareFunction"
                    : "PipelineTopicExpression";
              }
            }

            isSimpleReference(expression) {
              switch (expression.type) {
                case "MemberExpression":
                  return (
                    !expression.computed &&
                    this.isSimpleReference(expression.object)
                  );

                case "Identifier":
                  return true;

                default:
                  return false;
              }
            }

            withTopicPermittingContext(callback) {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = {
                maxNumOfResolvableTopics: 1,
                maxTopicIndex: null,
              };

              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }

            withTopicForbiddingContext(callback) {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = {
                maxNumOfResolvableTopics: 0,
                maxTopicIndex: null,
              };

              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }

            registerTopicReference() {
              this.state.topicContext.maxTopicIndex = 0;
            }

            primaryTopicReferenceIsAllowedInCurrentTopicContext() {
              return this.state.topicContext.maxNumOfResolvableTopics >= 1;
            }

            topicReferenceWasUsedInCurrentTopicContext() {
              return (
                this.state.topicContext.maxTopicIndex != null &&
                this.state.topicContext.maxTopicIndex >= 0
              );
            }
          }

          const empty = [];
          const loopLabel = {
            kind: "loop",
          };
          const switchLabel = {
            kind: "switch",
          };

          class StatementParser extends ExpressionParser {
            parseTopLevel(file, program) {
              program.sourceType = this.options.sourceType;
              program.interpreter = this.parseInterpreterDirective();
              this.parseBlockBody(program, true, true, types.eof);
              file.program = this.finishNode(program, "Program");
              file.comments = this.state.comments;
              if (this.options.tokens) file.tokens = this.state.tokens;
              return this.finishNode(file, "File");
            }

            stmtToDirective(stmt) {
              const expr = stmt.expression;
              const directiveLiteral = this.startNodeAt(
                expr.start,
                expr.loc.start
              );
              const directive = this.startNodeAt(stmt.start, stmt.loc.start);
              const raw = this.input.slice(expr.start, expr.end);
              const val = (directiveLiteral.value = raw.slice(1, -1));
              this.addExtra(directiveLiteral, "raw", raw);
              this.addExtra(directiveLiteral, "rawValue", val);
              directive.value = this.finishNodeAt(
                directiveLiteral,
                "DirectiveLiteral",
                expr.end,
                expr.loc.end
              );
              return this.finishNodeAt(
                directive,
                "Directive",
                stmt.end,
                stmt.loc.end
              );
            }

            parseInterpreterDirective() {
              if (!this.match(types.interpreterDirective)) {
                return null;
              }

              const node = this.startNode();
              node.value = this.state.value;
              this.next();
              return this.finishNode(node, "InterpreterDirective");
            }

            parseStatement(declaration, topLevel) {
              if (this.match(types.at)) {
                this.parseDecorators(true);
              }

              return this.parseStatementContent(declaration, topLevel);
            }

            parseStatementContent(declaration, topLevel) {
              const starttype = this.state.type;
              const node = this.startNode();

              switch (starttype) {
                case types._break:
                case types._continue:
                  return this.parseBreakContinueStatement(
                    node,
                    starttype.keyword
                  );

                case types._debugger:
                  return this.parseDebuggerStatement(node);

                case types._do:
                  return this.parseDoStatement(node);

                case types._for:
                  return this.parseForStatement(node);

                case types._function:
                  if (this.lookahead().type === types.dot) break;
                  if (!declaration) this.unexpected();
                  return this.parseFunctionStatement(node);

                case types._class:
                  if (!declaration) this.unexpected();
                  return this.parseClass(node, true);

                case types._if:
                  return this.parseIfStatement(node);

                case types._return:
                  return this.parseReturnStatement(node);

                case types._switch:
                  return this.parseSwitchStatement(node);

                case types._throw:
                  return this.parseThrowStatement(node);

                case types._try:
                  return this.parseTryStatement(node);

                case types._let:
                case types._const:
                  if (!declaration) this.unexpected();

                case types._var:
                  return this.parseVarStatement(node, starttype);

                case types._while:
                  return this.parseWhileStatement(node);

                case types._with:
                  return this.parseWithStatement(node);

                case types.braceL:
                  return this.parseBlock();

                case types.semi:
                  return this.parseEmptyStatement(node);

                case types._export:
                case types._import: {
                  const nextToken = this.lookahead();

                  if (
                    nextToken.type === types.parenL ||
                    nextToken.type === types.dot
                  ) {
                    break;
                  }

                  if (!this.options.allowImportExportEverywhere && !topLevel) {
                    this.raise(
                      this.state.start,
                      "'import' and 'export' may only appear at the top level"
                    );
                  }

                  this.next();
                  let result;

                  if (starttype == types._import) {
                    result = this.parseImport(node);

                    if (
                      result.type === "ImportDeclaration" &&
                      (!result.importKind || result.importKind === "value")
                    ) {
                      this.sawUnambiguousESM = true;
                    }
                  } else {
                    result = this.parseExport(node);

                    if (
                      (result.type === "ExportNamedDeclaration" &&
                        (!result.exportKind ||
                          result.exportKind === "value")) ||
                      (result.type === "ExportAllDeclaration" &&
                        (!result.exportKind ||
                          result.exportKind === "value")) ||
                      result.type === "ExportDefaultDeclaration"
                    ) {
                      this.sawUnambiguousESM = true;
                    }
                  }

                  this.assertModuleNodeAllowed(node);
                  return result;
                }

                case types.name:
                  if (this.isContextual("async")) {
                    const state = this.state.clone();
                    this.next();

                    if (
                      this.match(types._function) &&
                      !this.canInsertSemicolon()
                    ) {
                      this.expect(types._function);
                      return this.parseFunction(node, true, false, true);
                    } else {
                      this.state = state;
                    }
                  }
              }

              const maybeName = this.state.value;
              const expr = this.parseExpression();

              if (
                starttype === types.name &&
                expr.type === "Identifier" &&
                this.eat(types.colon)
              ) {
                return this.parseLabeledStatement(node, maybeName, expr);
              } else {
                return this.parseExpressionStatement(node, expr);
              }
            }

            assertModuleNodeAllowed(node) {
              if (!this.options.allowImportExportEverywhere && !this.inModule) {
                this.raise(
                  node.start,
                  `'import' and 'export' may appear only with 'sourceType: "module"'`,
                  {
                    code: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED",
                  }
                );
              }
            }

            takeDecorators(node) {
              const decorators = this.state.decoratorStack[
                this.state.decoratorStack.length - 1
              ];

              if (decorators.length) {
                node.decorators = decorators;
                this.resetStartLocationFromNode(node, decorators[0]);
                this.state.decoratorStack[
                  this.state.decoratorStack.length - 1
                ] = [];
              }
            }

            canHaveLeadingDecorator() {
              return this.match(types._class);
            }

            parseDecorators(allowExport) {
              const currentContextDecorators = this.state.decoratorStack[
                this.state.decoratorStack.length - 1
              ];

              while (this.match(types.at)) {
                const decorator = this.parseDecorator();
                currentContextDecorators.push(decorator);
              }

              if (this.match(types._export)) {
                if (!allowExport) {
                  this.unexpected();
                }

                if (
                  this.hasPlugin("decorators") &&
                  !this.getPluginOption("decorators", "decoratorsBeforeExport")
                ) {
                  this.raise(
                    this.state.start,
                    "Using the export keyword between a decorator and a class is not allowed. " +
                      "Please use `export @dec class` instead."
                  );
                }
              } else if (!this.canHaveLeadingDecorator()) {
                this.raise(
                  this.state.start,
                  "Leading decorators must be attached to a class declaration"
                );
              }
            }

            parseDecorator() {
              this.expectOnePlugin(["decorators-legacy", "decorators"]);
              const node = this.startNode();
              this.next();

              if (this.hasPlugin("decorators")) {
                this.state.decoratorStack.push([]);
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                let expr;

                if (this.eat(types.parenL)) {
                  expr = this.parseExpression();
                  this.expect(types.parenR);
                } else {
                  expr = this.parseIdentifier(false);

                  while (this.eat(types.dot)) {
                    const node = this.startNodeAt(startPos, startLoc);
                    node.object = expr;
                    node.property = this.parseIdentifier(true);
                    node.computed = false;
                    expr = this.finishNode(node, "MemberExpression");
                  }
                }

                node.expression = this.parseMaybeDecoratorArguments(expr);
                this.state.decoratorStack.pop();
              } else {
                node.expression = this.parseMaybeAssign();
              }

              return this.finishNode(node, "Decorator");
            }

            parseMaybeDecoratorArguments(expr) {
              if (this.eat(types.parenL)) {
                const node = this.startNodeAtNode(expr);
                node.callee = expr;
                node.arguments = this.parseCallExpressionArguments(
                  types.parenR,
                  false
                );
                this.toReferencedList(node.arguments);
                return this.finishNode(node, "CallExpression");
              }

              return expr;
            }

            parseBreakContinueStatement(node, keyword) {
              const isBreak = keyword === "break";
              this.next();

              if (this.isLineTerminator()) {
                node.label = null;
              } else if (!this.match(types.name)) {
                this.unexpected();
              } else {
                node.label = this.parseIdentifier();
                this.semicolon();
              }

              let i;

              for (i = 0; i < this.state.labels.length; ++i) {
                const lab = this.state.labels[i];

                if (node.label == null || lab.name === node.label.name) {
                  if (lab.kind != null && (isBreak || lab.kind === "loop"))
                    break;
                  if (node.label && isBreak) break;
                }
              }

              if (i === this.state.labels.length) {
                this.raise(node.start, "Unsyntactic " + keyword);
              }

              return this.finishNode(
                node,
                isBreak ? "BreakStatement" : "ContinueStatement"
              );
            }

            parseDebuggerStatement(node) {
              this.next();
              this.semicolon();
              return this.finishNode(node, "DebuggerStatement");
            }

            parseDoStatement(node) {
              this.next();
              this.state.labels.push(loopLabel);
              node.body = this.withTopicForbiddingContext(() =>
                this.parseStatement(false)
              );
              this.state.labels.pop();
              this.expect(types._while);
              node.test = this.parseParenExpression();
              this.eat(types.semi);
              return this.finishNode(node, "DoWhileStatement");
            }

            parseForStatement(node) {
              this.next();
              this.state.labels.push(loopLabel);
              let forAwait = false;

              if (this.state.inAsync && this.isContextual("await")) {
                forAwait = true;
                this.next();
              }

              this.expect(types.parenL);

              if (this.match(types.semi)) {
                if (forAwait) {
                  this.unexpected();
                }

                return this.parseFor(node, null);
              }

              if (
                this.match(types._var) ||
                this.match(types._let) ||
                this.match(types._const)
              ) {
                const init = this.startNode();
                const varKind = this.state.type;
                this.next();
                this.parseVar(init, true, varKind);
                this.finishNode(init, "VariableDeclaration");

                if (this.match(types._in) || this.isContextual("of")) {
                  if (init.declarations.length === 1) {
                    const declaration = init.declarations[0];
                    const isForInInitializer =
                      varKind === types._var &&
                      declaration.init &&
                      declaration.id.type != "ObjectPattern" &&
                      declaration.id.type != "ArrayPattern" &&
                      !this.isContextual("of");

                    if (this.state.strict && isForInInitializer) {
                      this.raise(
                        this.state.start,
                        "for-in initializer in strict mode"
                      );
                    } else if (isForInInitializer || !declaration.init) {
                      return this.parseForIn(node, init, forAwait);
                    }
                  }
                }

                if (forAwait) {
                  this.unexpected();
                }

                return this.parseFor(node, init);
              }

              const refShorthandDefaultPos = {
                start: 0,
              };
              const init = this.parseExpression(true, refShorthandDefaultPos);

              if (this.match(types._in) || this.isContextual("of")) {
                const description = this.isContextual("of")
                  ? "for-of statement"
                  : "for-in statement";
                this.toAssignable(init, undefined, description);
                this.checkLVal(init, undefined, undefined, description);
                return this.parseForIn(node, init, forAwait);
              } else if (refShorthandDefaultPos.start) {
                this.unexpected(refShorthandDefaultPos.start);
              }

              if (forAwait) {
                this.unexpected();
              }

              return this.parseFor(node, init);
            }

            parseFunctionStatement(node) {
              this.next();
              return this.parseFunction(node, true);
            }

            parseIfStatement(node) {
              this.next();
              node.test = this.parseParenExpression();
              node.consequent = this.parseStatement(false);
              node.alternate = this.eat(types._else)
                ? this.parseStatement(false)
                : null;
              return this.finishNode(node, "IfStatement");
            }

            parseReturnStatement(node) {
              if (
                !this.state.inFunction &&
                !this.options.allowReturnOutsideFunction
              ) {
                this.raise(this.state.start, "'return' outside of function");
              }

              this.next();

              if (this.isLineTerminator()) {
                node.argument = null;
              } else {
                node.argument = this.parseExpression();
                this.semicolon();
              }

              return this.finishNode(node, "ReturnStatement");
            }

            parseSwitchStatement(node) {
              this.next();
              node.discriminant = this.parseParenExpression();
              const cases = (node.cases = []);
              this.expect(types.braceL);
              this.state.labels.push(switchLabel);
              let cur;

              for (let sawDefault; !this.match(types.braceR); ) {
                if (this.match(types._case) || this.match(types._default)) {
                  const isCase = this.match(types._case);
                  if (cur) this.finishNode(cur, "SwitchCase");
                  cases.push((cur = this.startNode()));
                  cur.consequent = [];
                  this.next();

                  if (isCase) {
                    cur.test = this.parseExpression();
                  } else {
                    if (sawDefault) {
                      this.raise(
                        this.state.lastTokStart,
                        "Multiple default clauses"
                      );
                    }

                    sawDefault = true;
                    cur.test = null;
                  }

                  this.expect(types.colon);
                } else {
                  if (cur) {
                    cur.consequent.push(this.parseStatement(true));
                  } else {
                    this.unexpected();
                  }
                }
              }

              if (cur) this.finishNode(cur, "SwitchCase");
              this.next();
              this.state.labels.pop();
              return this.finishNode(node, "SwitchStatement");
            }

            parseThrowStatement(node) {
              this.next();

              if (
                lineBreak.test(
                  this.input.slice(this.state.lastTokEnd, this.state.start)
                )
              ) {
                this.raise(
                  this.state.lastTokEnd,
                  "Illegal newline after throw"
                );
              }

              node.argument = this.parseExpression();
              this.semicolon();
              return this.finishNode(node, "ThrowStatement");
            }

            parseTryStatement(node) {
              this.next();
              node.block = this.parseBlock();
              node.handler = null;

              if (this.match(types._catch)) {
                const clause = this.startNode();
                this.next();

                if (this.match(types.parenL)) {
                  this.expect(types.parenL);
                  clause.param = this.parseBindingAtom();
                  const clashes = Object.create(null);
                  this.checkLVal(clause.param, true, clashes, "catch clause");
                  this.expect(types.parenR);
                } else {
                  clause.param = null;
                }

                clause.body = this.withTopicForbiddingContext(() =>
                  this.parseBlock(false)
                );
                node.handler = this.finishNode(clause, "CatchClause");
              }

              node.guardedHandlers = empty;
              node.finalizer = this.eat(types._finally)
                ? this.parseBlock()
                : null;

              if (!node.handler && !node.finalizer) {
                this.raise(node.start, "Missing catch or finally clause");
              }

              return this.finishNode(node, "TryStatement");
            }

            parseVarStatement(node, kind) {
              this.next();
              this.parseVar(node, false, kind);
              this.semicolon();
              return this.finishNode(node, "VariableDeclaration");
            }

            parseWhileStatement(node) {
              this.next();
              node.test = this.parseParenExpression();
              this.state.labels.push(loopLabel);
              node.body = this.withTopicForbiddingContext(() =>
                this.parseStatement(false)
              );
              this.state.labels.pop();
              return this.finishNode(node, "WhileStatement");
            }

            parseWithStatement(node) {
              if (this.state.strict) {
                this.raise(this.state.start, "'with' in strict mode");
              }

              this.next();
              node.object = this.parseParenExpression();
              node.body = this.withTopicForbiddingContext(() =>
                this.parseStatement(false)
              );
              return this.finishNode(node, "WithStatement");
            }

            parseEmptyStatement(node) {
              this.next();
              return this.finishNode(node, "EmptyStatement");
            }

            parseLabeledStatement(node, maybeName, expr) {
              for (
                let _i = 0, _this$state$labels = this.state.labels;
                _i < _this$state$labels.length;
                _i++
              ) {
                const label = _this$state$labels[_i];

                if (label.name === maybeName) {
                  this.raise(
                    expr.start,
                    `Label '${maybeName}' is already declared`
                  );
                }
              }

              const kind = this.state.type.isLoop
                ? "loop"
                : this.match(types._switch)
                ? "switch"
                : null;

              for (let i = this.state.labels.length - 1; i >= 0; i--) {
                const label = this.state.labels[i];

                if (label.statementStart === node.start) {
                  label.statementStart = this.state.start;
                  label.kind = kind;
                } else {
                  break;
                }
              }

              this.state.labels.push({
                name: maybeName,
                kind: kind,
                statementStart: this.state.start,
              });
              node.body = this.parseStatement(true);

              if (
                node.body.type == "ClassDeclaration" ||
                (node.body.type == "VariableDeclaration" &&
                  node.body.kind !== "var") ||
                (node.body.type == "FunctionDeclaration" &&
                  (this.state.strict || node.body.generator || node.body.async))
              ) {
                this.raise(node.body.start, "Invalid labeled declaration");
              }

              this.state.labels.pop();
              node.label = expr;
              return this.finishNode(node, "LabeledStatement");
            }

            parseExpressionStatement(node, expr) {
              node.expression = expr;
              this.semicolon();
              return this.finishNode(node, "ExpressionStatement");
            }

            parseBlock(allowDirectives) {
              const node = this.startNode();
              this.expect(types.braceL);
              this.parseBlockBody(node, allowDirectives, false, types.braceR);
              return this.finishNode(node, "BlockStatement");
            }

            isValidDirective(stmt) {
              return (
                stmt.type === "ExpressionStatement" &&
                stmt.expression.type === "StringLiteral" &&
                !stmt.expression.extra.parenthesized
              );
            }

            parseBlockBody(node, allowDirectives, topLevel, end) {
              const body = (node.body = []);
              const directives = (node.directives = []);
              this.parseBlockOrModuleBlockBody(
                body,
                allowDirectives ? directives : undefined,
                topLevel,
                end
              );
            }

            parseBlockOrModuleBlockBody(body, directives, topLevel, end) {
              let parsedNonDirective = false;
              let oldStrict;
              let octalPosition;

              while (!this.eat(end)) {
                if (
                  !parsedNonDirective &&
                  this.state.containsOctal &&
                  !octalPosition
                ) {
                  octalPosition = this.state.octalPosition;
                }

                const stmt = this.parseStatement(true, topLevel);

                if (
                  directives &&
                  !parsedNonDirective &&
                  this.isValidDirective(stmt)
                ) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive);

                  if (
                    oldStrict === undefined &&
                    directive.value.value === "use strict"
                  ) {
                    oldStrict = this.state.strict;
                    this.setStrict(true);

                    if (octalPosition) {
                      this.raise(octalPosition, "Octal literal in strict mode");
                    }
                  }

                  continue;
                }

                parsedNonDirective = true;
                body.push(stmt);
              }

              if (oldStrict === false) {
                this.setStrict(false);
              }
            }

            parseFor(node, init) {
              node.init = init;
              this.expect(types.semi);
              node.test = this.match(types.semi)
                ? null
                : this.parseExpression();
              this.expect(types.semi);
              node.update = this.match(types.parenR)
                ? null
                : this.parseExpression();
              this.expect(types.parenR);
              node.body = this.withTopicForbiddingContext(() =>
                this.parseStatement(false)
              );
              this.state.labels.pop();
              return this.finishNode(node, "ForStatement");
            }

            parseForIn(node, init, forAwait) {
              const type = this.match(types._in)
                ? "ForInStatement"
                : "ForOfStatement";

              if (forAwait) {
                this.eatContextual("of");
              } else {
                this.next();
              }

              if (type === "ForOfStatement") {
                node.await = !!forAwait;
              }

              node.left = init;
              node.right = this.parseExpression();
              this.expect(types.parenR);
              node.body = this.withTopicForbiddingContext(() =>
                this.parseStatement(false)
              );
              this.state.labels.pop();
              return this.finishNode(node, type);
            }

            parseVar(node, isFor, kind) {
              const declarations = (node.declarations = []);
              node.kind = kind.keyword;

              for (;;) {
                const decl = this.startNode();
                this.parseVarHead(decl);

                if (this.eat(types.eq)) {
                  decl.init = this.parseMaybeAssign(isFor);
                } else {
                  if (
                    kind === types._const &&
                    !(this.match(types._in) || this.isContextual("of"))
                  ) {
                    if (!this.hasPlugin("typescript")) {
                      this.unexpected();
                    }
                  } else if (
                    decl.id.type !== "Identifier" &&
                    !(
                      isFor &&
                      (this.match(types._in) || this.isContextual("of"))
                    )
                  ) {
                    this.raise(
                      this.state.lastTokEnd,
                      "Complex binding patterns require an initialization value"
                    );
                  }

                  decl.init = null;
                }

                declarations.push(this.finishNode(decl, "VariableDeclarator"));
                if (!this.eat(types.comma)) break;
              }

              return node;
            }

            parseVarHead(decl) {
              decl.id = this.parseBindingAtom();
              this.checkLVal(decl.id, true, undefined, "variable declaration");
            }

            parseFunction(
              node,
              isStatement,
              allowExpressionBody = false,
              isAsync = false,
              optionalId = false
            ) {
              const oldInFunc = this.state.inFunction;
              const oldInMethod = this.state.inMethod;
              const oldInAsync = this.state.inAsync;
              const oldInGenerator = this.state.inGenerator;
              const oldInClassProperty = this.state.inClassProperty;
              this.state.inFunction = true;
              this.state.inNonArrowFunction = true;
              this.state.inMethod = false;
              this.state.inClassProperty = false;
              this.initFunction(node, isAsync);

              if (this.match(types.star)) {
                node.generator = true;
                this.next();
              }

              if (
                isStatement &&
                !optionalId &&
                !this.match(types.name) &&
                !this.match(types._yield)
              ) {
                this.unexpected();
              }

              if (!isStatement) {
                this.state.inAsync = isAsync;
                this.state.inGenerator = node.generator;
              }

              if (this.match(types.name) || this.match(types._yield)) {
                node.id = this.parseBindingIdentifier();
              }

              if (isStatement) {
                this.state.inAsync = isAsync;
                this.state.inGenerator = node.generator;
              }

              this.parseFunctionParams(node);
              this.withTopicForbiddingContext(() => {
                this.parseFunctionBodyAndFinish(
                  node,
                  isStatement ? "FunctionDeclaration" : "FunctionExpression",
                  allowExpressionBody
                );
              });
              this.state.inFunction = oldInFunc;
              this.state.inMethod = oldInMethod;
              this.state.inAsync = oldInAsync;
              this.state.inGenerator = oldInGenerator;
              this.state.inClassProperty = oldInClassProperty;
              return node;
            }

            parseFunctionParams(node, allowModifiers) {
              const oldInParameters = this.state.inParameters;
              this.state.inParameters = true;
              this.expect(types.parenL);
              node.params = this.parseBindingList(
                types.parenR,
                false,
                allowModifiers
              );
              this.state.inParameters = oldInParameters;
            }

            parseClass(node, isStatement, optionalId) {
              this.next();
              this.takeDecorators(node);
              this.parseClassId(node, isStatement, optionalId);
              this.parseClassSuper(node);
              this.parseClassBody(node);
              return this.finishNode(
                node,
                isStatement ? "ClassDeclaration" : "ClassExpression"
              );
            }

            isClassProperty() {
              return (
                this.match(types.eq) ||
                this.match(types.semi) ||
                this.match(types.braceR)
              );
            }

            isClassMethod() {
              return this.match(types.parenL);
            }

            isNonstaticConstructor(method) {
              return (
                !method.computed &&
                !method.static &&
                (method.key.name === "constructor" ||
                  method.key.value === "constructor")
              );
            }

            parseClassBody(node) {
              const oldStrict = this.state.strict;
              this.state.strict = true;
              this.state.classLevel++;
              const state = {
                hadConstructor: false,
              };
              let decorators = [];
              const classBody = this.startNode();
              classBody.body = [];
              this.expect(types.braceL);
              this.withTopicForbiddingContext(() => {
                while (!this.eat(types.braceR)) {
                  if (this.eat(types.semi)) {
                    if (decorators.length > 0) {
                      this.raise(
                        this.state.lastTokEnd,
                        "Decorators must not be followed by a semicolon"
                      );
                    }

                    continue;
                  }

                  if (this.match(types.at)) {
                    decorators.push(this.parseDecorator());
                    continue;
                  }

                  const member = this.startNode();

                  if (decorators.length) {
                    member.decorators = decorators;
                    this.resetStartLocationFromNode(member, decorators[0]);
                    decorators = [];
                  }

                  this.parseClassMember(classBody, member, state);

                  if (
                    member.kind === "constructor" &&
                    member.decorators &&
                    member.decorators.length > 0
                  ) {
                    this.raise(
                      member.start,
                      "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?"
                    );
                  }
                }
              });

              if (decorators.length) {
                this.raise(
                  this.state.start,
                  "You have trailing decorators with no method"
                );
              }

              node.body = this.finishNode(classBody, "ClassBody");
              this.state.classLevel--;
              this.state.strict = oldStrict;
            }

            parseClassMember(classBody, member, state) {
              let isStatic = false;
              const containsEsc = this.state.containsEsc;

              if (this.match(types.name) && this.state.value === "static") {
                const key = this.parseIdentifier(true);

                if (this.isClassMethod()) {
                  const method = member;
                  method.kind = "method";
                  method.computed = false;
                  method.key = key;
                  method.static = false;
                  this.pushClassMethod(classBody, method, false, false, false);
                  return;
                } else if (this.isClassProperty()) {
                  const prop = member;
                  prop.computed = false;
                  prop.key = key;
                  prop.static = false;
                  classBody.body.push(this.parseClassProperty(prop));
                  return;
                } else if (containsEsc) {
                  throw this.unexpected();
                }

                isStatic = true;
              }

              this.parseClassMemberWithIsStatic(
                classBody,
                member,
                state,
                isStatic
              );
            }

            parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
              const publicMethod = member;
              const privateMethod = member;
              const publicProp = member;
              const privateProp = member;
              const method = publicMethod;
              const publicMember = publicMethod;
              member.static = isStatic;

              if (this.eat(types.star)) {
                method.kind = "method";
                this.parseClassPropertyName(method);

                if (method.key.type === "PrivateName") {
                  this.pushClassPrivateMethod(
                    classBody,
                    privateMethod,
                    true,
                    false
                  );
                  return;
                }

                if (this.isNonstaticConstructor(publicMethod)) {
                  this.raise(
                    publicMethod.key.start,
                    "Constructor can't be a generator"
                  );
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  true,
                  false,
                  false
                );
                return;
              }

              const key = this.parseClassPropertyName(member);
              const isPrivate = key.type === "PrivateName";
              const isSimple = key.type === "Identifier";
              this.parsePostMemberNameModifiers(publicMember);

              if (this.isClassMethod()) {
                method.kind = "method";

                if (isPrivate) {
                  this.pushClassPrivateMethod(
                    classBody,
                    privateMethod,
                    false,
                    false
                  );
                  return;
                }

                const isConstructor = this.isNonstaticConstructor(publicMethod);

                if (isConstructor) {
                  publicMethod.kind = "constructor";

                  if (publicMethod.decorators) {
                    this.raise(
                      publicMethod.start,
                      "You can't attach decorators to a class constructor"
                    );
                  }

                  if (state.hadConstructor && !this.hasPlugin("typescript")) {
                    this.raise(
                      key.start,
                      "Duplicate constructor in the same class"
                    );
                  }

                  state.hadConstructor = true;
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  false,
                  false,
                  isConstructor
                );
              } else if (this.isClassProperty()) {
                if (isPrivate) {
                  this.pushClassPrivateProperty(classBody, privateProp);
                } else {
                  this.pushClassProperty(classBody, publicProp);
                }
              } else if (
                isSimple &&
                key.name === "async" &&
                !this.isLineTerminator()
              ) {
                const isGenerator = this.eat(types.star);
                method.kind = "method";
                this.parseClassPropertyName(method);

                if (method.key.type === "PrivateName") {
                  this.pushClassPrivateMethod(
                    classBody,
                    privateMethod,
                    isGenerator,
                    true
                  );
                } else {
                  if (this.isNonstaticConstructor(publicMethod)) {
                    this.raise(
                      publicMethod.key.start,
                      "Constructor can't be an async function"
                    );
                  }

                  this.pushClassMethod(
                    classBody,
                    publicMethod,
                    isGenerator,
                    true,
                    false
                  );
                }
              } else if (
                isSimple &&
                (key.name === "get" || key.name === "set") &&
                !(this.isLineTerminator() && this.match(types.star))
              ) {
                method.kind = key.name;
                this.parseClassPropertyName(publicMethod);

                if (method.key.type === "PrivateName") {
                  this.pushClassPrivateMethod(
                    classBody,
                    privateMethod,
                    false,
                    false
                  );
                } else {
                  if (this.isNonstaticConstructor(publicMethod)) {
                    this.raise(
                      publicMethod.key.start,
                      "Constructor can't have get/set modifier"
                    );
                  }

                  this.pushClassMethod(
                    classBody,
                    publicMethod,
                    false,
                    false,
                    false
                  );
                }

                this.checkGetterSetterParams(publicMethod);
              } else if (this.isLineTerminator()) {
                if (isPrivate) {
                  this.pushClassPrivateProperty(classBody, privateProp);
                } else {
                  this.pushClassProperty(classBody, publicProp);
                }
              } else {
                this.unexpected();
              }
            }

            parseClassPropertyName(member) {
              const key = this.parsePropertyName(member);

              if (
                !member.computed &&
                member.static &&
                (key.name === "prototype" || key.value === "prototype")
              ) {
                this.raise(
                  key.start,
                  "Classes may not have static property named prototype"
                );
              }

              if (key.type === "PrivateName" && key.id.name === "constructor") {
                this.raise(
                  key.start,
                  "Classes may not have a private field named '#constructor'"
                );
              }

              return key;
            }

            pushClassProperty(classBody, prop) {
              if (this.isNonstaticConstructor(prop)) {
                this.raise(
                  prop.key.start,
                  "Classes may not have a non-static field named 'constructor'"
                );
              }

              classBody.body.push(this.parseClassProperty(prop));
            }

            pushClassPrivateProperty(classBody, prop) {
              this.expectPlugin("classPrivateProperties", prop.key.start);
              classBody.body.push(this.parseClassPrivateProperty(prop));
            }

            pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor
            ) {
              classBody.body.push(
                this.parseMethod(
                  method,
                  isGenerator,
                  isAsync,
                  isConstructor,
                  "ClassMethod"
                )
              );
            }

            pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
              this.expectPlugin("classPrivateMethods", method.key.start);
              classBody.body.push(
                this.parseMethod(
                  method,
                  isGenerator,
                  isAsync,
                  false,
                  "ClassPrivateMethod"
                )
              );
            }

            parsePostMemberNameModifiers(methodOrProp) {}

            parseAccessModifier() {
              return undefined;
            }

            parseClassPrivateProperty(node) {
              const oldInMethod = this.state.inMethod;
              this.state.inMethod = false;
              this.state.inClassProperty = true;
              node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;
              this.semicolon();
              this.state.inClassProperty = false;
              this.state.inMethod = oldInMethod;
              return this.finishNode(node, "ClassPrivateProperty");
            }

            parseClassProperty(node) {
              if (!node.typeAnnotation) {
                this.expectPlugin("classProperties");
              }

              const oldInMethod = this.state.inMethod;
              this.state.inMethod = false;
              this.state.inClassProperty = true;

              if (this.match(types.eq)) {
                this.expectPlugin("classProperties");
                this.next();
                node.value = this.parseMaybeAssign();
              } else {
                node.value = null;
              }

              this.semicolon();
              this.state.inClassProperty = false;
              this.state.inMethod = oldInMethod;
              return this.finishNode(node, "ClassProperty");
            }

            parseClassId(node, isStatement, optionalId) {
              if (this.match(types.name)) {
                node.id = this.parseIdentifier();
              } else {
                if (optionalId || !isStatement) {
                  node.id = null;
                } else {
                  this.unexpected(null, "A class name is required");
                }
              }
            }

            parseClassSuper(node) {
              node.superClass = this.eat(types._extends)
                ? this.parseExprSubscripts()
                : null;
            }

            parseExport(node) {
              if (this.shouldParseExportStar()) {
                this.parseExportStar(node);
                if (node.type === "ExportAllDeclaration") return node;
              } else if (this.isExportDefaultSpecifier()) {
                this.expectPlugin("exportDefaultFrom");
                const specifier = this.startNode();
                specifier.exported = this.parseIdentifier(true);
                const specifiers = [
                  this.finishNode(specifier, "ExportDefaultSpecifier"),
                ];
                node.specifiers = specifiers;

                if (
                  this.match(types.comma) &&
                  this.lookahead().type === types.star
                ) {
                  this.expect(types.comma);
                  const specifier = this.startNode();
                  this.expect(types.star);
                  this.expectContextual("as");
                  specifier.exported = this.parseIdentifier();
                  specifiers.push(
                    this.finishNode(specifier, "ExportNamespaceSpecifier")
                  );
                } else {
                  this.parseExportSpecifiersMaybe(node);
                }

                this.parseExportFrom(node, true);
              } else if (this.eat(types._default)) {
                node.declaration = this.parseExportDefaultExpression();
                this.checkExport(node, true, true);
                return this.finishNode(node, "ExportDefaultDeclaration");
              } else if (this.shouldParseExportDeclaration()) {
                if (this.isContextual("async")) {
                  const next = this.lookahead();

                  if (next.type !== types._function) {
                    this.unexpected(
                      next.start,
                      `Unexpected token, expected "function"`
                    );
                  }
                }

                node.specifiers = [];
                node.source = null;
                node.declaration = this.parseExportDeclaration(node);
              } else {
                node.declaration = null;
                node.specifiers = this.parseExportSpecifiers();
                this.parseExportFrom(node);
              }

              this.checkExport(node, true);
              return this.finishNode(node, "ExportNamedDeclaration");
            }

            isAsyncFunction() {
              if (!this.isContextual("async")) return false;
              const { input, pos } = this.state;
              skipWhiteSpace.lastIndex = pos;
              const skip = skipWhiteSpace.exec(input);
              if (!skip || !skip.length) return false;
              const next = pos + skip[0].length;
              return (
                !lineBreak.test(input.slice(pos, next)) &&
                input.slice(next, next + 8) === "function" &&
                (next + 8 === input.length ||
                  !isIdentifierChar(input.charAt(next + 8)))
              );
            }

            parseExportDefaultExpression() {
              const expr = this.startNode();
              const isAsync = this.isAsyncFunction();

              if (this.eat(types._function) || isAsync) {
                if (isAsync) {
                  this.eatContextual("async");
                  this.expect(types._function);
                }

                return this.parseFunction(expr, true, false, isAsync, true);
              } else if (this.match(types._class)) {
                return this.parseClass(expr, true, true);
              } else if (this.match(types.at)) {
                if (
                  this.hasPlugin("decorators") &&
                  this.getPluginOption("decorators", "decoratorsBeforeExport")
                ) {
                  this.unexpected(
                    this.state.start,
                    "Decorators must be placed *before* the 'export' keyword." +
                      " You can set the 'decoratorsBeforeExport' option to false to use" +
                      " the 'export @decorator class {}' syntax"
                  );
                }

                this.parseDecorators(false);
                return this.parseClass(expr, true, true);
              } else if (
                this.match(types._let) ||
                this.match(types._const) ||
                this.match(types._var)
              ) {
                return this.raise(
                  this.state.start,
                  "Only expressions, functions or classes are allowed as the `default` export."
                );
              } else {
                const res = this.parseMaybeAssign();
                this.semicolon();
                return res;
              }
            }

            parseExportDeclaration(node) {
              return this.parseStatement(true);
            }

            isExportDefaultSpecifier() {
              if (this.match(types.name)) {
                return this.state.value !== "async";
              }

              if (!this.match(types._default)) {
                return false;
              }

              const lookahead = this.lookahead();
              return (
                lookahead.type === types.comma ||
                (lookahead.type === types.name && lookahead.value === "from")
              );
            }

            parseExportSpecifiersMaybe(node) {
              if (this.eat(types.comma)) {
                node.specifiers = node.specifiers.concat(
                  this.parseExportSpecifiers()
                );
              }
            }

            parseExportFrom(node, expect) {
              if (this.eatContextual("from")) {
                node.source = this.match(types.string)
                  ? this.parseExprAtom()
                  : this.unexpected();
                this.checkExport(node);
              } else {
                if (expect) {
                  this.unexpected();
                } else {
                  node.source = null;
                }
              }

              this.semicolon();
            }

            shouldParseExportStar() {
              return this.match(types.star);
            }

            parseExportStar(node) {
              this.expect(types.star);

              if (this.isContextual("as")) {
                this.parseExportNamespace(node);
              } else {
                this.parseExportFrom(node, true);
                this.finishNode(node, "ExportAllDeclaration");
              }
            }

            parseExportNamespace(node) {
              this.expectPlugin("exportNamespaceFrom");
              const specifier = this.startNodeAt(
                this.state.lastTokStart,
                this.state.lastTokStartLoc
              );
              this.next();
              specifier.exported = this.parseIdentifier(true);
              node.specifiers = [
                this.finishNode(specifier, "ExportNamespaceSpecifier"),
              ];
              this.parseExportSpecifiersMaybe(node);
              this.parseExportFrom(node, true);
            }

            shouldParseExportDeclaration() {
              if (this.match(types.at)) {
                this.expectOnePlugin(["decorators", "decorators-legacy"]);

                if (this.hasPlugin("decorators")) {
                  if (
                    this.getPluginOption("decorators", "decoratorsBeforeExport")
                  ) {
                    this.unexpected(
                      this.state.start,
                      "Decorators must be placed *before* the 'export' keyword." +
                        " You can set the 'decoratorsBeforeExport' option to false to use" +
                        " the 'export @decorator class {}' syntax"
                    );
                  } else {
                    return true;
                  }
                }
              }

              return (
                this.state.type.keyword === "var" ||
                this.state.type.keyword === "const" ||
                this.state.type.keyword === "let" ||
                this.state.type.keyword === "function" ||
                this.state.type.keyword === "class" ||
                this.isAsyncFunction()
              );
            }

            checkExport(node, checkNames, isDefault) {
              if (checkNames) {
                if (isDefault) {
                  this.checkDuplicateExports(node, "default");
                } else if (node.specifiers && node.specifiers.length) {
                  for (
                    let _i2 = 0, _node$specifiers = node.specifiers;
                    _i2 < _node$specifiers.length;
                    _i2++
                  ) {
                    const specifier = _node$specifiers[_i2];
                    this.checkDuplicateExports(
                      specifier,
                      specifier.exported.name
                    );
                  }
                } else if (node.declaration) {
                  if (
                    node.declaration.type === "FunctionDeclaration" ||
                    node.declaration.type === "ClassDeclaration"
                  ) {
                    const id = node.declaration.id;
                    if (!id) throw new Error("Assertion failure");
                    this.checkDuplicateExports(node, id.name);
                  } else if (node.declaration.type === "VariableDeclaration") {
                    for (
                      let _i3 = 0,
                        _node$declaration$dec = node.declaration.declarations;
                      _i3 < _node$declaration$dec.length;
                      _i3++
                    ) {
                      const declaration = _node$declaration$dec[_i3];
                      this.checkDeclaration(declaration.id);
                    }
                  }
                }
              }

              const currentContextDecorators = this.state.decoratorStack[
                this.state.decoratorStack.length - 1
              ];

              if (currentContextDecorators.length) {
                const isClass =
                  node.declaration &&
                  (node.declaration.type === "ClassDeclaration" ||
                    node.declaration.type === "ClassExpression");

                if (!node.declaration || !isClass) {
                  throw this.raise(
                    node.start,
                    "You can only use decorators on an export when exporting a class"
                  );
                }

                this.takeDecorators(node.declaration);
              }
            }

            checkDeclaration(node) {
              if (node.type === "ObjectPattern") {
                for (
                  let _i4 = 0, _node$properties = node.properties;
                  _i4 < _node$properties.length;
                  _i4++
                ) {
                  const prop = _node$properties[_i4];
                  this.checkDeclaration(prop);
                }
              } else if (node.type === "ArrayPattern") {
                for (
                  let _i5 = 0, _node$elements = node.elements;
                  _i5 < _node$elements.length;
                  _i5++
                ) {
                  const elem = _node$elements[_i5];

                  if (elem) {
                    this.checkDeclaration(elem);
                  }
                }
              } else if (node.type === "ObjectProperty") {
                this.checkDeclaration(node.value);
              } else if (node.type === "RestElement") {
                this.checkDeclaration(node.argument);
              } else if (node.type === "Identifier") {
                this.checkDuplicateExports(node, node.name);
              }
            }

            checkDuplicateExports(node, name) {
              if (this.state.exportedIdentifiers.indexOf(name) > -1) {
                this.raiseDuplicateExportError(node, name);
              }

              this.state.exportedIdentifiers.push(name);
            }

            raiseDuplicateExportError(node, name) {
              throw this.raise(
                node.start,
                name === "default"
                  ? "Only one default export allowed per module."
                  : `\`${name}\` has already been exported. Exported identifiers must be unique.`
              );
            }

            parseExportSpecifiers() {
              const nodes = [];
              let first = true;
              let needsFrom;
              this.expect(types.braceL);

              while (!this.eat(types.braceR)) {
                if (first) {
                  first = false;
                } else {
                  this.expect(types.comma);
                  if (this.eat(types.braceR)) break;
                }

                const isDefault = this.match(types._default);
                if (isDefault && !needsFrom) needsFrom = true;
                const node = this.startNode();
                node.local = this.parseIdentifier(isDefault);
                node.exported = this.eatContextual("as")
                  ? this.parseIdentifier(true)
                  : node.local.__clone();
                nodes.push(this.finishNode(node, "ExportSpecifier"));
              }

              if (needsFrom && !this.isContextual("from")) {
                this.unexpected();
              }

              return nodes;
            }

            parseImport(node) {
              if (this.match(types.string)) {
                node.specifiers = [];
                node.source = this.parseExprAtom();
              } else {
                node.specifiers = [];
                this.parseImportSpecifiers(node);
                this.expectContextual("from");
                node.source = this.match(types.string)
                  ? this.parseExprAtom()
                  : this.unexpected();
              }

              this.semicolon();
              return this.finishNode(node, "ImportDeclaration");
            }

            shouldParseDefaultImport(node) {
              return this.match(types.name);
            }

            parseImportSpecifierLocal(
              node,
              specifier,
              type,
              contextDescription
            ) {
              specifier.local = this.parseIdentifier();
              this.checkLVal(
                specifier.local,
                true,
                undefined,
                contextDescription
              );
              node.specifiers.push(this.finishNode(specifier, type));
            }

            parseImportSpecifiers(node) {
              let first = true;

              if (this.shouldParseDefaultImport(node)) {
                this.parseImportSpecifierLocal(
                  node,
                  this.startNode(),
                  "ImportDefaultSpecifier",
                  "default import specifier"
                );
                if (!this.eat(types.comma)) return;
              }

              if (this.match(types.star)) {
                const specifier = this.startNode();
                this.next();
                this.expectContextual("as");
                this.parseImportSpecifierLocal(
                  node,
                  specifier,
                  "ImportNamespaceSpecifier",
                  "import namespace specifier"
                );
                return;
              }

              this.expect(types.braceL);

              while (!this.eat(types.braceR)) {
                if (first) {
                  first = false;
                } else {
                  if (this.eat(types.colon)) {
                    this.unexpected(
                      null,
                      "ES2015 named imports do not destructure. " +
                        "Use another statement for destructuring after the import."
                    );
                  }

                  this.expect(types.comma);
                  if (this.eat(types.braceR)) break;
                }

                this.parseImportSpecifier(node);
              }
            }

            parseImportSpecifier(node) {
              const specifier = this.startNode();
              specifier.imported = this.parseIdentifier(true);

              if (this.eatContextual("as")) {
                specifier.local = this.parseIdentifier();
              } else {
                this.checkReservedWord(
                  specifier.imported.name,
                  specifier.start,
                  true,
                  true
                );
                specifier.local = specifier.imported.__clone();
              }

              this.checkLVal(
                specifier.local,
                true,
                undefined,
                "import specifier"
              );
              node.specifiers.push(
                this.finishNode(specifier, "ImportSpecifier")
              );
            }
          }

          class Parser extends StatementParser {
            constructor(options, input) {
              options = getOptions(options);
              super(options, input);
              this.options = options;
              this.inModule = this.options.sourceType === "module";
              this.input = input;
              this.plugins = pluginsMap(this.options.plugins);
              this.filename = options.sourceFilename;
            }

            parse() {
              const file = this.startNode();
              const program = this.startNode();
              this.nextToken();
              return this.parseTopLevel(file, program);
            }
          }

          function pluginsMap(plugins) {
            const pluginMap = Object.create(null);

            for (let _i = 0; _i < plugins.length; _i++) {
              const plugin = plugins[_i];
              const [name, options = {}] = Array.isArray(plugin)
                ? plugin
                : [plugin, {}];
              if (!pluginMap[name]) pluginMap[name] = options || {};
            }

            return pluginMap;
          }

          function nonNull(x) {
            if (x == null) {
              throw new Error(`Unexpected ${x} value.`);
            }

            return x;
          }

          function assert(x) {
            if (!x) {
              throw new Error("Assert fail");
            }
          }

          function keywordTypeFromName(value) {
            switch (value) {
              case "any":
                return "TSAnyKeyword";

              case "boolean":
                return "TSBooleanKeyword";

              case "never":
                return "TSNeverKeyword";

              case "number":
                return "TSNumberKeyword";

              case "object":
                return "TSObjectKeyword";

              case "string":
                return "TSStringKeyword";

              case "symbol":
                return "TSSymbolKeyword";

              case "undefined":
                return "TSUndefinedKeyword";

              case "unknown":
                return "TSUnknownKeyword";

              default:
                return undefined;
            }
          }

          var typescript = superClass =>
            class extends superClass {
              tsIsIdentifier() {
                return this.match(types.name);
              }

              tsNextTokenCanFollowModifier() {
                this.next();
                return (
                  !this.hasPrecedingLineBreak() &&
                  !this.match(types.parenL) &&
                  !this.match(types.parenR) &&
                  !this.match(types.colon) &&
                  !this.match(types.eq) &&
                  !this.match(types.question)
                );
              }

              tsParseModifier(allowedModifiers) {
                if (!this.match(types.name)) {
                  return undefined;
                }

                const modifier = this.state.value;

                if (
                  allowedModifiers.indexOf(modifier) !== -1 &&
                  this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))
                ) {
                  return modifier;
                }

                return undefined;
              }

              tsIsListTerminator(kind) {
                switch (kind) {
                  case "EnumMembers":
                  case "TypeMembers":
                    return this.match(types.braceR);

                  case "HeritageClauseElement":
                    return this.match(types.braceL);

                  case "TupleElementTypes":
                    return this.match(types.bracketR);

                  case "TypeParametersOrArguments":
                    return this.isRelational(">");
                }

                throw new Error("Unreachable");
              }

              tsParseList(kind, parseElement) {
                const result = [];

                while (!this.tsIsListTerminator(kind)) {
                  result.push(parseElement());
                }

                return result;
              }

              tsParseDelimitedList(kind, parseElement) {
                return nonNull(
                  this.tsParseDelimitedListWorker(kind, parseElement, true)
                );
              }

              tsTryParseDelimitedList(kind, parseElement) {
                return this.tsParseDelimitedListWorker(
                  kind,
                  parseElement,
                  false
                );
              }

              tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {
                const result = [];

                while (true) {
                  if (this.tsIsListTerminator(kind)) {
                    break;
                  }

                  const element = parseElement();

                  if (element == null) {
                    return undefined;
                  }

                  result.push(element);

                  if (this.eat(types.comma)) {
                    continue;
                  }

                  if (this.tsIsListTerminator(kind)) {
                    break;
                  }

                  if (expectSuccess) {
                    this.expect(types.comma);
                  }

                  return undefined;
                }

                return result;
              }

              tsParseBracketedList(
                kind,
                parseElement,
                bracket,
                skipFirstToken
              ) {
                if (!skipFirstToken) {
                  if (bracket) {
                    this.expect(types.bracketL);
                  } else {
                    this.expectRelational("<");
                  }
                }

                const result = this.tsParseDelimitedList(kind, parseElement);

                if (bracket) {
                  this.expect(types.bracketR);
                } else {
                  this.expectRelational(">");
                }

                return result;
              }

              tsParseEntityName(allowReservedWords) {
                let entity = this.parseIdentifier();

                while (this.eat(types.dot)) {
                  const node = this.startNodeAtNode(entity);
                  node.left = entity;
                  node.right = this.parseIdentifier(allowReservedWords);
                  entity = this.finishNode(node, "TSQualifiedName");
                }

                return entity;
              }

              tsParseTypeReference() {
                const node = this.startNode();
                node.typeName = this.tsParseEntityName(false);

                if (!this.hasPrecedingLineBreak() && this.isRelational("<")) {
                  node.typeParameters = this.tsParseTypeArguments();
                }

                return this.finishNode(node, "TSTypeReference");
              }

              tsParseThisTypePredicate(lhs) {
                this.next();
                const node = this.startNode();
                node.parameterName = lhs;
                node.typeAnnotation = this.tsParseTypeAnnotation(false);
                return this.finishNode(node, "TSTypePredicate");
              }

              tsParseThisTypeNode() {
                const node = this.startNode();
                this.next();
                return this.finishNode(node, "TSThisType");
              }

              tsParseTypeQuery() {
                const node = this.startNode();
                this.expect(types._typeof);
                node.exprName = this.tsParseEntityName(true);
                return this.finishNode(node, "TSTypeQuery");
              }

              tsParseTypeParameter() {
                const node = this.startNode();
                node.name = this.parseIdentifierName(node.start);
                node.constraint = this.tsEatThenParseType(types._extends);
                node.default = this.tsEatThenParseType(types.eq);
                return this.finishNode(node, "TSTypeParameter");
              }

              tsTryParseTypeParameters() {
                if (this.isRelational("<")) {
                  return this.tsParseTypeParameters();
                }
              }

              tsParseTypeParameters() {
                const node = this.startNode();

                if (this.isRelational("<") || this.match(types.jsxTagStart)) {
                  this.next();
                } else {
                  this.unexpected();
                }

                node.params = this.tsParseBracketedList(
                  "TypeParametersOrArguments",
                  this.tsParseTypeParameter.bind(this),
                  false,
                  true
                );
                return this.finishNode(node, "TSTypeParameterDeclaration");
              }

              tsFillSignature(returnToken, signature) {
                const returnTokenRequired = returnToken === types.arrow;
                signature.typeParameters = this.tsTryParseTypeParameters();
                this.expect(types.parenL);
                signature.parameters = this.tsParseBindingListForSignature();

                if (returnTokenRequired) {
                  signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(
                    returnToken
                  );
                } else if (this.match(returnToken)) {
                  signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(
                    returnToken
                  );
                }
              }

              tsParseBindingListForSignature() {
                return this.parseBindingList(types.parenR).map(pattern => {
                  if (
                    pattern.type !== "Identifier" &&
                    pattern.type !== "RestElement" &&
                    pattern.type !== "ObjectPattern"
                  ) {
                    throw this.unexpected(
                      pattern.start,
                      `Name in a signature must be an Identifier or ObjectPattern, instead got ${
                        pattern.type
                      }`
                    );
                  }

                  return pattern;
                });
              }

              tsParseTypeMemberSemicolon() {
                if (!this.eat(types.comma)) {
                  this.semicolon();
                }
              }

              tsParseSignatureMember(kind) {
                const node = this.startNode();

                if (kind === "TSConstructSignatureDeclaration") {
                  this.expect(types._new);
                }

                this.tsFillSignature(types.colon, node);
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(node, kind);
              }

              tsIsUnambiguouslyIndexSignature() {
                this.next();
                return this.eat(types.name) && this.match(types.colon);
              }

              tsTryParseIndexSignature(node) {
                if (
                  !(
                    this.match(types.bracketL) &&
                    this.tsLookAhead(
                      this.tsIsUnambiguouslyIndexSignature.bind(this)
                    )
                  )
                ) {
                  return undefined;
                }

                this.expect(types.bracketL);
                const id = this.parseIdentifier();
                this.expect(types.colon);
                id.typeAnnotation = this.tsParseTypeAnnotation(false);
                this.expect(types.bracketR);
                node.parameters = [id];
                const type = this.tsTryParseTypeAnnotation();
                if (type) node.typeAnnotation = type;
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(node, "TSIndexSignature");
              }

              tsParsePropertyOrMethodSignature(node, readonly) {
                this.parsePropertyName(node);
                if (this.eat(types.question)) node.optional = true;
                const nodeAny = node;

                if (
                  !readonly &&
                  (this.match(types.parenL) || this.isRelational("<"))
                ) {
                  const method = nodeAny;
                  this.tsFillSignature(types.colon, method);
                  this.tsParseTypeMemberSemicolon();
                  return this.finishNode(method, "TSMethodSignature");
                } else {
                  const property = nodeAny;
                  if (readonly) property.readonly = true;
                  const type = this.tsTryParseTypeAnnotation();
                  if (type) property.typeAnnotation = type;
                  this.tsParseTypeMemberSemicolon();
                  return this.finishNode(property, "TSPropertySignature");
                }
              }

              tsParseTypeMember() {
                if (this.match(types.parenL) || this.isRelational("<")) {
                  return this.tsParseSignatureMember(
                    "TSCallSignatureDeclaration"
                  );
                }

                if (
                  this.match(types._new) &&
                  this.tsLookAhead(
                    this.tsIsStartOfConstructSignature.bind(this)
                  )
                ) {
                  return this.tsParseSignatureMember(
                    "TSConstructSignatureDeclaration"
                  );
                }

                const node = this.startNode();
                const readonly = !!this.tsParseModifier(["readonly"]);
                const idx = this.tsTryParseIndexSignature(node);

                if (idx) {
                  if (readonly) node.readonly = true;
                  return idx;
                }

                return this.tsParsePropertyOrMethodSignature(node, readonly);
              }

              tsIsStartOfConstructSignature() {
                this.next();
                return this.match(types.parenL) || this.isRelational("<");
              }

              tsParseTypeLiteral() {
                const node = this.startNode();
                node.members = this.tsParseObjectTypeMembers();
                return this.finishNode(node, "TSTypeLiteral");
              }

              tsParseObjectTypeMembers() {
                this.expect(types.braceL);
                const members = this.tsParseList(
                  "TypeMembers",
                  this.tsParseTypeMember.bind(this)
                );
                this.expect(types.braceR);
                return members;
              }

              tsIsStartOfMappedType() {
                this.next();

                if (this.eat(types.plusMin)) {
                  return this.isContextual("readonly");
                }

                if (this.isContextual("readonly")) {
                  this.next();
                }

                if (!this.match(types.bracketL)) {
                  return false;
                }

                this.next();

                if (!this.tsIsIdentifier()) {
                  return false;
                }

                this.next();
                return this.match(types._in);
              }

              tsParseMappedTypeParameter() {
                const node = this.startNode();
                node.name = this.parseIdentifierName(node.start);
                node.constraint = this.tsExpectThenParseType(types._in);
                return this.finishNode(node, "TSTypeParameter");
              }

              tsParseMappedType() {
                const node = this.startNode();
                this.expect(types.braceL);

                if (this.match(types.plusMin)) {
                  node.readonly = this.state.value;
                  this.next();
                  this.expectContextual("readonly");
                } else if (this.eatContextual("readonly")) {
                  node.readonly = true;
                }

                this.expect(types.bracketL);
                node.typeParameter = this.tsParseMappedTypeParameter();
                this.expect(types.bracketR);

                if (this.match(types.plusMin)) {
                  node.optional = this.state.value;
                  this.next();
                  this.expect(types.question);
                } else if (this.eat(types.question)) {
                  node.optional = true;
                }

                node.typeAnnotation = this.tsTryParseType();
                this.semicolon();
                this.expect(types.braceR);
                return this.finishNode(node, "TSMappedType");
              }

              tsParseTupleType() {
                const node = this.startNode();
                node.elementTypes = this.tsParseBracketedList(
                  "TupleElementTypes",
                  this.tsParseTupleElementType.bind(this),
                  true,
                  false
                );
                let seenOptionalElement = false;
                node.elementTypes.forEach((elementNode, i) => {
                  if (elementNode.type === "TSRestType") {
                    if (i !== node.elementTypes.length - 1) {
                      this.raise(
                        elementNode.start,
                        "A rest element must be last in a tuple type."
                      );
                    }
                  } else if (elementNode.type === "TSOptionalType") {
                    seenOptionalElement = true;
                  } else if (seenOptionalElement) {
                    this.raise(
                      elementNode.start,
                      "A required element cannot follow an optional element."
                    );
                  }
                });
                return this.finishNode(node, "TSTupleType");
              }

              tsParseTupleElementType() {
                if (this.match(types.ellipsis)) {
                  const restNode = this.startNode();
                  this.next();
                  restNode.typeAnnotation = this.tsParseType();
                  return this.finishNode(restNode, "TSRestType");
                }

                const type = this.tsParseType();

                if (this.eat(types.question)) {
                  const optionalTypeNode = this.startNodeAtNode(type);
                  optionalTypeNode.typeAnnotation = type;
                  return this.finishNode(optionalTypeNode, "TSOptionalType");
                }

                return type;
              }

              tsParseParenthesizedType() {
                const node = this.startNode();
                this.expect(types.parenL);
                node.typeAnnotation = this.tsParseType();
                this.expect(types.parenR);
                return this.finishNode(node, "TSParenthesizedType");
              }

              tsParseFunctionOrConstructorType(type) {
                const node = this.startNode();

                if (type === "TSConstructorType") {
                  this.expect(types._new);
                }

                this.tsFillSignature(types.arrow, node);
                return this.finishNode(node, type);
              }

              tsParseLiteralTypeNode() {
                const node = this.startNode();

                node.literal = (() => {
                  switch (this.state.type) {
                    case types.num:
                      return this.parseLiteral(
                        this.state.value,
                        "NumericLiteral"
                      );

                    case types.string:
                      return this.parseLiteral(
                        this.state.value,
                        "StringLiteral"
                      );

                    case types._true:
                    case types._false:
                      return this.parseBooleanLiteral();

                    default:
                      throw this.unexpected();
                  }
                })();

                return this.finishNode(node, "TSLiteralType");
              }

              tsParseNonArrayType() {
                switch (this.state.type) {
                  case types.name:
                  case types._void:
                  case types._null: {
                    const type = this.match(types._void)
                      ? "TSVoidKeyword"
                      : this.match(types._null)
                      ? "TSNullKeyword"
                      : keywordTypeFromName(this.state.value);

                    if (
                      type !== undefined &&
                      this.lookahead().type !== types.dot
                    ) {
                      const node = this.startNode();
                      this.next();
                      return this.finishNode(node, type);
                    }

                    return this.tsParseTypeReference();
                  }

                  case types.string:
                  case types.num:
                  case types._true:
                  case types._false:
                    return this.tsParseLiteralTypeNode();

                  case types.plusMin:
                    if (this.state.value === "-") {
                      const node = this.startNode();
                      this.next();

                      if (!this.match(types.num)) {
                        throw this.unexpected();
                      }

                      node.literal = this.parseLiteral(
                        -this.state.value,
                        "NumericLiteral",
                        node.start,
                        node.loc.start
                      );
                      return this.finishNode(node, "TSLiteralType");
                    }

                    break;

                  case types._this: {
                    const thisKeyword = this.tsParseThisTypeNode();

                    if (
                      this.isContextual("is") &&
                      !this.hasPrecedingLineBreak()
                    ) {
                      return this.tsParseThisTypePredicate(thisKeyword);
                    } else {
                      return thisKeyword;
                    }
                  }

                  case types._typeof:
                    return this.tsParseTypeQuery();

                  case types.braceL:
                    return this.tsLookAhead(
                      this.tsIsStartOfMappedType.bind(this)
                    )
                      ? this.tsParseMappedType()
                      : this.tsParseTypeLiteral();

                  case types.bracketL:
                    return this.tsParseTupleType();

                  case types.parenL:
                    return this.tsParseParenthesizedType();
                }

                throw this.unexpected();
              }

              tsParseArrayTypeOrHigher() {
                let type = this.tsParseNonArrayType();

                while (
                  !this.hasPrecedingLineBreak() &&
                  this.eat(types.bracketL)
                ) {
                  if (this.match(types.bracketR)) {
                    const node = this.startNodeAtNode(type);
                    node.elementType = type;
                    this.expect(types.bracketR);
                    type = this.finishNode(node, "TSArrayType");
                  } else {
                    const node = this.startNodeAtNode(type);
                    node.objectType = type;
                    node.indexType = this.tsParseType();
                    this.expect(types.bracketR);
                    type = this.finishNode(node, "TSIndexedAccessType");
                  }
                }

                return type;
              }

              tsParseTypeOperator(operator) {
                const node = this.startNode();
                this.expectContextual(operator);
                node.operator = operator;
                node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
                return this.finishNode(node, "TSTypeOperator");
              }

              tsParseInferType() {
                const node = this.startNode();
                this.expectContextual("infer");
                const typeParameter = this.startNode();
                typeParameter.name = this.parseIdentifierName(
                  typeParameter.start
                );
                node.typeParameter = this.finishNode(
                  typeParameter,
                  "TSTypeParameter"
                );
                return this.finishNode(node, "TSInferType");
              }

              tsParseTypeOperatorOrHigher() {
                const operator = ["keyof", "unique"].find(kw =>
                  this.isContextual(kw)
                );
                return operator
                  ? this.tsParseTypeOperator(operator)
                  : this.isContextual("infer")
                  ? this.tsParseInferType()
                  : this.tsParseArrayTypeOrHigher();
              }

              tsParseUnionOrIntersectionType(
                kind,
                parseConstituentType,
                operator
              ) {
                this.eat(operator);
                let type = parseConstituentType();

                if (this.match(operator)) {
                  const types$$1 = [type];

                  while (this.eat(operator)) {
                    types$$1.push(parseConstituentType());
                  }

                  const node = this.startNodeAtNode(type);
                  node.types = types$$1;
                  type = this.finishNode(node, kind);
                }

                return type;
              }

              tsParseIntersectionTypeOrHigher() {
                return this.tsParseUnionOrIntersectionType(
                  "TSIntersectionType",
                  this.tsParseTypeOperatorOrHigher.bind(this),
                  types.bitwiseAND
                );
              }

              tsParseUnionTypeOrHigher() {
                return this.tsParseUnionOrIntersectionType(
                  "TSUnionType",
                  this.tsParseIntersectionTypeOrHigher.bind(this),
                  types.bitwiseOR
                );
              }

              tsIsStartOfFunctionType() {
                if (this.isRelational("<")) {
                  return true;
                }

                return (
                  this.match(types.parenL) &&
                  this.tsLookAhead(
                    this.tsIsUnambiguouslyStartOfFunctionType.bind(this)
                  )
                );
              }

              tsSkipParameterStart() {
                if (this.match(types.name) || this.match(types._this)) {
                  this.next();
                  return true;
                }

                if (this.match(types.braceL)) {
                  let braceStackCounter = 1;
                  this.next();

                  while (braceStackCounter > 0) {
                    if (this.match(types.braceL)) {
                      ++braceStackCounter;
                    } else if (this.match(types.braceR)) {
                      --braceStackCounter;
                    }

                    this.next();
                  }

                  return true;
                }

                return false;
              }

              tsIsUnambiguouslyStartOfFunctionType() {
                this.next();

                if (this.match(types.parenR) || this.match(types.ellipsis)) {
                  return true;
                }

                if (this.tsSkipParameterStart()) {
                  if (
                    this.match(types.colon) ||
                    this.match(types.comma) ||
                    this.match(types.question) ||
                    this.match(types.eq)
                  ) {
                    return true;
                  }

                  if (this.match(types.parenR)) {
                    this.next();

                    if (this.match(types.arrow)) {
                      return true;
                    }
                  }
                }

                return false;
              }

              tsParseTypeOrTypePredicateAnnotation(returnToken) {
                return this.tsInType(() => {
                  const t = this.startNode();
                  this.expect(returnToken);
                  const typePredicateVariable =
                    this.tsIsIdentifier() &&
                    this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

                  if (!typePredicateVariable) {
                    return this.tsParseTypeAnnotation(false, t);
                  }

                  const type = this.tsParseTypeAnnotation(false);
                  const node = this.startNodeAtNode(typePredicateVariable);
                  node.parameterName = typePredicateVariable;
                  node.typeAnnotation = type;
                  t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                  return this.finishNode(t, "TSTypeAnnotation");
                });
              }

              tsTryParseTypeOrTypePredicateAnnotation() {
                return this.match(types.colon)
                  ? this.tsParseTypeOrTypePredicateAnnotation(types.colon)
                  : undefined;
              }

              tsTryParseTypeAnnotation() {
                return this.match(types.colon)
                  ? this.tsParseTypeAnnotation()
                  : undefined;
              }

              tsTryParseType() {
                return this.tsEatThenParseType(types.colon);
              }

              tsParseTypePredicatePrefix() {
                const id = this.parseIdentifier();

                if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
                  this.next();
                  return id;
                }
              }

              tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
                this.tsInType(() => {
                  if (eatColon) this.expect(types.colon);
                  t.typeAnnotation = this.tsParseType();
                });
                return this.finishNode(t, "TSTypeAnnotation");
              }

              tsParseType() {
                assert(this.state.inType);
                const type = this.tsParseNonConditionalType();

                if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {
                  return type;
                }

                const node = this.startNodeAtNode(type);
                node.checkType = type;
                node.extendsType = this.tsParseNonConditionalType();
                this.expect(types.question);
                node.trueType = this.tsParseType();
                this.expect(types.colon);
                node.falseType = this.tsParseType();
                return this.finishNode(node, "TSConditionalType");
              }

              tsParseNonConditionalType() {
                if (this.tsIsStartOfFunctionType()) {
                  return this.tsParseFunctionOrConstructorType(
                    "TSFunctionType"
                  );
                }

                if (this.match(types._new)) {
                  return this.tsParseFunctionOrConstructorType(
                    "TSConstructorType"
                  );
                }

                return this.tsParseUnionTypeOrHigher();
              }

              tsParseTypeAssertion() {
                const node = this.startNode();
                node.typeAnnotation = this.tsInType(() => this.tsParseType());
                this.expectRelational(">");
                node.expression = this.parseMaybeUnary();
                return this.finishNode(node, "TSTypeAssertion");
              }

              tsParseHeritageClause() {
                return this.tsParseDelimitedList(
                  "HeritageClauseElement",
                  this.tsParseExpressionWithTypeArguments.bind(this)
                );
              }

              tsParseExpressionWithTypeArguments() {
                const node = this.startNode();
                node.expression = this.tsParseEntityName(false);

                if (this.isRelational("<")) {
                  node.typeParameters = this.tsParseTypeArguments();
                }

                return this.finishNode(node, "TSExpressionWithTypeArguments");
              }

              tsParseInterfaceDeclaration(node) {
                node.id = this.parseIdentifier();
                node.typeParameters = this.tsTryParseTypeParameters();

                if (this.eat(types._extends)) {
                  node.extends = this.tsParseHeritageClause();
                }

                const body = this.startNode();
                body.body = this.tsInType(
                  this.tsParseObjectTypeMembers.bind(this)
                );
                node.body = this.finishNode(body, "TSInterfaceBody");
                return this.finishNode(node, "TSInterfaceDeclaration");
              }

              tsParseTypeAliasDeclaration(node) {
                node.id = this.parseIdentifier();
                node.typeParameters = this.tsTryParseTypeParameters();
                node.typeAnnotation = this.tsExpectThenParseType(types.eq);
                this.semicolon();
                return this.finishNode(node, "TSTypeAliasDeclaration");
              }

              tsInNoContext(cb) {
                const oldContext = this.state.context;
                this.state.context = [oldContext[0]];

                try {
                  return cb();
                } finally {
                  this.state.context = oldContext;
                }
              }

              tsInType(cb) {
                const oldInType = this.state.inType;
                this.state.inType = true;

                try {
                  return cb();
                } finally {
                  this.state.inType = oldInType;
                }
              }

              tsEatThenParseType(token) {
                return !this.match(token)
                  ? undefined
                  : this.tsNextThenParseType();
              }

              tsExpectThenParseType(token) {
                return this.tsDoThenParseType(() => this.expect(token));
              }

              tsNextThenParseType() {
                return this.tsDoThenParseType(() => this.next());
              }

              tsDoThenParseType(cb) {
                return this.tsInType(() => {
                  cb();
                  return this.tsParseType();
                });
              }

              tsParseEnumMember() {
                const node = this.startNode();
                node.id = this.match(types.string)
                  ? this.parseLiteral(this.state.value, "StringLiteral")
                  : this.parseIdentifier(true);

                if (this.eat(types.eq)) {
                  node.initializer = this.parseMaybeAssign();
                }

                return this.finishNode(node, "TSEnumMember");
              }

              tsParseEnumDeclaration(node, isConst) {
                if (isConst) node.const = true;
                node.id = this.parseIdentifier();
                this.expect(types.braceL);
                node.members = this.tsParseDelimitedList(
                  "EnumMembers",
                  this.tsParseEnumMember.bind(this)
                );
                this.expect(types.braceR);
                return this.finishNode(node, "TSEnumDeclaration");
              }

              tsParseModuleBlock() {
                const node = this.startNode();
                this.expect(types.braceL);
                this.parseBlockOrModuleBlockBody(
                  (node.body = []),
                  undefined,
                  true,
                  types.braceR
                );
                return this.finishNode(node, "TSModuleBlock");
              }

              tsParseModuleOrNamespaceDeclaration(node) {
                node.id = this.parseIdentifier();

                if (this.eat(types.dot)) {
                  const inner = this.startNode();
                  this.tsParseModuleOrNamespaceDeclaration(inner);
                  node.body = inner;
                } else {
                  node.body = this.tsParseModuleBlock();
                }

                return this.finishNode(node, "TSModuleDeclaration");
              }

              tsParseAmbientExternalModuleDeclaration(node) {
                if (this.isContextual("global")) {
                  node.global = true;
                  node.id = this.parseIdentifier();
                } else if (this.match(types.string)) {
                  node.id = this.parseExprAtom();
                } else {
                  this.unexpected();
                }

                if (this.match(types.braceL)) {
                  node.body = this.tsParseModuleBlock();
                } else {
                  this.semicolon();
                }

                return this.finishNode(node, "TSModuleDeclaration");
              }

              tsParseImportEqualsDeclaration(node, isExport) {
                node.isExport = isExport || false;
                node.id = this.parseIdentifier();
                this.expect(types.eq);
                node.moduleReference = this.tsParseModuleReference();
                this.semicolon();
                return this.finishNode(node, "TSImportEqualsDeclaration");
              }

              tsIsExternalModuleReference() {
                return (
                  this.isContextual("require") &&
                  this.lookahead().type === types.parenL
                );
              }

              tsParseModuleReference() {
                return this.tsIsExternalModuleReference()
                  ? this.tsParseExternalModuleReference()
                  : this.tsParseEntityName(false);
              }

              tsParseExternalModuleReference() {
                const node = this.startNode();
                this.expectContextual("require");
                this.expect(types.parenL);

                if (!this.match(types.string)) {
                  throw this.unexpected();
                }

                node.expression = this.parseLiteral(
                  this.state.value,
                  "StringLiteral"
                );
                this.expect(types.parenR);
                return this.finishNode(node, "TSExternalModuleReference");
              }

              tsLookAhead(f) {
                const state = this.state.clone();
                const res = f();
                this.state = state;
                return res;
              }

              tsTryParseAndCatch(f) {
                const state = this.state.clone();

                try {
                  return f();
                } catch (e) {
                  if (e instanceof SyntaxError) {
                    this.state = state;
                    return undefined;
                  }

                  throw e;
                }
              }

              tsTryParse(f) {
                const state = this.state.clone();
                const result = f();

                if (result !== undefined && result !== false) {
                  return result;
                } else {
                  this.state = state;
                  return undefined;
                }
              }

              nodeWithSamePosition(original, type) {
                const node = this.startNodeAtNode(original);
                node.type = type;
                node.end = original.end;
                node.loc.end = original.loc.end;

                if (original.leadingComments) {
                  node.leadingComments = original.leadingComments;
                }

                if (original.trailingComments) {
                  node.trailingComments = original.trailingComments;
                }

                if (original.innerComments)
                  node.innerComments = original.innerComments;
                return node;
              }

              tsTryParseDeclare(nany) {
                switch (this.state.type) {
                  case types._function:
                    this.next();
                    return this.parseFunction(nany, true);

                  case types._class:
                    return this.parseClass(nany, true, false);

                  case types._const:
                    if (
                      this.match(types._const) &&
                      this.isLookaheadContextual("enum")
                    ) {
                      this.expect(types._const);
                      this.expectContextual("enum");
                      return this.tsParseEnumDeclaration(nany, true);
                    }

                  case types._var:
                  case types._let:
                    return this.parseVarStatement(nany, this.state.type);

                  case types.name: {
                    const value = this.state.value;

                    if (value === "global") {
                      return this.tsParseAmbientExternalModuleDeclaration(nany);
                    } else {
                      return this.tsParseDeclaration(nany, value, true);
                    }
                  }
                }
              }

              tsTryParseExportDeclaration() {
                return this.tsParseDeclaration(
                  this.startNode(),
                  this.state.value,
                  true
                );
              }

              tsParseExpressionStatement(node, expr) {
                switch (expr.name) {
                  case "declare": {
                    const declaration = this.tsTryParseDeclare(node);

                    if (declaration) {
                      declaration.declare = true;
                      return declaration;
                    }

                    break;
                  }

                  case "global":
                    if (this.match(types.braceL)) {
                      const mod = node;
                      mod.global = true;
                      mod.id = expr;
                      mod.body = this.tsParseModuleBlock();
                      return this.finishNode(mod, "TSModuleDeclaration");
                    }

                    break;

                  default:
                    return this.tsParseDeclaration(node, expr.name, false);
                }
              }

              tsParseDeclaration(node, value, next) {
                switch (value) {
                  case "abstract":
                    if (next || this.match(types._class)) {
                      const cls = node;
                      cls.abstract = true;
                      if (next) this.next();
                      return this.parseClass(cls, true, false);
                    }

                    break;

                  case "enum":
                    if (next || this.match(types.name)) {
                      if (next) this.next();
                      return this.tsParseEnumDeclaration(node, false);
                    }

                    break;

                  case "interface":
                    if (next || this.match(types.name)) {
                      if (next) this.next();
                      return this.tsParseInterfaceDeclaration(node);
                    }

                    break;

                  case "module":
                    if (next) this.next();

                    if (this.match(types.string)) {
                      return this.tsParseAmbientExternalModuleDeclaration(node);
                    } else if (next || this.match(types.name)) {
                      return this.tsParseModuleOrNamespaceDeclaration(node);
                    }

                    break;

                  case "namespace":
                    if (next || this.match(types.name)) {
                      if (next) this.next();
                      return this.tsParseModuleOrNamespaceDeclaration(node);
                    }

                    break;

                  case "type":
                    if (next || this.match(types.name)) {
                      if (next) this.next();
                      return this.tsParseTypeAliasDeclaration(node);
                    }

                    break;
                }
              }

              tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
                const res = this.tsTryParseAndCatch(() => {
                  const node = this.startNodeAt(startPos, startLoc);
                  node.typeParameters = this.tsParseTypeParameters();
                  super.parseFunctionParams(node);
                  node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
                  this.expect(types.arrow);
                  return node;
                });

                if (!res) {
                  return undefined;
                }

                const oldInAsync = this.state.inAsync;
                const oldInGenerator = this.state.inGenerator;
                this.state.inAsync = true;
                this.state.inGenerator = false;
                res.id = null;
                res.generator = false;
                res.expression = true;
                res.async = true;
                this.parseFunctionBody(res, true);
                this.state.inAsync = oldInAsync;
                this.state.inGenerator = oldInGenerator;
                return this.finishNode(res, "ArrowFunctionExpression");
              }

              tsParseTypeArguments() {
                const node = this.startNode();
                node.params = this.tsInType(() =>
                  this.tsInNoContext(() => {
                    this.expectRelational("<");
                    return this.tsParseDelimitedList(
                      "TypeParametersOrArguments",
                      this.tsParseType.bind(this)
                    );
                  })
                );
                this.state.exprAllowed = false;
                this.expectRelational(">");
                return this.finishNode(node, "TSTypeParameterInstantiation");
              }

              tsIsDeclarationStart() {
                if (this.match(types.name)) {
                  switch (this.state.value) {
                    case "abstract":
                    case "declare":
                    case "enum":
                    case "interface":
                    case "module":
                    case "namespace":
                    case "type":
                      return true;
                  }
                }

                return false;
              }

              isExportDefaultSpecifier() {
                if (this.tsIsDeclarationStart()) return false;
                return super.isExportDefaultSpecifier();
              }

              parseAssignableListItem(allowModifiers, decorators) {
                let accessibility;
                let readonly = false;

                if (allowModifiers) {
                  accessibility = this.parseAccessModifier();
                  readonly = !!this.tsParseModifier(["readonly"]);
                }

                const left = this.parseMaybeDefault();
                this.parseAssignableListItemTypes(left);
                const elt = this.parseMaybeDefault(
                  left.start,
                  left.loc.start,
                  left
                );

                if (accessibility || readonly) {
                  const pp = this.startNodeAtNode(elt);

                  if (decorators.length) {
                    pp.decorators = decorators;
                  }

                  if (accessibility) pp.accessibility = accessibility;
                  if (readonly) pp.readonly = readonly;

                  if (
                    elt.type !== "Identifier" &&
                    elt.type !== "AssignmentPattern"
                  ) {
                    throw this.raise(
                      pp.start,
                      "A parameter property may not be declared using a binding pattern."
                    );
                  }

                  pp.parameter = elt;
                  return this.finishNode(pp, "TSParameterProperty");
                } else {
                  if (decorators.length) {
                    left.decorators = decorators;
                  }

                  return elt;
                }
              }

              parseFunctionBodyAndFinish(node, type, allowExpressionBody) {
                if (!allowExpressionBody && this.match(types.colon)) {
                  node.returnType = this.tsParseTypeOrTypePredicateAnnotation(
                    types.colon
                  );
                }

                const bodilessType =
                  type === "FunctionDeclaration"
                    ? "TSDeclareFunction"
                    : type === "ClassMethod"
                    ? "TSDeclareMethod"
                    : undefined;

                if (
                  bodilessType &&
                  !this.match(types.braceL) &&
                  this.isLineTerminator()
                ) {
                  this.finishNode(node, bodilessType);
                  return;
                }

                super.parseFunctionBodyAndFinish(
                  node,
                  type,
                  allowExpressionBody
                );
              }

              parseSubscript(base, startPos, startLoc, noCalls, state) {
                if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {
                  this.state.exprAllowed = false;
                  this.next();
                  const nonNullExpression = this.startNodeAt(
                    startPos,
                    startLoc
                  );
                  nonNullExpression.expression = base;
                  return this.finishNode(
                    nonNullExpression,
                    "TSNonNullExpression"
                  );
                }

                if (this.isRelational("<")) {
                  const result = this.tsTryParseAndCatch(() => {
                    if (!noCalls && this.atPossibleAsync(base)) {
                      const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(
                        startPos,
                        startLoc
                      );

                      if (asyncArrowFn) {
                        return asyncArrowFn;
                      }
                    }

                    const node = this.startNodeAt(startPos, startLoc);
                    node.callee = base;
                    const typeArguments = this.tsParseTypeArguments();

                    if (typeArguments) {
                      if (!noCalls && this.eat(types.parenL)) {
                        node.arguments = this.parseCallExpressionArguments(
                          types.parenR,
                          false
                        );
                        node.typeParameters = typeArguments;
                        return this.finishCallExpression(node);
                      } else if (this.match(types.backQuote)) {
                        return this.parseTaggedTemplateExpression(
                          startPos,
                          startLoc,
                          base,
                          state,
                          typeArguments
                        );
                      }
                    }

                    this.unexpected();
                  });
                  if (result) return result;
                }

                return super.parseSubscript(
                  base,
                  startPos,
                  startLoc,
                  noCalls,
                  state
                );
              }

              parseNewArguments(node) {
                if (this.isRelational("<")) {
                  const typeParameters = this.tsTryParseAndCatch(() => {
                    const args = this.tsParseTypeArguments();
                    if (!this.match(types.parenL)) this.unexpected();
                    return args;
                  });

                  if (typeParameters) {
                    node.typeParameters = typeParameters;
                  }
                }

                super.parseNewArguments(node);
              }

              parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {
                if (
                  nonNull(types._in.binop) > minPrec &&
                  !this.hasPrecedingLineBreak() &&
                  this.isContextual("as")
                ) {
                  const node = this.startNodeAt(leftStartPos, leftStartLoc);
                  node.expression = left;
                  node.typeAnnotation = this.tsNextThenParseType();
                  this.finishNode(node, "TSAsExpression");
                  return this.parseExprOp(
                    node,
                    leftStartPos,
                    leftStartLoc,
                    minPrec,
                    noIn
                  );
                }

                return super.parseExprOp(
                  left,
                  leftStartPos,
                  leftStartLoc,
                  minPrec,
                  noIn
                );
              }

              checkReservedWord(word, startLoc, checkKeywords, isBinding) {}

              checkDuplicateExports() {}

              parseImport(node) {
                if (
                  this.match(types.name) &&
                  this.lookahead().type === types.eq
                ) {
                  return this.tsParseImportEqualsDeclaration(node);
                }

                return super.parseImport(node);
              }

              parseExport(node) {
                if (this.match(types._import)) {
                  this.expect(types._import);
                  return this.tsParseImportEqualsDeclaration(node, true);
                } else if (this.eat(types.eq)) {
                  const assign = node;
                  assign.expression = this.parseExpression();
                  this.semicolon();
                  return this.finishNode(assign, "TSExportAssignment");
                } else if (this.eatContextual("as")) {
                  const decl = node;
                  this.expectContextual("namespace");
                  decl.id = this.parseIdentifier();
                  this.semicolon();
                  return this.finishNode(decl, "TSNamespaceExportDeclaration");
                } else {
                  return super.parseExport(node);
                }
              }

              isAbstractClass() {
                return (
                  this.isContextual("abstract") &&
                  this.lookahead().type === types._class
                );
              }

              parseExportDefaultExpression() {
                if (this.isAbstractClass()) {
                  const cls = this.startNode();
                  this.next();
                  this.parseClass(cls, true, true);
                  cls.abstract = true;
                  return cls;
                }

                if (this.state.value === "interface") {
                  const result = this.tsParseDeclaration(
                    this.startNode(),
                    this.state.value,
                    true
                  );
                  if (result) return result;
                }

                return super.parseExportDefaultExpression();
              }

              parseStatementContent(declaration, topLevel) {
                if (this.state.type === types._const) {
                  const ahead = this.lookahead();

                  if (ahead.type === types.name && ahead.value === "enum") {
                    const node = this.startNode();
                    this.expect(types._const);
                    this.expectContextual("enum");
                    return this.tsParseEnumDeclaration(node, true);
                  }
                }

                return super.parseStatementContent(declaration, topLevel);
              }

              parseAccessModifier() {
                return this.tsParseModifier(["public", "protected", "private"]);
              }

              parseClassMember(classBody, member, state) {
                const accessibility = this.parseAccessModifier();
                if (accessibility) member.accessibility = accessibility;
                super.parseClassMember(classBody, member, state);
              }

              parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
                const methodOrProp = member;
                const prop = member;
                const propOrIdx = member;
                let abstract = false,
                  readonly = false;
                const mod = this.tsParseModifier(["abstract", "readonly"]);

                switch (mod) {
                  case "readonly":
                    readonly = true;
                    abstract = !!this.tsParseModifier(["abstract"]);
                    break;

                  case "abstract":
                    abstract = true;
                    readonly = !!this.tsParseModifier(["readonly"]);
                    break;
                }

                if (abstract) methodOrProp.abstract = true;
                if (readonly) propOrIdx.readonly = true;

                if (!abstract && !isStatic && !methodOrProp.accessibility) {
                  const idx = this.tsTryParseIndexSignature(member);

                  if (idx) {
                    classBody.body.push(idx);
                    return;
                  }
                }

                if (readonly) {
                  methodOrProp.static = isStatic;
                  this.parseClassPropertyName(prop);
                  this.parsePostMemberNameModifiers(methodOrProp);
                  this.pushClassProperty(classBody, prop);
                  return;
                }

                super.parseClassMemberWithIsStatic(
                  classBody,
                  member,
                  state,
                  isStatic
                );
              }

              parsePostMemberNameModifiers(methodOrProp) {
                const optional = this.eat(types.question);
                if (optional) methodOrProp.optional = true;
              }

              parseExpressionStatement(node, expr) {
                const decl =
                  expr.type === "Identifier"
                    ? this.tsParseExpressionStatement(node, expr)
                    : undefined;
                return decl || super.parseExpressionStatement(node, expr);
              }

              shouldParseExportDeclaration() {
                if (this.tsIsDeclarationStart()) return true;
                return super.shouldParseExportDeclaration();
              }

              parseConditional(
                expr,
                noIn,
                startPos,
                startLoc,
                refNeedsArrowPos
              ) {
                if (!refNeedsArrowPos || !this.match(types.question)) {
                  return super.parseConditional(
                    expr,
                    noIn,
                    startPos,
                    startLoc,
                    refNeedsArrowPos
                  );
                }

                const state = this.state.clone();

                try {
                  return super.parseConditional(expr, noIn, startPos, startLoc);
                } catch (err) {
                  if (!(err instanceof SyntaxError)) {
                    throw err;
                  }

                  this.state = state;
                  refNeedsArrowPos.start = err.pos || this.state.start;
                  return expr;
                }
              }

              parseParenItem(node, startPos, startLoc) {
                node = super.parseParenItem(node, startPos, startLoc);

                if (this.eat(types.question)) {
                  node.optional = true;
                }

                if (this.match(types.colon)) {
                  const typeCastNode = this.startNodeAt(startPos, startLoc);
                  typeCastNode.expression = node;
                  typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
                  return this.finishNode(typeCastNode, "TSTypeCastExpression");
                }

                return node;
              }

              parseExportDeclaration(node) {
                const isDeclare = this.eatContextual("declare");
                let declaration;

                if (this.match(types.name)) {
                  declaration = this.tsTryParseExportDeclaration();
                }

                if (!declaration) {
                  declaration = super.parseExportDeclaration(node);
                }

                if (declaration && isDeclare) {
                  declaration.declare = true;
                }

                return declaration;
              }

              parseClassId(node, isStatement, optionalId) {
                if (
                  (!isStatement || optionalId) &&
                  this.isContextual("implements")
                ) {
                  return;
                }

                super.parseClassId(...arguments);
                const typeParameters = this.tsTryParseTypeParameters();
                if (typeParameters) node.typeParameters = typeParameters;
              }

              parseClassProperty(node) {
                if (!node.optional && this.eat(types.bang)) {
                  node.definite = true;
                }

                const type = this.tsTryParseTypeAnnotation();
                if (type) node.typeAnnotation = type;
                return super.parseClassProperty(node);
              }

              pushClassMethod(
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor
              ) {
                const typeParameters = this.tsTryParseTypeParameters();
                if (typeParameters) method.typeParameters = typeParameters;
                super.pushClassMethod(
                  classBody,
                  method,
                  isGenerator,
                  isAsync,
                  isConstructor
                );
              }

              pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
                const typeParameters = this.tsTryParseTypeParameters();
                if (typeParameters) method.typeParameters = typeParameters;
                super.pushClassPrivateMethod(
                  classBody,
                  method,
                  isGenerator,
                  isAsync
                );
              }

              parseClassSuper(node) {
                super.parseClassSuper(node);

                if (node.superClass && this.isRelational("<")) {
                  node.superTypeParameters = this.tsParseTypeArguments();
                }

                if (this.eatContextual("implements")) {
                  node.implements = this.tsParseHeritageClause();
                }
              }

              parseObjPropValue(prop, ...args) {
                const typeParameters = this.tsTryParseTypeParameters();
                if (typeParameters) prop.typeParameters = typeParameters;
                super.parseObjPropValue(prop, ...args);
              }

              parseFunctionParams(node, allowModifiers) {
                const typeParameters = this.tsTryParseTypeParameters();
                if (typeParameters) node.typeParameters = typeParameters;
                super.parseFunctionParams(node, allowModifiers);
              }

              parseVarHead(decl) {
                super.parseVarHead(decl);

                if (decl.id.type === "Identifier" && this.eat(types.bang)) {
                  decl.definite = true;
                }

                const type = this.tsTryParseTypeAnnotation();

                if (type) {
                  decl.id.typeAnnotation = type;
                  this.finishNode(decl.id, decl.id.type);
                }
              }

              parseAsyncArrowFromCallExpression(node, call) {
                if (this.match(types.colon)) {
                  node.returnType = this.tsParseTypeAnnotation();
                }

                return super.parseAsyncArrowFromCallExpression(node, call);
              }

              parseMaybeAssign(...args) {
                let jsxError;

                if (this.match(types.jsxTagStart)) {
                  const context = this.curContext();
                  assert(context === types$1.j_oTag);
                  assert(
                    this.state.context[this.state.context.length - 2] ===
                      types$1.j_expr
                  );
                  const state = this.state.clone();

                  try {
                    return super.parseMaybeAssign(...args);
                  } catch (err) {
                    if (!(err instanceof SyntaxError)) {
                      throw err;
                    }

                    this.state = state;
                    assert(this.curContext() === types$1.j_oTag);
                    this.state.context.pop();
                    assert(this.curContext() === types$1.j_expr);
                    this.state.context.pop();
                    jsxError = err;
                  }
                }

                if (jsxError === undefined && !this.isRelational("<")) {
                  return super.parseMaybeAssign(...args);
                }

                let arrowExpression;
                let typeParameters;
                const state = this.state.clone();

                try {
                  typeParameters = this.tsParseTypeParameters();
                  arrowExpression = super.parseMaybeAssign(...args);

                  if (arrowExpression.type !== "ArrowFunctionExpression") {
                    this.unexpected();
                  }
                } catch (err) {
                  if (!(err instanceof SyntaxError)) {
                    throw err;
                  }

                  if (jsxError) {
                    throw jsxError;
                  }

                  assert(!this.hasPlugin("jsx"));
                  this.state = state;
                  return super.parseMaybeAssign(...args);
                }

                if (typeParameters && typeParameters.params.length !== 0) {
                  this.resetStartLocationFromNode(
                    arrowExpression,
                    typeParameters.params[0]
                  );
                }

                arrowExpression.typeParameters = typeParameters;
                return arrowExpression;
              }

              parseMaybeUnary(refShorthandDefaultPos) {
                if (!this.hasPlugin("jsx") && this.eatRelational("<")) {
                  return this.tsParseTypeAssertion();
                } else {
                  return super.parseMaybeUnary(refShorthandDefaultPos);
                }
              }

              parseArrow(node) {
                if (this.match(types.colon)) {
                  const state = this.state.clone();

                  try {
                    const returnType = this.tsParseTypeOrTypePredicateAnnotation(
                      types.colon
                    );
                    if (this.canInsertSemicolon()) this.unexpected();
                    if (!this.match(types.arrow)) this.unexpected();
                    node.returnType = returnType;
                  } catch (err) {
                    if (err instanceof SyntaxError) {
                      this.state = state;
                    } else {
                      throw err;
                    }
                  }
                }

                return super.parseArrow(node);
              }

              parseAssignableListItemTypes(param) {
                if (this.eat(types.question)) {
                  if (param.type !== "Identifier") {
                    throw this.raise(
                      param.start,
                      "A binding pattern parameter cannot be optional in an implementation signature."
                    );
                  }

                  param.optional = true;
                }

                const type = this.tsTryParseTypeAnnotation();
                if (type) param.typeAnnotation = type;
                return this.finishNode(param, param.type);
              }

              toAssignable(node, isBinding, contextDescription) {
                switch (node.type) {
                  case "TSTypeCastExpression":
                    return super.toAssignable(
                      this.typeCastToParameter(node),
                      isBinding,
                      contextDescription
                    );

                  case "TSParameterProperty":
                    return super.toAssignable(
                      node,
                      isBinding,
                      contextDescription
                    );

                  case "TSAsExpression":
                  case "TSNonNullExpression":
                  case "TSTypeAssertion":
                    node.expression = this.toAssignable(
                      node.expression,
                      isBinding,
                      contextDescription
                    );
                    return node;

                  default:
                    return super.toAssignable(
                      node,
                      isBinding,
                      contextDescription
                    );
                }
              }

              checkLVal(expr, isBinding, checkClashes, contextDescription) {
                switch (expr.type) {
                  case "TSTypeCastExpression":
                    return;

                  case "TSParameterProperty":
                    this.checkLVal(
                      expr.parameter,
                      isBinding,
                      checkClashes,
                      "parameter property"
                    );
                    return;

                  case "TSAsExpression":
                  case "TSNonNullExpression":
                  case "TSTypeAssertion":
                    this.checkLVal(
                      expr.expression,
                      isBinding,
                      checkClashes,
                      contextDescription
                    );
                    return;

                  default:
                    super.checkLVal(
                      expr,
                      isBinding,
                      checkClashes,
                      contextDescription
                    );
                    return;
                }
              }

              parseBindingAtom() {
                switch (this.state.type) {
                  case types._this:
                    return this.parseIdentifier(true);

                  default:
                    return super.parseBindingAtom();
                }
              }

              parseMaybeDecoratorArguments(expr) {
                if (this.isRelational("<")) {
                  const typeArguments = this.tsParseTypeArguments();

                  if (this.match(types.parenL)) {
                    const call = super.parseMaybeDecoratorArguments(expr);
                    call.typeParameters = typeArguments;
                    return call;
                  }

                  this.unexpected(this.state.start, types.parenL);
                }

                return super.parseMaybeDecoratorArguments(expr);
              }

              isClassMethod() {
                return this.isRelational("<") || super.isClassMethod();
              }

              isClassProperty() {
                return (
                  this.match(types.bang) ||
                  this.match(types.colon) ||
                  super.isClassProperty()
                );
              }

              parseMaybeDefault(...args) {
                const node = super.parseMaybeDefault(...args);

                if (
                  node.type === "AssignmentPattern" &&
                  node.typeAnnotation &&
                  node.right.start < node.typeAnnotation.start
                ) {
                  this.raise(
                    node.typeAnnotation.start,
                    "Type annotations must come before default assignments, " +
                      "e.g. instead of `age = 25: number` use `age: number = 25`"
                  );
                }

                return node;
              }

              readToken(code) {
                if (this.state.inType && (code === 62 || code === 60)) {
                  return this.finishOp(types.relational, 1);
                } else {
                  return super.readToken(code);
                }
              }

              toAssignableList(exprList, isBinding, contextDescription) {
                for (let i = 0; i < exprList.length; i++) {
                  const expr = exprList[i];

                  if (expr && expr.type === "TSTypeCastExpression") {
                    exprList[i] = this.typeCastToParameter(expr);
                  }
                }

                return super.toAssignableList(
                  exprList,
                  isBinding,
                  contextDescription
                );
              }

              typeCastToParameter(node) {
                node.expression.typeAnnotation = node.typeAnnotation;
                return this.finishNodeAt(
                  node.expression,
                  node.expression.type,
                  node.typeAnnotation.end,
                  node.typeAnnotation.loc.end
                );
              }

              toReferencedList(exprList, isInParens) {
                for (let i = 0; i < exprList.length; i++) {
                  const expr = exprList[i];

                  if (
                    expr &&
                    expr._exprListItem &&
                    expr.type === "TsTypeCastExpression"
                  ) {
                    this.raise(
                      expr.start,
                      "Did not expect a type annotation here."
                    );
                  }
                }

                return exprList;
              }

              shouldParseArrow() {
                return this.match(types.colon) || super.shouldParseArrow();
              }

              shouldParseAsyncArrow() {
                return this.match(types.colon) || super.shouldParseAsyncArrow();
              }

              canHaveLeadingDecorator() {
                return (
                  super.canHaveLeadingDecorator() || this.isAbstractClass()
                );
              }

              jsxParseOpeningElementAfterName(node) {
                const typeArguments = this.tsTryParseAndCatch(() =>
                  this.tsParseTypeArguments()
                );
                if (typeArguments) node.typeParameters = typeArguments;
                return super.jsxParseOpeningElementAfterName(node);
              }
            };

          function hasPlugin(plugins, name) {
            return plugins.some(plugin => {
              if (Array.isArray(plugin)) {
                return plugin[0] === name;
              } else {
                return plugin === name;
              }
            });
          }

          function getPluginOption(plugins, name, option) {
            const plugin = plugins.find(plugin => {
              if (Array.isArray(plugin)) {
                return plugin[0] === name;
              } else {
                return plugin === name;
              }
            });

            if (plugin && Array.isArray(plugin)) {
              return plugin[1][option];
            }

            return null;
          }

          const PIPELINE_PROPOSALS = ["minimal", "smart"];

          function validatePlugins(plugins) {
            if (hasPlugin(plugins, "decorators")) {
              if (hasPlugin(plugins, "decorators-legacy")) {
                throw new Error(
                  "Cannot use the decorators and decorators-legacy plugin together"
                );
              }

              const decoratorsBeforeExport = getPluginOption(
                plugins,
                "decorators",
                "decoratorsBeforeExport"
              );

              if (decoratorsBeforeExport == null) {
                throw new Error(
                  "The 'decorators' plugin requires a 'decoratorsBeforeExport' option," +
                    " whose value must be a boolean. If you are migrating from" +
                    " Babylon/Babel 6 or want to use the old decorators proposal, you" +
                    " should use the 'decorators-legacy' plugin instead of 'decorators'."
                );
              } else if (typeof decoratorsBeforeExport !== "boolean") {
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
              }
            }

            if (
              hasPlugin(plugins, "flow") &&
              hasPlugin(plugins, "typescript")
            ) {
              throw new Error("Cannot combine flow and typescript plugins.");
            }

            if (
              hasPlugin(plugins, "pipelineOperator") &&
              !PIPELINE_PROPOSALS.includes(
                getPluginOption(plugins, "pipelineOperator", "proposal")
              )
            ) {
              throw new Error(
                "'pipelineOperator' requires 'proposal' option whose value should be one of: " +
                  PIPELINE_PROPOSALS.map(p => `'${p}'`).join(", ")
              );
            }
          }

          const mixinPluginNames = ["estree", "jsx", "flow", "typescript"];
          const mixinPlugins = {
            estree,
            jsx,
            flow,
            typescript,
          };

          function parse(input, options) {
            if (options && options.sourceType === "unambiguous") {
              options = Object.assign({}, options);

              try {
                options.sourceType = "module";
                const parser = getParser(options, input);
                const ast = parser.parse();
                if (!parser.sawUnambiguousESM)
                  ast.program.sourceType = "script";
                return ast;
              } catch (moduleError) {
                try {
                  options.sourceType = "script";
                  return getParser(options, input).parse();
                } catch (scriptError) {}

                throw moduleError;
              }
            } else {
              return getParser(options, input).parse();
            }
          }

          function parseExpression(input, options) {
            const parser = getParser(options, input);

            if (parser.options.strictMode) {
              parser.state.strict = true;
            }

            return parser.getExpression();
          }

          function getParser(options, input) {
            let cls = Parser;

            if (options && options.plugins) {
              validatePlugins(options.plugins);
              cls = getParserClass(options.plugins);
            }

            return new cls(options, input);
          }

          const parserClassCache = {};

          function getParserClass(pluginsFromOptions) {
            const pluginList = mixinPluginNames.filter(name =>
              hasPlugin(pluginsFromOptions, name)
            );
            const key = pluginList.join("/");
            let cls = parserClassCache[key];

            if (!cls) {
              cls = Parser;

              for (let _i = 0; _i < pluginList.length; _i++) {
                const plugin = pluginList[_i];
                cls = mixinPlugins[plugin](cls);
              }

              parserClassCache[key] = cls;
            }

            return cls;
          }

          exports.parse = parse;
          exports.parseExpression = parseExpression;
          exports.tokTypes = types;
        },
        /* 45 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = exports.program = exports.expression = exports.statements = exports.statement = exports.smart = void 0;

          var formatters = _interopRequireWildcard(__webpack_require__(381));

          var _builder = _interopRequireDefault(__webpack_require__(382));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const smart = (0, _builder.default)(formatters.smart);
          exports.smart = smart;
          const statement = (0, _builder.default)(formatters.statement);
          exports.statement = statement;
          const statements = (0, _builder.default)(formatters.statements);
          exports.statements = statements;
          const expression = (0, _builder.default)(formatters.expression);
          exports.expression = expression;
          const program = (0, _builder.default)(formatters.program);
          exports.program = program;

          var _default = Object.assign(smart.bind(undefined), {
            smart,
            statement,
            statements,
            expression,
            program,
            ast: smart.ast,
          });

          exports.default = _default;
        },
        /* 46 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.findConfigUpwards = findConfigUpwards;
          exports.findPackageData = findPackageData;
          exports.findRelativeConfig = findRelativeConfig;
          exports.findRootConfig = findRootConfig;
          exports.loadConfig = loadConfig;
          exports.resolvePlugin = resolvePlugin;
          exports.resolvePreset = resolvePreset;
          exports.loadPlugin = loadPlugin;
          exports.loadPreset = loadPreset;

          function findConfigUpwards(rootDir) {
            return null;
          }

          function findPackageData(filepath) {
            return {
              filepath,
              directories: [],
              pkg: null,
              isPackage: false,
            };
          }

          function findRelativeConfig(pkgData, envName, caller) {
            return {
              pkg: null,
              config: null,
              ignore: null,
            };
          }

          function findRootConfig(dirname, envName, caller) {
            return null;
          }

          function loadConfig(name, dirname, envName, caller) {
            throw new Error(
              `Cannot load ${name} relative to ${dirname} in a browser`
            );
          }

          function resolvePlugin(name, dirname) {
            return null;
          }

          function resolvePreset(name, dirname) {
            return null;
          }

          function loadPlugin(name, dirname) {
            throw new Error(
              `Cannot load plugin ${name} relative to ${dirname} in a browser`
            );
          }

          function loadPreset(name, dirname) {
            throw new Error(
              `Cannot load preset ${name} relative to ${dirname} in a browser`
            );
          }
        },
        /* 47 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.createItemFromDescriptor = createItemFromDescriptor;
          exports.createConfigItem = createConfigItem;
          exports.getItemDescriptor = getItemDescriptor;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          var _configDescriptors = __webpack_require__(150);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function createItemFromDescriptor(desc) {
            return new ConfigItem(desc);
          }

          function createConfigItem(value, { dirname = ".", type } = {}) {
            const descriptor = (0, _configDescriptors.createDescriptor)(
              value,
              _path().default.resolve(dirname),
              {
                type,
                alias: "programmatic item",
              }
            );
            return createItemFromDescriptor(descriptor);
          }

          function getItemDescriptor(item) {
            if (item instanceof ConfigItem) {
              return item._descriptor;
            }

            return undefined;
          }

          class ConfigItem {
            constructor(descriptor) {
              this._descriptor = descriptor;
              Object.defineProperty(this, "_descriptor", {
                enumerable: false,
              });
              this.value = this._descriptor.value;
              this.options = this._descriptor.options;
              this.dirname = this._descriptor.dirname;
              this.name = this._descriptor.name;
              this.file = this._descriptor.file
                ? {
                    request: this._descriptor.file.request,
                    resolved: this._descriptor.file.resolved,
                  }
                : undefined;
              Object.freeze(this);
            }
          }

          Object.freeze(ConfigItem.prototype);
        },
        /* 48 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.makeStrongCache = makeStrongCache;
          exports.makeWeakCache = makeWeakCache;
          exports.assertSimpleType = assertSimpleType;

          function makeStrongCache(handler) {
            return makeCachedFunction(new Map(), handler);
          }

          function makeWeakCache(handler) {
            return makeCachedFunction(new WeakMap(), handler);
          }

          function makeCachedFunction(callCache, handler) {
            return function cachedFunction(arg, data) {
              let cachedValue = callCache.get(arg);

              if (cachedValue) {
                for (const _ref of cachedValue) {
                  const { value, valid } = _ref;
                  if (valid(data)) return value;
                }
              }

              const cache = new CacheConfigurator(data);
              const value = handler(arg, cache);
              if (!cache.configured()) cache.forever();
              cache.deactivate();

              switch (cache.mode()) {
                case "forever":
                  cachedValue = [
                    {
                      value,
                      valid: () => true,
                    },
                  ];
                  callCache.set(arg, cachedValue);
                  break;

                case "invalidate":
                  cachedValue = [
                    {
                      value,
                      valid: cache.validator(),
                    },
                  ];
                  callCache.set(arg, cachedValue);
                  break;

                case "valid":
                  if (cachedValue) {
                    cachedValue.push({
                      value,
                      valid: cache.validator(),
                    });
                  } else {
                    cachedValue = [
                      {
                        value,
                        valid: cache.validator(),
                      },
                    ];
                    callCache.set(arg, cachedValue);
                  }
              }

              return value;
            };
          }

          class CacheConfigurator {
            constructor(data) {
              this._data = data;
              this._active = true;
              this._never = false;
              this._forever = false;
              this._invalidate = false;
              this._configured = false;
              this._pairs = [];
            }

            simple() {
              return makeSimpleConfigurator(this);
            }

            mode() {
              if (this._never) return "never";
              if (this._forever) return "forever";
              if (this._invalidate) return "invalidate";
              return "valid";
            }

            forever() {
              if (!this._active) {
                throw new Error(
                  "Cannot change caching after evaluation has completed."
                );
              }

              if (this._never) {
                throw new Error(
                  "Caching has already been configured with .never()"
                );
              }

              this._forever = true;
              this._configured = true;
            }

            never() {
              if (!this._active) {
                throw new Error(
                  "Cannot change caching after evaluation has completed."
                );
              }

              if (this._forever) {
                throw new Error(
                  "Caching has already been configured with .forever()"
                );
              }

              this._never = true;
              this._configured = true;
            }

            using(handler) {
              if (!this._active) {
                throw new Error(
                  "Cannot change caching after evaluation has completed."
                );
              }

              if (this._never || this._forever) {
                throw new Error(
                  "Caching has already been configured with .never or .forever()"
                );
              }

              this._configured = true;
              const key = handler(this._data);

              this._pairs.push([key, handler]);

              return key;
            }

            invalidate(handler) {
              if (!this._active) {
                throw new Error(
                  "Cannot change caching after evaluation has completed."
                );
              }

              if (this._never || this._forever) {
                throw new Error(
                  "Caching has already been configured with .never or .forever()"
                );
              }

              this._invalidate = true;
              this._configured = true;
              const key = handler(this._data);

              this._pairs.push([key, handler]);

              return key;
            }

            validator() {
              const pairs = this._pairs;
              return data => pairs.every(([key, fn]) => key === fn(data));
            }

            deactivate() {
              this._active = false;
            }

            configured() {
              return this._configured;
            }
          }

          function makeSimpleConfigurator(cache) {
            function cacheFn(val) {
              if (typeof val === "boolean") {
                if (val) cache.forever();
                else cache.never();
                return;
              }

              return cache.using(() => assertSimpleType(val()));
            }

            cacheFn.forever = () => cache.forever();

            cacheFn.never = () => cache.never();

            cacheFn.using = cb => cache.using(() => assertSimpleType(cb()));

            cacheFn.invalidate = cb =>
              cache.invalidate(() => assertSimpleType(cb()));

            return cacheFn;
          }

          function assertSimpleType(value) {
            if (
              value != null &&
              typeof value !== "string" &&
              typeof value !== "boolean" &&
              typeof value !== "number"
            ) {
              throw new Error(
                "Cache keys must be either string, boolean, number, null, or undefined."
              );
            }

            return value;
          }
        },
        /* 49 */
        function(module, exports, __webpack_require__) {
          var isSymbol = __webpack_require__(28);

          var INFINITY = 1 / 0;

          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }

            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
          }

          module.exports = toKey;
        },
        /* 50 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.logUsagePolyfills = exports.logEntryPolyfills = exports.logPlugin = exports.logMessage = void 0;

          function _semver() {
            const data = _interopRequireDefault(__webpack_require__(15));

            _semver = function() {
              return data;
            };

            return data;
          }

          var _utils = __webpack_require__(16);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const wordEnds = size => {
            return size > 1 ? "s" : "";
          };

          const logMessage = (message, context) => {
            const pre = context ? `[${context}] ` : "";
            const logStr = `  ${pre}${message}`;
            console.log(logStr);
          };

          exports.logMessage = logMessage;

          const logPlugin = (item, targetVersions, list, context) => {
            const minVersions = list[item] || {};
            const filteredList = Object.keys(targetVersions).reduce(
              (result, env) => {
                const minVersion = minVersions[env];
                const targetVersion = targetVersions[env];

                if (!minVersion) {
                  result[env] = (0, _utils.prettifyVersion)(targetVersion);
                } else {
                  const minIsUnreleased = (0, _utils.isUnreleasedVersion)(
                    minVersion,
                    env
                  );
                  const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(
                    targetVersion,
                    env
                  );

                  if (
                    !targetIsUnreleased &&
                    (minIsUnreleased ||
                      _semver().default.lt(
                        targetVersion,
                        (0, _utils.semverify)(minVersion)
                      ))
                  ) {
                    result[env] = (0, _utils.prettifyVersion)(targetVersion);
                  }
                }

                return result;
              },
              {}
            );
            const formattedTargets = JSON.stringify(filteredList)
              .replace(/,/g, ", ")
              .replace(/^\{"/, '{ "')
              .replace(/"\}$/, '" }');
            logMessage(`${item} ${formattedTargets}`, context);
          };

          exports.logPlugin = logPlugin;

          const logEntryPolyfills = (
            importPolyfillIncluded,
            polyfills,
            filename,
            onDebug
          ) => {
            if (!importPolyfillIncluded) {
              console.log(`
[${filename}] \`import '@gerhobbelt/babel-polyfill'\` was not found.`);
              return;
            }

            if (!polyfills.size) {
              console.log(`
[${filename}] Based on your targets, none were added.`);
              return;
            }

            console.log(`
[${filename}] Replaced \`@gerhobbelt/babel-polyfill\` with the following polyfill${wordEnds(
              polyfills.size
            )}:`);
            onDebug(polyfills);
          };

          exports.logEntryPolyfills = logEntryPolyfills;

          const logUsagePolyfills = (polyfills, filename, onDebug) => {
            if (!polyfills.size) {
              console.log(`
[${filename}] Based on your code and targets, none were added.`);
              return;
            }

            console.log(`
[${filename}] Added following polyfill${wordEnds(polyfills.size)}:`);
            onDebug(polyfills);
          };

          exports.logUsagePolyfills = logUsagePolyfills;
        },
        /* 51 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = shallowEqual;

          function shallowEqual(actual, expected) {
            const keys = Object.keys(expected);

            for (const key of keys) {
              if (actual[key] !== expected[key]) {
                return false;
              }
            }

            return true;
          }
        },
        /* 52 */
        function(module, exports, __webpack_require__) {
          var ListCache = __webpack_require__(31),
            stackClear = __webpack_require__(183),
            stackDelete = __webpack_require__(184),
            stackGet = __webpack_require__(185),
            stackHas = __webpack_require__(186),
            stackSet = __webpack_require__(187);

          function Stack(entries) {
            var data = (this.__data__ = new ListCache(entries));
            this.size = data.size;
          }

          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          module.exports = Stack;
        },
        /* 53 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12),
            root = __webpack_require__(5);

          var Map = getNative(root, "Map");
          module.exports = Map;
        },
        /* 54 */
        function(module, exports, __webpack_require__) {
          var mapCacheClear = __webpack_require__(194),
            mapCacheDelete = __webpack_require__(201),
            mapCacheGet = __webpack_require__(203),
            mapCacheHas = __webpack_require__(204),
            mapCacheSet = __webpack_require__(205);

          function MapCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          module.exports = MapCache;
        },
        /* 55 */
        function(module, exports, __webpack_require__) {
          var baseIsArguments = __webpack_require__(209),
            isObjectLike = __webpack_require__(6);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var propertyIsEnumerable = objectProto.propertyIsEnumerable;
          var isArguments = baseIsArguments(
            (function() {
              return arguments;
            })()
          )
            ? baseIsArguments
            : function(value) {
                return (
                  isObjectLike(value) &&
                  hasOwnProperty.call(value, "callee") &&
                  !propertyIsEnumerable.call(value, "callee")
                );
              };
          module.exports = isArguments;
        },
        /* 56 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(module) {
            var root = __webpack_require__(5),
              stubFalse = __webpack_require__(210);

            var freeExports = true && exports && !exports.nodeType && exports;
            var freeModule =
              freeExports &&
              typeof module == "object" &&
              module &&
              !module.nodeType &&
              module;
            var moduleExports =
              freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined;
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
            var isBuffer = nativeIsBuffer || stubFalse;
            module.exports = isBuffer;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(36)(module)));
        },
        /* 57 */
        function(module, exports) {
          var MAX_SAFE_INTEGER = 9007199254740991;
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return (
              !!length &&
              (type == "number" ||
                (type != "symbol" && reIsUint.test(value))) &&
              value > -1 &&
              value % 1 == 0 &&
              value < length
            );
          }

          module.exports = isIndex;
        },
        /* 58 */
        function(module, exports) {
          var MAX_SAFE_INTEGER = 9007199254740991;

          function isLength(value) {
            return (
              typeof value == "number" &&
              value > -1 &&
              value % 1 == 0 &&
              value <= MAX_SAFE_INTEGER
            );
          }

          module.exports = isLength;
        },
        /* 59 */
        function(module, exports) {
          var objectProto = Object.prototype;

          function isPrototype(value) {
            var Ctor = value && value.constructor,
              proto =
                (typeof Ctor == "function" && Ctor.prototype) || objectProto;
            return value === proto;
          }

          module.exports = isPrototype;
        },
        /* 60 */
        function(module, exports, __webpack_require__) {
          var arrayLikeKeys = __webpack_require__(96),
            baseKeysIn = __webpack_require__(215),
            isArrayLike = __webpack_require__(19);

          function keysIn(object) {
            return isArrayLike(object)
              ? arrayLikeKeys(object, true)
              : baseKeysIn(object);
          }

          module.exports = keysIn;
        },
        /* 61 */
        function(module, exports, __webpack_require__) {
          var arrayFilter = __webpack_require__(220),
            stubArray = __webpack_require__(99);

          var objectProto = Object.prototype;
          var propertyIsEnumerable = objectProto.propertyIsEnumerable;
          var nativeGetSymbols = Object.getOwnPropertySymbols;
          var getSymbols = !nativeGetSymbols
            ? stubArray
            : function(object) {
                if (object == null) {
                  return [];
                }

                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function(symbol) {
                  return propertyIsEnumerable.call(object, symbol);
                });
              };
          module.exports = getSymbols;
        },
        /* 62 */
        function(module, exports) {
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }

            return array;
          }

          module.exports = arrayPush;
        },
        /* 63 */
        function(module, exports, __webpack_require__) {
          var overArg = __webpack_require__(98);

          var getPrototype = overArg(Object.getPrototypeOf, Object);
          module.exports = getPrototype;
        },
        /* 64 */
        function(module, exports, __webpack_require__) {
          var Uint8Array = __webpack_require__(104);

          function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
          }

          module.exports = cloneArrayBuffer;
        },
        /* 65 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.patternLikeCommon = exports.functionDeclarationCommon = exports.functionTypeAnnotationCommon = exports.functionCommon = void 0;

          var _isValidIdentifier = _interopRequireDefault(
            __webpack_require__(26)
          );

          var _constants = __webpack_require__(13);

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          (0, _utils.default)("ArrayExpression", {
            fields: {
              elements: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeOrValueType)(
                      "null",
                      "Expression",
                      "SpreadElement"
                    )
                  )
                ),
                default: [],
              },
            },
            visitor: ["elements"],
            aliases: ["Expression"],
          });
          (0, _utils.default)("AssignmentExpression", {
            fields: {
              operator: {
                validate: (0, _utils.assertValueType)("string"),
              },
              left: {
                validate: (0, _utils.assertNodeType)("LVal"),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
            builder: ["operator", "left", "right"],
            visitor: ["left", "right"],
            aliases: ["Expression"],
          });
          (0, _utils.default)("BinaryExpression", {
            builder: ["operator", "left", "right"],
            fields: {
              operator: {
                validate: (0, _utils.assertOneOf)(
                  ..._constants.BINARY_OPERATORS
                ),
              },
              left: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
            visitor: ["left", "right"],
            aliases: ["Binary", "Expression"],
          });
          (0, _utils.default)("InterpreterDirective", {
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
          });
          (0, _utils.default)("Directive", {
            visitor: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertNodeType)("DirectiveLiteral"),
              },
            },
          });
          (0, _utils.default)("DirectiveLiteral", {
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
          });
          (0, _utils.default)("BlockStatement", {
            builder: ["body", "directives"],
            visitor: ["directives", "body"],
            fields: {
              directives: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Directive")
                  )
                ),
                default: [],
              },
              body: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Statement")
                  )
                ),
              },
            },
            aliases: ["Scopable", "BlockParent", "Block", "Statement"],
          });
          (0, _utils.default)("BreakStatement", {
            visitor: ["label"],
            fields: {
              label: {
                validate: (0, _utils.assertNodeType)("Identifier"),
                optional: true,
              },
            },
            aliases: ["Statement", "Terminatorless", "CompletionStatement"],
          });
          (0, _utils.default)("CallExpression", {
            visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
            builder: ["callee", "arguments"],
            aliases: ["Expression"],
            fields: {
              callee: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              arguments: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "Expression",
                      "SpreadElement",
                      "JSXNamespacedName"
                    )
                  )
                ),
              },
              optional: {
                validate: (0, _utils.assertOneOf)(true, false),
                optional: true,
              },
              typeArguments: {
                validate: (0, _utils.assertNodeType)(
                  "TypeParameterInstantiation"
                ),
                optional: true,
              },
              typeParameters: {
                validate: (0, _utils.assertNodeType)(
                  "TSTypeParameterInstantiation"
                ),
                optional: true,
              },
            },
          });
          (0, _utils.default)("CatchClause", {
            visitor: ["param", "body"],
            fields: {
              param: {
                validate: (0, _utils.assertNodeType)("Identifier"),
                optional: true,
              },
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement"),
              },
            },
            aliases: ["Scopable", "BlockParent"],
          });
          (0, _utils.default)("ConditionalExpression", {
            visitor: ["test", "consequent", "alternate"],
            fields: {
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              consequent: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              alternate: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
            aliases: ["Expression", "Conditional"],
          });
          (0, _utils.default)("ContinueStatement", {
            visitor: ["label"],
            fields: {
              label: {
                validate: (0, _utils.assertNodeType)("Identifier"),
                optional: true,
              },
            },
            aliases: ["Statement", "Terminatorless", "CompletionStatement"],
          });
          (0, _utils.default)("DebuggerStatement", {
            aliases: ["Statement"],
          });
          (0, _utils.default)("DoWhileStatement", {
            visitor: ["test", "body"],
            fields: {
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
            },
            aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
          });
          (0, _utils.default)("EmptyStatement", {
            aliases: ["Statement"],
          });
          (0, _utils.default)("ExpressionStatement", {
            visitor: ["expression"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
            aliases: ["Statement", "ExpressionWrapper"],
          });
          (0, _utils.default)("File", {
            builder: ["program", "comments", "tokens"],
            visitor: ["program"],
            fields: {
              program: {
                validate: (0, _utils.assertNodeType)("Program"),
              },
            },
          });
          (0, _utils.default)("ForInStatement", {
            visitor: ["left", "right", "body"],
            aliases: [
              "Scopable",
              "Statement",
              "For",
              "BlockParent",
              "Loop",
              "ForXStatement",
            ],
            fields: {
              left: {
                validate: (0, _utils.assertNodeType)(
                  "VariableDeclaration",
                  "LVal"
                ),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
            },
          });
          (0, _utils.default)("ForStatement", {
            visitor: ["init", "test", "update", "body"],
            aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
            fields: {
              init: {
                validate: (0, _utils.assertNodeType)(
                  "VariableDeclaration",
                  "Expression"
                ),
                optional: true,
              },
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
              update: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
              body: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
            },
          });
          const functionCommon = {
            params: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("LVal"))
              ),
            },
            generator: {
              default: false,
              validate: (0, _utils.assertValueType)("boolean"),
            },
            async: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false,
            },
          };
          exports.functionCommon = functionCommon;
          const functionTypeAnnotationCommon = {
            returnType: {
              validate: (0, _utils.assertNodeType)(
                "TypeAnnotation",
                "TSTypeAnnotation",
                "Noop"
              ),
              optional: true,
            },
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterDeclaration",
                "TSTypeParameterDeclaration",
                "Noop"
              ),
              optional: true,
            },
          };
          exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
          const functionDeclarationCommon = Object.assign({}, functionCommon, {
            declare: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            id: {
              validate: (0, _utils.assertNodeType)("Identifier"),
              optional: true,
            },
          });
          exports.functionDeclarationCommon = functionDeclarationCommon;
          (0, _utils.default)("FunctionDeclaration", {
            builder: ["id", "params", "body", "generator", "async"],
            visitor: ["id", "params", "body", "returnType", "typeParameters"],
            fields: Object.assign(
              {},
              functionDeclarationCommon,
              functionTypeAnnotationCommon,
              {
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              }
            ),
            aliases: [
              "Scopable",
              "Function",
              "BlockParent",
              "FunctionParent",
              "Statement",
              "Pureish",
              "Declaration",
            ],
          });
          (0, _utils.default)("FunctionExpression", {
            inherits: "FunctionDeclaration",
            aliases: [
              "Scopable",
              "Function",
              "BlockParent",
              "FunctionParent",
              "Expression",
              "Pureish",
            ],
            fields: Object.assign(
              {},
              functionCommon,
              functionTypeAnnotationCommon,
              {
                id: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                  optional: true,
                },
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              }
            ),
          });
          const patternLikeCommon = {
            typeAnnotation: {
              validate: (0, _utils.assertNodeType)(
                "TypeAnnotation",
                "TSTypeAnnotation",
                "Noop"
              ),
              optional: true,
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
            },
          };
          exports.patternLikeCommon = patternLikeCommon;
          (0, _utils.default)("Identifier", {
            builder: ["name"],
            visitor: ["typeAnnotation"],
            aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
            fields: Object.assign({}, patternLikeCommon, {
              name: {
                validate: (0, _utils.chain)(function(node, key, val) {
                  if (!(0, _isValidIdentifier.default)(val)) {
                  }
                }, (0, _utils.assertValueType)("string")),
              },
              optional: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
            }),
          });
          (0, _utils.default)("IfStatement", {
            visitor: ["test", "consequent", "alternate"],
            aliases: ["Statement", "Conditional"],
            fields: {
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              consequent: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
              alternate: {
                optional: true,
                validate: (0, _utils.assertNodeType)("Statement"),
              },
            },
          });
          (0, _utils.default)("LabeledStatement", {
            visitor: ["label", "body"],
            aliases: ["Statement"],
            fields: {
              label: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
            },
          });
          (0, _utils.default)("StringLiteral", {
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
            aliases: ["Expression", "Pureish", "Literal", "Immutable"],
          });
          (0, _utils.default)("NumericLiteral", {
            builder: ["value"],
            deprecatedAlias: "NumberLiteral",
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("number"),
              },
            },
            aliases: ["Expression", "Pureish", "Literal", "Immutable"],
          });
          (0, _utils.default)("NullLiteral", {
            aliases: ["Expression", "Pureish", "Literal", "Immutable"],
          });
          (0, _utils.default)("BooleanLiteral", {
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("boolean"),
              },
            },
            aliases: ["Expression", "Pureish", "Literal", "Immutable"],
          });
          (0, _utils.default)("RegExpLiteral", {
            builder: ["pattern", "flags"],
            deprecatedAlias: "RegexLiteral",
            aliases: ["Expression", "Literal"],
            fields: {
              pattern: {
                validate: (0, _utils.assertValueType)("string"),
              },
              flags: {
                validate: (0, _utils.assertValueType)("string"),
                default: "",
              },
            },
          });
          (0, _utils.default)("LogicalExpression", {
            builder: ["operator", "left", "right"],
            visitor: ["left", "right"],
            aliases: ["Binary", "Expression"],
            fields: {
              operator: {
                validate: (0, _utils.assertOneOf)(
                  ..._constants.LOGICAL_OPERATORS
                ),
              },
              left: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("MemberExpression", {
            builder: ["object", "property", "computed", "optional"],
            visitor: ["object", "property"],
            aliases: ["Expression", "LVal"],
            fields: {
              object: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              property: {
                validate: (function() {
                  const normal = (0, _utils.assertNodeType)(
                    "Identifier",
                    "PrivateName"
                  );
                  const computed = (0, _utils.assertNodeType)("Expression");
                  return function(node, key, val) {
                    const validator = node.computed ? computed : normal;
                    validator(node, key, val);
                  };
                })(),
              },
              computed: {
                default: false,
              },
              optional: {
                validate: (0, _utils.assertOneOf)(true, false),
                optional: true,
              },
            },
          });
          (0, _utils.default)("NewExpression", {
            inherits: "CallExpression",
          });
          (0, _utils.default)("Program", {
            visitor: ["directives", "body"],
            builder: ["body", "directives", "sourceType", "interpreter"],
            fields: {
              sourceFile: {
                validate: (0, _utils.assertValueType)("string"),
              },
              sourceType: {
                validate: (0, _utils.assertOneOf)("script", "module"),
                default: "script",
              },
              interpreter: {
                validate: (0, _utils.assertNodeType)("InterpreterDirective"),
                default: null,
                optional: true,
              },
              directives: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Directive")
                  )
                ),
                default: [],
              },
              body: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Statement")
                  )
                ),
              },
            },
            aliases: ["Scopable", "BlockParent", "Block"],
          });
          (0, _utils.default)("ObjectExpression", {
            visitor: ["properties"],
            aliases: ["Expression"],
            fields: {
              properties: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "ObjectMethod",
                      "ObjectProperty",
                      "SpreadElement"
                    )
                  )
                ),
              },
            },
          });
          (0, _utils.default)("ObjectMethod", {
            builder: ["kind", "key", "params", "body", "computed"],
            fields: Object.assign(
              {},
              functionCommon,
              functionTypeAnnotationCommon,
              {
                kind: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("string"),
                    (0, _utils.assertOneOf)("method", "get", "set")
                  ),
                  default: "method",
                },
                computed: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  default: false,
                },
                key: {
                  validate: (function() {
                    const normal = (0, _utils.assertNodeType)(
                      "Identifier",
                      "StringLiteral",
                      "NumericLiteral"
                    );
                    const computed = (0, _utils.assertNodeType)("Expression");
                    return function(node, key, val) {
                      const validator = node.computed ? computed : normal;
                      validator(node, key, val);
                    };
                  })(),
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              }
            ),
            visitor: [
              "key",
              "params",
              "body",
              "decorators",
              "returnType",
              "typeParameters",
            ],
            aliases: [
              "UserWhitespacable",
              "Function",
              "Scopable",
              "BlockParent",
              "FunctionParent",
              "Method",
              "ObjectMember",
            ],
          });
          (0, _utils.default)("ObjectProperty", {
            builder: ["key", "value", "computed", "shorthand", "decorators"],
            fields: {
              computed: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false,
              },
              key: {
                validate: (function() {
                  const normal = (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral",
                    "NumericLiteral"
                  );
                  const computed = (0, _utils.assertNodeType)("Expression");
                  return function(node, key, val) {
                    const validator = node.computed ? computed : normal;
                    validator(node, key, val);
                  };
                })(),
              },
              value: {
                validate: (0, _utils.assertNodeType)(
                  "Expression",
                  "PatternLike"
                ),
              },
              shorthand: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false,
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
                optional: true,
              },
            },
            visitor: ["key", "value", "decorators"],
            aliases: ["UserWhitespacable", "Property", "ObjectMember"],
          });
          (0, _utils.default)("RestElement", {
            visitor: ["argument", "typeAnnotation"],
            builder: ["argument"],
            aliases: ["LVal", "PatternLike"],
            deprecatedAlias: "RestProperty",
            fields: Object.assign({}, patternLikeCommon, {
              argument: {
                validate: (0, _utils.assertNodeType)("LVal"),
              },
            }),
          });
          (0, _utils.default)("ReturnStatement", {
            visitor: ["argument"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"],
            fields: {
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
            },
          });
          (0, _utils.default)("SequenceExpression", {
            visitor: ["expressions"],
            fields: {
              expressions: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Expression")
                  )
                ),
              },
            },
            aliases: ["Expression"],
          });
          (0, _utils.default)("SwitchCase", {
            visitor: ["test", "consequent"],
            fields: {
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
              consequent: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Statement")
                  )
                ),
              },
            },
          });
          (0, _utils.default)("SwitchStatement", {
            visitor: ["discriminant", "cases"],
            aliases: ["Statement", "BlockParent", "Scopable"],
            fields: {
              discriminant: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              cases: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("SwitchCase")
                  )
                ),
              },
            },
          });
          (0, _utils.default)("ThisExpression", {
            aliases: ["Expression"],
          });
          (0, _utils.default)("ThrowStatement", {
            visitor: ["argument"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"],
            fields: {
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("TryStatement", {
            visitor: ["block", "handler", "finalizer"],
            aliases: ["Statement"],
            fields: {
              block: {
                validate: (0, _utils.assertNodeType)("BlockStatement"),
              },
              handler: {
                optional: true,
                validate: (0, _utils.assertNodeType)("CatchClause"),
              },
              finalizer: {
                optional: true,
                validate: (0, _utils.assertNodeType)("BlockStatement"),
              },
            },
          });
          (0, _utils.default)("UnaryExpression", {
            builder: ["operator", "argument", "prefix"],
            fields: {
              prefix: {
                default: true,
              },
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              operator: {
                validate: (0, _utils.assertOneOf)(
                  ..._constants.UNARY_OPERATORS
                ),
              },
            },
            visitor: ["argument"],
            aliases: ["UnaryLike", "Expression"],
          });
          (0, _utils.default)("UpdateExpression", {
            builder: ["operator", "argument", "prefix"],
            fields: {
              prefix: {
                default: false,
              },
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              operator: {
                validate: (0, _utils.assertOneOf)(
                  ..._constants.UPDATE_OPERATORS
                ),
              },
            },
            visitor: ["argument"],
            aliases: ["Expression"],
          });
          (0, _utils.default)("VariableDeclaration", {
            builder: ["kind", "declarations"],
            visitor: ["declarations"],
            aliases: ["Statement", "Declaration"],
            fields: {
              declare: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              kind: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("string"),
                  (0, _utils.assertOneOf)("var", "let", "const")
                ),
              },
              declarations: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("VariableDeclarator")
                  )
                ),
              },
            },
          });
          (0, _utils.default)("VariableDeclarator", {
            visitor: ["id", "init"],
            fields: {
              id: {
                validate: (0, _utils.assertNodeType)("LVal"),
              },
              definite: {
                optional: true,
                validate: (0, _utils.assertValueType)("boolean"),
              },
              init: {
                optional: true,
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("WhileStatement", {
            visitor: ["test", "body"],
            aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
            fields: {
              test: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              body: {
                validate: (0, _utils.assertNodeType)(
                  "BlockStatement",
                  "Statement"
                ),
              },
            },
          });
          (0, _utils.default)("WithStatement", {
            visitor: ["object", "body"],
            aliases: ["Statement"],
            fields: {
              object: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              body: {
                validate: (0, _utils.assertNodeType)(
                  "BlockStatement",
                  "Statement"
                ),
              },
            },
          });
        },
        /* 66 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = is;

          var _shallowEqual = _interopRequireDefault(__webpack_require__(51));

          var _isType = _interopRequireDefault(__webpack_require__(67));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function is(type, node, opts) {
            if (!node) return false;
            const matches = (0, _isType.default)(node.type, type);
            if (!matches) return false;

            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }
        },
        /* 67 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isType;

          var _definitions = __webpack_require__(7);

          function isType(nodeType, targetType) {
            if (nodeType === targetType) return true;
            if (_definitions.ALIAS_KEYS[targetType]) return false;
            const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];

            if (aliases) {
              if (aliases[0] === nodeType) return true;

              for (const alias of aliases) {
                if (nodeType === alias) return true;
              }
            }

            return false;
          }
        },
        /* 68 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.classMethodOrDeclareMethodCommon = exports.classMethodOrPropertyCommon = void 0;

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          var _core = __webpack_require__(65);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          (0, _utils.default)("AssignmentPattern", {
            visitor: ["left", "right"],
            builder: ["left", "right"],
            aliases: ["Pattern", "PatternLike", "LVal"],
            fields: Object.assign({}, _core.patternLikeCommon, {
              left: {
                validate: (0, _utils.assertNodeType)(
                  "Identifier",
                  "ObjectPattern",
                  "ArrayPattern"
                ),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
              },
            }),
          });
          (0, _utils.default)("ArrayPattern", {
            visitor: ["elements", "typeAnnotation"],
            builder: ["elements"],
            aliases: ["Pattern", "PatternLike", "LVal"],
            fields: Object.assign({}, _core.patternLikeCommon, {
              elements: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("PatternLike")
                  )
                ),
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
              },
            }),
          });
          (0, _utils.default)("ArrowFunctionExpression", {
            builder: ["params", "body", "async"],
            visitor: ["params", "body", "returnType", "typeParameters"],
            aliases: [
              "Scopable",
              "Function",
              "BlockParent",
              "FunctionParent",
              "Expression",
              "Pureish",
            ],
            fields: Object.assign(
              {},
              _core.functionCommon,
              _core.functionTypeAnnotationCommon,
              {
                expression: {
                  validate: (0, _utils.assertValueType)("boolean"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)(
                    "BlockStatement",
                    "Expression"
                  ),
                },
              }
            ),
          });
          (0, _utils.default)("ClassBody", {
            visitor: ["body"],
            fields: {
              body: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "ClassMethod",
                      "ClassPrivateMethod",
                      "ClassProperty",
                      "ClassPrivateProperty",
                      "TSDeclareMethod",
                      "TSIndexSignature"
                    )
                  )
                ),
              },
            },
          });
          const classCommon = {
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterDeclaration",
                "TSTypeParameterDeclaration",
                "Noop"
              ),
              optional: true,
            },
            body: {
              validate: (0, _utils.assertNodeType)("ClassBody"),
            },
            superClass: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Expression"),
            },
            superTypeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterInstantiation",
                "TSTypeParameterInstantiation"
              ),
              optional: true,
            },
            implements: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "TSExpressionWithTypeArguments",
                    "ClassImplements"
                  )
                )
              ),
              optional: true,
            },
          };
          (0, _utils.default)("ClassDeclaration", {
            builder: ["id", "superClass", "body", "decorators"],
            visitor: [
              "id",
              "body",
              "superClass",
              "mixins",
              "typeParameters",
              "superTypeParameters",
              "implements",
              "decorators",
            ],
            aliases: [
              "Scopable",
              "Class",
              "Statement",
              "Declaration",
              "Pureish",
            ],
            fields: Object.assign({}, classCommon, {
              declare: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              abstract: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              id: {
                validate: (0, _utils.assertNodeType)("Identifier"),
                optional: true,
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
                optional: true,
              },
            }),
          });
          (0, _utils.default)("ClassExpression", {
            inherits: "ClassDeclaration",
            aliases: ["Scopable", "Class", "Expression", "Pureish"],
            fields: Object.assign({}, classCommon, {
              id: {
                optional: true,
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("ClassBody"),
              },
              superClass: {
                optional: true,
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
                optional: true,
              },
            }),
          });
          (0, _utils.default)("ExportAllDeclaration", {
            visitor: ["source"],
            aliases: [
              "Statement",
              "Declaration",
              "ModuleDeclaration",
              "ExportDeclaration",
            ],
            fields: {
              source: {
                validate: (0, _utils.assertNodeType)("StringLiteral"),
              },
            },
          });
          (0, _utils.default)("ExportDefaultDeclaration", {
            visitor: ["declaration"],
            aliases: [
              "Statement",
              "Declaration",
              "ModuleDeclaration",
              "ExportDeclaration",
            ],
            fields: {
              declaration: {
                validate: (0, _utils.assertNodeType)(
                  "FunctionDeclaration",
                  "TSDeclareFunction",
                  "ClassDeclaration",
                  "Expression"
                ),
              },
            },
          });
          (0, _utils.default)("ExportNamedDeclaration", {
            visitor: ["declaration", "specifiers", "source"],
            aliases: [
              "Statement",
              "Declaration",
              "ModuleDeclaration",
              "ExportDeclaration",
            ],
            fields: {
              declaration: {
                validate: (0, _utils.assertNodeType)("Declaration"),
                optional: true,
              },
              specifiers: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "ExportSpecifier",
                      "ExportDefaultSpecifier",
                      "ExportNamespaceSpecifier"
                    )
                  )
                ),
              },
              source: {
                validate: (0, _utils.assertNodeType)("StringLiteral"),
                optional: true,
              },
            },
          });
          (0, _utils.default)("ExportSpecifier", {
            visitor: ["local", "exported"],
            aliases: ["ModuleSpecifier"],
            fields: {
              local: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              exported: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("ForOfStatement", {
            visitor: ["left", "right", "body"],
            aliases: [
              "Scopable",
              "Statement",
              "For",
              "BlockParent",
              "Loop",
              "ForXStatement",
            ],
            fields: {
              left: {
                validate: (0, _utils.assertNodeType)(
                  "VariableDeclaration",
                  "LVal"
                ),
              },
              right: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("Statement"),
              },
              await: {
                default: false,
                validate: (0, _utils.assertValueType)("boolean"),
              },
            },
          });
          (0, _utils.default)("ImportDeclaration", {
            visitor: ["specifiers", "source"],
            aliases: ["Statement", "Declaration", "ModuleDeclaration"],
            fields: {
              specifiers: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "ImportSpecifier",
                      "ImportDefaultSpecifier",
                      "ImportNamespaceSpecifier"
                    )
                  )
                ),
              },
              source: {
                validate: (0, _utils.assertNodeType)("StringLiteral"),
              },
            },
          });
          (0, _utils.default)("ImportDefaultSpecifier", {
            visitor: ["local"],
            aliases: ["ModuleSpecifier"],
            fields: {
              local: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("ImportNamespaceSpecifier", {
            visitor: ["local"],
            aliases: ["ModuleSpecifier"],
            fields: {
              local: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("ImportSpecifier", {
            visitor: ["local", "imported"],
            aliases: ["ModuleSpecifier"],
            fields: {
              local: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              imported: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              importKind: {
                validate: (0, _utils.assertOneOf)(null, "type", "typeof"),
              },
            },
          });
          (0, _utils.default)("MetaProperty", {
            visitor: ["meta", "property"],
            aliases: ["Expression"],
            fields: {
              meta: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
              property: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          const classMethodOrPropertyCommon = {
            abstract: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            accessibility: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("string"),
                (0, _utils.assertOneOf)("public", "private", "protected")
              ),
              optional: true,
            },
            static: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            computed: {
              default: false,
              validate: (0, _utils.assertValueType)("boolean"),
            },
            optional: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            key: {
              validate: (0, _utils.chain)(
                (function() {
                  const normal = (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral",
                    "NumericLiteral"
                  );
                  const computed = (0, _utils.assertNodeType)("Expression");
                  return function(node, key, val) {
                    const validator = node.computed ? computed : normal;
                    validator(node, key, val);
                  };
                })(),
                (0, _utils.assertNodeType)(
                  "Identifier",
                  "StringLiteral",
                  "NumericLiteral",
                  "Expression"
                )
              ),
            },
          };
          exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
          const classMethodOrDeclareMethodCommon = Object.assign(
            {},
            _core.functionCommon,
            classMethodOrPropertyCommon,
            {
              kind: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("string"),
                  (0, _utils.assertOneOf)("get", "set", "method", "constructor")
                ),
                default: "method",
              },
              access: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("string"),
                  (0, _utils.assertOneOf)("public", "private", "protected")
                ),
                optional: true,
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
                optional: true,
              },
            }
          );
          exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
          (0, _utils.default)("ClassMethod", {
            aliases: [
              "Function",
              "Scopable",
              "BlockParent",
              "FunctionParent",
              "Method",
            ],
            builder: ["kind", "key", "params", "body", "computed", "static"],
            visitor: [
              "key",
              "params",
              "body",
              "decorators",
              "returnType",
              "typeParameters",
            ],
            fields: Object.assign(
              {},
              classMethodOrDeclareMethodCommon,
              _core.functionTypeAnnotationCommon,
              {
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              }
            ),
          });
          (0, _utils.default)("ObjectPattern", {
            visitor: ["properties", "typeAnnotation"],
            builder: ["properties"],
            aliases: ["Pattern", "PatternLike", "LVal"],
            fields: Object.assign({}, _core.patternLikeCommon, {
              properties: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("RestElement", "ObjectProperty")
                  )
                ),
              },
            }),
          });
          (0, _utils.default)("SpreadElement", {
            visitor: ["argument"],
            aliases: ["UnaryLike"],
            deprecatedAlias: "SpreadProperty",
            fields: {
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("Super", {
            aliases: ["Expression"],
          });
          (0, _utils.default)("TaggedTemplateExpression", {
            visitor: ["tag", "quasi"],
            aliases: ["Expression"],
            fields: {
              tag: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              quasi: {
                validate: (0, _utils.assertNodeType)("TemplateLiteral"),
              },
              typeParameters: {
                validate: (0, _utils.assertNodeType)(
                  "TypeParameterInstantiation",
                  "TSTypeParameterInstantiation"
                ),
                optional: true,
              },
            },
          });
          (0, _utils.default)("TemplateElement", {
            builder: ["value", "tail"],
            fields: {
              value: {},
              tail: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false,
              },
            },
          });
          (0, _utils.default)("TemplateLiteral", {
            visitor: ["quasis", "expressions"],
            aliases: ["Expression", "Literal"],
            fields: {
              quasis: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("TemplateElement")
                  )
                ),
              },
              expressions: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Expression")
                  )
                ),
              },
            },
          });
          (0, _utils.default)("YieldExpression", {
            builder: ["argument", "delegate"],
            visitor: ["argument"],
            aliases: ["Expression", "Terminatorless"],
            fields: {
              delegate: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false,
              },
              argument: {
                optional: true,
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
        },
        /* 69 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inherit;

          function _uniq() {
            const data = _interopRequireDefault(__webpack_require__(253));

            _uniq = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inherit(key, child, parent) {
            if (child && parent) {
              child[key] = (0, _uniq().default)(
                [].concat(child[key], parent[key]).filter(Boolean)
              );
            }
          }
        },
        /* 70 */
        function(module, exports) {
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);
            set.forEach(function(value) {
              result[++index] = value;
            });
            return result;
          }

          module.exports = setToArray;
        },
        /* 71 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.default = exports.semverMin = exports.isBrowsersQueryValid = void 0;

            function _browserslist() {
              const data = _interopRequireDefault(__webpack_require__(126));

              _browserslist = function() {
                return data;
              };

              return data;
            }

            function _assert() {
              const data = _interopRequireDefault(__webpack_require__(22));

              _assert = function() {
                return data;
              };

              return data;
            }

            function _semver() {
              const data = _interopRequireDefault(__webpack_require__(15));

              _semver = function() {
                return data;
              };

              return data;
            }

            var _utils = __webpack_require__(16);

            var _normalizeOptions = __webpack_require__(128);

            var _builtInModules = _interopRequireDefault(
              __webpack_require__(306)
            );

            var _options = __webpack_require__(131);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            const browserslistDefaults = _browserslist().default.defaults;

            const validateTargetNames = (validTargets, targets) => {
              for (const target in targets) {
                if (!_options.TargetNames[target]) {
                  const validOptions = (0, _utils.getValues)(
                    _options.TargetNames
                  );
                  throw new Error(`Invalid Option: '${target}' is not a valid target
        Maybe you meant to use '${(0, _utils.findSuggestion)(
          validOptions,
          target
        )}'?`);
                }
              }
            };

            const browserNameMap = {
              and_chr: "chrome",
              android: "android",
              chrome: "chrome",
              edge: "edge",
              firefox: "firefox",
              ie: "ie",
              ios_saf: "ios",
              node: "node",
              opera: "opera",
              safari: "safari",
            };

            const isBrowsersQueryValid = browsers =>
              typeof browsers === "string" || Array.isArray(browsers);

            exports.isBrowsersQueryValid = isBrowsersQueryValid;

            const validateBrowsers = browsers => {
              (0, _assert().default)(
                typeof browsers === "undefined" ||
                  isBrowsersQueryValid(browsers),
                `Invalid Option: '${browsers}' is not a valid browserslist query`
              );
              return browsers;
            };

            const semverMin = (first, second) => {
              return first && _semver().default.lt(first, second)
                ? first
                : second;
            };

            exports.semverMin = semverMin;

            const mergeBrowsers = (fromQuery, fromTarget) => {
              return Object.keys(fromTarget).reduce((queryObj, targKey) => {
                if (targKey !== _options.TargetNames.browsers) {
                  queryObj[targKey] = fromTarget[targKey];
                }

                return queryObj;
              }, fromQuery);
            };

            const injectCurrentNodeVersion = browser => {
              return browser.replace(
                /(current node)|(node current)/,
                `node ${(0, _utils.roundToMinor)(process.versions.node)}`
              );
            };

            const normalizeBrowsers = browsers => {
              if (!browsers) return browsers;

              if (typeof browsers === "string") {
                return injectCurrentNodeVersion(browsers);
              }

              return browsers.map(injectCurrentNodeVersion);
            };

            const getLowestVersions = browsers => {
              return browsers.reduce((all, browser) => {
                const [browserName, browserVersion] = browser.split(" ");
                const normalizedBrowserName = browserNameMap[browserName];

                if (!normalizedBrowserName) {
                  return all;
                }

                try {
                  const splitVersion = browserVersion
                    .split("-")[0]
                    .toLowerCase();
                  const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(
                    splitVersion,
                    browserName
                  );

                  if (!all[normalizedBrowserName]) {
                    all[normalizedBrowserName] = isSplitUnreleased
                      ? splitVersion
                      : (0, _utils.semverify)(splitVersion);
                    return all;
                  }

                  const version = all[normalizedBrowserName];
                  const isUnreleased = (0, _utils.isUnreleasedVersion)(
                    version,
                    browserName
                  );

                  if (isUnreleased && isSplitUnreleased) {
                    all[normalizedBrowserName] = (0,
                    _utils.getLowestUnreleased)(
                      version,
                      splitVersion,
                      browserName
                    );
                  } else if (isUnreleased) {
                    all[normalizedBrowserName] = (0, _utils.semverify)(
                      splitVersion
                    );
                  } else if (!isUnreleased && !isSplitUnreleased) {
                    const parsedBrowserVersion = (0, _utils.semverify)(
                      splitVersion
                    );
                    all[normalizedBrowserName] = semverMin(
                      version,
                      parsedBrowserVersion
                    );
                  }
                } catch (e) {}

                return all;
              }, {});
            };

            const outputDecimalWarning = decimalTargets => {
              if (!decimalTargets || !decimalTargets.length) {
                return;
              }

              console.log(
                "Warning, the following targets are using a decimal version:"
              );
              console.log("");
              decimalTargets.forEach(({ target, value }) =>
                console.log(`  ${target}: ${value}`)
              );
              console.log("");
              console.log(
                "We recommend using a string for minor/patch versions to avoid numbers like 6.10"
              );
              console.log(
                "getting parsed as 6.1, which can lead to unexpected behavior."
              );
              console.log("");
            };

            const semverifyTarget = (target, value) => {
              try {
                return (0, _utils.semverify)(value);
              } catch (error) {
                throw new Error(
                  `Invalid Option: '${value}' is not a valid value for 'targets.${target}'.`
                );
              }
            };

            const targetParserMap = {
              __default: (target, value) => {
                const version = (0, _utils.isUnreleasedVersion)(value, target)
                  ? value.toLowerCase()
                  : semverifyTarget(target, value);
                return [target, version];
              },
              node: (target, value) => {
                const parsed =
                  value === true || value === "current"
                    ? process.versions.node
                    : semverifyTarget(target, value);
                return [target, parsed];
              },
            };

            const getTargets = (targets = {}, options = {}) => {
              const targetOpts = {};
              validateTargetNames(targets);

              if (targets.esmodules) {
                const supportsESModules = _builtInModules.default["es6.module"];
                targets.browsers = Object.keys(supportsESModules)
                  .map(browser => `${browser} ${supportsESModules[browser]}`)
                  .join(", ");
              }

              let browsersquery = validateBrowsers(targets.browsers);
              browsersquery = normalizeBrowsers(targets.browsers);
              const shouldParseBrowsers = !!targets.browsers;
              const shouldSearchForConfig =
                !options.ignoreBrowserslistConfig &&
                !Object.keys(targets).length;

              if (shouldParseBrowsers || shouldSearchForConfig) {
                _browserslist().default.defaults = (0,
                _normalizeOptions.objectToBrowserslist)(targets);
                const browsers = (0, _browserslist().default)(browsersquery, {
                  path: options.configPath,
                  ignoreUnknownVersions: true,
                });
                const queryBrowsers = getLowestVersions(browsers);
                targets = mergeBrowsers(queryBrowsers, targets);
                _browserslist().default.defaults = browserslistDefaults;
              }

              const parsed = Object.keys(targets)
                .filter(value => value !== _options.TargetNames.esmodules)
                .sort()
                .reduce(
                  (results, target) => {
                    if (target !== _options.TargetNames.browsers) {
                      const value = targets[target];

                      if (typeof value === "number" && value % 1 !== 0) {
                        results.decimalWarnings.push({
                          target,
                          value,
                        });
                      }

                      const parser =
                        targetParserMap[target] || targetParserMap.__default;
                      const [parsedTarget, parsedValue] = parser(target, value);

                      if (parsedValue) {
                        results.targets[parsedTarget] = parsedValue;
                      }
                    }

                    return results;
                  },
                  {
                    targets: targetOpts,
                    decimalWarnings: [],
                  }
                );
              outputDecimalWarning(parsed.decimalWarnings);
              return parsed.targets;
            };

            var _default = getTargets;
            exports.default = _default;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 72 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.Plugin = Plugin;
          Object.defineProperty(exports, "File", {
            enumerable: true,
            get: function() {
              return _file.default;
            },
          });
          Object.defineProperty(exports, "buildExternalHelpers", {
            enumerable: true,
            get: function() {
              return _buildExternalHelpers.default;
            },
          });
          Object.defineProperty(exports, "resolvePlugin", {
            enumerable: true,
            get: function() {
              return _files.resolvePlugin;
            },
          });
          Object.defineProperty(exports, "resolvePreset", {
            enumerable: true,
            get: function() {
              return _files.resolvePreset;
            },
          });
          Object.defineProperty(exports, "version", {
            enumerable: true,
            get: function() {
              return _package.version;
            },
          });
          Object.defineProperty(exports, "getEnv", {
            enumerable: true,
            get: function() {
              return _environment.getEnv;
            },
          });
          Object.defineProperty(exports, "tokTypes", {
            enumerable: true,
            get: function() {
              return _babelParser().tokTypes;
            },
          });
          Object.defineProperty(exports, "traverse", {
            enumerable: true,
            get: function() {
              return _babelTraverse().default;
            },
          });
          Object.defineProperty(exports, "template", {
            enumerable: true,
            get: function() {
              return _babelTemplate().default;
            },
          });
          Object.defineProperty(exports, "createConfigItem", {
            enumerable: true,
            get: function() {
              return _item.createConfigItem;
            },
          });
          Object.defineProperty(exports, "loadPartialConfig", {
            enumerable: true,
            get: function() {
              return _config.loadPartialConfig;
            },
          });
          Object.defineProperty(exports, "loadOptions", {
            enumerable: true,
            get: function() {
              return _config.loadOptions;
            },
          });
          Object.defineProperty(exports, "transform", {
            enumerable: true,
            get: function() {
              return _transform.transform;
            },
          });
          Object.defineProperty(exports, "transformSync", {
            enumerable: true,
            get: function() {
              return _transform.transformSync;
            },
          });
          Object.defineProperty(exports, "transformAsync", {
            enumerable: true,
            get: function() {
              return _transform.transformAsync;
            },
          });
          Object.defineProperty(exports, "transformFile", {
            enumerable: true,
            get: function() {
              return _transformFile.transformFile;
            },
          });
          Object.defineProperty(exports, "transformFileSync", {
            enumerable: true,
            get: function() {
              return _transformFile.transformFileSync;
            },
          });
          Object.defineProperty(exports, "transformFileAsync", {
            enumerable: true,
            get: function() {
              return _transformFile.transformFileAsync;
            },
          });
          Object.defineProperty(exports, "transformFromAst", {
            enumerable: true,
            get: function() {
              return _transformAst.transformFromAst;
            },
          });
          Object.defineProperty(exports, "transformFromAstSync", {
            enumerable: true,
            get: function() {
              return _transformAst.transformFromAstSync;
            },
          });
          Object.defineProperty(exports, "transformFromAstAsync", {
            enumerable: true,
            get: function() {
              return _transformAst.transformFromAstAsync;
            },
          });
          Object.defineProperty(exports, "parse", {
            enumerable: true,
            get: function() {
              return _parse.parse;
            },
          });
          Object.defineProperty(exports, "parseSync", {
            enumerable: true,
            get: function() {
              return _parse.parseSync;
            },
          });
          Object.defineProperty(exports, "parseAsync", {
            enumerable: true,
            get: function() {
              return _parse.parseAsync;
            },
          });
          exports.types = exports.OptionManager = exports.DEFAULT_EXTENSIONS = void 0;

          var _file = _interopRequireDefault(__webpack_require__(132));

          var _buildExternalHelpers = _interopRequireDefault(
            __webpack_require__(397)
          );

          var _files = __webpack_require__(46);

          var _package = __webpack_require__(398);

          var _environment = __webpack_require__(149);

          function _types() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            _types = function() {
              return data;
            };

            return data;
          }

          Object.defineProperty(exports, "types", {
            enumerable: true,
            get: function() {
              return _types();
            },
          });

          function _babelParser() {
            const data = __webpack_require__(44);

            _babelParser = function() {
              return data;
            };

            return data;
          }

          function _babelTraverse() {
            const data = _interopRequireDefault(__webpack_require__(8));

            _babelTraverse = function() {
              return data;
            };

            return data;
          }

          function _babelTemplate() {
            const data = _interopRequireDefault(__webpack_require__(45));

            _babelTemplate = function() {
              return data;
            };

            return data;
          }

          var _item = __webpack_require__(47);

          var _config = __webpack_require__(30);

          var _transform = __webpack_require__(405);

          var _transformFile = __webpack_require__(447);

          var _transformAst = __webpack_require__(448);

          var _parse = __webpack_require__(449);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const DEFAULT_EXTENSIONS = Object.freeze([
            ".js",
            ".jsx",
            ".es6",
            ".es",
            ".mjs",
          ]);
          exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;

          class OptionManager {
            init(opts) {
              return (0, _config.loadOptions)(opts);
            }
          }

          exports.OptionManager = OptionManager;

          function Plugin(alias) {
            throw new Error(
              `The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`
            );
          }
        },
        /* 73 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(process) {
            if (typeof window === "undefined" && typeof self !== "undefined") {
              var window = self;
            }

            exports.log = log;
            exports.formatArgs = formatArgs;
            exports.save = save;
            exports.load = load;
            exports.useColors = useColors;
            exports.storage = localstorage();
            exports.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ];

            function useColors() {
              if (
                typeof window !== "undefined" &&
                window.process &&
                (window.process.type === "renderer" || window.process.__nwjs)
              ) {
                return true;
              }

              if (
                typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              ) {
                return false;
              }

              return (
                (typeof document !== "undefined" &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                (typeof window !== "undefined" &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                (typeof navigator !== "undefined" &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                  parseInt(RegExp.$1, 10) >= 31) ||
                (typeof navigator !== "undefined" &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }

            function formatArgs(args) {
              var useColors = this.useColors;
              args[0] =
                (useColors ? "%c" : "") +
                this.namespace +
                (useColors ? " %c" : " ") +
                args[0] +
                (useColors ? "%c " : " ") +
                "+" +
                module.exports.humanize(this.diff);
              if (!useColors) return;
              var c = "color: " + this.color;
              args.splice(1, 0, c, "color: inherit");
              var index = 0;
              var lastC = 0;
              args[0].replace(/%[a-zA-Z%]/g, function(match) {
                if ("%%" === match) return;
                index++;

                if ("%c" === match) {
                  lastC = index;
                }
              });
              args.splice(lastC, 0, c);
            }

            function log() {
              return (
                "object" === typeof console &&
                console.log &&
                Function.prototype.apply.call(console.log, console, arguments)
              );
            }

            function save(namespaces) {
              try {
                if (null == namespaces) {
                  exports.storage.removeItem("debug");
                } else {
                  exports.storage.setItem("debug", namespaces);
                }
              } catch (e) {}
            }

            function load() {
              var r;

              try {
                r = exports.storage.getItem("debug");
              } catch (e) {}

              if (!r && typeof process !== "undefined" && "env" in process) {
                r = undefined;
              }

              return r;
            }

            function localstorage() {
              try {
                return localStorage;
              } catch (e) {}
            }

            module.exports = __webpack_require__(315)(exports);
            var formatters = module.exports.formatters;

            formatters.j = function(v) {
              try {
                return JSON.stringify(v);
              } catch (err) {
                return "[UnexpectedJSONParseError]: " + err.message;
              }
            };
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 74 */
        function(module, exports, __webpack_require__) {
          var baseIndexOf = __webpack_require__(114),
            isArrayLike = __webpack_require__(19),
            isString = __webpack_require__(317),
            toInteger = __webpack_require__(75),
            values = __webpack_require__(320);

          var nativeMax = Math.max;

          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection)
              ? collection
              : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;

            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }

            return isString(collection)
              ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
              : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }

          module.exports = includes;
        },
        /* 75 */
        function(module, exports, __webpack_require__) {
          var toFinite = __webpack_require__(318);

          function toInteger(value) {
            var result = toFinite(value),
              remainder = result % 1;
            return result === result
              ? remainder
                ? result - remainder
                : result
              : 0;
          }

          module.exports = toInteger;
        },
        /* 76 */
        function(module, exports) {
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }

            return result;
          }

          module.exports = arrayMap;
        },
        /* 77 */
        function(module, exports, __webpack_require__) {
          var eq = __webpack_require__(24),
            isArrayLike = __webpack_require__(19),
            isIndex = __webpack_require__(57),
            isObject = __webpack_require__(10);

          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }

            var type = typeof index;

            if (
              type == "number"
                ? isArrayLike(object) && isIndex(index, object.length)
                : type == "string" && index in object
            ) {
              return eq(object[index], value);
            }

            return false;
          }

          module.exports = isIterateeCall;
        },
        /* 78 */
        function(module, exports, __webpack_require__) {
          var baseToString = __webpack_require__(323);

          function toString(value) {
            return value == null ? "" : baseToString(value);
          }

          module.exports = toString;
        },
        /* 79 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;
          exports.CodeGenerator = void 0;

          var _sourceMap = _interopRequireDefault(__webpack_require__(335));

          var _printer = _interopRequireDefault(__webpack_require__(342));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          class Generator extends _printer.default {
            constructor(ast, opts = {}, code) {
              const format = normalizeOptions(code, opts);
              const map = opts.sourceMaps
                ? new _sourceMap.default(opts, code)
                : null;
              super(format, map);
              this.ast = ast;
            }

            generate() {
              return super.generate(this.ast);
            }
          }

          function normalizeOptions(code, opts) {
            const format = {
              auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
              auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
              shouldPrintComment: opts.shouldPrintComment,
              retainLines: opts.retainLines,
              retainFunctionParens: opts.retainFunctionParens,
              comments: opts.comments == null || opts.comments,
              compact: opts.compact,
              minified: opts.minified,
              concise: opts.concise,
              jsonCompatibleStrings: opts.jsonCompatibleStrings,
              indent: {
                adjustMultilineComment: true,
                style: "  ",
                base: 0,
              },
              decoratorsBeforeExport: !!opts.decoratorsBeforeExport,
              jsescOption: Object.assign(
                {
                  quotes: "double",
                  wrap: true,
                },
                opts.jsescOption
              ),
            };

            if (format.minified) {
              format.compact = true;

              format.shouldPrintComment =
                format.shouldPrintComment || (() => format.comments);
            } else {
              format.shouldPrintComment =
                format.shouldPrintComment ||
                (value =>
                  format.comments ||
                  value.indexOf("@license") >= 0 ||
                  value.indexOf("@preserve") >= 0);
            }

            if (format.compact === "auto") {
              format.compact = code.length > 500000;

              if (format.compact) {
                console.error(
                  "[BABEL] Note: The code generator has deoptimised the styling of " +
                    `${opts.filename} as it exceeds the max of ${"500KB"}.`
                );
              }
            }

            if (format.compact) {
              format.indent.adjustMultilineComment = false;
            }

            return format;
          }

          class CodeGenerator {
            constructor(ast, opts, code) {
              this._generator = new Generator(ast, opts, code);
            }

            generate() {
              return this._generator.generate();
            }
          }

          exports.CodeGenerator = CodeGenerator;

          function _default(ast, opts, code) {
            const gen = new Generator(ast, opts, code);
            return gen.generate();
          }
        },
        /* 80 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.Identifier = Identifier;
          exports.SpreadElement = exports.RestElement = RestElement;
          exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
          exports.ObjectMethod = ObjectMethod;
          exports.ObjectProperty = ObjectProperty;
          exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
          exports.RegExpLiteral = RegExpLiteral;
          exports.BooleanLiteral = BooleanLiteral;
          exports.NullLiteral = NullLiteral;
          exports.NumericLiteral = NumericLiteral;
          exports.StringLiteral = StringLiteral;
          exports.BigIntLiteral = BigIntLiteral;
          exports.PipelineTopicExpression = PipelineTopicExpression;
          exports.PipelineBareFunction = PipelineBareFunction;
          exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _jsesc() {
            const data = _interopRequireDefault(__webpack_require__(354));

            _jsesc = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function Identifier(node) {
            this.exactSource(node.loc, () => {
              this.word(node.name);
            });
          }

          function RestElement(node) {
            this.token("...");
            this.print(node.argument, node);
          }

          function ObjectExpression(node) {
            const props = node.properties;
            this.token("{");
            this.printInnerComments(node);

            if (props.length) {
              this.space();
              this.printList(props, node, {
                indent: true,
                statement: true,
              });
              this.space();
            }

            this.token("}");
          }

          function ObjectMethod(node) {
            this.printJoin(node.decorators, node);

            this._methodHead(node);

            this.space();
            this.print(node.body, node);
          }

          function ObjectProperty(node) {
            this.printJoin(node.decorators, node);

            if (node.computed) {
              this.token("[");
              this.print(node.key, node);
              this.token("]");
            } else {
              if (
                t().isAssignmentPattern(node.value) &&
                t().isIdentifier(node.key) &&
                node.key.name === node.value.left.name
              ) {
                this.print(node.value, node);
                return;
              }

              this.print(node.key, node);

              if (
                node.shorthand &&
                t().isIdentifier(node.key) &&
                t().isIdentifier(node.value) &&
                node.key.name === node.value.name
              ) {
                return;
              }
            }

            this.token(":");
            this.space();
            this.print(node.value, node);
          }

          function ArrayExpression(node) {
            const elems = node.elements;
            const len = elems.length;
            this.token("[");
            this.printInnerComments(node);

            for (let i = 0; i < elems.length; i++) {
              const elem = elems[i];

              if (elem) {
                if (i > 0) this.space();
                this.print(elem, node);
                if (i < len - 1) this.token(",");
              } else {
                this.token(",");
              }
            }

            this.token("]");
          }

          function RegExpLiteral(node) {
            this.word(`/${node.pattern}/${node.flags}`);
          }

          function BooleanLiteral(node) {
            this.word(node.value ? "true" : "false");
          }

          function NullLiteral() {
            this.word("null");
          }

          function NumericLiteral(node) {
            const raw = this.getPossibleRaw(node);
            const value = node.value + "";

            if (raw == null) {
              this.number(value);
            } else if (this.format.minified) {
              this.number(raw.length < value.length ? raw : value);
            } else {
              this.number(raw);
            }
          }

          function StringLiteral(node) {
            const raw = this.getPossibleRaw(node);

            if (!this.format.minified && raw != null) {
              this.token(raw);
              return;
            }

            const opts = this.format.jsescOption;

            if (this.format.jsonCompatibleStrings) {
              opts.json = true;
            }

            const val = (0, _jsesc().default)(node.value, opts);
            return this.token(val);
          }

          function BigIntLiteral(node) {
            const raw = this.getPossibleRaw(node);

            if (!this.format.minified && raw != null) {
              this.token(raw);
              return;
            }

            this.token(node.value);
          }

          function PipelineTopicExpression(node) {
            this.print(node.expression, node);
          }

          function PipelineBareFunction(node) {
            this.print(node.callee, node);
          }

          function PipelinePrimaryTopicReference() {
            this.token("#");
          }
        },
        /* 81 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.merge = merge;
          exports.validate = validate;
          exports.normalizeReplacements = normalizeReplacements;

          function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null) return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;

            for (i = 0; i < sourceKeys.length; i++) {
              key = sourceKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              target[key] = source[key];
            }

            return target;
          }

          function merge(a, b) {
            const {
              placeholderWhitelist = a.placeholderWhitelist,
              placeholderPattern = a.placeholderPattern,
              preserveComments = a.preserveComments,
            } = b;
            return {
              parser: Object.assign({}, a.parser, b.parser),
              placeholderWhitelist,
              placeholderPattern,
              preserveComments,
            };
          }

          function validate(opts) {
            if (opts != null && typeof opts !== "object") {
              throw new Error("Unknown template options.");
            }

            const _ref = opts || {},
              {
                placeholderWhitelist,
                placeholderPattern,
                preserveComments,
              } = _ref,
              parser = _objectWithoutPropertiesLoose(_ref, [
                "placeholderWhitelist",
                "placeholderPattern",
                "preserveComments",
              ]);

            if (
              placeholderWhitelist != null &&
              !(placeholderWhitelist instanceof Set)
            ) {
              throw new Error(
                "'.placeholderWhitelist' must be a Set, null, or undefined"
              );
            }

            if (
              placeholderPattern != null &&
              !(placeholderPattern instanceof RegExp) &&
              placeholderPattern !== false
            ) {
              throw new Error(
                "'.placeholderPattern' must be a RegExp, false, null, or undefined"
              );
            }

            if (
              preserveComments != null &&
              typeof preserveComments !== "boolean"
            ) {
              throw new Error(
                "'.preserveComments' must be a boolean, null, or undefined"
              );
            }

            return {
              parser,
              placeholderWhitelist: placeholderWhitelist || undefined,
              placeholderPattern:
                placeholderPattern == null ? undefined : placeholderPattern,
              preserveComments:
                preserveComments == null ? false : preserveComments,
            };
          }

          function normalizeReplacements(replacements) {
            if (Array.isArray(replacements)) {
              return replacements.reduce((acc, replacement, i) => {
                acc["$" + i] = replacement;
                return acc;
              }, {});
            } else if (
              typeof replacements === "object" ||
              replacements == null
            ) {
              return replacements || undefined;
            }

            throw new Error(
              "Template replacements must be an array, object, null, or undefined"
            );
          }
        },
        /* 82 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          class Plugin {
            constructor(plugin, options, key) {
              this.key = plugin.name || key;
              this.manipulateOptions = plugin.manipulateOptions;
              this.post = plugin.post;
              this.pre = plugin.pre;
              this.visitor = plugin.visitor || {};
              this.parserOverride = plugin.parserOverride;
              this.generatorOverride = plugin.generatorOverride;
              this.options = options;
            }
          }

          exports.default = Plugin;
        },
        /* 83 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.validate = validate;

          var _plugin = _interopRequireDefault(__webpack_require__(82));

          var _removed = _interopRequireDefault(__webpack_require__(400));

          var _optionAssertions = __webpack_require__(153);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const ROOT_VALIDATORS = {
            cwd: _optionAssertions.assertString,
            root: _optionAssertions.assertString,
            rootMode: _optionAssertions.assertRootMode,
            configFile: _optionAssertions.assertConfigFileSearch,
            caller: _optionAssertions.assertCallerMetadata,
            filename: _optionAssertions.assertString,
            filenameRelative: _optionAssertions.assertString,
            code: _optionAssertions.assertBoolean,
            ast: _optionAssertions.assertBoolean,
            envName: _optionAssertions.assertString,
          };
          const BABELRC_VALIDATORS = {
            babelrc: _optionAssertions.assertBoolean,
            babelrcRoots: _optionAssertions.assertBabelrcSearch,
          };
          const NONPRESET_VALIDATORS = {
            extends: _optionAssertions.assertString,
            ignore: _optionAssertions.assertIgnoreList,
            only: _optionAssertions.assertIgnoreList,
          };
          const COMMON_VALIDATORS = {
            inputSourceMap: _optionAssertions.assertInputSourceMap,
            presets: _optionAssertions.assertPluginList,
            plugins: _optionAssertions.assertPluginList,
            passPerPreset: _optionAssertions.assertBoolean,
            env: assertEnvSet,
            overrides: assertOverridesList,
            test: _optionAssertions.assertConfigApplicableTest,
            include: _optionAssertions.assertConfigApplicableTest,
            exclude: _optionAssertions.assertConfigApplicableTest,
            retainLines: _optionAssertions.assertBoolean,
            comments: _optionAssertions.assertBoolean,
            shouldPrintComment: _optionAssertions.assertFunction,
            compact: _optionAssertions.assertCompact,
            minified: _optionAssertions.assertBoolean,
            auxiliaryCommentBefore: _optionAssertions.assertString,
            auxiliaryCommentAfter: _optionAssertions.assertString,
            sourceType: _optionAssertions.assertSourceType,
            wrapPluginVisitorMethod: _optionAssertions.assertFunction,
            highlightCode: _optionAssertions.assertBoolean,
            sourceMaps: _optionAssertions.assertSourceMaps,
            sourceMap: _optionAssertions.assertSourceMaps,
            sourceFileName: _optionAssertions.assertString,
            sourceRoot: _optionAssertions.assertString,
            getModuleId: _optionAssertions.assertFunction,
            moduleRoot: _optionAssertions.assertString,
            moduleIds: _optionAssertions.assertBoolean,
            moduleId: _optionAssertions.assertString,
            parserOpts: _optionAssertions.assertObject,
            generatorOpts: _optionAssertions.assertObject,
          };

          function getSource(loc) {
            return loc.type === "root" ? loc.source : getSource(loc.parent);
          }

          function validate(type, opts) {
            return validateNested(
              {
                type: "root",
                source: type,
              },
              opts
            );
          }

          function validateNested(loc, opts) {
            const type = getSource(loc);
            assertNoDuplicateSourcemap(opts);
            Object.keys(opts).forEach(key => {
              const optLoc = {
                type: "option",
                name: key,
                parent: loc,
              };

              if (type === "preset" && NONPRESET_VALIDATORS[key]) {
                throw new Error(
                  `${(0, _optionAssertions.msg)(
                    optLoc
                  )} is not allowed in preset options`
                );
              }

              if (type !== "arguments" && ROOT_VALIDATORS[key]) {
                throw new Error(
                  `${(0, _optionAssertions.msg)(
                    optLoc
                  )} is only allowed in root programmatic options`
                );
              }

              if (
                type !== "arguments" &&
                type !== "configfile" &&
                BABELRC_VALIDATORS[key]
              ) {
                if (type === "babelrcfile" || type === "extendsfile") {
                  throw new Error(
                    `${(0, _optionAssertions.msg)(
                      optLoc
                    )} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, ` +
                      `or babel.config.js/config file options`
                  );
                }

                throw new Error(
                  `${(0, _optionAssertions.msg)(
                    optLoc
                  )} is only allowed in root programmatic options, or babel.config.js/config file options`
                );
              }

              const validator =
                COMMON_VALIDATORS[key] ||
                NONPRESET_VALIDATORS[key] ||
                BABELRC_VALIDATORS[key] ||
                ROOT_VALIDATORS[key] ||
                throwUnknownError;
              validator(optLoc, opts[key]);
            });
            return opts;
          }

          function throwUnknownError(loc) {
            const key = loc.name;

            if (_removed.default[key]) {
              const { message, version = 5 } = _removed.default[key];
              throw new ReferenceError(
                `Using removed Babel ${version} option: ${(0,
                _optionAssertions.msg)(loc)} - ${message}`
              );
            } else {
              const unknownOptErr = `Unknown option: ${(0,
              _optionAssertions.msg)(
                loc
              )}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`;
              throw new ReferenceError(unknownOptErr);
            }
          }

          function has(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
          }

          function assertNoDuplicateSourcemap(opts) {
            if (has(opts, "sourceMap") && has(opts, "sourceMaps")) {
              throw new Error(
                ".sourceMap is an alias for .sourceMaps, cannot use both"
              );
            }
          }

          function assertEnvSet(loc, value) {
            if (loc.parent.type === "env") {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  loc
                )} is not allowed inside of another .env block`
              );
            }

            const parent = loc.parent;
            const obj = (0, _optionAssertions.assertObject)(loc, value);

            if (obj) {
              for (const envName of Object.keys(obj)) {
                const env = (0, _optionAssertions.assertObject)(
                  (0, _optionAssertions.access)(loc, envName),
                  obj[envName]
                );
                if (!env) continue;
                const envLoc = {
                  type: "env",
                  name: envName,
                  parent,
                };
                validateNested(envLoc, env);
              }
            }

            return obj;
          }

          function assertOverridesList(loc, value) {
            if (loc.parent.type === "env") {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  loc
                )} is not allowed inside an .env block`
              );
            }

            if (loc.parent.type === "overrides") {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  loc
                )} is not allowed inside an .overrides block`
              );
            }

            const parent = loc.parent;
            const arr = (0, _optionAssertions.assertArray)(loc, value);

            if (arr) {
              for (const [index, item] of arr.entries()) {
                const objLoc = (0, _optionAssertions.access)(loc, index);
                const env = (0, _optionAssertions.assertObject)(objLoc, item);
                if (!env)
                  throw new Error(
                    `${(0, _optionAssertions.msg)(objLoc)} must be an object`
                  );
                const overridesLoc = {
                  type: "overrides",
                  index,
                  parent,
                };
                validateNested(overridesLoc, env);
              }
            }

            return arr;
          }
        },
        /* 84 */
        function(module, exports, __webpack_require__) {
          var isArray = __webpack_require__(4),
            isSymbol = __webpack_require__(28);

          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/;

          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }

            var type = typeof value;

            if (
              type == "number" ||
              type == "symbol" ||
              type == "boolean" ||
              value == null ||
              isSymbol(value)
            ) {
              return true;
            }

            return (
              reIsPlainProp.test(value) ||
              !reIsDeepProp.test(value) ||
              (object != null && value in Object(object))
            );
          }

          module.exports = isKey;
        },
        /* 85 */
        function(module) {
          module.exports = {
            "es6.array.copy-within": {
              chrome: "45",
              edge: "12",
              firefox: "32",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "32",
              electron: "0.35",
              android: "45",
            },
            "es6.array.every": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.fill": {
              chrome: "45",
              edge: "12",
              firefox: "31",
              safari: "7.1",
              node: "4",
              ios: "8",
              opera: "32",
              electron: "0.35",
              android: "45",
            },
            "es6.array.filter": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.find": {
              chrome: "45",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "4",
              ios: "8",
              opera: "32",
              electron: "0.35",
              android: "45",
            },
            "es6.array.find-index": {
              chrome: "45",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "4",
              ios: "8",
              opera: "32",
              electron: "0.35",
              android: "45",
            },
            "es6.array.for-each": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.from": {
              chrome: "51",
              edge: "15",
              firefox: "36",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es7.array.includes": {
              chrome: "47",
              edge: "14",
              firefox: "43",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "34",
              electron: "0.36",
              android: "47",
            },
            "es6.array.index-of": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.is-array": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "4",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.iterator": {
              chrome: "38",
              edge: "12",
              firefox: "28",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.array.last-index-of": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.map": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.of": {
              chrome: "45",
              edge: "12",
              firefox: "25",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "32",
              electron: "0.35",
              android: "45",
            },
            "es6.array.reduce": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "3",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.reduce-right": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "3",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.some": {
              chrome: "5",
              opera: "10.10",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.array.sort": {
              chrome: "63",
              opera: "50",
              edge: "12",
              firefox: "5",
              safari: "10.1",
              node: "10.13",
              ie: "9",
              ios: "10.3",
              electron: "3.1",
              android: "63",
            },
            "es6.array.species": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.date.now": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "2",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.date.to-iso-string": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "3.5",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.date.to-json": {
              chrome: "5",
              opera: "12.10",
              edge: "12",
              firefox: "4",
              safari: "10",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "10",
              electron: "1.1",
            },
            "es6.date.to-primitive": {
              chrome: "47",
              edge: "15",
              firefox: "44",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "34",
              electron: "0.36",
              android: "47",
            },
            "es6.date.to-string": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "2",
              safari: "3.1",
              node: "0.12",
              ie: "10",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.function.bind": {
              chrome: "7",
              opera: "12",
              edge: "12",
              firefox: "4",
              safari: "5.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "7",
              phantom: "2",
            },
            "es6.function.has-instance": {
              chrome: "51",
              edge: "15",
              firefox: "50",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.function.name": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "2",
              safari: "4",
              node: "0.12",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.map": {
              chrome: "51",
              edge: "15",
              firefox: "53",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.math.acosh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.asinh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.atanh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.cbrt": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.clz32": {
              chrome: "38",
              edge: "12",
              firefox: "31",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.cosh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.expm1": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.fround": {
              chrome: "38",
              edge: "12",
              firefox: "26",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.hypot": {
              chrome: "38",
              edge: "12",
              firefox: "27",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.imul": {
              chrome: "30",
              edge: "12",
              firefox: "23",
              safari: "7",
              node: "0.12",
              android: "4.4",
              ios: "7",
              opera: "17",
              electron: "0.2",
            },
            "es6.math.log1p": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.log10": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.log2": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.sign": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.sinh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.tanh": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.math.trunc": {
              chrome: "38",
              edge: "12",
              firefox: "25",
              safari: "7.1",
              node: "0.12",
              ios: "8",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.number.constructor": {
              chrome: "41",
              edge: "12",
              firefox: "36",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.number.epsilon": {
              chrome: "34",
              edge: "12",
              firefox: "25",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.is-finite": {
              chrome: "19",
              edge: "12",
              firefox: "16",
              safari: "9",
              node: "0.12",
              android: "4.1",
              ios: "9",
              electron: "0.2",
            },
            "es6.number.is-integer": {
              chrome: "34",
              edge: "12",
              firefox: "16",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.is-nan": {
              chrome: "19",
              edge: "12",
              firefox: "15",
              safari: "9",
              node: "0.12",
              android: "4.1",
              ios: "9",
              electron: "0.2",
            },
            "es6.number.is-safe-integer": {
              chrome: "34",
              edge: "12",
              firefox: "32",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.max-safe-integer": {
              chrome: "34",
              edge: "12",
              firefox: "31",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.min-safe-integer": {
              chrome: "34",
              edge: "12",
              firefox: "31",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.parse-float": {
              chrome: "34",
              edge: "12",
              firefox: "25",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.number.parse-int": {
              chrome: "34",
              edge: "12",
              firefox: "25",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es6.object.assign": {
              chrome: "49",
              edge: "13",
              firefox: "36",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.object.create": {
              chrome: "5",
              opera: "12",
              edge: "12",
              firefox: "4",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es7.object.define-getter": {
              chrome: "62",
              edge: "16",
              firefox: "48",
              safari: "9",
              node: "8.10",
              ios: "9",
              opera: "49",
              electron: "3.1",
              android: "62",
            },
            "es7.object.define-setter": {
              chrome: "62",
              edge: "16",
              firefox: "48",
              safari: "9",
              node: "8.10",
              ios: "9",
              opera: "49",
              electron: "3.1",
              android: "62",
            },
            "es6.object.define-property": {
              chrome: "5",
              opera: "12",
              edge: "12",
              firefox: "4",
              safari: "5.1",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.object.define-properties": {
              chrome: "5",
              opera: "12",
              edge: "12",
              firefox: "4",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es7.object.entries": {
              chrome: "54",
              edge: "14",
              firefox: "47",
              safari: "10.1",
              node: "7",
              ios: "10.3",
              opera: "41",
              electron: "1.5",
              android: "54",
            },
            "es6.object.freeze": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.get-own-property-descriptor": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es7.object.get-own-property-descriptors": {
              chrome: "54",
              edge: "15",
              firefox: "50",
              safari: "10.1",
              node: "7",
              ios: "10.3",
              opera: "41",
              electron: "1.5",
              android: "54",
            },
            "es6.object.get-own-property-names": {
              chrome: "40",
              edge: "12",
              firefox: "33",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "27",
              electron: "0.21",
              android: "40",
            },
            "es6.object.get-prototype-of": {
              chrome: "44",
              edge: "12",
              firefox: "3.5",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es7.object.lookup-getter": {
              chrome: "62",
              firefox: "36",
              safari: "9",
              node: "8.10",
              ios: "9",
              opera: "49",
              electron: "3.1",
              android: "62",
            },
            "es7.object.lookup-setter": {
              chrome: "62",
              firefox: "36",
              safari: "9",
              node: "8.10",
              ios: "9",
              opera: "49",
              electron: "3.1",
              android: "62",
            },
            "es6.object.prevent-extensions": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.is": {
              chrome: "19",
              edge: "12",
              firefox: "22",
              safari: "9",
              node: "0.12",
              android: "4.1",
              ios: "9",
              electron: "0.2",
            },
            "es6.object.is-frozen": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.is-sealed": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.is-extensible": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.keys": {
              chrome: "40",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "27",
              electron: "0.21",
              android: "40",
            },
            "es6.object.seal": {
              chrome: "44",
              edge: "12",
              firefox: "35",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "es6.object.set-prototype-of": {
              chrome: "34",
              edge: "12",
              firefox: "31",
              safari: "9",
              node: "0.12",
              ie: "11",
              ios: "9",
              opera: "21",
              electron: "0.2",
              android: "34",
            },
            "es7.object.values": {
              chrome: "54",
              edge: "14",
              firefox: "47",
              safari: "10.1",
              node: "7",
              ios: "10.3",
              opera: "41",
              electron: "1.5",
              android: "54",
            },
            "es6.promise": {
              chrome: "51",
              edge: "14",
              firefox: "45",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es7.promise.finally": {
              chrome: "63",
              edge: "18",
              firefox: "58",
              safari: "11.1",
              node: "10.13",
              ios: "11.3",
              opera: "50",
              electron: "3.1",
              android: "63",
            },
            "es6.reflect.apply": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.construct": {
              chrome: "49",
              edge: "13",
              firefox: "44",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.define-property": {
              chrome: "49",
              edge: "13",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.delete-property": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.get": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.get-own-property-descriptor": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.get-prototype-of": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.has": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.is-extensible": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.own-keys": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.prevent-extensions": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.set": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.reflect.set-prototype-of": {
              chrome: "49",
              edge: "12",
              firefox: "42",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.regexp.constructor": {
              chrome: "50",
              firefox: "40",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.regexp.flags": {
              chrome: "49",
              firefox: "37",
              safari: "9",
              node: "6",
              ios: "9",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "es6.regexp.match": {
              chrome: "50",
              firefox: "49",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.regexp.replace": {
              chrome: "50",
              firefox: "49",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.regexp.split": {
              chrome: "50",
              firefox: "49",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.regexp.search": {
              chrome: "50",
              firefox: "49",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.regexp.to-string": {
              chrome: "50",
              firefox: "39",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "es6.set": {
              chrome: "51",
              edge: "15",
              firefox: "53",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.symbol": {
              chrome: "51",
              firefox: "51",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es7.symbol.async-iterator": {
              chrome: "63",
              firefox: "57",
              safari: "12",
              node: "10.13",
              ios: "12",
              opera: "50",
              electron: "3.1",
              android: "63",
            },
            "es6.string.anchor": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.big": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.blink": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.bold": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.code-point-at": {
              chrome: "41",
              edge: "12",
              firefox: "29",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.ends-with": {
              chrome: "41",
              edge: "12",
              firefox: "29",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.fixed": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.fontcolor": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.fontsize": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.from-code-point": {
              chrome: "41",
              edge: "12",
              firefox: "29",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.includes": {
              chrome: "41",
              edge: "12",
              firefox: "40",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.italics": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.iterator": {
              chrome: "38",
              edge: "12",
              firefox: "36",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "es6.string.link": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es7.string.pad-start": {
              chrome: "57",
              edge: "15",
              firefox: "48",
              safari: "10",
              node: "8",
              ios: "10",
              opera: "44",
              electron: "1.7",
              android: "57",
            },
            "es7.string.pad-end": {
              chrome: "57",
              edge: "15",
              firefox: "48",
              safari: "10",
              node: "8",
              ios: "10",
              opera: "44",
              electron: "1.7",
              android: "57",
            },
            "es6.string.raw": {
              chrome: "41",
              edge: "12",
              firefox: "34",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.repeat": {
              chrome: "41",
              edge: "12",
              firefox: "24",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.small": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.starts-with": {
              chrome: "41",
              edge: "12",
              firefox: "29",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "es6.string.strike": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.sub": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.sup": {
              chrome: "5",
              edge: "12",
              firefox: "17",
              safari: "6",
              node: "0.12",
              android: "4.0",
              ios: "7",
              phantom: "2",
              electron: "1.1",
            },
            "es6.string.trim": {
              chrome: "5",
              opera: "10.50",
              edge: "12",
              firefox: "3.5",
              safari: "4",
              node: "0.10",
              ie: "9",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.typed.array-buffer": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.data-view": {
              chrome: "5",
              opera: "12",
              edge: "12",
              firefox: "15",
              safari: "5.1",
              node: "0.12",
              ie: "10",
              android: "4.0",
              ios: "6",
              phantom: "2",
              electron: "1.1",
            },
            "es6.typed.int8-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.uint8-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.uint8-clamped-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.int16-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.uint16-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.int32-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.uint32-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.float32-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.typed.float64-array": {
              chrome: "51",
              edge: "13",
              firefox: "48",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.weak-map": {
              chrome: "51",
              edge: "15",
              firefox: "53",
              safari: "9",
              node: "6.5",
              ios: "9",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es6.weak-set": {
              chrome: "51",
              edge: "15",
              firefox: "53",
              safari: "9",
              node: "6.5",
              ios: "9",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "es7.array.flat-map": {
              chrome: "69",
              firefox: "62",
              safari: "12",
              ios: "12",
              opera: "56",
              electron: "4",
              android: "69",
            },
          };
        },
        /* 86 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = buildMatchMemberExpression;

          var _matchesPattern = _interopRequireDefault(__webpack_require__(87));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function buildMatchMemberExpression(match, allowPartial) {
            const parts = match.split(".");
            return member =>
              (0, _matchesPattern.default)(member, parts, allowPartial);
          }
        },
        /* 87 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = matchesPattern;

          var _generated = __webpack_require__(1);

          function matchesPattern(member, match, allowPartial) {
            if (!(0, _generated.isMemberExpression)(member)) return false;
            const parts = Array.isArray(match) ? match : match.split(".");
            const nodes = [];
            let node;

            for (
              node = member;
              (0, _generated.isMemberExpression)(node);
              node = node.object
            ) {
              nodes.push(node.property);
            }

            nodes.push(node);
            if (nodes.length < parts.length) return false;
            if (!allowPartial && nodes.length > parts.length) return false;

            for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
              const node = nodes[j];
              let value;

              if ((0, _generated.isIdentifier)(node)) {
                value = node.name;
              } else if ((0, _generated.isStringLiteral)(node)) {
                value = node.value;
              } else {
                return false;
              }

              if (parts[i] !== value) return false;
            }

            return true;
          }
        },
        /* 88 */
        function(module, exports, __webpack_require__) {
          var baseClone = __webpack_require__(89);

          var CLONE_SYMBOLS_FLAG = 4;

          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }

          module.exports = clone;
        },
        /* 89 */
        function(module, exports, __webpack_require__) {
          var Stack = __webpack_require__(52),
            arrayEach = __webpack_require__(206),
            assignValue = __webpack_require__(93),
            baseAssign = __webpack_require__(207),
            baseAssignIn = __webpack_require__(214),
            cloneBuffer = __webpack_require__(217),
            copyArray = __webpack_require__(218),
            copySymbols = __webpack_require__(219),
            copySymbolsIn = __webpack_require__(221),
            getAllKeys = __webpack_require__(101),
            getAllKeysIn = __webpack_require__(222),
            getTag = __webpack_require__(38),
            initCloneArray = __webpack_require__(226),
            initCloneByTag = __webpack_require__(227),
            initCloneObject = __webpack_require__(232),
            isArray = __webpack_require__(4),
            isBuffer = __webpack_require__(56),
            isMap = __webpack_require__(234),
            isObject = __webpack_require__(10),
            isSet = __webpack_require__(236),
            keys = __webpack_require__(18);

          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            objectTag = "[object Object]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]",
            weakMapTag = "[object WeakMap]";
          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
            arrayBufferTag
          ] = cloneableTags[dataViewTag] = cloneableTags[
            boolTag
          ] = cloneableTags[dateTag] = cloneableTags[
            float32Tag
          ] = cloneableTags[float64Tag] = cloneableTags[
            int8Tag
          ] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[
            mapTag
          ] = cloneableTags[numberTag] = cloneableTags[
            objectTag
          ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
            stringTag
          ] = cloneableTags[symbolTag] = cloneableTags[
            uint8Tag
          ] = cloneableTags[uint8ClampedTag] = cloneableTags[
            uint16Tag
          ] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
            weakMapTag
          ] = false;

          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;

            if (customizer) {
              result = object
                ? customizer(value, key, object, stack)
                : customizer(value);
            }

            if (result !== undefined) {
              return result;
            }

            if (!isObject(value)) {
              return value;
            }

            var isArr = isArray(value);

            if (isArr) {
              result = initCloneArray(value);

              if (!isDeep) {
                return copyArray(value, result);
              }
            } else {
              var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;

              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }

              if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                result = isFlat || isFunc ? {} : initCloneObject(value);

                if (!isDeep) {
                  return isFlat
                    ? copySymbolsIn(value, baseAssignIn(result, value))
                    : copySymbols(value, baseAssign(result, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }

                result = initCloneByTag(value, tag, isDeep);
              }
            }

            stack || (stack = new Stack());
            var stacked = stack.get(value);

            if (stacked) {
              return stacked;
            }

            stack.set(value, result);

            if (isSet(value)) {
              value.forEach(function(subValue) {
                result.add(
                  baseClone(
                    subValue,
                    bitmask,
                    customizer,
                    subValue,
                    value,
                    stack
                  )
                );
              });
              return result;
            }

            if (isMap(value)) {
              value.forEach(function(subValue, key) {
                result.set(
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                );
              });
              return result;
            }

            var keysFunc = isFull
              ? isFlat
                ? getAllKeysIn
                : getAllKeys
              : isFlat
              ? keysIn
              : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
              if (props) {
                key = subValue;
                subValue = value[key];
              }

              assignValue(
                result,
                key,
                baseClone(subValue, bitmask, customizer, key, value, stack)
              );
            });
            return result;
          }

          module.exports = baseClone;
        },
        /* 90 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isObject = __webpack_require__(10);

          var asyncTag = "[object AsyncFunction]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            proxyTag = "[object Proxy]";

          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }

            var tag = baseGetTag(value);
            return (
              tag == funcTag ||
              tag == genTag ||
              tag == asyncTag ||
              tag == proxyTag
            );
          }

          module.exports = isFunction;
        },
        /* 91 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(global) {
            var freeGlobal =
              typeof global == "object" &&
              global &&
              global.Object === Object &&
              global;
            module.exports = freeGlobal;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(23)));
        },
        /* 92 */
        function(module, exports) {
          var funcProto = Function.prototype;
          var funcToString = funcProto.toString;

          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {}

              try {
                return func + "";
              } catch (e) {}
            }

            return "";
          }

          module.exports = toSource;
        },
        /* 93 */
        function(module, exports, __webpack_require__) {
          var baseAssignValue = __webpack_require__(94),
            eq = __webpack_require__(24);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function assignValue(object, key, value) {
            var objValue = object[key];

            if (
              !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))
            ) {
              baseAssignValue(object, key, value);
            }
          }

          module.exports = assignValue;
        },
        /* 94 */
        function(module, exports, __webpack_require__) {
          var defineProperty = __webpack_require__(95);

          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true,
              });
            } else {
              object[key] = value;
            }
          }

          module.exports = baseAssignValue;
        },
        /* 95 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12);

          var defineProperty = (function() {
            try {
              var func = getNative(Object, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {}
          })();

          module.exports = defineProperty;
        },
        /* 96 */
        function(module, exports, __webpack_require__) {
          var baseTimes = __webpack_require__(208),
            isArguments = __webpack_require__(55),
            isArray = __webpack_require__(4),
            isBuffer = __webpack_require__(56),
            isIndex = __webpack_require__(57),
            isTypedArray = __webpack_require__(97);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

            for (var key in value) {
              if (
                (inherited || hasOwnProperty.call(value, key)) &&
                !(
                  skipIndexes &&
                  (key == "length" ||
                    (isBuff && (key == "offset" || key == "parent")) ||
                    (isType &&
                      (key == "buffer" ||
                        key == "byteLength" ||
                        key == "byteOffset")) ||
                    isIndex(key, length))
                )
              ) {
                result.push(key);
              }
            }

            return result;
          }

          module.exports = arrayLikeKeys;
        },
        /* 97 */
        function(module, exports, __webpack_require__) {
          var baseIsTypedArray = __webpack_require__(211),
            baseUnary = __webpack_require__(25),
            nodeUtil = __webpack_require__(37);

          var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
          var isTypedArray = nodeIsTypedArray
            ? baseUnary(nodeIsTypedArray)
            : baseIsTypedArray;
          module.exports = isTypedArray;
        },
        /* 98 */
        function(module, exports) {
          function overArg(func, transform) {
            return function(arg) {
              return func(transform(arg));
            };
          }

          module.exports = overArg;
        },
        /* 99 */
        function(module, exports) {
          function stubArray() {
            return [];
          }

          module.exports = stubArray;
        },
        /* 100 */
        function(module, exports, __webpack_require__) {
          var arrayPush = __webpack_require__(62),
            getPrototype = __webpack_require__(63),
            getSymbols = __webpack_require__(61),
            stubArray = __webpack_require__(99);

          var nativeGetSymbols = Object.getOwnPropertySymbols;
          var getSymbolsIn = !nativeGetSymbols
            ? stubArray
            : function(object) {
                var result = [];

                while (object) {
                  arrayPush(result, getSymbols(object));
                  object = getPrototype(object);
                }

                return result;
              };
          module.exports = getSymbolsIn;
        },
        /* 101 */
        function(module, exports, __webpack_require__) {
          var baseGetAllKeys = __webpack_require__(102),
            getSymbols = __webpack_require__(61),
            keys = __webpack_require__(18);

          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }

          module.exports = getAllKeys;
        },
        /* 102 */
        function(module, exports, __webpack_require__) {
          var arrayPush = __webpack_require__(62),
            isArray = __webpack_require__(4);

          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object)
              ? result
              : arrayPush(result, symbolsFunc(object));
          }

          module.exports = baseGetAllKeys;
        },
        /* 103 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12),
            root = __webpack_require__(5);

          var Set = getNative(root, "Set");
          module.exports = Set;
        },
        /* 104 */
        function(module, exports, __webpack_require__) {
          var root = __webpack_require__(5);

          var Uint8Array = root.Uint8Array;
          module.exports = Uint8Array;
        },
        /* 105 */
        function(module, exports, __webpack_require__) {
          (function() {
            "use strict";

            exports.ast = __webpack_require__(239);
            exports.code = __webpack_require__(106);
            exports.keyword = __webpack_require__(240);
          })();
        },
        /* 106 */
        function(module, exports) {
          (function() {
            "use strict";

            var ES6Regex,
              ES5Regex,
              NON_ASCII_WHITESPACES,
              IDENTIFIER_START,
              IDENTIFIER_PART,
              ch;
            ES5Regex = {
              NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
              NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
            };
            ES6Regex = {
              NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
              NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/,
            };

            function isDecimalDigit(ch) {
              return 0x30 <= ch && ch <= 0x39;
            }

            function isHexDigit(ch) {
              return (
                (0x30 <= ch && ch <= 0x39) ||
                (0x61 <= ch && ch <= 0x66) ||
                (0x41 <= ch && ch <= 0x46)
              );
            }

            function isOctalDigit(ch) {
              return ch >= 0x30 && ch <= 0x37;
            }

            NON_ASCII_WHITESPACES = [
              0x1680,
              0x180e,
              0x2000,
              0x2001,
              0x2002,
              0x2003,
              0x2004,
              0x2005,
              0x2006,
              0x2007,
              0x2008,
              0x2009,
              0x200a,
              0x202f,
              0x205f,
              0x3000,
              0xfeff,
            ];

            function isWhiteSpace(ch) {
              return (
                ch === 0x20 ||
                ch === 0x09 ||
                ch === 0x0b ||
                ch === 0x0c ||
                ch === 0xa0 ||
                (ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0)
              );
            }

            function isLineTerminator(ch) {
              return (
                ch === 0x0a || ch === 0x0d || ch === 0x2028 || ch === 0x2029
              );
            }

            function fromCodePoint(cp) {
              if (cp <= 0xffff) {
                return String.fromCharCode(cp);
              }

              var cu1 = String.fromCharCode(
                Math.floor((cp - 0x10000) / 0x400) + 0xd800
              );
              var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xdc00);
              return cu1 + cu2;
            }

            IDENTIFIER_START = new Array(0x80);

            for (ch = 0; ch < 0x80; ++ch) {
              IDENTIFIER_START[ch] =
                (ch >= 0x61 && ch <= 0x7a) ||
                (ch >= 0x41 && ch <= 0x5a) ||
                ch === 0x24 ||
                ch === 0x5f;
            }

            IDENTIFIER_PART = new Array(0x80);

            for (ch = 0; ch < 0x80; ++ch) {
              IDENTIFIER_PART[ch] =
                (ch >= 0x61 && ch <= 0x7a) ||
                (ch >= 0x41 && ch <= 0x5a) ||
                (ch >= 0x30 && ch <= 0x39) ||
                ch === 0x24 ||
                ch === 0x5f;
            }

            function isIdentifierStartES5(ch) {
              return ch < 0x80
                ? IDENTIFIER_START[ch]
                : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
            }

            function isIdentifierPartES5(ch) {
              return ch < 0x80
                ? IDENTIFIER_PART[ch]
                : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
            }

            function isIdentifierStartES6(ch) {
              return ch < 0x80
                ? IDENTIFIER_START[ch]
                : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
            }

            function isIdentifierPartES6(ch) {
              return ch < 0x80
                ? IDENTIFIER_PART[ch]
                : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
            }

            module.exports = {
              isDecimalDigit: isDecimalDigit,
              isHexDigit: isHexDigit,
              isOctalDigit: isOctalDigit,
              isWhiteSpace: isWhiteSpace,
              isLineTerminator: isLineTerminator,
              isIdentifierStartES5: isIdentifierStartES5,
              isIdentifierPartES5: isIdentifierPartES5,
              isIdentifierStartES6: isIdentifierStartES6,
              isIdentifierPartES6: isIdentifierPartES6,
            };
          })();
        },
        /* 107 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = validate;

          var _definitions = __webpack_require__(7);

          function validate(node, key, val) {
            if (!node) return;
            const fields = _definitions.NODE_FIELDS[node.type];
            if (!fields) return;
            const field = fields[key];
            if (!field || !field.validate) return;
            if (field.optional && val == null) return;
            field.validate(node, key, val);
          }
        },
        /* 108 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isNode;

          var _definitions = __webpack_require__(7);

          function isNode(node) {
            return !!(node && _definitions.VISITOR_KEYS[node.type]);
          }
        },
        /* 109 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = removeTypeDuplicates;

          var _generated = __webpack_require__(1);

          function removeTypeDuplicates(nodes) {
            const generics = {};
            const bases = {};
            const typeGroups = [];
            const types = [];

            for (let i = 0; i < nodes.length; i++) {
              const node = nodes[i];
              if (!node) continue;

              if (types.indexOf(node) >= 0) {
                continue;
              }

              if ((0, _generated.isAnyTypeAnnotation)(node)) {
                return [node];
              }

              if ((0, _generated.isFlowBaseAnnotation)(node)) {
                bases[node.type] = node;
                continue;
              }

              if ((0, _generated.isUnionTypeAnnotation)(node)) {
                if (typeGroups.indexOf(node.types) < 0) {
                  nodes = nodes.concat(node.types);
                  typeGroups.push(node.types);
                }

                continue;
              }

              if ((0, _generated.isGenericTypeAnnotation)(node)) {
                const name = node.id.name;

                if (generics[name]) {
                  let existing = generics[name];

                  if (existing.typeParameters) {
                    if (node.typeParameters) {
                      existing.typeParameters.params = removeTypeDuplicates(
                        existing.typeParameters.params.concat(
                          node.typeParameters.params
                        )
                      );
                    }
                  } else {
                    existing = node.typeParameters;
                  }
                } else {
                  generics[name] = node;
                }

                continue;
              }

              types.push(node);
            }

            for (const type in bases) {
              types.push(bases[type]);
            }

            for (const name in generics) {
              types.push(generics[name]);
            }

            return types;
          }
        },
        /* 110 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = clone;

          var _cloneNode = _interopRequireDefault(__webpack_require__(27));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function clone(node) {
            return (0, _cloneNode.default)(node, false);
          }
        },
        /* 111 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = addComments;

          function addComments(node, type, comments) {
            if (!comments || !node) return node;
            const key = `${type}Comments`;

            if (node[key]) {
              if (type === "leading") {
                node[key] = comments.concat(node[key]);
              } else {
                node[key] = node[key].concat(comments);
              }
            } else {
              node[key] = comments;
            }

            return node;
          }
        },
        /* 112 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inheritInnerComments;

          var _inherit = _interopRequireDefault(__webpack_require__(69));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inheritInnerComments(child, parent) {
            (0, _inherit.default)("innerComments", child, parent);
          }
        },
        /* 113 */
        function(module, exports, __webpack_require__) {
          var MapCache = __webpack_require__(54),
            setCacheAdd = __webpack_require__(255),
            setCacheHas = __webpack_require__(256);

          function SetCache(values) {
            var index = -1,
              length = values == null ? 0 : values.length;
            this.__data__ = new MapCache();

            while (++index < length) {
              this.add(values[index]);
            }
          }

          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          module.exports = SetCache;
        },
        /* 114 */
        function(module, exports, __webpack_require__) {
          var baseFindIndex = __webpack_require__(258),
            baseIsNaN = __webpack_require__(259),
            strictIndexOf = __webpack_require__(260);

          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          module.exports = baseIndexOf;
        },
        /* 115 */
        function(module, exports) {
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          module.exports = cacheHas;
        },
        /* 116 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inheritLeadingComments;

          var _inherit = _interopRequireDefault(__webpack_require__(69));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inheritLeadingComments(child, parent) {
            (0, _inherit.default)("leadingComments", child, parent);
          }
        },
        /* 117 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inheritsComments;

          var _inheritTrailingComments = _interopRequireDefault(
            __webpack_require__(118)
          );

          var _inheritLeadingComments = _interopRequireDefault(
            __webpack_require__(116)
          );

          var _inheritInnerComments = _interopRequireDefault(
            __webpack_require__(112)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inheritsComments(child, parent) {
            (0, _inheritTrailingComments.default)(child, parent);
            (0, _inheritLeadingComments.default)(child, parent);
            (0, _inheritInnerComments.default)(child, parent);
            return child;
          }
        },
        /* 118 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inheritTrailingComments;

          var _inherit = _interopRequireDefault(__webpack_require__(69));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inheritTrailingComments(child, parent) {
            (0, _inherit.default)("trailingComments", child, parent);
          }
        },
        /* 119 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toBlock;

          var _generated = __webpack_require__(1);

          var _generated2 = __webpack_require__(3);

          function toBlock(node, parent) {
            if ((0, _generated.isBlockStatement)(node)) {
              return node;
            }

            let blockNodes = [];

            if ((0, _generated.isEmptyStatement)(node)) {
              blockNodes = [];
            } else {
              if (!(0, _generated.isStatement)(node)) {
                if ((0, _generated.isFunction)(parent)) {
                  node = (0, _generated2.returnStatement)(node);
                } else {
                  node = (0, _generated2.expressionStatement)(node);
                }
              }

              blockNodes = [node];
            }

            return (0, _generated2.blockStatement)(blockNodes);
          }
        },
        /* 120 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toIdentifier;

          var _isValidIdentifier = _interopRequireDefault(
            __webpack_require__(26)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function toIdentifier(name) {
            name = name + "";
            name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
            name = name.replace(/^[-0-9]+/, "");
            name = name.replace(/[-\s]+(.)?/g, function(match, c) {
              return c ? c.toUpperCase() : "";
            });

            if (!(0, _isValidIdentifier.default)(name)) {
              name = `_${name}`;
            }

            return name || "_";
          }
        },
        /* 121 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = removePropertiesDeep;

          var _traverseFast = _interopRequireDefault(__webpack_require__(122));

          var _removeProperties = _interopRequireDefault(
            __webpack_require__(123)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function removePropertiesDeep(tree, opts) {
            (0, _traverseFast.default)(tree, _removeProperties.default, opts);
            return tree;
          }
        },
        /* 122 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = traverseFast;

          var _definitions = __webpack_require__(7);

          function traverseFast(node, enter, opts) {
            if (!node) return;
            const keys = _definitions.VISITOR_KEYS[node.type];
            if (!keys) return;
            opts = opts || {};
            enter(node, opts);

            for (const key of keys) {
              const subNode = node[key];

              if (Array.isArray(subNode)) {
                for (const node of subNode) {
                  traverseFast(node, enter, opts);
                }
              } else {
                traverseFast(subNode, enter, opts);
              }
            }
          }
        },
        /* 123 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = removeProperties;

          var _constants = __webpack_require__(13);

          const CLEAR_KEYS = [
            "tokens",
            "start",
            "end",
            "loc",
            "raw",
            "rawValue",
          ];

          const CLEAR_KEYS_PLUS_COMMENTS = _constants.COMMENT_KEYS.concat([
            "comments",
          ]).concat(CLEAR_KEYS);

          function removeProperties(node, opts = {}) {
            const map = opts.preserveComments
              ? CLEAR_KEYS
              : CLEAR_KEYS_PLUS_COMMENTS;

            for (const key of map) {
              if (node[key] != null) node[key] = undefined;
            }

            for (const key in node) {
              if (key[0] === "_" && node[key] != null) node[key] = undefined;
            }

            const symbols = Object.getOwnPropertySymbols(node);

            for (const sym of symbols) {
              node[sym] = null;
            }
          }
        },
        /* 124 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isLet;

          var _generated = __webpack_require__(1);

          var _constants = __webpack_require__(13);

          function isLet(node) {
            return (
              (0, _generated.isVariableDeclaration)(node) &&
              (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL])
            );
          }
        },
        /* 125 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isModule;

          function isModule(path) {
            const { sourceType } = path.node;

            if (sourceType !== "module" && sourceType !== "script") {
              throw path.buildCodeFrameError(
                `Unknown sourceType "${sourceType}", cannot transform.`
              );
            }

            return path.node.sourceType === "module";
          }
        },
        /* 126 */
        function(module, exports, __webpack_require__) {
          var jsReleases = __webpack_require__(294);

          var agents = __webpack_require__(295).agents;

          var jsEOL = __webpack_require__(301);

          var path = __webpack_require__(302);

          var e2c = __webpack_require__(303);

          var BrowserslistError = __webpack_require__(127);

          var env = __webpack_require__(304);

          var FLOAT_RANGE = /^\d+(\.\d+)?(-\d+(\.\d+)?)*$/;

          function isVersionsMatch(versionA, versionB) {
            return (versionA + ".").indexOf(versionB + ".") === 0;
          }

          function isEolReleased(name) {
            var version = name.slice(1);
            return jsReleases.some(function(i) {
              return isVersionsMatch(i.version, version);
            });
          }

          function normalize(versions) {
            return versions.filter(function(version) {
              return typeof version === "string";
            });
          }

          function nameMapper(name) {
            return function mapName(version) {
              return name + " " + version;
            };
          }

          function getMajor(version) {
            return parseInt(version.split(".")[0]);
          }

          function getMajorVersions(released, number) {
            if (released.length === 0) return [];
            var minimum =
              getMajor(released[released.length - 1]) - parseInt(number) + 1;
            var selected = [];

            for (var i = released.length - 1; i >= 0; i--) {
              if (minimum > getMajor(released[i])) break;
              selected.unshift(released[i]);
            }

            return selected;
          }

          function uniq(array) {
            var filtered = [];

            for (var i = 0; i < array.length; i++) {
              if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
            }

            return filtered;
          }

          function fillUsage(result, name, data) {
            for (var i in data) {
              result[name + " " + i] = data[i];
            }
          }

          function generateFilter(sign, version) {
            version = parseFloat(version);

            if (sign === ">") {
              return function(v) {
                return parseFloat(v) > version;
              };
            } else if (sign === ">=") {
              return function(v) {
                return parseFloat(v) >= version;
              };
            } else if (sign === "<") {
              return function(v) {
                return parseFloat(v) < version;
              };
            } else {
              return function(v) {
                return parseFloat(v) <= version;
              };
            }
          }

          function compareStrings(a, b) {
            if (a < b) return -1;
            if (a > b) return +1;
            return 0;
          }

          function normalizeVersion(data, version) {
            if (data.versions.indexOf(version) !== -1) {
              return version;
            } else if (browserslist.versionAliases[data.name][version]) {
              return browserslist.versionAliases[data.name][version];
            } else if (data.versions.length === 1) {
              return data.versions[0];
            } else {
              return false;
            }
          }

          function filterByYear(since) {
            return Object.keys(agents).reduce(function(selected, name) {
              var data = byName(name);
              if (!data) return selected;
              var versions = Object.keys(data.releaseDate).filter(function(v) {
                return data.releaseDate[v] >= since;
              });
              return selected.concat(versions.map(nameMapper(data.name)));
            }, []);
          }

          function byName(name) {
            name = name.toLowerCase();
            name = browserslist.aliases[name] || name;
            return browserslist.data[name];
          }

          function checkName(name) {
            var data = byName(name);
            if (!data) throw new BrowserslistError("Unknown browser " + name);
            return data;
          }

          function unknownQuery(query) {
            return new BrowserslistError(
              "Unknown browser query `" +
                query +
                "`. " +
                "Maybe you are using old Browserslist or made typo in query."
            );
          }

          function resolve(queries, context) {
            return queries.reduce(function(result, selection, index) {
              selection = selection.trim();
              if (selection === "") return result;
              var isExclude = selection.indexOf("not ") === 0;

              if (isExclude) {
                if (index === 0) {
                  throw new BrowserslistError(
                    "Write any browsers query (for instance, `defaults`) " +
                      "before `" +
                      selection +
                      "`"
                  );
                }

                selection = selection.slice(4);
              }

              for (var i = 0; i < QUERIES.length; i++) {
                var type = QUERIES[i];
                var match = selection.match(type.regexp);

                if (match) {
                  var args = [context].concat(match.slice(1));
                  var array = type.select.apply(browserslist, args);

                  if (isExclude) {
                    var filter = {};
                    var browsers = {};
                    var versionLess = {};
                    array.forEach(function(j) {
                      filter[j] = true;
                      var browser = j.replace(/\s\S+$/, "");
                      browsers[browser] = true;

                      if (/\s0$/.test(j)) {
                        versionLess[browser] = true;
                      }
                    });
                    return result.filter(function(j) {
                      if (filter[j]) {
                        return false;
                      } else {
                        var browser = j.replace(/\s\S+$/, "");

                        if (versionLess[browser]) {
                          return false;
                        } else if (/\s0$/.test(j) && browsers[browser]) {
                          return false;
                        } else {
                          return true;
                        }
                      }
                    });
                  }

                  return result.concat(array);
                }
              }

              throw unknownQuery(selection);
            }, []);
          }

          function browserslist(queries, opts) {
            if (typeof opts === "undefined") opts = {};

            if (typeof opts.path === "undefined") {
              opts.path = path.resolve ? path.resolve(".") : ".";
            }

            if (typeof queries === "undefined" || queries === null) {
              var config = browserslist.loadConfig(opts);

              if (config) {
                queries = config;
              } else {
                queries = browserslist.defaults;
              }
            }

            if (typeof queries === "string") {
              queries = queries.split(/,\s*/);
            }

            if (!Array.isArray(queries)) {
              throw new BrowserslistError(
                "Browser queries must be an array. Got " + typeof queries + "."
              );
            }

            var context = {
              ignoreUnknownVersions: opts.ignoreUnknownVersions,
              dangerousExtend: opts.dangerousExtend,
            };
            env.oldDataWarning(browserslist.data);
            var stats = env.getStat(opts, browserslist.data);

            if (stats) {
              context.customUsage = {};

              for (var browser in stats) {
                fillUsage(context.customUsage, browser, stats[browser]);
              }
            }

            var result = resolve(queries, context)
              .map(function(i) {
                var parts = i.split(" ");
                var name = parts[0];
                var version = parts[1];

                if (version === "0") {
                  return name + " " + byName(name).versions[0];
                } else {
                  return i;
                }
              })
              .sort(function(name1, name2) {
                name1 = name1.split(" ");
                name2 = name2.split(" ");

                if (name1[0] === name2[0]) {
                  if (
                    FLOAT_RANGE.test(name1[1]) &&
                    FLOAT_RANGE.test(name2[1])
                  ) {
                    return parseFloat(name2[1]) - parseFloat(name1[1]);
                  } else {
                    return compareStrings(name2[1], name1[1]);
                  }
                } else {
                  return compareStrings(name1[0], name2[0]);
                }
              });
            return uniq(result);
          }

          browserslist.data = {};
          browserslist.usage = {
            global: {},
            custom: null,
          };
          browserslist.defaults = [
            "> 0.5%",
            "last 2 versions",
            "Firefox ESR",
            "not dead",
          ];
          browserslist.aliases = {
            fx: "firefox",
            ff: "firefox",
            ios: "ios_saf",
            explorer: "ie",
            blackberry: "bb",
            explorermobile: "ie_mob",
            operamini: "op_mini",
            operamobile: "op_mob",
            chromeandroid: "and_chr",
            firefoxandroid: "and_ff",
            ucandroid: "and_uc",
            qqandroid: "and_qq",
          };
          browserslist.versionAliases = {};
          browserslist.clearCaches = env.clearCaches;
          browserslist.parseConfig = env.parseConfig;
          browserslist.readConfig = env.readConfig;
          browserslist.findConfig = env.findConfig;
          browserslist.loadConfig = env.loadConfig;

          browserslist.coverage = function(browsers, stats) {
            var data;

            if (typeof stats === "undefined") {
              data = browserslist.usage.global;
            } else if (stats === "my stats") {
              var opts = {};
              opts.path = path.resolve ? path.resolve(".") : ".";
              var customStats = env.getStat(opts);

              if (!customStats) {
                throw new BrowserslistError(
                  "Custom usage statistics was not provided"
                );
              }

              data = {};

              for (var browser in customStats) {
                fillUsage(data, browser, customStats[browser]);
              }
            } else if (typeof stats === "string") {
              if (stats.length > 2) {
                stats = stats.toLowerCase();
              } else {
                stats = stats.toUpperCase();
              }

              env.loadCountry(browserslist.usage, stats);
              data = browserslist.usage[stats];
            } else {
              if ("dataByBrowser" in stats) {
                stats = stats.dataByBrowser;
              }

              data = {};

              for (var name in stats) {
                for (var version in stats[name]) {
                  data[name + " " + version] = stats[name][version];
                }
              }
            }

            return browsers.reduce(function(all, i) {
              var usage = data[i];

              if (usage === undefined) {
                usage = data[i.replace(/ \S+$/, " 0")];
              }

              return all + (usage || 0);
            }, 0);
          };

          var QUERIES = [
            {
              regexp: /^last\s+(\d+)\s+major versions?$/i,
              select: function(context, versions) {
                return Object.keys(agents).reduce(function(selected, name) {
                  var data = byName(name);
                  if (!data) return selected;
                  var array = getMajorVersions(data.released, versions);
                  array = array.map(nameMapper(data.name));
                  return selected.concat(array);
                }, []);
              },
            },
            {
              regexp: /^last\s+(\d+)\s+versions?$/i,
              select: function(context, versions) {
                return Object.keys(agents).reduce(function(selected, name) {
                  var data = byName(name);
                  if (!data) return selected;
                  var array = data.released.slice(-versions);
                  array = array.map(nameMapper(data.name));
                  return selected.concat(array);
                }, []);
              },
            },
            {
              regexp: /^last\s+(\d+)\s+electron\s+major versions?$/i,
              select: function(context, versions) {
                var validVersions = getMajorVersions(
                  Object.keys(e2c).reverse(),
                  versions
                );
                return validVersions.map(function(i) {
                  return "chrome " + e2c[i];
                });
              },
            },
            {
              regexp: /^last\s+(\d+)\s+(\w+)\s+major versions?$/i,
              select: function(context, versions, name) {
                var data = checkName(name);
                var validVersions = getMajorVersions(data.released, versions);
                return validVersions.map(nameMapper(data.name));
              },
            },
            {
              regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
              select: function(context, versions) {
                return Object.keys(e2c)
                  .reverse()
                  .slice(-versions)
                  .map(function(i) {
                    return "chrome " + e2c[i];
                  });
              },
            },
            {
              regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
              select: function(context, versions, name) {
                var data = checkName(name);
                return data.released
                  .slice(-versions)
                  .map(nameMapper(data.name));
              },
            },
            {
              regexp: /^unreleased\s+versions$/i,
              select: function() {
                return Object.keys(agents).reduce(function(selected, name) {
                  var data = byName(name);
                  if (!data) return selected;
                  var array = data.versions.filter(function(v) {
                    return data.released.indexOf(v) === -1;
                  });
                  array = array.map(nameMapper(data.name));
                  return selected.concat(array);
                }, []);
              },
            },
            {
              regexp: /^unreleased\s+electron\s+versions?$/i,
              select: function() {
                return [];
              },
            },
            {
              regexp: /^unreleased\s+(\w+)\s+versions?$/i,
              select: function(context, name) {
                var data = checkName(name);
                return data.versions
                  .filter(function(v) {
                    return data.released.indexOf(v) === -1;
                  })
                  .map(nameMapper(data.name));
              },
            },
            {
              regexp: /^last\s+(\d+)\s+years?$/i,
              select: function(context, years) {
                var date = new Date();
                var since = date.setFullYear(date.getFullYear() - years) / 1000;
                return filterByYear(since);
              },
            },
            {
              regexp: /^since (\d+)(?:-(\d+))?(?:-(\d+))?$/i,
              select: function(context, year, month, date) {
                year = parseInt(year);
                month = parseInt(month || "01") - 1;
                date = parseInt(date || "01");
                var since = Date.UTC(year, month, date, 0, 0, 0) / 1000;
                return filterByYear(since);
              },
            },
            {
              regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%$/,
              select: function(context, sign, popularity) {
                popularity = parseFloat(popularity);
                var usage = browserslist.usage.global;
                return Object.keys(usage).reduce(function(result, version) {
                  if (sign === ">") {
                    if (usage[version] > popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<") {
                    if (usage[version] < popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<=") {
                    if (usage[version] <= popularity) {
                      result.push(version);
                    }
                  } else if (usage[version] >= popularity) {
                    result.push(version);
                  }

                  return result;
                }, []);
              },
            },
            {
              regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+my\s+stats$/,
              select: function(context, sign, popularity) {
                popularity = parseFloat(popularity);

                if (!context.customUsage) {
                  throw new BrowserslistError(
                    "Custom usage statistics was not provided"
                  );
                }

                var usage = context.customUsage;
                return Object.keys(usage).reduce(function(result, version) {
                  if (sign === ">") {
                    if (usage[version] > popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<") {
                    if (usage[version] < popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<=") {
                    if (usage[version] <= popularity) {
                      result.push(version);
                    }
                  } else if (usage[version] >= popularity) {
                    result.push(version);
                  }

                  return result;
                }, []);
              },
            },
            {
              regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+((alt-)?\w\w)$/,
              select: function(context, sign, popularity, place) {
                popularity = parseFloat(popularity);

                if (place.length === 2) {
                  place = place.toUpperCase();
                } else {
                  place = place.toLowerCase();
                }

                env.loadCountry(browserslist.usage, place);
                var usage = browserslist.usage[place];
                return Object.keys(usage).reduce(function(result, version) {
                  if (sign === ">") {
                    if (usage[version] > popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<") {
                    if (usage[version] < popularity) {
                      result.push(version);
                    }
                  } else if (sign === "<=") {
                    if (usage[version] <= popularity) {
                      result.push(version);
                    }
                  } else if (usage[version] >= popularity) {
                    result.push(version);
                  }

                  return result;
                }, []);
              },
            },
            {
              regexp: /^cover\s+(\d*\.?\d+)%(\s+in\s+(my\s+stats|(alt-)?\w\w))?$/,
              select: function(context, coverage, statMode) {
                coverage = parseFloat(coverage);
                var usage = browserslist.usage.global;

                if (statMode) {
                  if (statMode.match(/^\s+in\s+my\s+stats$/)) {
                    if (!context.customUsage) {
                      throw new BrowserslistError(
                        "Custom usage statistics was not provided"
                      );
                    }

                    usage = context.customUsage;
                  } else {
                    var match = statMode.match(/\s+in\s+((alt-)?\w\w)/);
                    var place = match[1];

                    if (place.length === 2) {
                      place = place.toUpperCase();
                    } else {
                      place = place.toLowerCase();
                    }

                    env.loadCountry(browserslist.usage, place);
                    usage = browserslist.usage[place];
                  }
                }

                var versions = Object.keys(usage).sort(function(a, b) {
                  return usage[b] - usage[a];
                });
                var coveraged = 0;
                var result = [];
                var version;

                for (var i = 0; i <= versions.length; i++) {
                  version = versions[i];
                  if (usage[version] === 0) break;
                  coveraged += usage[version];
                  result.push(version);
                  if (coveraged >= coverage) break;
                }

                return result;
              },
            },
            {
              regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
              select: function(context, from, to) {
                if (!e2c[from]) {
                  throw new BrowserslistError(
                    "Unknown version " + from + " of electron"
                  );
                }

                if (!e2c[to]) {
                  throw new BrowserslistError(
                    "Unknown version " + to + " of electron"
                  );
                }

                from = parseFloat(from);
                to = parseFloat(to);
                return Object.keys(e2c)
                  .filter(function(i) {
                    var parsed = parseFloat(i);
                    return parsed >= from && parsed <= to;
                  })
                  .map(function(i) {
                    return "chrome " + e2c[i];
                  });
              },
            },
            {
              regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
              select: function(context, name, from, to) {
                var data = checkName(name);
                from = parseFloat(normalizeVersion(data, from) || from);
                to = parseFloat(normalizeVersion(data, to) || to);

                function filter(v) {
                  var parsed = parseFloat(v);
                  return parsed >= from && parsed <= to;
                }

                return data.released.filter(filter).map(nameMapper(data.name));
              },
            },
            {
              regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
              select: function(context, sign, version) {
                return Object.keys(e2c)
                  .filter(generateFilter(sign, version))
                  .map(function(i) {
                    return "chrome " + e2c[i];
                  });
              },
            },
            {
              regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
              select: function(context, name, sign, version) {
                var data = checkName(name);
                var alias = browserslist.versionAliases[data.name][version];

                if (alias) {
                  version = alias;
                }

                return data.released
                  .filter(generateFilter(sign, version))
                  .map(function(v) {
                    return data.name + " " + v;
                  });
              },
            },
            {
              regexp: /^(firefox|ff|fx)\s+esr$/i,
              select: function() {
                return ["firefox 60"];
              },
            },
            {
              regexp: /(operamini|op_mini)\s+all/i,
              select: function() {
                return ["op_mini all"];
              },
            },
            {
              regexp: /^electron\s+([\d.]+)$/i,
              select: function(context, version) {
                var chrome = e2c[version];

                if (!chrome) {
                  throw new BrowserslistError(
                    "Unknown version " + version + " of electron"
                  );
                }

                return ["chrome " + chrome];
              },
            },
            {
              regexp: /^node\s+(\d+(\.\d+)?(\.\d+)?)$/i,
              select: function(context, version) {
                var nodeReleases = jsReleases.filter(function(i) {
                  return i.name === "nodejs";
                });
                var matched = nodeReleases.filter(function(i) {
                  return isVersionsMatch(i.version, version);
                });

                if (matched.length === 0) {
                  if (context.ignoreUnknownVersions) {
                    return [];
                  } else {
                    throw new BrowserslistError(
                      "Unknown version " + version + " of Node.js"
                    );
                  }
                }

                return ["node " + matched[matched.length - 1].version];
              },
            },
            {
              regexp: /^current\s+node$/i,
              select: function(context) {
                return [env.currentNode(resolve, context)];
              },
            },
            {
              regexp: /^maintained\s+node\s+versions$/i,
              select: function(context) {
                var now = Date.now();
                var queries = Object.keys(jsEOL)
                  .filter(function(key) {
                    return (
                      now < Date.parse(jsEOL[key].end) &&
                      now > Date.parse(jsEOL[key].start) &&
                      isEolReleased(key)
                    );
                  })
                  .map(function(key) {
                    return "node " + key.slice(1);
                  });
                return resolve(queries, context);
              },
            },
            {
              regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
              select: function(context, name, version) {
                if (/^tp$/i.test(version)) version = "TP";
                var data = checkName(name);
                var alias = normalizeVersion(data, version);

                if (alias) {
                  version = alias;
                } else {
                  if (version.indexOf(".") === -1) {
                    alias = version + ".0";
                  } else {
                    alias = version.replace(/\.0$/, "");
                  }

                  alias = normalizeVersion(data, alias);

                  if (alias) {
                    version = alias;
                  } else if (context.ignoreUnknownVersions) {
                    return [];
                  } else {
                    throw new BrowserslistError(
                      "Unknown version " + version + " of " + name
                    );
                  }
                }

                return [data.name + " " + version];
              },
            },
            {
              regexp: /^extends (.+)$/i,
              select: function(context, name) {
                return resolve(env.loadQueries(context, name), context);
              },
            },
            {
              regexp: /^defaults$/i,
              select: function() {
                return browserslist(browserslist.defaults);
              },
            },
            {
              regexp: /^dead$/i,
              select: function(context) {
                var dead = [
                  "ie <= 10",
                  "ie_mob <= 10",
                  "bb <= 10",
                  "op_mob <= 12.1",
                ];
                return resolve(dead, context);
              },
            },
            {
              regexp: /^(\w+)$/i,
              select: function(context, name) {
                if (byName(name)) {
                  throw new BrowserslistError(
                    "Specify versions in Browserslist query for browser " + name
                  );
                } else {
                  throw unknownQuery(name);
                }
              },
            },
          ];

          (function() {
            for (var name in agents) {
              var browser = agents[name];
              browserslist.data[name] = {
                name: name,
                versions: normalize(agents[name].versions),
                released: normalize(agents[name].versions.slice(0, -3)),
                releaseDate: agents[name].release_date,
              };
              fillUsage(browserslist.usage.global, name, browser.usage_global);
              browserslist.versionAliases[name] = {};

              for (var i = 0; i < browser.versions.length; i++) {
                var full = browser.versions[i];
                if (!full) continue;

                if (full.indexOf("-") !== -1) {
                  var interval = full.split("-");

                  for (var j = 0; j < interval.length; j++) {
                    browserslist.versionAliases[name][interval[j]] = full;
                  }
                }
              }
            }
          })();

          module.exports = browserslist;
        },
        /* 127 */
        function(module, exports) {
          function BrowserslistError(message) {
            this.name = "BrowserslistError";
            this.message = message;
            this.browserslist = true;

            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, BrowserslistError);
            }
          }

          BrowserslistError.prototype = Error.prototype;
          module.exports = BrowserslistError;
        },
        /* 128 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.default = normalizeOptions;
            exports.validateUseBuiltInsOption = exports.objectToBrowserslist = exports.validateModulesOption = exports.validateIgnoreBrowserslistConfig = exports.validateBoolOption = exports.validateConfigPathOption = exports.checkDuplicateIncludeExcludes = exports.normalizePluginName = void 0;

            function _assert() {
              const data = _interopRequireDefault(__webpack_require__(22));

              _assert = function() {
                return data;
              };

              return data;
            }

            function _browserslist() {
              const data = _interopRequireDefault(__webpack_require__(126));

              _browserslist = function() {
                return data;
              };

              return data;
            }

            var _builtIns = _interopRequireDefault(__webpack_require__(85));

            var _defaultIncludes = __webpack_require__(305);

            var _moduleTransformations = _interopRequireDefault(
              __webpack_require__(129)
            );

            var _targetsParser = __webpack_require__(71);

            var _utils = __webpack_require__(16);

            var _plugins = _interopRequireDefault(__webpack_require__(130));

            var _options = __webpack_require__(131);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            const validateTopLevelOptions = options => {
              for (const option in options) {
                if (!_options.TopLevelOptions[option]) {
                  const validOptions = (0, _utils.getValues)(
                    _options.TopLevelOptions
                  );
                  throw new Error(`Invalid Option: ${option} is not a valid top-level option.
        Maybe you meant to use '${(0, _utils.findSuggestion)(
          validOptions,
          option
        )}'?`);
                }
              }
            };

            const validIncludesAndExcludes = new Set([
              ...Object.keys(_plugins.default),
              ...Object.keys(_moduleTransformations.default).map(
                m => _moduleTransformations.default[m]
              ),
              ...Object.keys(_builtIns.default),
              ..._defaultIncludes.defaultWebIncludes,
            ]);

            const pluginToRegExp = plugin => {
              if (plugin instanceof RegExp) return plugin;

              try {
                return new RegExp(`^${normalizePluginName(plugin)}$`);
              } catch (e) {
                return null;
              }
            };

            const selectPlugins = regexp =>
              Array.from(validIncludesAndExcludes).filter(
                item => regexp instanceof RegExp && regexp.test(item)
              );

            const flatten = array => [].concat(...array);

            const expandIncludesAndExcludes = (plugins = [], type) => {
              if (plugins.length === 0) return [];
              const selectedPlugins = plugins.map(plugin =>
                selectPlugins(pluginToRegExp(plugin))
              );
              const invalidRegExpList = plugins.filter(
                (p, i) => selectedPlugins[i].length === 0
              );
              (0, _assert().default)(
                invalidRegExpList.length === 0,
                `Invalid Option: The plugins/built-ins '${invalidRegExpList.join(
                  ", "
                )}' passed to the '${type}' option are not
    valid. Please check data/[plugin-features|built-in-features].js in babel-preset-env`
              );
              return flatten(selectedPlugins);
            };

            const validBrowserslistTargets = [
              ...Object.keys(_browserslist().default.data),
              ...Object.keys(_browserslist().default.aliases),
            ];

            const normalizePluginName = plugin =>
              plugin.replace(/^babel-plugin-/, "");

            exports.normalizePluginName = normalizePluginName;

            const checkDuplicateIncludeExcludes = (
              include = [],
              exclude = []
            ) => {
              const duplicates = include.filter(
                opt => exclude.indexOf(opt) >= 0
              );
              (0, _assert().default)(
                duplicates.length === 0,
                `Invalid Option: The plugins/built-ins '${duplicates.join(
                  ", "
                )}' were found in both the "include" and
    "exclude" options.`
              );
            };

            exports.checkDuplicateIncludeExcludes = checkDuplicateIncludeExcludes;

            const normalizeTargets = targets => {
              if ((0, _targetsParser.isBrowsersQueryValid)(targets)) {
                return {
                  browsers: targets,
                };
              }

              return Object.assign({}, targets);
            };

            const validateConfigPathOption = (configPath = process.cwd()) => {
              (0, _assert().default)(
                typeof configPath === "string",
                `Invalid Option: The configPath option '${configPath}' is invalid, only strings are allowed.`
              );
              return configPath;
            };

            exports.validateConfigPathOption = validateConfigPathOption;

            const validateBoolOption = (name, value, defaultValue) => {
              if (typeof value === "undefined") {
                value = defaultValue;
              }

              if (typeof value !== "boolean") {
                throw new Error(
                  `Preset env: '${name}' option must be a boolean.`
                );
              }

              return value;
            };

            exports.validateBoolOption = validateBoolOption;

            const validateIgnoreBrowserslistConfig = ignoreBrowserslistConfig =>
              validateBoolOption(
                _options.TopLevelOptions.ignoreBrowserslistConfig,
                ignoreBrowserslistConfig,
                false
              );

            exports.validateIgnoreBrowserslistConfig = validateIgnoreBrowserslistConfig;

            const validateModulesOption = (
              modulesOpt = _options.ModulesOption.auto
            ) => {
              (0, _assert().default)(
                _options.ModulesOption[modulesOpt] ||
                  _options.ModulesOption[modulesOpt] ===
                    _options.ModulesOption.false,
                `Invalid Option: The 'modules' option must be one of \n` +
                  ` - 'false' to indicate no module processing\n` +
                  ` - a specific module type: 'commonjs', 'amd', 'umd', 'systemjs'` +
                  ` - 'auto' (default) which will automatically select 'false' if the current\n` +
                  `   process is known to support ES module syntax, or "commonjs" otherwise\n`
              );
              return modulesOpt;
            };

            exports.validateModulesOption = validateModulesOption;

            const objectToBrowserslist = object => {
              return Object.keys(object).reduce((list, targetName) => {
                if (validBrowserslistTargets.indexOf(targetName) >= 0) {
                  const targetVersion = object[targetName];
                  return list.concat(`${targetName} ${targetVersion}`);
                }

                return list;
              }, []);
            };

            exports.objectToBrowserslist = objectToBrowserslist;

            const validateUseBuiltInsOption = (builtInsOpt = false) => {
              (0, _assert().default)(
                _options.UseBuiltInsOption[builtInsOpt] ||
                  _options.UseBuiltInsOption[builtInsOpt] ===
                    _options.UseBuiltInsOption.false,
                `Invalid Option: The 'useBuiltIns' option must be either
    'false' (default) to indicate no polyfill,
    '"entry"' to indicate replacing the entry polyfill, or
    '"usage"' to import only used polyfills per file`
              );
              return builtInsOpt;
            };

            exports.validateUseBuiltInsOption = validateUseBuiltInsOption;

            function normalizeOptions(opts) {
              validateTopLevelOptions(opts);
              const include = expandIncludesAndExcludes(
                opts.include,
                _options.TopLevelOptions.include
              );
              const exclude = expandIncludesAndExcludes(
                opts.exclude,
                _options.TopLevelOptions.exclude
              );
              checkDuplicateIncludeExcludes(include, exclude);
              return {
                configPath: validateConfigPathOption(opts.configPath),
                debug: validateBoolOption(
                  _options.TopLevelOptions.debug,
                  opts.debug,
                  false
                ),
                include,
                exclude,
                forceAllTransforms: validateBoolOption(
                  _options.TopLevelOptions.forceAllTransforms,
                  opts.forceAllTransforms,
                  false
                ),
                ignoreBrowserslistConfig: validateIgnoreBrowserslistConfig(
                  opts.ignoreBrowserslistConfig
                ),
                loose: validateBoolOption(
                  _options.TopLevelOptions.loose,
                  opts.loose,
                  false
                ),
                modules: validateModulesOption(opts.modules),
                shippedProposals: validateBoolOption(
                  _options.TopLevelOptions.shippedProposals,
                  opts.shippedProposals,
                  false
                ),
                spec: validateBoolOption(
                  _options.TopLevelOptions.spec,
                  opts.spec,
                  false
                ),
                targets: normalizeTargets(opts.targets),
                useBuiltIns: validateUseBuiltInsOption(opts.useBuiltIns),
              };
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 129 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;
          var _default = {
            auto: "transform-modules-commonjs",
            amd: "transform-modules-amd",
            commonjs: "transform-modules-commonjs",
            cjs: "transform-modules-commonjs",
            systemjs: "transform-modules-systemjs",
            umd: "transform-modules-umd",
          };
          exports.default = _default;
        },
        /* 130 */
        function(module) {
          module.exports = {
            "transform-template-literals": {
              chrome: "41",
              edge: "13",
              firefox: "34",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "transform-literals": {
              chrome: "44",
              edge: "12",
              firefox: "53",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "transform-function-name": {
              chrome: "51",
              firefox: "53",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "transform-arrow-functions": {
              chrome: "47",
              edge: "13",
              firefox: "45",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "34",
              electron: "0.36",
              android: "47",
            },
            "transform-block-scoped-functions": {
              chrome: "41",
              edge: "12",
              firefox: "46",
              safari: "10",
              node: "4",
              ie: "11",
              ios: "10",
              opera: "28",
              electron: "0.24",
              android: "41",
            },
            "transform-classes": {
              chrome: "46",
              edge: "13",
              firefox: "45",
              safari: "10",
              node: "5",
              ios: "10",
              opera: "33",
              electron: "0.36",
              android: "46",
            },
            "transform-object-super": {
              chrome: "46",
              edge: "13",
              firefox: "45",
              safari: "10",
              node: "5",
              ios: "10",
              opera: "33",
              electron: "0.36",
              android: "46",
            },
            "transform-shorthand-properties": {
              chrome: "43",
              edge: "12",
              firefox: "33",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "30",
              electron: "0.29",
              android: "43",
            },
            "transform-duplicate-keys": {
              chrome: "42",
              edge: "12",
              firefox: "34",
              safari: "9",
              node: "4",
              ios: "9",
              opera: "29",
              electron: "0.27",
              android: "42",
            },
            "transform-computed-properties": {
              chrome: "44",
              edge: "12",
              firefox: "34",
              safari: "7.1",
              node: "4",
              ios: "8",
              opera: "31",
              electron: "0.31",
              android: "44",
            },
            "transform-for-of": {
              chrome: "51",
              edge: "15",
              firefox: "53",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "transform-sticky-regex": {
              chrome: "49",
              edge: "13",
              firefox: "3",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "transform-dotall-regex": {
              chrome: "62",
              safari: "11.1",
              node: "8.10",
              ios: "11.3",
              opera: "49",
              electron: "3.1",
              android: "62",
            },
            "transform-unicode-regex": {
              chrome: "50",
              edge: "13",
              firefox: "46",
              safari: "12",
              node: "6",
              ios: "12",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "transform-spread": {
              chrome: "46",
              edge: "13",
              firefox: "36",
              safari: "10",
              node: "5",
              ios: "10",
              opera: "33",
              electron: "0.36",
              android: "46",
            },
            "transform-parameters": {
              chrome: "49",
              edge: "18",
              firefox: "53",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "transform-destructuring": {
              chrome: "51",
              edge: "18",
              firefox: "53",
              safari: "10",
              node: "6.5",
              ios: "10",
              opera: "38",
              electron: "1.2",
              android: "51",
            },
            "transform-block-scoping": {
              chrome: "49",
              edge: "14",
              firefox: "51",
              safari: "10.1",
              node: "6",
              ios: "10.3",
              opera: "36",
              electron: "1",
              android: "49",
            },
            "transform-typeof-symbol": {
              chrome: "38",
              edge: "12",
              firefox: "36",
              safari: "9",
              node: "0.12",
              ios: "9",
              opera: "25",
              electron: "0.2",
              android: "38",
            },
            "transform-new-target": {
              chrome: "46",
              edge: "14",
              firefox: "41",
              safari: "10",
              node: "5",
              ios: "10",
              opera: "33",
              electron: "0.36",
              android: "46",
            },
            "transform-regenerator": {
              chrome: "50",
              edge: "13",
              firefox: "53",
              safari: "10",
              node: "6",
              ios: "10",
              opera: "37",
              electron: "1.1",
              android: "50",
            },
            "transform-exponentiation-operator": {
              chrome: "52",
              edge: "14",
              firefox: "52",
              safari: "10.1",
              node: "7",
              ios: "10.3",
              opera: "39",
              electron: "1.3",
              android: "52",
            },
            "transform-async-to-generator": {
              chrome: "55",
              edge: "15",
              firefox: "52",
              safari: "10.1",
              node: "7.6",
              ios: "10.3",
              opera: "42",
              electron: "1.6",
              android: "55",
            },
            "proposal-async-generator-functions": {
              chrome: "63",
              firefox: "57",
              safari: "12",
              node: "10.13",
              ios: "12",
              opera: "50",
              electron: "3.1",
              android: "63",
            },
            "proposal-object-rest-spread": {
              chrome: "60",
              firefox: "55",
              safari: "11.1",
              node: "8.3",
              ios: "11.3",
              opera: "47",
              electron: "2.1",
              android: "60",
            },
            "proposal-unicode-property-regex": {
              chrome: "64",
              safari: "11.1",
              node: "10.13",
              ios: "11.3",
              opera: "51",
              electron: "3.1",
              android: "64",
            },
            "proposal-json-strings": {},
            "proposal-optional-catch-binding": {
              chrome: "66",
              firefox: "58",
              safari: "11.1",
              node: "10.13",
              ios: "11.3",
              opera: "53",
              electron: "3.1",
              android: "66",
            },
          };
        },
        /* 131 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.TargetNames = exports.UseBuiltInsOption = exports.ModulesOption = exports.TopLevelOptions = void 0;
          const TopLevelOptions = {
            configPath: "configPath",
            debug: "debug",
            exclude: "exclude",
            forceAllTransforms: "forceAllTransforms",
            ignoreBrowserslistConfig: "ignoreBrowserslistConfig",
            include: "include",
            loose: "loose",
            modules: "modules",
            shippedProposals: "shippedProposals",
            spec: "spec",
            targets: "targets",
            useBuiltIns: "useBuiltIns",
          };
          exports.TopLevelOptions = TopLevelOptions;
          const ModulesOption = {
            false: false,
            auto: "auto",
            amd: "amd",
            commonjs: "commonjs",
            cjs: "cjs",
            systemjs: "systemjs",
            umd: "umd",
          };
          exports.ModulesOption = ModulesOption;
          const UseBuiltInsOption = {
            false: false,
            entry: "entry",
            usage: "usage",
          };
          exports.UseBuiltInsOption = UseBuiltInsOption;
          const TargetNames = {
            esmodules: "esmodules",
            node: "node",
            browsers: "browsers",
            chrome: "chrome",
            opera: "opera",
            edge: "edge",
            firefox: "firefox",
            safari: "safari",
            ie: "ie",
            ios: "ios",
            android: "android",
            electron: "electron",
          };
          exports.TargetNames = TargetNames;
        },
        /* 132 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function helpers() {
            const data = _interopRequireWildcard(__webpack_require__(133));

            helpers = function() {
              return data;
            };

            return data;
          }

          function _babelTraverse() {
            const data = _interopRequireWildcard(__webpack_require__(8));

            _babelTraverse = function() {
              return data;
            };

            return data;
          }

          function _babelCodeFrame() {
            const data = __webpack_require__(43);

            _babelCodeFrame = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _semver() {
            const data = _interopRequireDefault(__webpack_require__(15));

            _semver = function() {
              return data;
            };

            return data;
          }

          function _unifyPaths() {
            const data = _interopRequireDefault(__webpack_require__(396));

            _unifyPaths = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const errorVisitor = {
            enter(path, state) {
              const loc = path.node.loc;

              if (loc) {
                state.loc = loc;
                path.stop();
              }
            },
          };

          class File {
            constructor(options, { code, ast, inputMap }) {
              this.opts = options;
              this.code = code;
              this.ast = ast;
              this.inputMap = inputMap;
              this._map = new Map();
              this.declarations = {};
              this.path = null;
              this.metadata = {};
              this.code = "";
              this.inputMap = null;
              this.hub = {
                file: this,
                getCode: () => this.code,
                getScope: () => this.scope,
                addHelper: this.addHelper.bind(this),
                buildError: this.buildCodeFrameError.bind(this),
              };
              this.path = _babelTraverse()
                .NodePath.get({
                  hub: this.hub,
                  parentPath: null,
                  parent: this.ast,
                  container: this.ast,
                  key: "program",
                })
                .setContext();
              this.scope = this.path.scope;
            }

            get shebang() {
              const { interpreter } = this.path.node;
              return interpreter ? interpreter.value : "";
            }

            set shebang(value) {
              if (value) {
                this.path
                  .get("interpreter")
                  .replaceWith(t().interpreterDirective(value));
              } else {
                this.path.get("interpreter").remove();
              }
            }

            set(key, val) {
              if (key === "helpersNamespace") {
                throw new Error(
                  "Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." +
                    "If you are using @gerhobbelt/babel-plugin-external-helpers you will need to use a newer " +
                    "version than the one you currently have installed. " +
                    "If you have your own implementation, you'll want to explore using 'helperGenerator' " +
                    "alongside 'file.availableHelper()'."
                );
              }

              this._map.set(key, val);
            }

            get(key) {
              return this._map.get(key);
            }

            has(key) {
              return this._map.has(key);
            }

            getModuleName() {
              const {
                filename,
                filenameRelative = filename,
                moduleId,
                moduleIds = !!moduleId,
                getModuleId,
                sourceRoot: sourceRootTmp,
                moduleRoot = sourceRootTmp,
                sourceRoot = moduleRoot,
              } = this.opts;
              if (!moduleIds) return null;

              if (moduleId != null && !getModuleId) {
                return moduleId;
              }

              let moduleName = moduleRoot != null ? moduleRoot + "/" : "";

              if (filenameRelative) {
                const sourceRootReplacer =
                  sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
                moduleName += filenameRelative
                  .replace(sourceRootReplacer, "")
                  .replace(/\.(\w*?)$/, "");
              }

              moduleName = (0, _unifyPaths().default)(moduleName);

              if (getModuleId) {
                return getModuleId(moduleName) || moduleName;
              } else {
                return moduleName;
              }
            }

            addImport() {
              throw new Error(
                "This API has been removed. If you're looking for this " +
                  "functionality in Babel 7, you should import the " +
                  "'@gerhobbelt/babel-helper-module-imports' module and use the functions exposed " +
                  " from that module, such as 'addNamed' or 'addDefault'."
              );
            }

            availableHelper(name, versionRange) {
              let minVersion;

              try {
                minVersion = helpers().minVersion(name);
              } catch (err) {
                if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
                return false;
              }

              if (typeof versionRange !== "string") return true;
              if (_semver().default.valid(versionRange))
                versionRange = `^${versionRange}`;
              return (
                !_semver().default.intersects(`<${minVersion}`, versionRange) &&
                !_semver().default.intersects(`>=8.0.0`, versionRange)
              );
            }

            addHelper(name) {
              const declar = this.declarations[name];
              if (declar) return t().cloneNode(declar);
              const generator = this.get("helperGenerator");

              if (generator) {
                const res = generator(name);
                if (res) return res;
              }

              const uid = (this.declarations[
                name
              ] = this.scope.generateUidIdentifier(name));
              const dependencies = {};

              for (const dep of helpers().getDependencies(name)) {
                dependencies[dep] = this.addHelper(dep);
              }

              const { nodes, globals } = helpers().get(
                name,
                dep => dependencies[dep],
                uid,
                Object.keys(this.scope.getAllBindings())
              );
              globals.forEach(name => {
                if (this.path.scope.hasBinding(name, true)) {
                  this.path.scope.rename(name);
                }
              });
              nodes.forEach(node => {
                node._compact = true;
              });
              this.path.unshiftContainer("body", nodes);
              this.path.get("body").forEach(path => {
                if (nodes.indexOf(path.node) === -1) return;
                if (path.isVariableDeclaration())
                  this.scope.registerDeclaration(path);
              });
              return uid;
            }

            addTemplateObject() {
              throw new Error(
                "This function has been moved into the template literal transform itself."
              );
            }

            buildCodeFrameError(node, msg, Error = SyntaxError) {
              let loc = node && (node.loc || node._loc);
              msg = `${this.opts.filename}: ${msg}`;

              if (!loc && node) {
                const state = {
                  loc: null,
                };
                (0, _babelTraverse().default)(
                  node,
                  errorVisitor,
                  this.scope,
                  state
                );
                loc = state.loc;
                let txt =
                  "This is an error on an internal node. Probably an internal error.";
                if (loc) txt += " Location has been estimated.";
                msg += ` (${txt})`;
              }

              if (loc) {
                const { highlightCode = true } = this.opts;
                msg +=
                  "\n" +
                  (0, _babelCodeFrame().codeFrameColumns)(
                    this.code,
                    {
                      start: {
                        line: loc.start.line,
                        column: loc.start.column + 1,
                      },
                    },
                    {
                      highlightCode,
                    }
                  );
              }

              return new Error(msg);
            }
          }

          exports.default = File;
        },
        /* 133 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.get = get;
          exports.minVersion = minVersion;
          exports.getDependencies = getDependencies;
          exports.default = exports.list = void 0;

          function _babelTraverse() {
            const data = _interopRequireDefault(__webpack_require__(8));

            _babelTraverse = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _helpers = _interopRequireDefault(__webpack_require__(395));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function makePath(path) {
            const parts = [];

            for (; path.parentPath; path = path.parentPath) {
              parts.push(path.key);
              if (path.inList) parts.push(path.listKey);
            }

            return parts.reverse().join(".");
          }

          function getHelperMetadata(file) {
            const globals = new Set();
            const localBindingNames = new Set();
            const dependencies = new Map();
            let exportName;
            let exportPath;
            const exportBindingAssignments = [];
            const importPaths = [];
            const importBindingsReferences = [];
            (0, _babelTraverse().default)(file, {
              ImportDeclaration(child) {
                const name = child.node.source.value;

                if (!_helpers.default[name]) {
                  throw child.buildCodeFrameError(`Unknown helper ${name}`);
                }

                if (
                  child.get("specifiers").length !== 1 ||
                  !child.get("specifiers.0").isImportDefaultSpecifier()
                ) {
                  throw child.buildCodeFrameError(
                    "Helpers can only import a default value"
                  );
                }

                const bindingIdentifier = child.node.specifiers[0].local;
                dependencies.set(bindingIdentifier, name);
                importPaths.push(makePath(child));
              },

              ExportDefaultDeclaration(child) {
                const decl = child.get("declaration");

                if (decl.isFunctionDeclaration()) {
                  if (!decl.node.id) {
                    throw decl.buildCodeFrameError(
                      "Helpers should give names to their exported func declaration"
                    );
                  }

                  exportName = decl.node.id.name;
                }

                exportPath = makePath(child);
              },

              ExportAllDeclaration(child) {
                throw child.buildCodeFrameError(
                  "Helpers can only export default"
                );
              },

              ExportNamedDeclaration(child) {
                throw child.buildCodeFrameError(
                  "Helpers can only export default"
                );
              },

              Statement(child) {
                if (child.isModuleDeclaration()) return;
                child.skip();
              },
            });
            (0, _babelTraverse().default)(file, {
              Program(path) {
                const bindings = path.scope.getAllBindings();
                Object.keys(bindings).forEach(name => {
                  if (name === exportName) return;
                  if (dependencies.has(bindings[name].identifier)) return;
                  localBindingNames.add(name);
                });
              },

              ReferencedIdentifier(child) {
                const name = child.node.name;
                const binding = child.scope.getBinding(name, true);

                if (!binding) {
                  globals.add(name);
                } else if (dependencies.has(binding.identifier)) {
                  importBindingsReferences.push(makePath(child));
                }
              },

              AssignmentExpression(child) {
                const left = child.get("left");
                if (!(exportName in left.getBindingIdentifiers())) return;

                if (!left.isIdentifier()) {
                  throw left.buildCodeFrameError(
                    "Only simple assignments to exports are allowed in helpers"
                  );
                }

                const binding = child.scope.getBinding(exportName);

                if (binding && binding.scope.path.isProgram()) {
                  exportBindingAssignments.push(makePath(child));
                }
              },
            });
            if (!exportPath)
              throw new Error("Helpers must default-export something.");
            exportBindingAssignments.reverse();
            return {
              globals: Array.from(globals),
              localBindingNames: Array.from(localBindingNames),
              dependencies,
              exportBindingAssignments,
              exportPath,
              exportName,
              importBindingsReferences,
              importPaths,
            };
          }

          function permuteHelperAST(
            file,
            metadata,
            id,
            localBindings,
            getDependency
          ) {
            if (localBindings && !id) {
              throw new Error(
                "Unexpected local bindings for module-based helpers."
              );
            }

            if (!id) return;
            const {
              localBindingNames,
              dependencies,
              exportBindingAssignments,
              exportPath,
              exportName,
              importBindingsReferences,
              importPaths,
            } = metadata;
            const dependenciesRefs = {};
            dependencies.forEach((name, id) => {
              dependenciesRefs[id.name] =
                (typeof getDependency === "function" && getDependency(name)) ||
                id;
            });
            const toRename = {};
            const bindings = new Set(localBindings || []);
            localBindingNames.forEach(name => {
              let newName = name;

              while (bindings.has(newName)) newName = "_" + newName;

              if (newName !== name) toRename[name] = newName;
            });

            if (id.type === "Identifier" && exportName !== id.name) {
              toRename[exportName] = id.name;
            }

            (0, _babelTraverse().default)(file, {
              Program(path) {
                const exp = path.get(exportPath);
                const imps = importPaths.map(p => path.get(p));
                const impsBindingRefs = importBindingsReferences.map(p =>
                  path.get(p)
                );
                const decl = exp.get("declaration");

                if (id.type === "Identifier") {
                  if (decl.isFunctionDeclaration()) {
                    exp.replaceWith(decl);
                  } else {
                    exp.replaceWith(
                      t().variableDeclaration("var", [
                        t().variableDeclarator(id, decl.node),
                      ])
                    );
                  }
                } else if (id.type === "MemberExpression") {
                  if (decl.isFunctionDeclaration()) {
                    exportBindingAssignments.forEach(assignPath => {
                      const assign = path.get(assignPath);
                      assign.replaceWith(
                        t().assignmentExpression("=", id, assign.node)
                      );
                    });
                    exp.replaceWith(decl);
                    path.pushContainer(
                      "body",
                      t().expressionStatement(
                        t().assignmentExpression(
                          "=",
                          id,
                          t().identifier(exportName)
                        )
                      )
                    );
                  } else {
                    exp.replaceWith(
                      t().expressionStatement(
                        t().assignmentExpression("=", id, decl.node)
                      )
                    );
                  }
                } else {
                  throw new Error("Unexpected helper format.");
                }

                Object.keys(toRename).forEach(name => {
                  path.scope.rename(name, toRename[name]);
                });

                for (const path of imps) path.remove();

                for (const path of impsBindingRefs) {
                  const node = t().cloneNode(dependenciesRefs[path.node.name]);
                  path.replaceWith(node);
                }

                path.stop();
              },
            });
          }

          const helperData = Object.create(null);

          function loadHelper(name) {
            if (!helperData[name]) {
              const helper = _helpers.default[name];

              if (!helper) {
                throw Object.assign(
                  new ReferenceError(`Unknown helper ${name}`),
                  {
                    code: "BABEL_HELPER_UNKNOWN",
                    helper: name,
                  }
                );
              }

              const fn = () => {
                return t().file(helper.ast());
              };

              const metadata = getHelperMetadata(fn());
              helperData[name] = {
                build(getDependency, id, localBindings) {
                  const file = fn();
                  permuteHelperAST(
                    file,
                    metadata,
                    id,
                    localBindings,
                    getDependency
                  );
                  return {
                    nodes: file.program.body,
                    globals: metadata.globals,
                  };
                },

                minVersion() {
                  return helper.minVersion;
                },

                dependencies: metadata.dependencies,
              };
            }

            return helperData[name];
          }

          function get(name, getDependency, id, localBindings) {
            return loadHelper(name).build(getDependency, id, localBindings);
          }

          function minVersion(name) {
            return loadHelper(name).minVersion();
          }

          function getDependencies(name) {
            return Array.from(loadHelper(name).dependencies.values());
          }

          const list = Object.keys(_helpers.default)
            .map(name => name.replace(/^_/, ""))
            .filter(name => name !== "__esModule");
          exports.list = list;
          var _default = get;
          exports.default = _default;
        },
        /* 134 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.ForAwaitStatement = exports.NumericLiteralTypeAnnotation = exports.ExistentialTypeParam = exports.SpreadProperty = exports.RestProperty = exports.Flow = exports.Pure = exports.Generated = exports.User = exports.Var = exports.BlockScoped = exports.Referenced = exports.Scope = exports.Expression = exports.Statement = exports.BindingIdentifier = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = void 0;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const ReferencedIdentifier = {
            types: ["Identifier", "JSXIdentifier"],

            checkPath({ node, parent }, opts) {
              if (
                !t().isIdentifier(node, opts) &&
                !t().isJSXMemberExpression(parent, opts)
              ) {
                if (t().isJSXIdentifier(node, opts)) {
                  if (t().react.isCompatTag(node.name)) return false;
                } else {
                  return false;
                }
              }

              return t().isReferenced(node, parent);
            },
          };
          exports.ReferencedIdentifier = ReferencedIdentifier;
          const ReferencedMemberExpression = {
            types: ["MemberExpression"],

            checkPath({ node, parent }) {
              return (
                t().isMemberExpression(node) && t().isReferenced(node, parent)
              );
            },
          };
          exports.ReferencedMemberExpression = ReferencedMemberExpression;
          const BindingIdentifier = {
            types: ["Identifier"],

            checkPath({ node, parent }) {
              return t().isIdentifier(node) && t().isBinding(node, parent);
            },
          };
          exports.BindingIdentifier = BindingIdentifier;
          const Statement = {
            types: ["Statement"],

            checkPath({ node, parent }) {
              if (t().isStatement(node)) {
                if (t().isVariableDeclaration(node)) {
                  if (
                    t().isForXStatement(parent, {
                      left: node,
                    })
                  )
                    return false;
                  if (
                    t().isForStatement(parent, {
                      init: node,
                    })
                  )
                    return false;
                }

                return true;
              } else {
                return false;
              }
            },
          };
          exports.Statement = Statement;
          const Expression = {
            types: ["Expression"],

            checkPath(path) {
              if (path.isIdentifier()) {
                return path.isReferencedIdentifier();
              } else {
                return t().isExpression(path.node);
              }
            },
          };
          exports.Expression = Expression;
          const Scope = {
            types: ["Scopable"],

            checkPath(path) {
              return t().isScope(path.node, path.parent);
            },
          };
          exports.Scope = Scope;
          const Referenced = {
            checkPath(path) {
              return t().isReferenced(path.node, path.parent);
            },
          };
          exports.Referenced = Referenced;
          const BlockScoped = {
            checkPath(path) {
              return t().isBlockScoped(path.node);
            },
          };
          exports.BlockScoped = BlockScoped;
          const Var = {
            types: ["VariableDeclaration"],

            checkPath(path) {
              return t().isVar(path.node);
            },
          };
          exports.Var = Var;
          const User = {
            checkPath(path) {
              return path.node && !!path.node.loc;
            },
          };
          exports.User = User;
          const Generated = {
            checkPath(path) {
              return !path.isUser();
            },
          };
          exports.Generated = Generated;
          const Pure = {
            checkPath(path, opts) {
              return path.scope.isPure(path.node, opts);
            },
          };
          exports.Pure = Pure;
          const Flow = {
            types: [
              "Flow",
              "ImportDeclaration",
              "ExportDeclaration",
              "ImportSpecifier",
            ],

            checkPath({ node }) {
              if (t().isFlow(node)) {
                return true;
              } else if (t().isImportDeclaration(node)) {
                return (
                  node.importKind === "type" || node.importKind === "typeof"
                );
              } else if (t().isExportDeclaration(node)) {
                return node.exportKind === "type";
              } else if (t().isImportSpecifier(node)) {
                return (
                  node.importKind === "type" || node.importKind === "typeof"
                );
              } else {
                return false;
              }
            },
          };
          exports.Flow = Flow;
          const RestProperty = {
            types: ["RestElement"],

            checkPath(path) {
              return path.parentPath && path.parentPath.isObjectPattern();
            },
          };
          exports.RestProperty = RestProperty;
          const SpreadProperty = {
            types: ["RestElement"],

            checkPath(path) {
              return path.parentPath && path.parentPath.isObjectExpression();
            },
          };
          exports.SpreadProperty = SpreadProperty;
          const ExistentialTypeParam = {
            types: ["ExistsTypeAnnotation"],
          };
          exports.ExistentialTypeParam = ExistentialTypeParam;
          const NumericLiteralTypeAnnotation = {
            types: ["NumberLiteralTypeAnnotation"],
          };
          exports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;
          const ForAwaitStatement = {
            types: ["ForOfStatement"],

            checkPath({ node }) {
              return node.await === true;
            },
          };
          exports.ForAwaitStatement = ForAwaitStatement;
        },
        /* 135 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _includes() {
            const data = _interopRequireDefault(__webpack_require__(74));

            _includes = function() {
              return data;
            };

            return data;
          }

          function _repeat() {
            const data = _interopRequireDefault(__webpack_require__(136));

            _repeat = function() {
              return data;
            };

            return data;
          }

          var _renamer = _interopRequireDefault(__webpack_require__(324));

          var _index = _interopRequireDefault(__webpack_require__(8));

          function _defaults() {
            const data = _interopRequireDefault(__webpack_require__(326));

            _defaults = function() {
              return data;
            };

            return data;
          }

          var _binding = _interopRequireDefault(__webpack_require__(137));

          function _globals() {
            const data = _interopRequireDefault(__webpack_require__(333));

            _globals = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _cache = __webpack_require__(42);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function gatherNodeParts(node, parts) {
            if (t().isModuleDeclaration(node)) {
              if (node.source) {
                gatherNodeParts(node.source, parts);
              } else if (node.specifiers && node.specifiers.length) {
                for (const specifier of node.specifiers) {
                  gatherNodeParts(specifier, parts);
                }
              } else if (node.declaration) {
                gatherNodeParts(node.declaration, parts);
              }
            } else if (t().isModuleSpecifier(node)) {
              gatherNodeParts(node.local, parts);
            } else if (t().isMemberExpression(node)) {
              gatherNodeParts(node.object, parts);
              gatherNodeParts(node.property, parts);
            } else if (t().isIdentifier(node)) {
              parts.push(node.name);
            } else if (t().isLiteral(node)) {
              parts.push(node.value);
            } else if (t().isCallExpression(node)) {
              gatherNodeParts(node.callee, parts);
            } else if (
              t().isObjectExpression(node) ||
              t().isObjectPattern(node)
            ) {
              for (const prop of node.properties) {
                gatherNodeParts(prop.key || prop.argument, parts);
              }
            } else if (t().isPrivateName(node)) {
              gatherNodeParts(node.id, parts);
            } else if (t().isThisExpression(node)) {
              parts.push("this");
            } else if (t().isSuper(node)) {
              parts.push("super");
            }
          }

          const collectorVisitor = {
            For(path) {
              for (const key of t().FOR_INIT_KEYS) {
                const declar = path.get(key);

                if (declar.isVar()) {
                  const parentScope =
                    path.scope.getFunctionParent() ||
                    path.scope.getProgramParent();
                  parentScope.registerBinding("var", declar);
                }
              }
            },

            Declaration(path) {
              if (path.isBlockScoped()) return;

              if (
                path.isExportDeclaration() &&
                path.get("declaration").isDeclaration()
              ) {
                return;
              }

              const parent =
                path.scope.getFunctionParent() || path.scope.getProgramParent();
              parent.registerDeclaration(path);
            },

            ReferencedIdentifier(path, state) {
              state.references.push(path);
            },

            ForXStatement(path, state) {
              const left = path.get("left");

              if (left.isPattern() || left.isIdentifier()) {
                state.constantViolations.push(path);
              }
            },

            ExportDeclaration: {
              exit(path) {
                const { node, scope } = path;
                const declar = node.declaration;

                if (
                  t().isClassDeclaration(declar) ||
                  t().isFunctionDeclaration(declar)
                ) {
                  const id = declar.id;
                  if (!id) return;
                  const binding = scope.getBinding(id.name);
                  if (binding) binding.reference(path);
                } else if (t().isVariableDeclaration(declar)) {
                  for (const decl of declar.declarations) {
                    const ids = t().getBindingIdentifiers(decl);

                    for (const name in ids) {
                      const binding = scope.getBinding(name);
                      if (binding) binding.reference(path);
                    }
                  }
                }
              },
            },

            LabeledStatement(path) {
              path.scope.getProgramParent().addGlobal(path.node);
              path.scope.getBlockParent().registerDeclaration(path);
            },

            AssignmentExpression(path, state) {
              state.assignments.push(path);
            },

            UpdateExpression(path, state) {
              state.constantViolations.push(path);
            },

            UnaryExpression(path, state) {
              if (path.node.operator === "delete") {
                state.constantViolations.push(path);
              }
            },

            BlockScoped(path) {
              let scope = path.scope;
              if (scope.path === path) scope = scope.parent;
              scope.getBlockParent().registerDeclaration(path);
            },

            ClassDeclaration(path) {
              const id = path.node.id;
              if (!id) return;
              const name = id.name;
              path.scope.bindings[name] = path.scope.getBinding(name);
            },

            Block(path) {
              const paths = path.get("body");

              for (const bodyPath of paths) {
                if (bodyPath.isFunctionDeclaration()) {
                  path.scope.getBlockParent().registerDeclaration(bodyPath);
                }
              }
            },
          };
          let uid = 0;

          class Scope {
            constructor(path) {
              const { node } = path;

              const cached = _cache.scope.get(node);

              if (cached && cached.path === path) {
                return cached;
              }

              _cache.scope.set(node, this);

              this.uid = uid++;
              this.block = node;
              this.path = path;
              this.labels = new Map();
            }

            get parent() {
              const parent = this.path.findParent(p => p.isScope());
              return parent && parent.scope;
            }

            get parentBlock() {
              return this.path.parent;
            }

            get hub() {
              return this.path.hub;
            }

            traverse(node, opts, state) {
              (0, _index.default)(node, opts, this, state, this.path);
            }

            generateDeclaredUidIdentifier(name) {
              const id = this.generateUidIdentifier(name);
              this.push({
                id,
              });
              return t().cloneNode(id);
            }

            generateUidIdentifier(name) {
              return t().identifier(this.generateUid(name));
            }

            generateUid(name = "temp") {
              name = t()
                .toIdentifier(name)
                .replace(/^_+/, "")
                .replace(/[0-9]+$/g, "");
              let uid;
              let i = 0;

              do {
                uid = this._generateUid(name, i);
                i++;
              } while (
                this.hasLabel(uid) ||
                this.hasBinding(uid) ||
                this.hasGlobal(uid) ||
                this.hasReference(uid)
              );

              const program = this.getProgramParent();
              program.references[uid] = true;
              program.uids[uid] = true;
              return uid;
            }

            _generateUid(name, i) {
              let id = name;
              if (i > 1) id += i;
              return `_${id}`;
            }

            generateUidBasedOnNode(parent, defaultName) {
              let node = parent;

              if (t().isAssignmentExpression(parent)) {
                node = parent.left;
              } else if (t().isVariableDeclarator(parent)) {
                node = parent.id;
              } else if (
                t().isObjectProperty(node) ||
                t().isObjectMethod(node)
              ) {
                node = node.key;
              }

              const parts = [];
              gatherNodeParts(node, parts);
              let id = parts.join("$");
              id = id.replace(/^_/, "") || defaultName || "ref";
              return this.generateUid(id.slice(0, 20));
            }

            generateUidIdentifierBasedOnNode(parent, defaultName) {
              return t().identifier(
                this.generateUidBasedOnNode(parent, defaultName)
              );
            }

            isStatic(node) {
              if (t().isThisExpression(node) || t().isSuper(node)) {
                return true;
              }

              if (t().isIdentifier(node)) {
                const binding = this.getBinding(node.name);

                if (binding) {
                  return binding.constant;
                } else {
                  return this.hasBinding(node.name);
                }
              }

              return false;
            }

            maybeGenerateMemoised(node, dontPush) {
              if (this.isStatic(node)) {
                return null;
              } else {
                const id = this.generateUidIdentifierBasedOnNode(node);

                if (!dontPush) {
                  this.push({
                    id,
                  });
                  return t().cloneNode(id);
                }

                return id;
              }
            }

            checkBlockScopedCollisions(local, kind, name, id) {
              if (kind === "param") return;
              if (local.kind === "local") return;
              if (kind === "hoisted" && local.kind === "let") return;
              const duplicate =
                kind === "let" ||
                local.kind === "let" ||
                local.kind === "const" ||
                local.kind === "module" ||
                (local.kind === "param" &&
                  (kind === "let" || kind === "const"));

              if (duplicate) {
                throw this.hub.buildError(
                  id,
                  `Duplicate declaration "${name}"`,
                  TypeError
                );
              }
            }

            rename(oldName, newName, block) {
              const binding = this.getBinding(oldName);

              if (binding) {
                newName = newName || this.generateUidIdentifier(oldName).name;
                return new _renamer.default(binding, oldName, newName).rename(
                  block
                );
              }
            }

            _renameFromMap(map, oldName, newName, value) {
              if (map[oldName]) {
                map[newName] = value;
                map[oldName] = null;
              }
            }

            dump() {
              const sep = (0, _repeat().default)("-", 60);
              console.log(sep);
              let scope = this;

              do {
                console.log("#", scope.block.type);

                for (const name in scope.bindings) {
                  const binding = scope.bindings[name];
                  console.log(" -", name, {
                    constant: binding.constant,
                    references: binding.references,
                    violations: binding.constantViolations.length,
                    kind: binding.kind,
                  });
                }
              } while ((scope = scope.parent));

              console.log(sep);
            }

            toArray(node, i) {
              if (t().isIdentifier(node)) {
                const binding = this.getBinding(node.name);

                if (
                  binding &&
                  binding.constant &&
                  binding.path.isGenericType("Array")
                ) {
                  return node;
                }
              }

              if (t().isArrayExpression(node)) {
                return node;
              }

              if (
                t().isIdentifier(node, {
                  name: "arguments",
                })
              ) {
                return t().callExpression(
                  t().memberExpression(
                    t().memberExpression(
                      t().memberExpression(
                        t().identifier("Array"),
                        t().identifier("prototype")
                      ),
                      t().identifier("slice")
                    ),
                    t().identifier("call")
                  ),
                  [node]
                );
              }

              let helperName;
              const args = [node];

              if (i === true) {
                helperName = "toConsumableArray";
              } else if (i) {
                args.push(t().numericLiteral(i));
                helperName = "slicedToArray";
              } else {
                helperName = "toArray";
              }

              return t().callExpression(this.hub.addHelper(helperName), args);
            }

            hasLabel(name) {
              return !!this.getLabel(name);
            }

            getLabel(name) {
              return this.labels.get(name);
            }

            registerLabel(path) {
              this.labels.set(path.node.label.name, path);
            }

            registerDeclaration(path) {
              if (path.isLabeledStatement()) {
                this.registerLabel(path);
              } else if (path.isFunctionDeclaration()) {
                this.registerBinding("hoisted", path.get("id"), path);
              } else if (path.isVariableDeclaration()) {
                const declarations = path.get("declarations");

                for (const declar of declarations) {
                  this.registerBinding(path.node.kind, declar);
                }
              } else if (path.isClassDeclaration()) {
                this.registerBinding("let", path);
              } else if (path.isImportDeclaration()) {
                const specifiers = path.get("specifiers");

                for (const specifier of specifiers) {
                  this.registerBinding("module", specifier);
                }
              } else if (path.isExportDeclaration()) {
                const declar = path.get("declaration");

                if (
                  declar.isClassDeclaration() ||
                  declar.isFunctionDeclaration() ||
                  declar.isVariableDeclaration()
                ) {
                  this.registerDeclaration(declar);
                }
              } else {
                this.registerBinding("unknown", path);
              }
            }

            buildUndefinedNode() {
              if (this.hasBinding("undefined")) {
                return t().unaryExpression("void", t().numericLiteral(0), true);
              } else {
                return t().identifier("undefined");
              }
            }

            registerConstantViolation(path) {
              const ids = path.getBindingIdentifiers();

              for (const name in ids) {
                const binding = this.getBinding(name);
                if (binding) binding.reassign(path);
              }
            }

            registerBinding(kind, path, bindingPath = path) {
              if (!kind) throw new ReferenceError("no `kind`");

              if (path.isVariableDeclaration()) {
                const declarators = path.get("declarations");

                for (const declar of declarators) {
                  this.registerBinding(kind, declar);
                }

                return;
              }

              const parent = this.getProgramParent();
              const ids = path.getBindingIdentifiers(true);

              for (const name in ids) {
                for (const id of ids[name]) {
                  const local = this.getOwnBinding(name);

                  if (local) {
                    if (local.identifier === id) continue;
                    this.checkBlockScopedCollisions(local, kind, name, id);
                  }

                  parent.references[name] = true;

                  if (local) {
                    this.registerConstantViolation(bindingPath);
                  } else {
                    this.bindings[name] = new _binding.default({
                      identifier: id,
                      scope: this,
                      path: bindingPath,
                      kind: kind,
                    });
                  }
                }
              }
            }

            addGlobal(node) {
              this.globals[node.name] = node;
            }

            hasUid(name) {
              let scope = this;

              do {
                if (scope.uids[name]) return true;
              } while ((scope = scope.parent));

              return false;
            }

            hasGlobal(name) {
              let scope = this;

              do {
                if (scope.globals[name]) return true;
              } while ((scope = scope.parent));

              return false;
            }

            hasReference(name) {
              let scope = this;

              do {
                if (scope.references[name]) return true;
              } while ((scope = scope.parent));

              return false;
            }

            isPure(node, constantsOnly) {
              if (t().isIdentifier(node)) {
                const binding = this.getBinding(node.name);
                if (!binding) return false;
                if (constantsOnly) return binding.constant;
                return true;
              } else if (t().isClass(node)) {
                if (
                  node.superClass &&
                  !this.isPure(node.superClass, constantsOnly)
                ) {
                  return false;
                }

                return this.isPure(node.body, constantsOnly);
              } else if (t().isClassBody(node)) {
                for (const method of node.body) {
                  if (!this.isPure(method, constantsOnly)) return false;
                }

                return true;
              } else if (t().isBinary(node)) {
                return (
                  this.isPure(node.left, constantsOnly) &&
                  this.isPure(node.right, constantsOnly)
                );
              } else if (t().isArrayExpression(node)) {
                for (const elem of node.elements) {
                  if (!this.isPure(elem, constantsOnly)) return false;
                }

                return true;
              } else if (t().isObjectExpression(node)) {
                for (const prop of node.properties) {
                  if (!this.isPure(prop, constantsOnly)) return false;
                }

                return true;
              } else if (t().isClassMethod(node)) {
                if (node.computed && !this.isPure(node.key, constantsOnly))
                  return false;
                if (node.kind === "get" || node.kind === "set") return false;
                return true;
              } else if (t().isProperty(node)) {
                if (node.computed && !this.isPure(node.key, constantsOnly))
                  return false;
                return this.isPure(node.value, constantsOnly);
              } else if (t().isUnaryExpression(node)) {
                return this.isPure(node.argument, constantsOnly);
              } else if (t().isTaggedTemplateExpression(node)) {
                return (
                  t().matchesPattern(node.tag, "String.raw") &&
                  !this.hasBinding("String", true) &&
                  this.isPure(node.quasi, constantsOnly)
                );
              } else if (t().isTemplateLiteral(node)) {
                for (const expression of node.expressions) {
                  if (!this.isPure(expression, constantsOnly)) return false;
                }

                return true;
              } else {
                return t().isPureish(node);
              }
            }

            setData(key, val) {
              return (this.data[key] = val);
            }

            getData(key) {
              let scope = this;

              do {
                const data = scope.data[key];
                if (data != null) return data;
              } while ((scope = scope.parent));
            }

            removeData(key) {
              let scope = this;

              do {
                const data = scope.data[key];
                if (data != null) scope.data[key] = null;
              } while ((scope = scope.parent));
            }

            init() {
              if (!this.references) this.crawl();
            }

            crawl() {
              const path = this.path;
              this.references = Object.create(null);
              this.bindings = Object.create(null);
              this.globals = Object.create(null);
              this.uids = Object.create(null);
              this.data = Object.create(null);

              if (path.isLoop()) {
                for (const key of t().FOR_INIT_KEYS) {
                  const node = path.get(key);
                  if (node.isBlockScoped())
                    this.registerBinding(node.node.kind, node);
                }
              }

              if (path.isFunctionExpression() && path.has("id")) {
                if (!path.get("id").node[t().NOT_LOCAL_BINDING]) {
                  this.registerBinding("local", path.get("id"), path);
                }
              }

              if (path.isClassExpression() && path.has("id")) {
                if (!path.get("id").node[t().NOT_LOCAL_BINDING]) {
                  this.registerBinding("local", path);
                }
              }

              if (path.isFunction()) {
                const params = path.get("params");

                for (const param of params) {
                  this.registerBinding("param", param);
                }
              }

              if (path.isCatchClause()) {
                this.registerBinding("let", path);
              }

              const parent = this.getProgramParent();
              if (parent.crawling) return;
              const state = {
                references: [],
                constantViolations: [],
                assignments: [],
              };
              this.crawling = true;
              path.traverse(collectorVisitor, state);
              this.crawling = false;

              for (const path of state.assignments) {
                const ids = path.getBindingIdentifiers();
                let programParent;

                for (const name in ids) {
                  if (path.scope.getBinding(name)) continue;
                  programParent =
                    programParent || path.scope.getProgramParent();
                  programParent.addGlobal(ids[name]);
                }

                path.scope.registerConstantViolation(path);
              }

              for (const ref of state.references) {
                const binding = ref.scope.getBinding(ref.node.name);

                if (binding) {
                  binding.reference(ref);
                } else {
                  ref.scope.getProgramParent().addGlobal(ref.node);
                }
              }

              for (const path of state.constantViolations) {
                path.scope.registerConstantViolation(path);
              }
            }

            push(opts) {
              let path = this.path;

              if (!path.isBlockStatement() && !path.isProgram()) {
                path = this.getBlockParent().path;
              }

              if (path.isSwitchStatement()) {
                path = (this.getFunctionParent() || this.getProgramParent())
                  .path;
              }

              if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
                path.ensureBlock();
                path = path.get("body");
              }

              const unique = opts.unique;
              const kind = opts.kind || "var";
              const blockHoist =
                opts._blockHoist == null ? 2 : opts._blockHoist;
              const dataKey = `declaration:${kind}:${blockHoist}`;
              let declarPath = !unique && path.getData(dataKey);

              if (!declarPath) {
                const declar = t().variableDeclaration(kind, []);
                declar._blockHoist = blockHoist;
                [declarPath] = path.unshiftContainer("body", [declar]);
                if (!unique) path.setData(dataKey, declarPath);
              }

              const declarator = t().variableDeclarator(opts.id, opts.init);
              declarPath.node.declarations.push(declarator);
              this.registerBinding(kind, declarPath.get("declarations").pop());
            }

            getProgramParent() {
              let scope = this;

              do {
                if (scope.path.isProgram()) {
                  return scope;
                }
              } while ((scope = scope.parent));

              throw new Error("Couldn't find a Program");
            }

            getFunctionParent() {
              let scope = this;

              do {
                if (scope.path.isFunctionParent()) {
                  return scope;
                }
              } while ((scope = scope.parent));

              return null;
            }

            getBlockParent() {
              let scope = this;

              do {
                if (scope.path.isBlockParent()) {
                  return scope;
                }
              } while ((scope = scope.parent));

              throw new Error(
                "We couldn't find a BlockStatement, For, Switch, Function, Loop or Program..."
              );
            }

            getAllBindings() {
              const ids = Object.create(null);
              let scope = this;

              do {
                (0, _defaults().default)(ids, scope.bindings);
                scope = scope.parent;
              } while (scope);

              return ids;
            }

            getAllBindingsOfKind() {
              const ids = Object.create(null);

              for (const kind of arguments) {
                let scope = this;

                do {
                  for (const name in scope.bindings) {
                    const binding = scope.bindings[name];
                    if (binding.kind === kind) ids[name] = binding;
                  }

                  scope = scope.parent;
                } while (scope);
              }

              return ids;
            }

            bindingIdentifierEquals(name, node) {
              return this.getBindingIdentifier(name) === node;
            }

            getBinding(name) {
              let scope = this;

              do {
                const binding = scope.getOwnBinding(name);
                if (binding) return binding;
              } while ((scope = scope.parent));
            }

            getOwnBinding(name) {
              return this.bindings[name];
            }

            getBindingIdentifier(name) {
              const info = this.getBinding(name);
              return info && info.identifier;
            }

            getOwnBindingIdentifier(name) {
              const binding = this.bindings[name];
              return binding && binding.identifier;
            }

            hasOwnBinding(name) {
              return !!this.getOwnBinding(name);
            }

            hasBinding(name, noGlobals) {
              if (!name) return false;
              if (this.hasOwnBinding(name)) return true;
              if (this.parentHasBinding(name, noGlobals)) return true;
              if (this.hasUid(name)) return true;
              if (!noGlobals && (0, _includes().default)(Scope.globals, name))
                return true;
              if (
                !noGlobals &&
                (0, _includes().default)(Scope.contextVariables, name)
              )
                return true;
              return false;
            }

            parentHasBinding(name, noGlobals) {
              return this.parent && this.parent.hasBinding(name, noGlobals);
            }

            updateOwnBinding(id, kind, path) {
              if (!kind) throw new ReferenceError("no `kind`");
              const binding = this.getOwnBinding(id.name);
              if (!binding)
                throw new ReferenceError(`Unknown binding: ${id.name}`);
              binding.identifier = id;
              binding.kind = kind;
              binding.path = path;
            }

            moveBindingTo(name, scope) {
              const info = this.getBinding(name);

              if (info) {
                info.scope.removeOwnBinding(name);
                info.scope = scope;
                scope.bindings[name] = info;
              }
            }

            removeOwnBinding(name) {
              delete this.bindings[name];
            }

            removeBinding(name) {
              const info = this.getBinding(name);

              if (info) {
                info.scope.removeOwnBinding(name);
              }

              let scope = this;

              do {
                if (scope.uids[name]) {
                  scope.uids[name] = false;
                }
              } while ((scope = scope.parent));
            }
          }

          exports.default = Scope;
          Scope.globals = Object.keys(_globals().default.builtin);
          Scope.contextVariables = [
            "arguments",
            "undefined",
            "Infinity",
            "NaN",
          ];
        },
        /* 136 */
        function(module, exports, __webpack_require__) {
          var baseRepeat = __webpack_require__(322),
            isIterateeCall = __webpack_require__(77),
            toInteger = __webpack_require__(75),
            toString = __webpack_require__(78);

          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
              n = 1;
            } else {
              n = toInteger(n);
            }

            return baseRepeat(toString(string), n);
          }

          module.exports = repeat;
        },
        /* 137 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          class Binding {
            constructor({ identifier, scope, path, kind }) {
              this.identifier = identifier;
              this.scope = scope;
              this.path = path;
              this.kind = kind;
              this.constantViolations = [];
              this.constant = true;
              this.referencePaths = [];
              this.referenced = false;
              this.references = 0;
              this.clearValue();
            }

            deoptValue() {
              this.clearValue();
              this.hasDeoptedValue = true;
            }

            setValue(value) {
              if (this.hasDeoptedValue) return;
              this.hasValue = true;
              this.value = value;
            }

            clearValue() {
              this.hasDeoptedValue = false;
              this.hasValue = false;
              this.value = null;
            }

            reassign(path) {
              this.constant = false;

              if (this.constantViolations.indexOf(path) !== -1) {
                return;
              }

              this.constantViolations.push(path);
            }

            reference(path) {
              if (this.referencePaths.indexOf(path) !== -1) {
                return;
              }

              this.referenced = true;
              this.references++;
              this.referencePaths.push(path);
            }

            dereference() {
              this.references--;
              this.referenced = !!this.references;
            }
          }

          exports.default = Binding;
        },
        /* 138 */
        function(module, exports, __webpack_require__) {
          var identity = __webpack_require__(41),
            overRest = __webpack_require__(327),
            setToString = __webpack_require__(329);

          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }

          module.exports = baseRest;
        },
        /* 139 */
        function(module, exports, __webpack_require__) {
          exports.SourceMapGenerator = __webpack_require__(
            140
          ).SourceMapGenerator;
          exports.SourceMapConsumer = __webpack_require__(
            338
          ).SourceMapConsumer;
          exports.SourceNode = __webpack_require__(341).SourceNode;
        },
        /* 140 */
        function(module, exports, __webpack_require__) {
          var base64VLQ = __webpack_require__(141);

          var util = __webpack_require__(29);

          var ArraySet = __webpack_require__(142).ArraySet;

          var MappingList = __webpack_require__(337).MappingList;

          function SourceMapGenerator(aArgs) {
            if (!aArgs) {
              aArgs = {};
            }

            this._file = util.getArg(aArgs, "file", null);
            this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
            this._skipValidation = util.getArg(aArgs, "skipValidation", false);
            this._sources = new ArraySet();
            this._names = new ArraySet();
            this._mappings = new MappingList();
            this._sourcesContents = null;
          }

          SourceMapGenerator.prototype._version = 3;

          SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(
            aSourceMapConsumer
          ) {
            var sourceRoot = aSourceMapConsumer.sourceRoot;
            var generator = new SourceMapGenerator({
              file: aSourceMapConsumer.file,
              sourceRoot: sourceRoot,
            });
            aSourceMapConsumer.eachMapping(function(mapping) {
              var newMapping = {
                generated: {
                  line: mapping.generatedLine,
                  column: mapping.generatedColumn,
                },
              };

              if (mapping.source != null) {
                newMapping.source = mapping.source;

                if (sourceRoot != null) {
                  newMapping.source = util.relative(
                    sourceRoot,
                    newMapping.source
                  );
                }

                newMapping.original = {
                  line: mapping.originalLine,
                  column: mapping.originalColumn,
                };

                if (mapping.name != null) {
                  newMapping.name = mapping.name;
                }
              }

              generator.addMapping(newMapping);
            });
            aSourceMapConsumer.sources.forEach(function(sourceFile) {
              var sourceRelative = sourceFile;

              if (sourceRoot !== null) {
                sourceRelative = util.relative(sourceRoot, sourceFile);
              }

              if (!generator._sources.has(sourceRelative)) {
                generator._sources.add(sourceRelative);
              }

              var content = aSourceMapConsumer.sourceContentFor(sourceFile);

              if (content != null) {
                generator.setSourceContent(sourceFile, content);
              }
            });
            return generator;
          };

          SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(
            aArgs
          ) {
            var generated = util.getArg(aArgs, "generated");
            var original = util.getArg(aArgs, "original", null);
            var source = util.getArg(aArgs, "source", null);
            var name = util.getArg(aArgs, "name", null);

            if (!this._skipValidation) {
              this._validateMapping(generated, original, source, name);
            }

            if (source != null) {
              source = String(source);

              if (!this._sources.has(source)) {
                this._sources.add(source);
              }
            }

            if (name != null) {
              name = String(name);

              if (!this._names.has(name)) {
                this._names.add(name);
              }
            }

            this._mappings.add({
              generatedLine: generated.line,
              generatedColumn: generated.column,
              originalLine: original != null && original.line,
              originalColumn: original != null && original.column,
              source: source,
              name: name,
            });
          };

          SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(
            aSourceFile,
            aSourceContent
          ) {
            var source = aSourceFile;

            if (this._sourceRoot != null) {
              source = util.relative(this._sourceRoot, source);
            }

            if (aSourceContent != null) {
              if (!this._sourcesContents) {
                this._sourcesContents = Object.create(null);
              }

              this._sourcesContents[util.toSetString(source)] = aSourceContent;
            } else if (this._sourcesContents) {
              delete this._sourcesContents[util.toSetString(source)];

              if (Object.keys(this._sourcesContents).length === 0) {
                this._sourcesContents = null;
              }
            }
          };

          SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(
            aSourceMapConsumer,
            aSourceFile,
            aSourceMapPath
          ) {
            var sourceFile = aSourceFile;

            if (aSourceFile == null) {
              if (aSourceMapConsumer.file == null) {
                throw new Error(
                  "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
                    'or the source map\'s "file" property. Both were omitted.'
                );
              }

              sourceFile = aSourceMapConsumer.file;
            }

            var sourceRoot = this._sourceRoot;

            if (sourceRoot != null) {
              sourceFile = util.relative(sourceRoot, sourceFile);
            }

            var newSources = new ArraySet();
            var newNames = new ArraySet();

            this._mappings.unsortedForEach(function(mapping) {
              if (
                mapping.source === sourceFile &&
                mapping.originalLine != null
              ) {
                var original = aSourceMapConsumer.originalPositionFor({
                  line: mapping.originalLine,
                  column: mapping.originalColumn,
                });

                if (original.source != null) {
                  mapping.source = original.source;

                  if (aSourceMapPath != null) {
                    mapping.source = util.join(aSourceMapPath, mapping.source);
                  }

                  if (sourceRoot != null) {
                    mapping.source = util.relative(sourceRoot, mapping.source);
                  }

                  mapping.originalLine = original.line;
                  mapping.originalColumn = original.column;

                  if (original.name != null) {
                    mapping.name = original.name;
                  }
                }
              }

              var source = mapping.source;

              if (source != null && !newSources.has(source)) {
                newSources.add(source);
              }

              var name = mapping.name;

              if (name != null && !newNames.has(name)) {
                newNames.add(name);
              }
            }, this);

            this._sources = newSources;
            this._names = newNames;
            aSourceMapConsumer.sources.forEach(function(sourceFile) {
              var content = aSourceMapConsumer.sourceContentFor(sourceFile);

              if (content != null) {
                if (aSourceMapPath != null) {
                  sourceFile = util.join(aSourceMapPath, sourceFile);
                }

                if (sourceRoot != null) {
                  sourceFile = util.relative(sourceRoot, sourceFile);
                }

                this.setSourceContent(sourceFile, content);
              }
            }, this);
          };

          SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(
            aGenerated,
            aOriginal,
            aSource,
            aName
          ) {
            if (
              aOriginal &&
              typeof aOriginal.line !== "number" &&
              typeof aOriginal.column !== "number"
            ) {
              throw new Error(
                "original.line and original.column are not numbers -- you probably meant to omit " +
                  "the original mapping entirely and only map the generated position. If so, pass " +
                  "null for the original mapping instead of an object with empty or null values."
              );
            }

            if (
              aGenerated &&
              "line" in aGenerated &&
              "column" in aGenerated &&
              aGenerated.line > 0 &&
              aGenerated.column >= 0 &&
              !aOriginal &&
              !aSource &&
              !aName
            ) {
              return;
            } else if (
              aGenerated &&
              "line" in aGenerated &&
              "column" in aGenerated &&
              aOriginal &&
              "line" in aOriginal &&
              "column" in aOriginal &&
              aGenerated.line > 0 &&
              aGenerated.column >= 0 &&
              aOriginal.line > 0 &&
              aOriginal.column >= 0 &&
              aSource
            ) {
              return;
            } else {
              throw new Error(
                "Invalid mapping: " +
                  JSON.stringify({
                    generated: aGenerated,
                    source: aSource,
                    original: aOriginal,
                    name: aName,
                  })
              );
            }
          };

          SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
            var previousGeneratedColumn = 0;
            var previousGeneratedLine = 1;
            var previousOriginalColumn = 0;
            var previousOriginalLine = 0;
            var previousName = 0;
            var previousSource = 0;
            var result = "";
            var next;
            var mapping;
            var nameIdx;
            var sourceIdx;

            var mappings = this._mappings.toArray();

            for (var i = 0, len = mappings.length; i < len; i++) {
              mapping = mappings[i];
              next = "";

              if (mapping.generatedLine !== previousGeneratedLine) {
                previousGeneratedColumn = 0;

                while (mapping.generatedLine !== previousGeneratedLine) {
                  next += ";";
                  previousGeneratedLine++;
                }
              } else {
                if (i > 0) {
                  if (
                    !util.compareByGeneratedPositionsInflated(
                      mapping,
                      mappings[i - 1]
                    )
                  ) {
                    continue;
                  }

                  next += ",";
                }
              }

              next += base64VLQ.encode(
                mapping.generatedColumn - previousGeneratedColumn
              );
              previousGeneratedColumn = mapping.generatedColumn;

              if (mapping.source != null) {
                sourceIdx = this._sources.indexOf(mapping.source);
                next += base64VLQ.encode(sourceIdx - previousSource);
                previousSource = sourceIdx;
                next += base64VLQ.encode(
                  mapping.originalLine - 1 - previousOriginalLine
                );
                previousOriginalLine = mapping.originalLine - 1;
                next += base64VLQ.encode(
                  mapping.originalColumn - previousOriginalColumn
                );
                previousOriginalColumn = mapping.originalColumn;

                if (mapping.name != null) {
                  nameIdx = this._names.indexOf(mapping.name);
                  next += base64VLQ.encode(nameIdx - previousName);
                  previousName = nameIdx;
                }
              }

              result += next;
            }

            return result;
          };

          SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(
            aSources,
            aSourceRoot
          ) {
            return aSources.map(function(source) {
              if (!this._sourcesContents) {
                return null;
              }

              if (aSourceRoot != null) {
                source = util.relative(aSourceRoot, source);
              }

              var key = util.toSetString(source);
              return Object.prototype.hasOwnProperty.call(
                this._sourcesContents,
                key
              )
                ? this._sourcesContents[key]
                : null;
            }, this);
          };

          SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
            var map = {
              version: this._version,
              sources: this._sources.toArray(),
              names: this._names.toArray(),
              mappings: this._serializeMappings(),
            };

            if (this._file != null) {
              map.file = this._file;
            }

            if (this._sourceRoot != null) {
              map.sourceRoot = this._sourceRoot;
            }

            if (this._sourcesContents) {
              map.sourcesContent = this._generateSourcesContent(
                map.sources,
                map.sourceRoot
              );
            }

            return map;
          };

          SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
            return JSON.stringify(this.toJSON());
          };

          exports.SourceMapGenerator = SourceMapGenerator;
        },
        /* 141 */
        function(module, exports, __webpack_require__) {
          var base64 = __webpack_require__(336);

          var VLQ_BASE_SHIFT = 5;
          var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
          var VLQ_BASE_MASK = VLQ_BASE - 1;
          var VLQ_CONTINUATION_BIT = VLQ_BASE;

          function toVLQSigned(aValue) {
            return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
          }

          function fromVLQSigned(aValue) {
            var isNegative = (aValue & 1) === 1;
            var shifted = aValue >> 1;
            return isNegative ? -shifted : shifted;
          }

          exports.encode = function base64VLQ_encode(aValue) {
            var encoded = "";
            var digit;
            var vlq = toVLQSigned(aValue);

            do {
              digit = vlq & VLQ_BASE_MASK;
              vlq >>>= VLQ_BASE_SHIFT;

              if (vlq > 0) {
                digit |= VLQ_CONTINUATION_BIT;
              }

              encoded += base64.encode(digit);
            } while (vlq > 0);

            return encoded;
          };

          exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
            var strLen = aStr.length;
            var result = 0;
            var shift = 0;
            var continuation, digit;

            do {
              if (aIndex >= strLen) {
                throw new Error("Expected more digits in base 64 VLQ value.");
              }

              digit = base64.decode(aStr.charCodeAt(aIndex++));

              if (digit === -1) {
                throw new Error(
                  "Invalid base64 digit: " + aStr.charAt(aIndex - 1)
                );
              }

              continuation = !!(digit & VLQ_CONTINUATION_BIT);
              digit &= VLQ_BASE_MASK;
              result = result + (digit << shift);
              shift += VLQ_BASE_SHIFT;
            } while (continuation);

            aOutParam.value = fromVLQSigned(result);
            aOutParam.rest = aIndex;
          };
        },
        /* 142 */
        function(module, exports, __webpack_require__) {
          var util = __webpack_require__(29);

          var has = Object.prototype.hasOwnProperty;
          var hasNativeMap = typeof Map !== "undefined";

          function ArraySet() {
            this._array = [];
            this._set = hasNativeMap ? new Map() : Object.create(null);
          }

          ArraySet.fromArray = function ArraySet_fromArray(
            aArray,
            aAllowDuplicates
          ) {
            var set = new ArraySet();

            for (var i = 0, len = aArray.length; i < len; i++) {
              set.add(aArray[i], aAllowDuplicates);
            }

            return set;
          };

          ArraySet.prototype.size = function ArraySet_size() {
            return hasNativeMap
              ? this._set.size
              : Object.getOwnPropertyNames(this._set).length;
          };

          ArraySet.prototype.add = function ArraySet_add(
            aStr,
            aAllowDuplicates
          ) {
            var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
            var isDuplicate = hasNativeMap
              ? this.has(aStr)
              : has.call(this._set, sStr);
            var idx = this._array.length;

            if (!isDuplicate || aAllowDuplicates) {
              this._array.push(aStr);
            }

            if (!isDuplicate) {
              if (hasNativeMap) {
                this._set.set(aStr, idx);
              } else {
                this._set[sStr] = idx;
              }
            }
          };

          ArraySet.prototype.has = function ArraySet_has(aStr) {
            if (hasNativeMap) {
              return this._set.has(aStr);
            } else {
              var sStr = util.toSetString(aStr);
              return has.call(this._set, sStr);
            }
          };

          ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
            if (hasNativeMap) {
              var idx = this._set.get(aStr);

              if (idx >= 0) {
                return idx;
              }
            } else {
              var sStr = util.toSetString(aStr);

              if (has.call(this._set, sStr)) {
                return this._set[sStr];
              }
            }

            throw new Error('"' + aStr + '" is not in the set.');
          };

          ArraySet.prototype.at = function ArraySet_at(aIdx) {
            if (aIdx >= 0 && aIdx < this._array.length) {
              return this._array[aIdx];
            }

            throw new Error("No element indexed by " + aIdx);
          };

          ArraySet.prototype.toArray = function ArraySet_toArray() {
            return this._array.slice();
          };

          exports.ArraySet = ArraySet;
        },
        /* 143 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.needsWhitespace = needsWhitespace;
          exports.needsWhitespaceBefore = needsWhitespaceBefore;
          exports.needsWhitespaceAfter = needsWhitespaceAfter;
          exports.needsParens = needsParens;

          var whitespace = _interopRequireWildcard(__webpack_require__(346));

          var parens = _interopRequireWildcard(__webpack_require__(347));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function expandAliases(obj) {
            const newObj = {};

            function add(type, func) {
              const fn = newObj[type];
              newObj[type] = fn
                ? function(node, parent, stack) {
                    const result = fn(node, parent, stack);
                    return result == null ? func(node, parent, stack) : result;
                  }
                : func;
            }

            for (const type of Object.keys(obj)) {
              const aliases = t().FLIPPED_ALIAS_KEYS[type];

              if (aliases) {
                for (const alias of aliases) {
                  add(alias, obj[type]);
                }
              } else {
                add(type, obj[type]);
              }
            }

            return newObj;
          }

          const expandedParens = expandAliases(parens);
          const expandedWhitespaceNodes = expandAliases(whitespace.nodes);
          const expandedWhitespaceList = expandAliases(whitespace.list);

          function find(obj, node, parent, printStack) {
            const fn = obj[node.type];
            return fn ? fn(node, parent, printStack) : null;
          }

          function isOrHasCallExpression(node) {
            if (t().isCallExpression(node)) {
              return true;
            }

            if (t().isMemberExpression(node)) {
              return (
                isOrHasCallExpression(node.object) ||
                (!node.computed && isOrHasCallExpression(node.property))
              );
            } else {
              return false;
            }
          }

          function needsWhitespace(node, parent, type) {
            if (!node) return 0;

            if (t().isExpressionStatement(node)) {
              node = node.expression;
            }

            let linesInfo = find(expandedWhitespaceNodes, node, parent);

            if (!linesInfo) {
              const items = find(expandedWhitespaceList, node, parent);

              if (items) {
                for (let i = 0; i < items.length; i++) {
                  linesInfo = needsWhitespace(items[i], node, type);
                  if (linesInfo) break;
                }
              }
            }

            if (typeof linesInfo === "object" && linesInfo !== null) {
              return linesInfo[type] || 0;
            }

            return 0;
          }

          function needsWhitespaceBefore(node, parent) {
            return needsWhitespace(node, parent, "before");
          }

          function needsWhitespaceAfter(node, parent) {
            return needsWhitespace(node, parent, "after");
          }

          function needsParens(node, parent, printStack) {
            if (!parent) return false;

            if (t().isNewExpression(parent) && parent.callee === node) {
              if (isOrHasCallExpression(node)) return true;
            }

            return find(expandedParens, node, parent, printStack);
          }
        },
        /* 144 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.ImportSpecifier = ImportSpecifier;
          exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
          exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
          exports.ExportSpecifier = ExportSpecifier;
          exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
          exports.ExportAllDeclaration = ExportAllDeclaration;
          exports.ExportNamedDeclaration = ExportNamedDeclaration;
          exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
          exports.ImportDeclaration = ImportDeclaration;
          exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function ImportSpecifier(node) {
            if (node.importKind === "type" || node.importKind === "typeof") {
              this.word(node.importKind);
              this.space();
            }

            this.print(node.imported, node);

            if (node.local && node.local.name !== node.imported.name) {
              this.space();
              this.word("as");
              this.space();
              this.print(node.local, node);
            }
          }

          function ImportDefaultSpecifier(node) {
            this.print(node.local, node);
          }

          function ExportDefaultSpecifier(node) {
            this.print(node.exported, node);
          }

          function ExportSpecifier(node) {
            this.print(node.local, node);

            if (node.exported && node.local.name !== node.exported.name) {
              this.space();
              this.word("as");
              this.space();
              this.print(node.exported, node);
            }
          }

          function ExportNamespaceSpecifier(node) {
            this.token("*");
            this.space();
            this.word("as");
            this.space();
            this.print(node.exported, node);
          }

          function ExportAllDeclaration(node) {
            this.word("export");
            this.space();

            if (node.exportKind === "type") {
              this.word("type");
              this.space();
            }

            this.token("*");
            this.space();
            this.word("from");
            this.space();
            this.print(node.source, node);
            this.semicolon();
          }

          function ExportNamedDeclaration(node) {
            if (
              this.format.decoratorsBeforeExport &&
              t().isClassDeclaration(node.declaration)
            ) {
              this.printJoin(node.declaration.decorators, node);
            }

            this.word("export");
            this.space();
            ExportDeclaration.apply(this, arguments);
          }

          function ExportDefaultDeclaration(node) {
            if (
              this.format.decoratorsBeforeExport &&
              t().isClassDeclaration(node.declaration)
            ) {
              this.printJoin(node.declaration.decorators, node);
            }

            this.word("export");
            this.space();
            this.word("default");
            this.space();
            ExportDeclaration.apply(this, arguments);
          }

          function ExportDeclaration(node) {
            if (node.declaration) {
              const declar = node.declaration;
              this.print(declar, node);
              if (!t().isStatement(declar)) this.semicolon();
            } else {
              if (node.exportKind === "type") {
                this.word("type");
                this.space();
              }

              const specifiers = node.specifiers.slice(0);
              let hasSpecial = false;

              while (true) {
                const first = specifiers[0];

                if (
                  t().isExportDefaultSpecifier(first) ||
                  t().isExportNamespaceSpecifier(first)
                ) {
                  hasSpecial = true;
                  this.print(specifiers.shift(), node);

                  if (specifiers.length) {
                    this.token(",");
                    this.space();
                  }
                } else {
                  break;
                }
              }

              if (specifiers.length || (!specifiers.length && !hasSpecial)) {
                this.token("{");

                if (specifiers.length) {
                  this.space();
                  this.printList(specifiers, node);
                  this.space();
                }

                this.token("}");
              }

              if (node.source) {
                this.space();
                this.word("from");
                this.space();
                this.print(node.source, node);
              }

              this.semicolon();
            }
          }

          function ImportDeclaration(node) {
            this.word("import");
            this.space();

            if (node.importKind === "type" || node.importKind === "typeof") {
              this.word(node.importKind);
              this.space();
            }

            const specifiers = node.specifiers.slice(0);

            if (specifiers && specifiers.length) {
              while (true) {
                const first = specifiers[0];

                if (
                  t().isImportDefaultSpecifier(first) ||
                  t().isImportNamespaceSpecifier(first)
                ) {
                  this.print(specifiers.shift(), node);

                  if (specifiers.length) {
                    this.token(",");
                    this.space();
                  }
                } else {
                  break;
                }
              }

              if (specifiers.length) {
                this.token("{");
                this.space();
                this.printList(specifiers, node);
                this.space();
                this.token("}");
              }

              this.space();
              this.word("from");
              this.space();
            }

            this.print(node.source, node);
            this.semicolon();
          }

          function ImportNamespaceSpecifier(node) {
            this.token("*");
            this.space();
            this.word("as");
            this.space();
            this.print(node.local, node);
          }
        },
        /* 145 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(global) {
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */

            var base64 = __webpack_require__(355);

            var ieee754 = __webpack_require__(356);

            var isArray = __webpack_require__(357);

            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;
            Buffer.TYPED_ARRAY_SUPPORT =
              global.TYPED_ARRAY_SUPPORT !== undefined
                ? global.TYPED_ARRAY_SUPPORT
                : typedArraySupport();
            exports.kMaxLength = kMaxLength();

            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = {
                  __proto__: Uint8Array.prototype,
                  foo: function() {
                    return 42;
                  },
                };
                return (
                  arr.foo() === 42 &&
                  typeof arr.subarray === "function" &&
                  arr.subarray(1, 1).byteLength === 0
                );
              } catch (e) {
                return false;
              }
            }

            function kMaxLength() {
              return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }

            function createBuffer(that, length) {
              if (kMaxLength() < length) {
                throw new RangeError("Invalid typed array length");
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                that = new Uint8Array(length);
                that.__proto__ = Buffer.prototype;
              } else {
                if (that === null) {
                  that = new Buffer(length);
                }

                that.length = length;
              }

              return that;
            }

            function Buffer(arg, encodingOrOffset, length) {
              if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                return new Buffer(arg, encodingOrOffset, length);
              }

              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new Error(
                    "If encoding is specified then the first argument must be a string"
                  );
                }

                return allocUnsafe(this, arg);
              }

              return from(this, arg, encodingOrOffset, length);
            }

            Buffer.poolSize = 8192;

            Buffer._augment = function(arr) {
              arr.__proto__ = Buffer.prototype;
              return arr;
            };

            function from(that, value, encodingOrOffset, length) {
              if (typeof value === "number") {
                throw new TypeError('"value" argument must not be a number');
              }

              if (
                typeof ArrayBuffer !== "undefined" &&
                value instanceof ArrayBuffer
              ) {
                return fromArrayBuffer(that, value, encodingOrOffset, length);
              }

              if (typeof value === "string") {
                return fromString(that, value, encodingOrOffset);
              }

              return fromObject(that, value);
            }

            Buffer.from = function(value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length);
            };

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;

              if (
                typeof Symbol !== "undefined" &&
                Symbol.species &&
                Buffer[Symbol.species] === Buffer
              ) {
                Object.defineProperty(Buffer, Symbol.species, {
                  value: null,
                  configurable: true,
                });
              }
            }

            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be a number');
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative');
              }
            }

            function alloc(that, size, fill, encoding) {
              assertSize(size);

              if (size <= 0) {
                return createBuffer(that, size);
              }

              if (fill !== undefined) {
                return typeof encoding === "string"
                  ? createBuffer(that, size).fill(fill, encoding)
                  : createBuffer(that, size).fill(fill);
              }

              return createBuffer(that, size);
            }

            Buffer.alloc = function(size, fill, encoding) {
              return alloc(null, size, fill, encoding);
            };

            function allocUnsafe(that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }

              return that;
            }

            Buffer.allocUnsafe = function(size) {
              return allocUnsafe(null, size);
            };

            Buffer.allocUnsafeSlow = function(size) {
              return allocUnsafe(null, size);
            };

            function fromString(that, string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError(
                  '"encoding" must be a valid string encoding'
                );
              }

              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);
              var actual = that.write(string, encoding);

              if (actual !== length) {
                that = that.slice(0, actual);
              }

              return that;
            }

            function fromArrayLike(that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);

              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }

              return that;
            }

            function fromArrayBuffer(that, array, byteOffset, length) {
              array.byteLength;

              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError("'offset' is out of bounds");
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError("'length' is out of bounds");
              }

              if (byteOffset === undefined && length === undefined) {
                array = new Uint8Array(array);
              } else if (length === undefined) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                that = array;
                that.__proto__ = Buffer.prototype;
              } else {
                that = fromArrayLike(that, array);
              }

              return that;
            }

            function fromObject(that, obj) {
              if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                that = createBuffer(that, len);

                if (that.length === 0) {
                  return that;
                }

                obj.copy(that, 0, 0, len);
                return that;
              }

              if (obj) {
                if (
                  (typeof ArrayBuffer !== "undefined" &&
                    obj.buffer instanceof ArrayBuffer) ||
                  "length" in obj
                ) {
                  if (typeof obj.length !== "number" || isnan(obj.length)) {
                    return createBuffer(that, 0);
                  }

                  return fromArrayLike(that, obj);
                }

                if (obj.type === "Buffer" && isArray(obj.data)) {
                  return fromArrayLike(that, obj.data);
                }
              }

              throw new TypeError(
                "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
              );
            }

            function checked(length) {
              if (length >= kMaxLength()) {
                throw new RangeError(
                  "Attempt to allocate Buffer larger than maximum " +
                    "size: 0x" +
                    kMaxLength().toString(16) +
                    " bytes"
                );
              }

              return length | 0;
            }

            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }

              return Buffer.alloc(+length);
            }

            Buffer.isBuffer = function isBuffer(b) {
              return !!(b != null && b._isBuffer);
            };

            Buffer.compare = function compare(a, b) {
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError("Arguments must be Buffers");
              }

              if (a === b) return 0;
              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;

                default:
                  return false;
              }
            };

            Buffer.concat = function concat(list, length) {
              if (!isArray(list)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }

              if (list.length === 0) {
                return Buffer.alloc(0);
              }

              var i;

              if (length === undefined) {
                length = 0;

                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;

              for (i = 0; i < list.length; ++i) {
                var buf = list[i];

                if (!Buffer.isBuffer(buf)) {
                  throw new TypeError(
                    '"list" argument must be an Array of Buffers'
                  );
                }

                buf.copy(buffer, pos);
                pos += buf.length;
              }

              return buffer;
            };

            function byteLength(string, encoding) {
              if (Buffer.isBuffer(string)) {
                return string.length;
              }

              if (
                typeof ArrayBuffer !== "undefined" &&
                typeof ArrayBuffer.isView === "function" &&
                (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
              ) {
                return string.byteLength;
              }

              if (typeof string !== "string") {
                string = "" + string;
              }

              var len = string.length;
              if (len === 0) return 0;
              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;

                  case "utf8":
                  case "utf-8":
                  case undefined:
                    return utf8ToBytes(string).length;

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;

                  case "hex":
                    return len >>> 1;

                  case "base64":
                    return base64ToBytes(string).length;

                  default:
                    if (loweredCase) return utf8ToBytes(string).length;
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }

            Buffer.byteLength = byteLength;

            function slowToString(encoding, start, end) {
              var loweredCase = false;

              if (start === undefined || start < 0) {
                start = 0;
              }

              if (start > this.length) {
                return "";
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return "";
              }

              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return "";
              }

              if (!encoding) encoding = "utf8";

              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);

                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);

                  case "ascii":
                    return asciiSlice(this, start, end);

                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);

                  case "base64":
                    return base64Slice(this, start, end);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }

            Buffer.prototype._isBuffer = true;

            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16() {
              var len = this.length;

              if (len % 2 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 16-bits"
                );
              }

              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }

              return this;
            };

            Buffer.prototype.swap32 = function swap32() {
              var len = this.length;

              if (len % 4 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 32-bits"
                );
              }

              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }

              return this;
            };

            Buffer.prototype.swap64 = function swap64() {
              var len = this.length;

              if (len % 8 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 64-bits"
                );
              }

              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }

              return this;
            };

            Buffer.prototype.toString = function toString() {
              var length = this.length | 0;
              if (length === 0) return "";
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };

            Buffer.prototype.equals = function equals(b) {
              if (!Buffer.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b) return true;
              return Buffer.compare(this, b) === 0;
            };

            Buffer.prototype.inspect = function inspect() {
              var str = "";
              var max = exports.INSPECT_MAX_BYTES;

              if (this.length > 0) {
                str = this.toString("hex", 0, max)
                  .match(/.{2}/g)
                  .join(" ");
                if (this.length > max) str += " ... ";
              }

              return "<Buffer " + str + ">";
            };

            Buffer.prototype.compare = function compare(
              target,
              start,
              end,
              thisStart,
              thisEnd
            ) {
              if (!Buffer.isBuffer(target)) {
                throw new TypeError("Argument must be a Buffer");
              }

              if (start === undefined) {
                start = 0;
              }

              if (end === undefined) {
                end = target ? target.length : 0;
              }

              if (thisStart === undefined) {
                thisStart = 0;
              }

              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (
                start < 0 ||
                end > target.length ||
                thisStart < 0 ||
                thisEnd > this.length
              ) {
                throw new RangeError("out of range index");
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }

              if (thisStart >= thisEnd) {
                return -1;
              }

              if (start >= end) {
                return 1;
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target) return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            function bidirectionalIndexOf(
              buffer,
              val,
              byteOffset,
              encoding,
              dir
            ) {
              if (buffer.length === 0) return -1;

              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }

              byteOffset = +byteOffset;

              if (isNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer.length - 1;
              }

              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

              if (byteOffset >= buffer.length) {
                if (dir) return -1;
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1;
              }

              if (typeof val === "string") {
                val = Buffer.from(val, encoding);
              }

              if (Buffer.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }

                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 0xff;

                if (
                  Buffer.TYPED_ARRAY_SUPPORT &&
                  typeof Uint8Array.prototype.indexOf === "function"
                ) {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(
                      buffer,
                      val,
                      byteOffset
                    );
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(
                      buffer,
                      val,
                      byteOffset
                    );
                  }
                }

                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }

              throw new TypeError("val must be string, number or Buffer");
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();

                if (
                  encoding === "ucs2" ||
                  encoding === "ucs-2" ||
                  encoding === "utf16le" ||
                  encoding === "utf-16le"
                ) {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }

                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }

              var i;

              if (dir) {
                var foundIndex = -1;

                for (i = byteOffset; i < arrLength; i++) {
                  if (
                    read(arr, i) ===
                    read(val, foundIndex === -1 ? 0 : i - foundIndex)
                  ) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;

                for (i = byteOffset; i >= 0; i--) {
                  var found = true;

                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }

                  if (found) return i;
                }
              }

              return -1;
            }

            Buffer.prototype.includes = function includes(
              val,
              byteOffset,
              encoding
            ) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };

            Buffer.prototype.indexOf = function indexOf(
              val,
              byteOffset,
              encoding
            ) {
              return bidirectionalIndexOf(
                this,
                val,
                byteOffset,
                encoding,
                true
              );
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf(
              val,
              byteOffset,
              encoding
            ) {
              return bidirectionalIndexOf(
                this,
                val,
                byteOffset,
                encoding,
                false
              );
            };

            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;

              if (!length) {
                length = remaining;
              } else {
                length = Number(length);

                if (length > remaining) {
                  length = remaining;
                }
              }

              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

              if (length > strLen / 2) {
                length = strLen / 2;
              }

              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }

              return i;
            }

            function utf8Write(buf, string, offset, length) {
              return blitBuffer(
                utf8ToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }

            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }

            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }

            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(
                utf16leToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            Buffer.prototype.write = function write(
              string,
              offset,
              length,
              encoding
            ) {
              if (offset === undefined) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === undefined && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset | 0;

                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined) encoding = "utf8";
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining)
                length = remaining;

              if (
                (string.length > 0 && (length < 0 || offset < 0)) ||
                offset > this.length
              ) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }

              if (!encoding) encoding = "utf8";
              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);

                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);

                  case "ascii":
                    return asciiWrite(this, string, offset, length);

                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);

                  case "base64":
                    return base64Write(this, string, offset, length);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0),
              };
            };

            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }

            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;

              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence =
                  firstByte > 0xef
                    ? 4
                    : firstByte > 0xdf
                    ? 3
                    : firstByte > 0xbf
                    ? 2
                    : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }

                      break;

                    case 2:
                      secondByte = buf[i + 1];

                      if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint =
                          ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);

                        if (tempCodePoint > 0x7f) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];

                      if (
                        (secondByte & 0xc0) === 0x80 &&
                        (thirdByte & 0xc0) === 0x80
                      ) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0xc) |
                          ((secondByte & 0x3f) << 0x6) |
                          (thirdByte & 0x3f);

                        if (
                          tempCodePoint > 0x7ff &&
                          (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                        ) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];

                      if (
                        (secondByte & 0xc0) === 0x80 &&
                        (thirdByte & 0xc0) === 0x80 &&
                        (fourthByte & 0xc0) === 0x80
                      ) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0x12) |
                          ((secondByte & 0x3f) << 0xc) |
                          ((thirdByte & 0x3f) << 0x6) |
                          (fourthByte & 0x3f);

                        if (
                          tempCodePoint > 0xffff &&
                          tempCodePoint < 0x110000
                        ) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  codePoint = 0xfffd;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xffff) {
                  codePoint -= 0x10000;
                  res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                  codePoint = 0xdc00 | (codePoint & 0x3ff);
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res);
            }

            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;

              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }

              var res = "";
              var i = 0;

              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
                );
              }

              return res;
            }

            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7f);
              }

              return ret;
            }

            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }

              return ret;
            }

            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;
              var out = "";

              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }

              return out;
            }

            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";

              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }

              return res;
            }

            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;
              var newBuf;

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);

                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }

              return newBuf;
            };

            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }

            Buffer.prototype.readUIntLE = function readUIntLE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val;
            };

            Buffer.prototype.readUIntBE = function readUIntBE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;

              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val;
            };

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8);
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1];
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (
                (this[offset] |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16)) +
                this[offset + 3] * 0x1000000
              );
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (
                this[offset] * 0x1000000 +
                ((this[offset + 1] << 16) |
                  (this[offset + 2] << 8) |
                  this[offset + 3])
              );
            };

            Buffer.prototype.readIntLE = function readIntLE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer.prototype.readIntBE = function readIntBE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];

              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };

            Buffer.prototype.readInt16LE = function readInt16LE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt16BE = function readInt16BE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt32LE = function readInt32LE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (
                this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
              );
            };

            Buffer.prototype.readInt32BE = function readInt32BE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (
                (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3]
              );
            };

            Buffer.prototype.readFloatLE = function readFloatLE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };

            Buffer.prototype.readFloatBE = function readFloatBE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE(
              offset,
              noAssert
            ) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };

            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf))
                throw new TypeError(
                  '"buffer" argument must be a Buffer instance'
                );
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xff;

              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xff;

              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUInt8 = function writeUInt8(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = value & 0xff;
              return offset + 1;
            };

            function objectWriteUInt16(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffff + value + 1;

              for (
                var i = 0, j = Math.min(buf.length - offset, 2);
                i < j;
                ++i
              ) {
                buf[offset + i] =
                  (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                  ((littleEndian ? i : 1 - i) * 8);
              }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            function objectWriteUInt32(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffffffff + value + 1;

              for (
                var i = 0, j = Math.min(buf.length - offset, 4);
                i < j;
                ++i
              ) {
                buf[offset + i] =
                  (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
              }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            Buffer.prototype.writeIntLE = function writeIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xff;

              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeIntBE = function writeIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xff;

              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeInt8 = function writeInt8(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0) throw new RangeError("Index out of range");
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  4,
                  3.4028234663852886e38,
                  -3.4028234663852886e38
                );
              }

              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(
              value,
              offset,
              noAssert
            ) {
              return writeFloat(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE(
              value,
              offset,
              noAssert
            ) {
              return writeFloat(this, value, offset, false, noAssert);
            };

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  8,
                  1.7976931348623157e308,
                  -1.7976931348623157e308
                );
              }

              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, false, noAssert);
            };

            Buffer.prototype.copy = function copy(
              target,
              targetStart,
              start,
              end
            ) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;
              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0;

              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }

              if (start < 0 || start >= this.length)
                throw new RangeError("sourceStart out of bounds");
              if (end < 0) throw new RangeError("sourceEnd out of bounds");
              if (end > this.length) end = this.length;

              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;
              var i;

              if (this === target && start < targetStart && targetStart < end) {
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, start + len),
                  targetStart
                );
              }

              return len;
            };

            Buffer.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }

                if (val.length === 1) {
                  var code = val.charCodeAt(0);

                  if (code < 256) {
                    val = code;
                  }
                }

                if (encoding !== undefined && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }

                if (
                  typeof encoding === "string" &&
                  !Buffer.isEncoding(encoding)
                ) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }

              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }

              if (end <= start) {
                return this;
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;
              if (!val) val = 0;
              var i;

              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer.isBuffer(val)
                  ? val
                  : utf8ToBytes(new Buffer(val, encoding).toString());
                var len = bytes.length;

                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this;
            };

            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

            function base64clean(str) {
              str = stringtrim(str).replace(INVALID_BASE64_RE, "");
              if (str.length < 2) return "";

              while (str.length % 4 !== 0) {
                str = str + "=";
              }

              return str;
            }

            function stringtrim(str) {
              if (str.trim) return str.trim();
              return str.replace(/^\s+|\s+$/g, "");
            }

            function toHex(n) {
              if (n < 16) return "0" + n.toString(16);
              return n.toString(16);
            }

            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                if (codePoint > 0xd7ff && codePoint < 0xe000) {
                  if (!leadSurrogate) {
                    if (codePoint > 0xdbff) {
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    }

                    leadSurrogate = codePoint;
                    continue;
                  }

                  if (codePoint < 0xdc00) {
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    leadSurrogate = codePoint;
                    continue;
                  }

                  codePoint =
                    (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                    0x10000;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                }

                leadSurrogate = null;

                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push(
                    (codePoint >> 0x6) | 0xc0,
                    (codePoint & 0x3f) | 0x80
                  );
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(
                    (codePoint >> 0xc) | 0xe0,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(
                    (codePoint >> 0x12) | 0xf0,
                    ((codePoint >> 0xc) & 0x3f) | 0x80,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else {
                  throw new Error("Invalid code point");
                }
              }

              return bytes;
            }

            function asciiToBytes(str) {
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 0xff);
              }

              return byteArray;
            }

            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray;
            }

            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }

            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }

              return i;
            }

            function isnan(val) {
              return val !== val;
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(23)));
        },
        /* 146 */
        function(module, exports, __webpack_require__) {
          var cssKeywords = __webpack_require__(373);

          var reverseKeywords = {};

          for (var key in cssKeywords) {
            if (cssKeywords.hasOwnProperty(key)) {
              reverseKeywords[cssKeywords[key]] = key;
            }
          }

          var convert = (module.exports = {
            rgb: {
              channels: 3,
              labels: "rgb",
            },
            hsl: {
              channels: 3,
              labels: "hsl",
            },
            hsv: {
              channels: 3,
              labels: "hsv",
            },
            hwb: {
              channels: 3,
              labels: "hwb",
            },
            cmyk: {
              channels: 4,
              labels: "cmyk",
            },
            xyz: {
              channels: 3,
              labels: "xyz",
            },
            lab: {
              channels: 3,
              labels: "lab",
            },
            lch: {
              channels: 3,
              labels: "lch",
            },
            hex: {
              channels: 1,
              labels: ["hex"],
            },
            keyword: {
              channels: 1,
              labels: ["keyword"],
            },
            ansi16: {
              channels: 1,
              labels: ["ansi16"],
            },
            ansi256: {
              channels: 1,
              labels: ["ansi256"],
            },
            hcg: {
              channels: 3,
              labels: ["h", "c", "g"],
            },
            apple: {
              channels: 3,
              labels: ["r16", "g16", "b16"],
            },
            gray: {
              channels: 1,
              labels: ["gray"],
            },
          });

          for (var model in convert) {
            if (convert.hasOwnProperty(model)) {
              if (!("channels" in convert[model])) {
                throw new Error("missing channels property: " + model);
              }

              if (!("labels" in convert[model])) {
                throw new Error("missing channel labels property: " + model);
              }

              if (convert[model].labels.length !== convert[model].channels) {
                throw new Error("channel and label counts mismatch: " + model);
              }

              var channels = convert[model].channels;
              var labels = convert[model].labels;
              delete convert[model].channels;
              delete convert[model].labels;
              Object.defineProperty(convert[model], "channels", {
                value: channels,
              });
              Object.defineProperty(convert[model], "labels", {
                value: labels,
              });
            }
          }

          convert.rgb.hsl = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var delta = max - min;
            var h;
            var s;
            var l;

            if (max === min) {
              h = 0;
            } else if (r === max) {
              h = (g - b) / delta;
            } else if (g === max) {
              h = 2 + (b - r) / delta;
            } else if (b === max) {
              h = 4 + (r - g) / delta;
            }

            h = Math.min(h * 60, 360);

            if (h < 0) {
              h += 360;
            }

            l = (min + max) / 2;

            if (max === min) {
              s = 0;
            } else if (l <= 0.5) {
              s = delta / (max + min);
            } else {
              s = delta / (2 - max - min);
            }

            return [h, s * 100, l * 100];
          };

          convert.rgb.hsv = function(rgb) {
            var rdif;
            var gdif;
            var bdif;
            var h;
            var s;
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var v = Math.max(r, g, b);
            var diff = v - Math.min(r, g, b);

            var diffc = function(c) {
              return (v - c) / 6 / diff + 1 / 2;
            };

            if (diff === 0) {
              h = s = 0;
            } else {
              s = diff / v;
              rdif = diffc(r);
              gdif = diffc(g);
              bdif = diffc(b);

              if (r === v) {
                h = bdif - gdif;
              } else if (g === v) {
                h = 1 / 3 + rdif - bdif;
              } else if (b === v) {
                h = 2 / 3 + gdif - rdif;
              }

              if (h < 0) {
                h += 1;
              } else if (h > 1) {
                h -= 1;
              }
            }

            return [h * 360, s * 100, v * 100];
          };

          convert.rgb.hwb = function(rgb) {
            var r = rgb[0];
            var g = rgb[1];
            var b = rgb[2];
            var h = convert.rgb.hsl(rgb)[0];
            var w = (1 / 255) * Math.min(r, Math.min(g, b));
            b = 1 - (1 / 255) * Math.max(r, Math.max(g, b));
            return [h, w * 100, b * 100];
          };

          convert.rgb.cmyk = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var c;
            var m;
            var y;
            var k;
            k = Math.min(1 - r, 1 - g, 1 - b);
            c = (1 - r - k) / (1 - k) || 0;
            m = (1 - g - k) / (1 - k) || 0;
            y = (1 - b - k) / (1 - k) || 0;
            return [c * 100, m * 100, y * 100, k * 100];
          };

          function comparativeDistance(x, y) {
            return (
              Math.pow(x[0] - y[0], 2) +
              Math.pow(x[1] - y[1], 2) +
              Math.pow(x[2] - y[2], 2)
            );
          }

          convert.rgb.keyword = function(rgb) {
            var reversed = reverseKeywords[rgb];

            if (reversed) {
              return reversed;
            }

            var currentClosestDistance = Infinity;
            var currentClosestKeyword;

            for (var keyword in cssKeywords) {
              if (cssKeywords.hasOwnProperty(keyword)) {
                var value = cssKeywords[keyword];
                var distance = comparativeDistance(rgb, value);

                if (distance < currentClosestDistance) {
                  currentClosestDistance = distance;
                  currentClosestKeyword = keyword;
                }
              }
            }

            return currentClosestKeyword;
          };

          convert.keyword.rgb = function(keyword) {
            return cssKeywords[keyword];
          };

          convert.rgb.xyz = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
            g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
            b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
            var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
            var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
            var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
            return [x * 100, y * 100, z * 100];
          };

          convert.rgb.lab = function(rgb) {
            var xyz = convert.rgb.xyz(rgb);
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };

          convert.hsl.rgb = function(hsl) {
            var h = hsl[0] / 360;
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var t1;
            var t2;
            var t3;
            var rgb;
            var val;

            if (s === 0) {
              val = l * 255;
              return [val, val, val];
            }

            if (l < 0.5) {
              t2 = l * (1 + s);
            } else {
              t2 = l + s - l * s;
            }

            t1 = 2 * l - t2;
            rgb = [0, 0, 0];

            for (var i = 0; i < 3; i++) {
              t3 = h + (1 / 3) * -(i - 1);

              if (t3 < 0) {
                t3++;
              }

              if (t3 > 1) {
                t3--;
              }

              if (6 * t3 < 1) {
                val = t1 + (t2 - t1) * 6 * t3;
              } else if (2 * t3 < 1) {
                val = t2;
              } else if (3 * t3 < 2) {
                val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
              } else {
                val = t1;
              }

              rgb[i] = val * 255;
            }

            return rgb;
          };

          convert.hsl.hsv = function(hsl) {
            var h = hsl[0];
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var smin = s;
            var lmin = Math.max(l, 0.01);
            var sv;
            var v;
            l *= 2;
            s *= l <= 1 ? l : 2 - l;
            smin *= lmin <= 1 ? lmin : 2 - lmin;
            v = (l + s) / 2;
            sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);
            return [h, sv * 100, v * 100];
          };

          convert.hsv.rgb = function(hsv) {
            var h = hsv[0] / 60;
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var hi = Math.floor(h) % 6;
            var f = h - Math.floor(h);
            var p = 255 * v * (1 - s);
            var q = 255 * v * (1 - s * f);
            var t = 255 * v * (1 - s * (1 - f));
            v *= 255;

            switch (hi) {
              case 0:
                return [v, t, p];

              case 1:
                return [q, v, p];

              case 2:
                return [p, v, t];

              case 3:
                return [p, q, v];

              case 4:
                return [t, p, v];

              case 5:
                return [v, p, q];
            }
          };

          convert.hsv.hsl = function(hsv) {
            var h = hsv[0];
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var vmin = Math.max(v, 0.01);
            var lmin;
            var sl;
            var l;
            l = (2 - s) * v;
            lmin = (2 - s) * vmin;
            sl = s * vmin;
            sl /= lmin <= 1 ? lmin : 2 - lmin;
            sl = sl || 0;
            l /= 2;
            return [h, sl * 100, l * 100];
          };

          convert.hwb.rgb = function(hwb) {
            var h = hwb[0] / 360;
            var wh = hwb[1] / 100;
            var bl = hwb[2] / 100;
            var ratio = wh + bl;
            var i;
            var v;
            var f;
            var n;

            if (ratio > 1) {
              wh /= ratio;
              bl /= ratio;
            }

            i = Math.floor(6 * h);
            v = 1 - bl;
            f = 6 * h - i;

            if ((i & 0x01) !== 0) {
              f = 1 - f;
            }

            n = wh + f * (v - wh);
            var r;
            var g;
            var b;

            switch (i) {
              default:
              case 6:
              case 0:
                r = v;
                g = n;
                b = wh;
                break;

              case 1:
                r = n;
                g = v;
                b = wh;
                break;

              case 2:
                r = wh;
                g = v;
                b = n;
                break;

              case 3:
                r = wh;
                g = n;
                b = v;
                break;

              case 4:
                r = n;
                g = wh;
                b = v;
                break;

              case 5:
                r = v;
                g = wh;
                b = n;
                break;
            }

            return [r * 255, g * 255, b * 255];
          };

          convert.cmyk.rgb = function(cmyk) {
            var c = cmyk[0] / 100;
            var m = cmyk[1] / 100;
            var y = cmyk[2] / 100;
            var k = cmyk[3] / 100;
            var r;
            var g;
            var b;
            r = 1 - Math.min(1, c * (1 - k) + k);
            g = 1 - Math.min(1, m * (1 - k) + k);
            b = 1 - Math.min(1, y * (1 - k) + k);
            return [r * 255, g * 255, b * 255];
          };

          convert.xyz.rgb = function(xyz) {
            var x = xyz[0] / 100;
            var y = xyz[1] / 100;
            var z = xyz[2] / 100;
            var r;
            var g;
            var b;
            r = x * 3.2406 + y * -1.5372 + z * -0.4986;
            g = x * -0.9689 + y * 1.8758 + z * 0.0415;
            b = x * 0.0557 + y * -0.204 + z * 1.057;
            r =
              r > 0.0031308
                ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055
                : r * 12.92;
            g =
              g > 0.0031308
                ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055
                : g * 12.92;
            b =
              b > 0.0031308
                ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055
                : b * 12.92;
            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [r * 255, g * 255, b * 255];
          };

          convert.xyz.lab = function(xyz) {
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };

          convert.lab.xyz = function(lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var x;
            var y;
            var z;
            y = (l + 16) / 116;
            x = a / 500 + y;
            z = y - b / 200;
            var y2 = Math.pow(y, 3);
            var x2 = Math.pow(x, 3);
            var z2 = Math.pow(z, 3);
            y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
            x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
            z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
            x *= 95.047;
            y *= 100;
            z *= 108.883;
            return [x, y, z];
          };

          convert.lab.lch = function(lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var hr;
            var h;
            var c;
            hr = Math.atan2(b, a);
            h = (hr * 360) / 2 / Math.PI;

            if (h < 0) {
              h += 360;
            }

            c = Math.sqrt(a * a + b * b);
            return [l, c, h];
          };

          convert.lch.lab = function(lch) {
            var l = lch[0];
            var c = lch[1];
            var h = lch[2];
            var a;
            var b;
            var hr;
            hr = (h / 360) * 2 * Math.PI;
            a = c * Math.cos(hr);
            b = c * Math.sin(hr);
            return [l, a, b];
          };

          convert.rgb.ansi16 = function(args) {
            var r = args[0];
            var g = args[1];
            var b = args[2];
            var value =
              1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
            value = Math.round(value / 50);

            if (value === 0) {
              return 30;
            }

            var ansi =
              30 +
              ((Math.round(b / 255) << 2) |
                (Math.round(g / 255) << 1) |
                Math.round(r / 255));

            if (value === 2) {
              ansi += 60;
            }

            return ansi;
          };

          convert.hsv.ansi16 = function(args) {
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
          };

          convert.rgb.ansi256 = function(args) {
            var r = args[0];
            var g = args[1];
            var b = args[2];

            if (r === g && g === b) {
              if (r < 8) {
                return 16;
              }

              if (r > 248) {
                return 231;
              }

              return Math.round(((r - 8) / 247) * 24) + 232;
            }

            var ansi =
              16 +
              36 * Math.round((r / 255) * 5) +
              6 * Math.round((g / 255) * 5) +
              Math.round((b / 255) * 5);
            return ansi;
          };

          convert.ansi16.rgb = function(args) {
            var color = args % 10;

            if (color === 0 || color === 7) {
              if (args > 50) {
                color += 3.5;
              }

              color = (color / 10.5) * 255;
              return [color, color, color];
            }

            var mult = (~~(args > 50) + 1) * 0.5;
            var r = (color & 1) * mult * 255;
            var g = ((color >> 1) & 1) * mult * 255;
            var b = ((color >> 2) & 1) * mult * 255;
            return [r, g, b];
          };

          convert.ansi256.rgb = function(args) {
            if (args >= 232) {
              var c = (args - 232) * 10 + 8;
              return [c, c, c];
            }

            args -= 16;
            var rem;
            var r = (Math.floor(args / 36) / 5) * 255;
            var g = (Math.floor((rem = args % 36) / 6) / 5) * 255;
            var b = ((rem % 6) / 5) * 255;
            return [r, g, b];
          };

          convert.rgb.hex = function(args) {
            var integer =
              ((Math.round(args[0]) & 0xff) << 16) +
              ((Math.round(args[1]) & 0xff) << 8) +
              (Math.round(args[2]) & 0xff);
            var string = integer.toString(16).toUpperCase();
            return "000000".substring(string.length) + string;
          };

          convert.hex.rgb = function(args) {
            var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

            if (!match) {
              return [0, 0, 0];
            }

            var colorString = match[0];

            if (match[0].length === 3) {
              colorString = colorString
                .split("")
                .map(function(char) {
                  return char + char;
                })
                .join("");
            }

            var integer = parseInt(colorString, 16);
            var r = (integer >> 16) & 0xff;
            var g = (integer >> 8) & 0xff;
            var b = integer & 0xff;
            return [r, g, b];
          };

          convert.rgb.hcg = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var max = Math.max(Math.max(r, g), b);
            var min = Math.min(Math.min(r, g), b);
            var chroma = max - min;
            var grayscale;
            var hue;

            if (chroma < 1) {
              grayscale = min / (1 - chroma);
            } else {
              grayscale = 0;
            }

            if (chroma <= 0) {
              hue = 0;
            } else if (max === r) {
              hue = ((g - b) / chroma) % 6;
            } else if (max === g) {
              hue = 2 + (b - r) / chroma;
            } else {
              hue = 4 + (r - g) / chroma + 4;
            }

            hue /= 6;
            hue %= 1;
            return [hue * 360, chroma * 100, grayscale * 100];
          };

          convert.hsl.hcg = function(hsl) {
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var c = 1;
            var f = 0;

            if (l < 0.5) {
              c = 2.0 * s * l;
            } else {
              c = 2.0 * s * (1.0 - l);
            }

            if (c < 1.0) {
              f = (l - 0.5 * c) / (1.0 - c);
            }

            return [hsl[0], c * 100, f * 100];
          };

          convert.hsv.hcg = function(hsv) {
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var c = s * v;
            var f = 0;

            if (c < 1.0) {
              f = (v - c) / (1 - c);
            }

            return [hsv[0], c * 100, f * 100];
          };

          convert.hcg.rgb = function(hcg) {
            var h = hcg[0] / 360;
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;

            if (c === 0.0) {
              return [g * 255, g * 255, g * 255];
            }

            var pure = [0, 0, 0];
            var hi = (h % 1) * 6;
            var v = hi % 1;
            var w = 1 - v;
            var mg = 0;

            switch (Math.floor(hi)) {
              case 0:
                pure[0] = 1;
                pure[1] = v;
                pure[2] = 0;
                break;

              case 1:
                pure[0] = w;
                pure[1] = 1;
                pure[2] = 0;
                break;

              case 2:
                pure[0] = 0;
                pure[1] = 1;
                pure[2] = v;
                break;

              case 3:
                pure[0] = 0;
                pure[1] = w;
                pure[2] = 1;
                break;

              case 4:
                pure[0] = v;
                pure[1] = 0;
                pure[2] = 1;
                break;

              default:
                pure[0] = 1;
                pure[1] = 0;
                pure[2] = w;
            }

            mg = (1.0 - c) * g;
            return [
              (c * pure[0] + mg) * 255,
              (c * pure[1] + mg) * 255,
              (c * pure[2] + mg) * 255,
            ];
          };

          convert.hcg.hsv = function(hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var v = c + g * (1.0 - c);
            var f = 0;

            if (v > 0.0) {
              f = c / v;
            }

            return [hcg[0], f * 100, v * 100];
          };

          convert.hcg.hsl = function(hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var l = g * (1.0 - c) + 0.5 * c;
            var s = 0;

            if (l > 0.0 && l < 0.5) {
              s = c / (2 * l);
            } else if (l >= 0.5 && l < 1.0) {
              s = c / (2 * (1 - l));
            }

            return [hcg[0], s * 100, l * 100];
          };

          convert.hcg.hwb = function(hcg) {
            var c = hcg[1] / 100;
            var g = hcg[2] / 100;
            var v = c + g * (1.0 - c);
            return [hcg[0], (v - c) * 100, (1 - v) * 100];
          };

          convert.hwb.hcg = function(hwb) {
            var w = hwb[1] / 100;
            var b = hwb[2] / 100;
            var v = 1 - b;
            var c = v - w;
            var g = 0;

            if (c < 1) {
              g = (v - c) / (1 - c);
            }

            return [hwb[0], c * 100, g * 100];
          };

          convert.apple.rgb = function(apple) {
            return [
              (apple[0] / 65535) * 255,
              (apple[1] / 65535) * 255,
              (apple[2] / 65535) * 255,
            ];
          };

          convert.rgb.apple = function(rgb) {
            return [
              (rgb[0] / 255) * 65535,
              (rgb[1] / 255) * 65535,
              (rgb[2] / 255) * 65535,
            ];
          };

          convert.gray.rgb = function(args) {
            return [
              (args[0] / 100) * 255,
              (args[0] / 100) * 255,
              (args[0] / 100) * 255,
            ];
          };

          convert.gray.hsl = convert.gray.hsv = function(args) {
            return [0, 0, args[0]];
          };

          convert.gray.hwb = function(gray) {
            return [0, 100, gray[0]];
          };

          convert.gray.cmyk = function(gray) {
            return [0, 0, 0, gray[0]];
          };

          convert.gray.lab = function(gray) {
            return [gray[0], 0, 0];
          };

          convert.gray.hex = function(gray) {
            var val = Math.round((gray[0] / 100) * 255) & 0xff;
            var integer = (val << 16) + (val << 8) + val;
            var string = integer.toString(16).toUpperCase();
            return "000000".substring(string.length) + string;
          };

          convert.rgb.gray = function(rgb) {
            var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
            return [(val / 255) * 100];
          };
        },
        /* 147 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = parseAndBuildMetadata;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _babelParser() {
            const data = __webpack_require__(44);

            _babelParser = function() {
              return data;
            };

            return data;
          }

          function _babelCodeFrame() {
            const data = __webpack_require__(43);

            _babelCodeFrame = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const PATTERN = /^[_$A-Z0-9]+$/;

          function parseAndBuildMetadata(formatter, code, opts) {
            const ast = parseWithCodeFrame(code, opts.parser);
            const {
              placeholderWhitelist,
              placeholderPattern = PATTERN,
              preserveComments,
            } = opts;
            t().removePropertiesDeep(ast, {
              preserveComments,
            });
            formatter.validate(ast);
            const placeholders = [];
            const placeholderNames = new Set();
            t().traverse(ast, placeholderVisitorHandler, {
              placeholders,
              placeholderNames,
              placeholderWhitelist,
              placeholderPattern,
            });
            return {
              ast,
              placeholders,
              placeholderNames,
            };
          }

          function placeholderVisitorHandler(node, ancestors, state) {
            let name;

            if (t().isIdentifier(node) || t().isJSXIdentifier(node)) {
              name = node.name;
            } else if (t().isStringLiteral(node)) {
              name = node.value;
            } else {
              return;
            }

            if (
              (!state.placeholderPattern ||
                !state.placeholderPattern.test(name)) &&
              (!state.placeholderWhitelist ||
                !state.placeholderWhitelist.has(name))
            ) {
              return;
            }

            ancestors = ancestors.slice();
            const { node: parent, key } = ancestors[ancestors.length - 1];
            let type;

            if (t().isStringLiteral(node)) {
              type = "string";
            } else if (
              (t().isNewExpression(parent) && key === "arguments") ||
              (t().isCallExpression(parent) && key === "arguments") ||
              (t().isFunction(parent) && key === "params")
            ) {
              type = "param";
            } else if (t().isExpressionStatement(parent)) {
              type = "statement";
              ancestors = ancestors.slice(0, -1);
            } else {
              type = "other";
            }

            state.placeholders.push({
              name,
              type,
              resolve: ast => resolveAncestors(ast, ancestors),
              isDuplicate: state.placeholderNames.has(name),
            });
            state.placeholderNames.add(name);
          }

          function resolveAncestors(ast, ancestors) {
            let parent = ast;

            for (let i = 0; i < ancestors.length - 1; i++) {
              const { key, index } = ancestors[i];

              if (index === undefined) {
                parent = parent[key];
              } else {
                parent = parent[key][index];
              }
            }

            const { key, index } = ancestors[ancestors.length - 1];
            return {
              parent,
              key,
              index,
            };
          }

          function parseWithCodeFrame(code, parserOpts) {
            parserOpts = Object.assign(
              {
                allowReturnOutsideFunction: true,
                allowSuperOutsideMethod: true,
                sourceType: "module",
              },
              parserOpts
            );

            try {
              return (0, _babelParser().parse)(code, parserOpts);
            } catch (err) {
              const loc = err.loc;

              if (loc) {
                err.message +=
                  "\n" +
                  (0, _babelCodeFrame().codeFrameColumns)(code, {
                    start: loc,
                  });
                err.code = "BABEL_TEMPLATE_PARSE_ERROR";
              }

              throw err;
            }
          }
        },
        /* 148 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = populatePlaceholders;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function populatePlaceholders(metadata, replacements) {
            const ast = t().cloneNode(metadata.ast);

            if (replacements) {
              metadata.placeholders.forEach(placeholder => {
                if (
                  !Object.prototype.hasOwnProperty.call(
                    replacements,
                    placeholder.name
                  )
                ) {
                  const placeholderName = placeholder.name;
                  throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @gerhobbelt/babel-template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
                }
              });
              Object.keys(replacements).forEach(key => {
                if (!metadata.placeholderNames.has(key)) {
                  throw new Error(`Unknown substitution "${key}" given`);
                }
              });
            }

            metadata.placeholders
              .slice()
              .reverse()
              .forEach(placeholder => {
                try {
                  applyReplacement(
                    placeholder,
                    ast,
                    (replacements && replacements[placeholder.name]) || null
                  );
                } catch (e) {
                  e.message = `@gerhobbelt/babel-template placeholder "${
                    placeholder.name
                  }": ${e.message}`;
                  throw e;
                }
              });
            return ast;
          }

          function applyReplacement(placeholder, ast, replacement) {
            if (placeholder.isDuplicate) {
              if (Array.isArray(replacement)) {
                replacement = replacement.map(node => t().cloneNode(node));
              } else if (typeof replacement === "object") {
                replacement = t().cloneNode(replacement);
              }
            }

            const { parent, key, index } = placeholder.resolve(ast);

            if (placeholder.type === "string") {
              if (typeof replacement === "string") {
                replacement = t().stringLiteral(replacement);
              }

              if (!replacement || !t().isStringLiteral(replacement)) {
                throw new Error("Expected string substitution");
              }
            } else if (placeholder.type === "statement") {
              if (index === undefined) {
                if (!replacement) {
                  replacement = t().emptyStatement();
                } else if (Array.isArray(replacement)) {
                  replacement = t().blockStatement(replacement);
                } else if (typeof replacement === "string") {
                  replacement = t().expressionStatement(
                    t().identifier(replacement)
                  );
                } else if (!t().isStatement(replacement)) {
                  replacement = t().expressionStatement(replacement);
                }
              } else {
                if (replacement && !Array.isArray(replacement)) {
                  if (typeof replacement === "string") {
                    replacement = t().identifier(replacement);
                  }

                  if (!t().isStatement(replacement)) {
                    replacement = t().expressionStatement(replacement);
                  }
                }
              }
            } else if (placeholder.type === "param") {
              if (typeof replacement === "string") {
                replacement = t().identifier(replacement);
              }

              if (index === undefined) throw new Error("Assertion failure.");
            } else {
              if (typeof replacement === "string") {
                replacement = t().identifier(replacement);
              }

              if (Array.isArray(replacement)) {
                throw new Error(
                  "Cannot replace single expression with an array."
                );
              }
            }

            if (index === undefined) {
              t().validate(parent, key, replacement);
              parent[key] = replacement;
            } else {
              const items = parent[key].slice();

              if (
                placeholder.type === "statement" ||
                placeholder.type === "param"
              ) {
                if (replacement == null) {
                  items.splice(index, 1);
                } else if (Array.isArray(replacement)) {
                  items.splice(index, 1, ...replacement);
                } else {
                  items[index] = replacement;
                }
              } else {
                items[index] = replacement;
              }

              t().validate(parent, key, items);
              parent[key] = items;
            }
          }
        },
        /* 149 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.getEnv = getEnv;

          function getEnv(defaultValue = "development") {
            return "development" || false || false;
          }
        },
        /* 150 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.createCachedDescriptors = createCachedDescriptors;
          exports.createUncachedDescriptors = createUncachedDescriptors;
          exports.createDescriptor = createDescriptor;

          var _files = __webpack_require__(46);

          var _item = __webpack_require__(47);

          var _caching = __webpack_require__(48);

          function isEqualDescriptor(a, b) {
            return (
              a.name === b.name &&
              a.value === b.value &&
              a.options === b.options &&
              a.dirname === b.dirname &&
              a.alias === b.alias &&
              a.ownPass === b.ownPass &&
              (a.file && a.file.request) === (b.file && b.file.request) &&
              (a.file && a.file.resolved) === (b.file && b.file.resolved)
            );
          }

          function createCachedDescriptors(dirname, options, alias) {
            const { plugins, presets, passPerPreset } = options;
            return {
              options,
              plugins: plugins
                ? () => createCachedPluginDescriptors(plugins, dirname)(alias)
                : () => [],
              presets: presets
                ? () =>
                    createCachedPresetDescriptors(presets, dirname)(alias)(
                      !!passPerPreset
                    )
                : () => [],
            };
          }

          function createUncachedDescriptors(dirname, options, alias) {
            let plugins;
            let presets;
            return {
              options,
              plugins: () => {
                if (!plugins) {
                  plugins = createPluginDescriptors(
                    options.plugins || [],
                    dirname,
                    alias
                  );
                }

                return plugins;
              },
              presets: () => {
                if (!presets) {
                  presets = createPresetDescriptors(
                    options.presets || [],
                    dirname,
                    alias,
                    !!options.passPerPreset
                  );
                }

                return presets;
              },
            };
          }

          const PRESET_DESCRIPTOR_CACHE = new WeakMap();
          const createCachedPresetDescriptors = (0, _caching.makeWeakCache)(
            (items, cache) => {
              const dirname = cache.using(dir => dir);
              return (0, _caching.makeStrongCache)(alias =>
                (0, _caching.makeStrongCache)(passPerPreset =>
                  createPresetDescriptors(
                    items,
                    dirname,
                    alias,
                    passPerPreset
                  ).map(desc =>
                    loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc)
                  )
                )
              );
            }
          );
          const PLUGIN_DESCRIPTOR_CACHE = new WeakMap();
          const createCachedPluginDescriptors = (0, _caching.makeWeakCache)(
            (items, cache) => {
              const dirname = cache.using(dir => dir);
              return (0, _caching.makeStrongCache)(alias =>
                createPluginDescriptors(items, dirname, alias).map(desc =>
                  loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc)
                )
              );
            }
          );
          const DEFAULT_OPTIONS = {};

          function loadCachedDescriptor(cache, desc) {
            const { value, options = DEFAULT_OPTIONS } = desc;
            if (options === false) return desc;
            let cacheByOptions = cache.get(value);

            if (!cacheByOptions) {
              cacheByOptions = new WeakMap();
              cache.set(value, cacheByOptions);
            }

            let possibilities = cacheByOptions.get(options);

            if (!possibilities) {
              possibilities = [];
              cacheByOptions.set(options, possibilities);
            }

            if (possibilities.indexOf(desc) === -1) {
              const matches = possibilities.filter(possibility =>
                isEqualDescriptor(possibility, desc)
              );

              if (matches.length > 0) {
                return matches[0];
              }

              possibilities.push(desc);
            }

            return desc;
          }

          function createPresetDescriptors(
            items,
            dirname,
            alias,
            passPerPreset
          ) {
            return createDescriptors(
              "preset",
              items,
              dirname,
              alias,
              passPerPreset
            );
          }

          function createPluginDescriptors(items, dirname, alias) {
            return createDescriptors("plugin", items, dirname, alias);
          }

          function createDescriptors(type, items, dirname, alias, ownPass) {
            const descriptors = items.map((item, index) =>
              createDescriptor(item, dirname, {
                type,
                alias: `${alias}$${index}`,
                ownPass: !!ownPass,
              })
            );
            assertNoDuplicates(descriptors);
            return descriptors;
          }

          function createDescriptor(pair, dirname, { type, alias, ownPass }) {
            const desc = (0, _item.getItemDescriptor)(pair);

            if (desc) {
              return desc;
            }

            let name;
            let options;
            let value = pair;

            if (Array.isArray(value)) {
              if (value.length === 3) {
                [value, options, name] = value;
              } else {
                [value, options] = value;
              }
            }

            let file = undefined;
            let filepath = null;

            if (typeof value === "string") {
              if (typeof type !== "string") {
                throw new Error(
                  "To resolve a string-based item, the type of item must be given"
                );
              }

              const resolver =
                type === "plugin" ? _files.loadPlugin : _files.loadPreset;
              const request = value;
              ({ filepath, value } = resolver(value, dirname));
              file = {
                request,
                resolved: filepath,
              };
            }

            if (!value) {
              throw new Error(`Unexpected falsy value: ${String(value)}`);
            }

            if (typeof value === "object" && value.__esModule) {
              if (value.default) {
                value = value.default;
              } else {
                throw new Error(
                  "Must export a default export when using ES6 modules."
                );
              }
            }

            if (typeof value !== "object" && typeof value !== "function") {
              throw new Error(
                `Unsupported format: ${typeof value}. Expected an object or a function.`
              );
            }

            if (filepath !== null && typeof value === "object" && value) {
              throw new Error(
                `Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`
              );
            }

            return {
              name,
              alias: filepath || alias,
              value,
              options,
              dirname,
              ownPass,
              file,
            };
          }

          function assertNoDuplicates(items) {
            const map = new Map();

            for (const item of items) {
              if (typeof item.value !== "function") continue;
              let nameMap = map.get(item.value);

              if (!nameMap) {
                nameMap = new Set();
                map.set(item.value, nameMap);
              }

              if (nameMap.has(item.name)) {
                throw new Error(
                  [
                    `Duplicate plugin/preset detected.`,
                    `If you'd like to use two separate instances of a plugin,`,
                    `they need separate names, e.g.`,
                    ``,
                    `  plugins: [`,
                    `    ['some-plugin', {}],`,
                    `    ['some-plugin', {}, 'some unique name'],`,
                    `  ]`,
                  ].join("\n")
                );
              }

              nameMap.add(item.name);
            }
          }
        },
        /* 151 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.mergeOptions = mergeOptions;

          function mergeOptions(target, source) {
            for (const k of Object.keys(source)) {
              if (k === "parserOpts" && source.parserOpts) {
                const parserOpts = source.parserOpts;
                const targetObj = (target.parserOpts = target.parserOpts || {});
                mergeDefaultFields(targetObj, parserOpts);
              } else if (k === "generatorOpts" && source.generatorOpts) {
                const generatorOpts = source.generatorOpts;
                const targetObj = (target.generatorOpts =
                  target.generatorOpts || {});
                mergeDefaultFields(targetObj, generatorOpts);
              } else {
                const val = source[k];
                if (val !== undefined) target[k] = val;
              }
            }
          }

          function mergeDefaultFields(target, source) {
            for (const k of Object.keys(source)) {
              const val = source[k];
              if (val !== undefined) target[k] = val;
            }
          }
        },
        /* 152 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.buildPresetChain = buildPresetChain;
          exports.buildRootChain = buildRootChain;
          exports.buildPresetChainWalker = void 0;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          function _debug() {
            const data = _interopRequireDefault(__webpack_require__(73));

            _debug = function() {
              return data;
            };

            return data;
          }

          var _options = __webpack_require__(83);

          var _patternToRegex = _interopRequireDefault(
            __webpack_require__(401)
          );

          var _files = __webpack_require__(46);

          var _caching = __webpack_require__(48);

          var _configDescriptors = __webpack_require__(150);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const debug = (0, _debug().default)("babel:config:config-chain");

          function buildPresetChain(arg, context) {
            const chain = buildPresetChainWalker(arg, context);
            if (!chain) return null;
            return {
              plugins: dedupDescriptors(chain.plugins),
              presets: dedupDescriptors(chain.presets),
              options: chain.options.map(o => normalizeOptions(o)),
            };
          }

          const buildPresetChainWalker = makeChainWalker({
            init: arg => arg,
            root: preset => loadPresetDescriptors(preset),
            env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
            overrides: (preset, index) =>
              loadPresetOverridesDescriptors(preset)(index),
            overridesEnv: (preset, index, envName) =>
              loadPresetOverridesEnvDescriptors(preset)(index)(envName),
          });
          exports.buildPresetChainWalker = buildPresetChainWalker;
          const loadPresetDescriptors = (0, _caching.makeWeakCache)(preset =>
            buildRootDescriptors(
              preset,
              preset.alias,
              _configDescriptors.createUncachedDescriptors
            )
          );
          const loadPresetEnvDescriptors = (0, _caching.makeWeakCache)(preset =>
            (0, _caching.makeStrongCache)(envName =>
              buildEnvDescriptors(
                preset,
                preset.alias,
                _configDescriptors.createUncachedDescriptors,
                envName
              )
            )
          );
          const loadPresetOverridesDescriptors = (0, _caching.makeWeakCache)(
            preset =>
              (0, _caching.makeStrongCache)(index =>
                buildOverrideDescriptors(
                  preset,
                  preset.alias,
                  _configDescriptors.createUncachedDescriptors,
                  index
                )
              )
          );
          const loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCache)(
            preset =>
              (0, _caching.makeStrongCache)(index =>
                (0, _caching.makeStrongCache)(envName =>
                  buildOverrideEnvDescriptors(
                    preset,
                    preset.alias,
                    _configDescriptors.createUncachedDescriptors,
                    index,
                    envName
                  )
                )
              )
          );

          function buildRootChain(opts, context) {
            const programmaticChain = loadProgrammaticChain(
              {
                options: opts,
                dirname: context.cwd,
              },
              context
            );
            if (!programmaticChain) return null;
            let configFile;

            if (typeof opts.configFile === "string") {
              configFile = (0, _files.loadConfig)(
                opts.configFile,
                context.cwd,
                context.envName,
                context.caller
              );
            } else if (opts.configFile !== false && context.root !== false) {
              configFile = (0, _files.findRootConfig)(
                context.root,
                context.envName,
                context.caller
              );
            }

            let { babelrc, babelrcRoots } = opts;
            let babelrcRootsDirectory = context.cwd;
            const configFileChain = emptyChain();

            if (configFile) {
              const validatedFile = validateConfigFile(configFile);
              const result = loadFileChain(validatedFile, context);
              if (!result) return null;

              if (babelrc === undefined) {
                babelrc = validatedFile.options.babelrc;
              }

              if (babelrcRoots === undefined) {
                babelrcRootsDirectory = validatedFile.dirname;
                babelrcRoots = validatedFile.options.babelrcRoots;
              }

              mergeChain(configFileChain, result);
            }

            const pkgData =
              typeof context.filename === "string"
                ? (0, _files.findPackageData)(context.filename)
                : null;
            let ignoreFile, babelrcFile;
            const fileChain = emptyChain();

            if (
              (babelrc === true || babelrc === undefined) &&
              pkgData &&
              babelrcLoadEnabled(
                context,
                pkgData,
                babelrcRoots,
                babelrcRootsDirectory
              )
            ) {
              ({ ignore: ignoreFile, config: babelrcFile } = (0,
              _files.findRelativeConfig)(
                pkgData,
                context.envName,
                context.caller
              ));

              if (
                ignoreFile &&
                shouldIgnore(
                  context,
                  ignoreFile.ignore,
                  null,
                  ignoreFile.dirname
                )
              ) {
                return null;
              }

              if (babelrcFile) {
                const result = loadFileChain(
                  validateBabelrcFile(babelrcFile),
                  context
                );
                if (!result) return null;
                mergeChain(fileChain, result);
              }
            }

            const chain = mergeChain(
              mergeChain(mergeChain(emptyChain(), configFileChain), fileChain),
              programmaticChain
            );
            return {
              plugins: dedupDescriptors(chain.plugins),
              presets: dedupDescriptors(chain.presets),
              options: chain.options.map(o => normalizeOptions(o)),
              ignore: ignoreFile || undefined,
              babelrc: babelrcFile || undefined,
              config: configFile || undefined,
            };
          }

          function babelrcLoadEnabled(
            context,
            pkgData,
            babelrcRoots,
            babelrcRootsDirectory
          ) {
            if (typeof babelrcRoots === "boolean") return babelrcRoots;
            const absoluteRoot = context.root;

            if (babelrcRoots === undefined) {
              if (absoluteRoot === false) return false;
              return pkgData.directories.indexOf(absoluteRoot) !== -1;
            }

            let babelrcPatterns = babelrcRoots;
            if (!Array.isArray(babelrcPatterns))
              babelrcPatterns = [babelrcPatterns];
            babelrcPatterns = babelrcPatterns.map(pat => {
              return typeof pat === "string"
                ? _path().default.resolve(babelrcRootsDirectory, pat)
                : pat;
            });

            if (
              absoluteRoot !== false &&
              babelrcPatterns.length === 1 &&
              babelrcPatterns[0] === absoluteRoot
            ) {
              return pkgData.directories.indexOf(absoluteRoot) !== -1;
            }

            return babelrcPatterns.some(pat => {
              if (typeof pat === "string") {
                pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
              }

              return pkgData.directories.some(directory => {
                return matchPattern(
                  pat,
                  babelrcRootsDirectory,
                  directory,
                  context
                );
              });
            });
          }

          const validateConfigFile = (0, _caching.makeWeakCache)(file => ({
            filepath: file.filepath,
            dirname: file.dirname,
            options: (0, _options.validate)("configfile", file.options),
          }));
          const validateBabelrcFile = (0, _caching.makeWeakCache)(file => ({
            filepath: file.filepath,
            dirname: file.dirname,
            options: (0, _options.validate)("babelrcfile", file.options),
          }));
          const validateExtendFile = (0, _caching.makeWeakCache)(file => ({
            filepath: file.filepath,
            dirname: file.dirname,
            options: (0, _options.validate)("extendsfile", file.options),
          }));
          const loadProgrammaticChain = makeChainWalker({
            root: input =>
              buildRootDescriptors(
                input,
                "base",
                _configDescriptors.createCachedDescriptors
              ),
            env: (input, envName) =>
              buildEnvDescriptors(
                input,
                "base",
                _configDescriptors.createCachedDescriptors,
                envName
              ),
            overrides: (input, index) =>
              buildOverrideDescriptors(
                input,
                "base",
                _configDescriptors.createCachedDescriptors,
                index
              ),
            overridesEnv: (input, index, envName) =>
              buildOverrideEnvDescriptors(
                input,
                "base",
                _configDescriptors.createCachedDescriptors,
                index,
                envName
              ),
          });
          const loadFileChain = makeChainWalker({
            root: file => loadFileDescriptors(file),
            env: (file, envName) => loadFileEnvDescriptors(file)(envName),
            overrides: (file, index) =>
              loadFileOverridesDescriptors(file)(index),
            overridesEnv: (file, index, envName) =>
              loadFileOverridesEnvDescriptors(file)(index)(envName),
          });
          const loadFileDescriptors = (0, _caching.makeWeakCache)(file =>
            buildRootDescriptors(
              file,
              file.filepath,
              _configDescriptors.createUncachedDescriptors
            )
          );
          const loadFileEnvDescriptors = (0, _caching.makeWeakCache)(file =>
            (0, _caching.makeStrongCache)(envName =>
              buildEnvDescriptors(
                file,
                file.filepath,
                _configDescriptors.createUncachedDescriptors,
                envName
              )
            )
          );
          const loadFileOverridesDescriptors = (0, _caching.makeWeakCache)(
            file =>
              (0, _caching.makeStrongCache)(index =>
                buildOverrideDescriptors(
                  file,
                  file.filepath,
                  _configDescriptors.createUncachedDescriptors,
                  index
                )
              )
          );
          const loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCache)(
            file =>
              (0, _caching.makeStrongCache)(index =>
                (0, _caching.makeStrongCache)(envName =>
                  buildOverrideEnvDescriptors(
                    file,
                    file.filepath,
                    _configDescriptors.createUncachedDescriptors,
                    index,
                    envName
                  )
                )
              )
          );

          function buildRootDescriptors(
            { dirname, options },
            alias,
            descriptors
          ) {
            return descriptors(dirname, options, alias);
          }

          function buildEnvDescriptors(
            { dirname, options },
            alias,
            descriptors,
            envName
          ) {
            const opts = options.env && options.env[envName];
            return opts
              ? descriptors(dirname, opts, `${alias}.env["${envName}"]`)
              : null;
          }

          function buildOverrideDescriptors(
            { dirname, options },
            alias,
            descriptors,
            index
          ) {
            const opts = options.overrides && options.overrides[index];
            if (!opts) throw new Error("Assertion failure - missing override");
            return descriptors(dirname, opts, `${alias}.overrides[${index}]`);
          }

          function buildOverrideEnvDescriptors(
            { dirname, options },
            alias,
            descriptors,
            index,
            envName
          ) {
            const override = options.overrides && options.overrides[index];
            if (!override)
              throw new Error("Assertion failure - missing override");
            const opts = override.env && override.env[envName];
            return opts
              ? descriptors(
                  dirname,
                  opts,
                  `${alias}.overrides[${index}].env["${envName}"]`
                )
              : null;
          }

          function makeChainWalker({ root, env, overrides, overridesEnv }) {
            return (input, context, files = new Set()) => {
              const { dirname } = input;
              const flattenedConfigs = [];
              const rootOpts = root(input);

              if (configIsApplicable(rootOpts, dirname, context)) {
                flattenedConfigs.push(rootOpts);
                const envOpts = env(input, context.envName);

                if (envOpts && configIsApplicable(envOpts, dirname, context)) {
                  flattenedConfigs.push(envOpts);
                }

                (rootOpts.options.overrides || []).forEach((_, index) => {
                  const overrideOps = overrides(input, index);

                  if (configIsApplicable(overrideOps, dirname, context)) {
                    flattenedConfigs.push(overrideOps);
                    const overrideEnvOpts = overridesEnv(
                      input,
                      index,
                      context.envName
                    );

                    if (
                      overrideEnvOpts &&
                      configIsApplicable(overrideEnvOpts, dirname, context)
                    ) {
                      flattenedConfigs.push(overrideEnvOpts);
                    }
                  }
                });
              }

              if (
                flattenedConfigs.some(({ options: { ignore, only } }) =>
                  shouldIgnore(context, ignore, only, dirname)
                )
              ) {
                return null;
              }

              const chain = emptyChain();

              for (const op of flattenedConfigs) {
                if (
                  !mergeExtendsChain(chain, op.options, dirname, context, files)
                ) {
                  return null;
                }

                mergeChainOpts(chain, op);
              }

              return chain;
            };
          }

          function mergeExtendsChain(chain, opts, dirname, context, files) {
            if (opts.extends === undefined) return true;
            const file = (0, _files.loadConfig)(
              opts.extends,
              dirname,
              context.envName,
              context.caller
            );

            if (files.has(file)) {
              throw new Error(
                `Configuration cycle detected loading ${file.filepath}.\n` +
                  `File already loaded following the config chain:\n` +
                  Array.from(files, file => ` - ${file.filepath}`).join("\n")
              );
            }

            files.add(file);
            const fileChain = loadFileChain(
              validateExtendFile(file),
              context,
              files
            );
            files.delete(file);
            if (!fileChain) return false;
            mergeChain(chain, fileChain);
            return true;
          }

          function mergeChain(target, source) {
            target.options.push(...source.options);
            target.plugins.push(...source.plugins);
            target.presets.push(...source.presets);
            return target;
          }

          function mergeChainOpts(target, { options, plugins, presets }) {
            target.options.push(options);
            target.plugins.push(...plugins());
            target.presets.push(...presets());
            return target;
          }

          function emptyChain() {
            return {
              options: [],
              presets: [],
              plugins: [],
            };
          }

          function normalizeOptions(opts) {
            const options = Object.assign({}, opts);
            delete options.extends;
            delete options.env;
            delete options.overrides;
            delete options.plugins;
            delete options.presets;
            delete options.passPerPreset;
            delete options.ignore;
            delete options.only;
            delete options.test;
            delete options.include;
            delete options.exclude;

            if (options.hasOwnProperty("sourceMap")) {
              options.sourceMaps = options.sourceMap;
              delete options.sourceMap;
            }

            return options;
          }

          function dedupDescriptors(items) {
            const map = new Map();
            const descriptors = [];

            for (const item of items) {
              if (typeof item.value === "function") {
                const fnKey = item.value;
                let nameMap = map.get(fnKey);

                if (!nameMap) {
                  nameMap = new Map();
                  map.set(fnKey, nameMap);
                }

                let desc = nameMap.get(item.name);

                if (!desc) {
                  desc = {
                    value: item,
                  };
                  descriptors.push(desc);
                  if (!item.ownPass) nameMap.set(item.name, desc);
                } else {
                  desc.value = item;
                }
              } else {
                descriptors.push({
                  value: item,
                });
              }
            }

            return descriptors.reduce((acc, desc) => {
              acc.push(desc.value);
              return acc;
            }, []);
          }

          function configIsApplicable({ options }, dirname, context) {
            return (
              (options.test === undefined ||
                configFieldIsApplicable(context, options.test, dirname)) &&
              (options.include === undefined ||
                configFieldIsApplicable(context, options.include, dirname)) &&
              (options.exclude === undefined ||
                !configFieldIsApplicable(context, options.exclude, dirname))
            );
          }

          function configFieldIsApplicable(context, test, dirname) {
            const patterns = Array.isArray(test) ? test : [test];
            return matchesPatterns(context, patterns, dirname);
          }

          function shouldIgnore(context, ignore, only, dirname) {
            if (ignore && matchesPatterns(context, ignore, dirname)) {
              debug(
                "Ignored %o because it matched one of %O from %o",
                context.filename,
                ignore,
                dirname
              );
              return true;
            }

            if (only && !matchesPatterns(context, only, dirname)) {
              debug(
                "Ignored %o because it failed to match one of %O from %o",
                context.filename,
                only,
                dirname
              );
              return true;
            }

            return false;
          }

          function matchesPatterns(context, patterns, dirname) {
            return patterns.some(pattern =>
              matchPattern(pattern, dirname, context.filename, context)
            );
          }

          function matchPattern(pattern, dirname, pathToTest, context) {
            if (typeof pattern === "function") {
              return !!pattern(pathToTest, {
                dirname,
                envName: context.envName,
                caller: context.caller,
              });
            }

            if (typeof pathToTest !== "string") {
              throw new Error(
                `Configuration contains string/RegExp pattern, but no filename was passed to Babel`
              );
            }

            if (typeof pattern === "string") {
              pattern = (0, _patternToRegex.default)(pattern, dirname);
            }

            return pattern.test(pathToTest);
          }
        },
        /* 153 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.msg = msg;
          exports.access = access;
          exports.assertRootMode = assertRootMode;
          exports.assertSourceMaps = assertSourceMaps;
          exports.assertCompact = assertCompact;
          exports.assertSourceType = assertSourceType;
          exports.assertCallerMetadata = assertCallerMetadata;
          exports.assertInputSourceMap = assertInputSourceMap;
          exports.assertString = assertString;
          exports.assertFunction = assertFunction;
          exports.assertBoolean = assertBoolean;
          exports.assertObject = assertObject;
          exports.assertArray = assertArray;
          exports.assertIgnoreList = assertIgnoreList;
          exports.assertConfigApplicableTest = assertConfigApplicableTest;
          exports.assertConfigFileSearch = assertConfigFileSearch;
          exports.assertBabelrcSearch = assertBabelrcSearch;
          exports.assertPluginList = assertPluginList;

          function msg(loc) {
            switch (loc.type) {
              case "root":
                return ``;

              case "env":
                return `${msg(loc.parent)}.env["${loc.name}"]`;

              case "overrides":
                return `${msg(loc.parent)}.overrides[${loc.index}]`;

              case "option":
                return `${msg(loc.parent)}.${loc.name}`;

              case "access":
                return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;

              default:
                throw new Error(`Assertion failure: Unknown type ${loc.type}`);
            }
          }

          function access(loc, name) {
            return {
              type: "access",
              name,
              parent: loc,
            };
          }

          function assertRootMode(loc, value) {
            if (
              value !== undefined &&
              value !== "root" &&
              value !== "upward" &&
              value !== "upward-optional"
            ) {
              throw new Error(
                `${msg(
                  loc
                )} must be a "root", "upward", "upward-optional" or undefined`
              );
            }

            return value;
          }

          function assertSourceMaps(loc, value) {
            if (
              value !== undefined &&
              typeof value !== "boolean" &&
              value !== "inline" &&
              value !== "both"
            ) {
              throw new Error(
                `${msg(loc)} must be a boolean, "inline", "both", or undefined`
              );
            }

            return value;
          }

          function assertCompact(loc, value) {
            if (
              value !== undefined &&
              typeof value !== "boolean" &&
              value !== "auto"
            ) {
              throw new Error(
                `${msg(loc)} must be a boolean, "auto", or undefined`
              );
            }

            return value;
          }

          function assertSourceType(loc, value) {
            if (
              value !== undefined &&
              value !== "module" &&
              value !== "script" &&
              value !== "unambiguous"
            ) {
              throw new Error(
                `${msg(
                  loc
                )} must be "module", "script", "unambiguous", or undefined`
              );
            }

            return value;
          }

          function assertCallerMetadata(loc, value) {
            const obj = assertObject(loc, value);

            if (obj) {
              if (typeof obj["name"] !== "string") {
                throw new Error(
                  `${msg(loc)} set but does not contain "name" property string`
                );
              }

              for (const prop of Object.keys(obj)) {
                const propLoc = access(loc, prop);
                const value = obj[prop];

                if (
                  value != null &&
                  typeof value !== "boolean" &&
                  typeof value !== "string" &&
                  typeof value !== "number"
                ) {
                  throw new Error(
                    `${msg(
                      propLoc
                    )} must be null, undefined, a boolean, a string, or a number.`
                  );
                }
              }
            }

            return value;
          }

          function assertInputSourceMap(loc, value) {
            if (
              value !== undefined &&
              typeof value !== "boolean" &&
              (typeof value !== "object" || !value)
            ) {
              throw new Error(
                `${msg(loc)} must be a boolean, object, or undefined`
              );
            }

            return value;
          }

          function assertString(loc, value) {
            if (value !== undefined && typeof value !== "string") {
              throw new Error(`${msg(loc)} must be a string, or undefined`);
            }

            return value;
          }

          function assertFunction(loc, value) {
            if (value !== undefined && typeof value !== "function") {
              throw new Error(`${msg(loc)} must be a function, or undefined`);
            }

            return value;
          }

          function assertBoolean(loc, value) {
            if (value !== undefined && typeof value !== "boolean") {
              throw new Error(`${msg(loc)} must be a boolean, or undefined`);
            }

            return value;
          }

          function assertObject(loc, value) {
            if (
              value !== undefined &&
              (typeof value !== "object" || Array.isArray(value) || !value)
            ) {
              throw new Error(`${msg(loc)} must be an object, or undefined`);
            }

            return value;
          }

          function assertArray(loc, value) {
            if (value != null && !Array.isArray(value)) {
              throw new Error(`${msg(loc)} must be an array, or undefined`);
            }

            return value;
          }

          function assertIgnoreList(loc, value) {
            const arr = assertArray(loc, value);

            if (arr) {
              arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));
            }

            return arr;
          }

          function assertIgnoreItem(loc, value) {
            if (
              typeof value !== "string" &&
              typeof value !== "function" &&
              !(value instanceof RegExp)
            ) {
              throw new Error(
                `${msg(
                  loc
                )} must be an array of string/Funtion/RegExp values, or undefined`
              );
            }

            return value;
          }

          function assertConfigApplicableTest(loc, value) {
            if (value === undefined) return value;

            if (Array.isArray(value)) {
              value.forEach((item, i) => {
                if (!checkValidTest(item)) {
                  throw new Error(
                    `${msg(access(loc, i))} must be a string/Function/RegExp.`
                  );
                }
              });
            } else if (!checkValidTest(value)) {
              throw new Error(
                `${msg(
                  loc
                )} must be a string/Function/RegExp, or an array of those`
              );
            }

            return value;
          }

          function checkValidTest(value) {
            return (
              typeof value === "string" ||
              typeof value === "function" ||
              value instanceof RegExp
            );
          }

          function assertConfigFileSearch(loc, value) {
            if (
              value !== undefined &&
              typeof value !== "boolean" &&
              typeof value !== "string"
            ) {
              throw new Error(
                `${msg(loc)} must be a undefined, a boolean, a string, ` +
                  `got ${JSON.stringify(value)}`
              );
            }

            return value;
          }

          function assertBabelrcSearch(loc, value) {
            if (value === undefined || typeof value === "boolean") return value;

            if (Array.isArray(value)) {
              value.forEach((item, i) => {
                if (!checkValidTest(item)) {
                  throw new Error(
                    `${msg(access(loc, i))} must be a string/Function/RegExp.`
                  );
                }
              });
            } else if (!checkValidTest(value)) {
              throw new Error(
                `${msg(
                  loc
                )} must be a undefined, a boolean, a string/Function/RegExp ` +
                  `or an array of those, got ${JSON.stringify(value)}`
              );
            }

            return value;
          }

          function assertPluginList(loc, value) {
            const arr = assertArray(loc, value);

            if (arr) {
              arr.forEach((item, i) => assertPluginItem(access(loc, i), item));
            }

            return arr;
          }

          function assertPluginItem(loc, value) {
            if (Array.isArray(value)) {
              if (value.length === 0) {
                throw new Error(`${msg(loc)} must include an object`);
              }

              if (value.length > 3) {
                throw new Error(
                  `${msg(loc)} may only be a two-tuple or three-tuple`
                );
              }

              assertPluginTarget(access(loc, 0), value[0]);

              if (value.length > 1) {
                const opts = value[1];

                if (
                  opts !== undefined &&
                  opts !== false &&
                  (typeof opts !== "object" || Array.isArray(opts))
                ) {
                  throw new Error(
                    `${msg(
                      access(loc, 1)
                    )} must be an object, false, or undefined`
                  );
                }
              }

              if (value.length === 3) {
                const name = value[2];

                if (name !== undefined && typeof name !== "string") {
                  throw new Error(
                    `${msg(access(loc, 2))} must be a string, or undefined`
                  );
                }
              }
            } else {
              assertPluginTarget(loc, value);
            }

            return value;
          }

          function assertPluginTarget(loc, value) {
            if (
              (typeof value !== "object" || !value) &&
              typeof value !== "string" &&
              typeof value !== "function"
            ) {
              throw new Error(`${msg(loc)} must be a string, object, function`);
            }

            return value;
          }
        },
        /* 154 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = loadPrivatePartialConfig;
          exports.loadPartialConfig = loadPartialConfig;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          var _plugin = _interopRequireDefault(__webpack_require__(82));

          var _util = __webpack_require__(151);

          var _item = __webpack_require__(47);

          var _configChain = __webpack_require__(152);

          var _environment = __webpack_require__(149);

          var _options = __webpack_require__(83);

          var _files = __webpack_require__(46);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function resolveRootMode(rootDir, rootMode) {
            switch (rootMode) {
              case "root":
                return rootDir;

              case "upward-optional": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
                return upwardRootDir === null ? rootDir : upwardRootDir;
              }

              case "upward": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
                if (upwardRootDir !== null) return upwardRootDir;
                throw Object.assign(
                  new Error(
                    `Babel was run with rootMode:"upward" but a root could not ` +
                      `be found when searching upward from "${rootDir}"`
                  ),
                  {
                    code: "BABEL_ROOT_NOT_FOUND",
                    dirname: rootDir,
                  }
                );
              }

              default:
                throw new Error(`Assertion failure - unknown rootMode value`);
            }
          }

          function loadPrivatePartialConfig(inputOpts) {
            if (
              inputOpts != null &&
              (typeof inputOpts !== "object" || Array.isArray(inputOpts))
            ) {
              throw new Error(
                "Babel options must be an object, null, or undefined"
              );
            }

            const args = inputOpts
              ? (0, _options.validate)("arguments", inputOpts)
              : {};
            const {
              envName = (0, _environment.getEnv)(),
              cwd = ".",
              root: rootDir = ".",
              rootMode = "root",
              caller,
            } = args;

            const absoluteCwd = _path().default.resolve(cwd);

            const absoluteRootDir = resolveRootMode(
              _path().default.resolve(absoluteCwd, rootDir),
              rootMode
            );
            const context = {
              filename:
                typeof args.filename === "string"
                  ? _path().default.resolve(cwd, args.filename)
                  : undefined,
              cwd: absoluteCwd,
              root: absoluteRootDir,
              envName,
              caller,
            };
            const configChain = (0, _configChain.buildRootChain)(args, context);
            if (!configChain) return null;
            const options = {};
            configChain.options.forEach(opts => {
              (0, _util.mergeOptions)(options, opts);
            });
            options.babelrc = false;
            options.configFile = false;
            options.passPerPreset = false;
            options.envName = context.envName;
            options.cwd = context.cwd;
            options.root = context.root;
            options.filename =
              typeof context.filename === "string"
                ? context.filename
                : undefined;
            options.plugins = configChain.plugins.map(descriptor =>
              (0, _item.createItemFromDescriptor)(descriptor)
            );
            options.presets = configChain.presets.map(descriptor =>
              (0, _item.createItemFromDescriptor)(descriptor)
            );
            return {
              options,
              context,
              ignore: configChain.ignore,
              babelrc: configChain.babelrc,
              config: configChain.config,
            };
          }

          function loadPartialConfig(inputOpts) {
            const result = loadPrivatePartialConfig(inputOpts);
            if (!result) return null;
            const { options, babelrc, ignore, config } = result;
            (options.plugins || []).forEach(item => {
              if (item.value instanceof _plugin.default) {
                throw new Error(
                  "Passing cached plugin instances is not supported in " +
                    "babel.loadPartialConfig()"
                );
              }
            });
            return new PartialConfig(
              options,
              babelrc ? babelrc.filepath : undefined,
              ignore ? ignore.filepath : undefined,
              config ? config.filepath : undefined
            );
          }

          class PartialConfig {
            constructor(options, babelrc, ignore, config) {
              this.options = options;
              this.babelignore = ignore;
              this.babelrc = babelrc;
              this.config = config;
              Object.freeze(this);
            }

            hasFilesystemConfig() {
              return this.babelrc !== undefined || this.config !== undefined;
            }
          }

          Object.freeze(PartialConfig.prototype);
        },
        /* 155 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.runAsync = runAsync;
          exports.runSync = runSync;

          function _babelTraverse() {
            const data = _interopRequireDefault(__webpack_require__(8));

            _babelTraverse = function() {
              return data;
            };

            return data;
          }

          var _pluginPass = _interopRequireDefault(__webpack_require__(406));

          var _blockHoistPlugin = _interopRequireDefault(
            __webpack_require__(407)
          );

          var _normalizeOpts = _interopRequireDefault(__webpack_require__(162));

          var _normalizeFile = _interopRequireDefault(__webpack_require__(163));

          var _generate = _interopRequireDefault(__webpack_require__(445));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function runAsync(config, code, ast, callback) {
            let result;

            try {
              result = runSync(config, code, ast);
            } catch (err) {
              return callback(err);
            }

            return callback(null, result);
          }

          function runSync(config, code, ast) {
            const file = (0, _normalizeFile.default)(
              config.passes,
              (0, _normalizeOpts.default)(config),
              code,
              ast
            );
            transformFile(file, config.passes);
            const opts = file.opts;
            const { outputCode, outputMap } =
              opts.code !== false
                ? (0, _generate.default)(config.passes, file)
                : {};
            return {
              metadata: file.metadata,
              options: opts,
              ast: opts.ast === true ? file.ast : null,
              code: outputCode === undefined ? null : outputCode,
              map: outputMap === undefined ? null : outputMap,
              sourceType: file.ast.program.sourceType,
            };
          }

          function transformFile(file, pluginPasses) {
            for (const pluginPairs of pluginPasses) {
              const passPairs = [];
              const passes = [];
              const visitors = [];

              for (const plugin of pluginPairs.concat([
                (0, _blockHoistPlugin.default)(),
              ])) {
                const pass = new _pluginPass.default(
                  file,
                  plugin.key,
                  plugin.options
                );
                passPairs.push([plugin, pass]);
                passes.push(pass);
                visitors.push(plugin.visitor);
              }

              for (const [plugin, pass] of passPairs) {
                const fn = plugin.pre;

                if (fn) {
                  const result = fn.call(pass, file);

                  if (isThenable(result)) {
                    throw new Error(
                      `You appear to be using an plugin with an async .pre, ` +
                        `which your current version of Babel does not support.` +
                        `If you're using a published plugin, you may need to upgrade ` +
                        `your @gerhobbelt/babel-core version.`
                    );
                  }
                }
              }

              const visitor = _babelTraverse().default.visitors.merge(
                visitors,
                passes,
                file.opts.wrapPluginVisitorMethod
              );

              (0, _babelTraverse().default)(file.ast, visitor, file.scope);

              for (const [plugin, pass] of passPairs) {
                const fn = plugin.post;

                if (fn) {
                  const result = fn.call(pass, file);

                  if (isThenable(result)) {
                    throw new Error(
                      `You appear to be using an plugin with an async .post, ` +
                        `which your current version of Babel does not support.` +
                        `If you're using a published plugin, you may need to upgrade ` +
                        `your @gerhobbelt/babel-core version.`
                    );
                  }
                }
              }
            }
          }

          function isThenable(val) {
            return (
              !!val &&
              (typeof val === "object" || typeof val === "function") &&
              typeof val.then === "function"
            );
          }
        },
        /* 156 */
        function(module, exports, __webpack_require__) {
          var baseIsEqualDeep = __webpack_require__(415),
            isObjectLike = __webpack_require__(6);

          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }

            if (
              value == null ||
              other == null ||
              (!isObjectLike(value) && !isObjectLike(other))
            ) {
              return value !== value && other !== other;
            }

            return baseIsEqualDeep(
              value,
              other,
              bitmask,
              customizer,
              baseIsEqual,
              stack
            );
          }

          module.exports = baseIsEqual;
        },
        /* 157 */
        function(module, exports, __webpack_require__) {
          var SetCache = __webpack_require__(113),
            arraySome = __webpack_require__(416),
            cacheHas = __webpack_require__(115);

          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          function equalArrays(
            array,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;

            if (
              arrLength != othLength &&
              !(isPartial && othLength > arrLength)
            ) {
              return false;
            }

            var stacked = stack.get(array);

            if (stacked && stack.get(other)) {
              return stacked == other;
            }

            var index = -1,
              result = true,
              seen =
                bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array);

            while (++index < arrLength) {
              var arrValue = array[index],
                othValue = other[index];

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, arrValue, index, other, array, stack)
                  : customizer(arrValue, othValue, index, array, other, stack);
              }

              if (compared !== undefined) {
                if (compared) {
                  continue;
                }

                result = false;
                break;
              }

              if (seen) {
                if (
                  !arraySome(other, function(othValue, othIndex) {
                    if (
                      !cacheHas(seen, othIndex) &&
                      (arrValue === othValue ||
                        equalFunc(
                          arrValue,
                          othValue,
                          bitmask,
                          customizer,
                          stack
                        ))
                    ) {
                      return seen.push(othIndex);
                    }
                  })
                ) {
                  result = false;
                  break;
                }
              } else if (
                !(
                  arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )
              ) {
                result = false;
                break;
              }
            }

            stack["delete"](array);
            stack["delete"](other);
            return result;
          }

          module.exports = equalArrays;
        },
        /* 158 */
        function(module, exports, __webpack_require__) {
          var isObject = __webpack_require__(10);

          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }

          module.exports = isStrictComparable;
        },
        /* 159 */
        function(module, exports) {
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }

              return (
                object[key] === srcValue &&
                (srcValue !== undefined || key in Object(object))
              );
            };
          }

          module.exports = matchesStrictComparable;
        },
        /* 160 */
        function(module, exports, __webpack_require__) {
          var castPath = __webpack_require__(161),
            toKey = __webpack_require__(49);

          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0,
              length = path.length;

            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }

            return index && index == length ? object : undefined;
          }

          module.exports = baseGet;
        },
        /* 161 */
        function(module, exports, __webpack_require__) {
          var isArray = __webpack_require__(4),
            isKey = __webpack_require__(84),
            stringToPath = __webpack_require__(423),
            toString = __webpack_require__(78);

          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }

            return isKey(value, object)
              ? [value]
              : stringToPath(toString(value));
          }

          module.exports = castPath;
        },
        /* 162 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = normalizeOptions;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function normalizeOptions(config) {
            const {
              filename,
              cwd,
              filenameRelative = typeof filename === "string"
                ? _path().default.relative(cwd, filename)
                : "unknown",
              sourceType = "module",
              inputSourceMap,
              sourceMaps = !!inputSourceMap,
              moduleRoot,
              sourceRoot = moduleRoot,
              sourceFileName = _path().default.basename(filenameRelative),
              comments = true,
              compact = "auto",
            } = config.options;
            const opts = config.options;
            const options = Object.assign({}, opts, {
              parserOpts: Object.assign(
                {
                  sourceType:
                    _path().default.extname(filenameRelative) === ".mjs"
                      ? "module"
                      : sourceType,
                  sourceFileName: filename,
                  plugins: [],
                },
                opts.parserOpts
              ),
              generatorOpts: Object.assign(
                {
                  filename,
                  auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
                  auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
                  retainLines: opts.retainLines,
                  comments,
                  shouldPrintComment: opts.shouldPrintComment,
                  compact,
                  minified: opts.minified,
                  sourceMaps,
                  sourceRoot,
                  sourceFileName,
                },
                opts.generatorOpts
              ),
            });

            for (const plugins of config.passes) {
              for (const plugin of plugins) {
                if (plugin.manipulateOptions) {
                  plugin.manipulateOptions(options, options.parserOpts);
                }
              }
            }

            return options;
          }
        },
        /* 163 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = normalizeFile;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          function _debug() {
            const data = _interopRequireDefault(__webpack_require__(73));

            _debug = function() {
              return data;
            };

            return data;
          }

          function _cloneDeep() {
            const data = _interopRequireDefault(__webpack_require__(441));

            _cloneDeep = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _convertSourceMap() {
            const data = _interopRequireDefault(__webpack_require__(164));

            _convertSourceMap = function() {
              return data;
            };

            return data;
          }

          function _babelParser() {
            const data = __webpack_require__(44);

            _babelParser = function() {
              return data;
            };

            return data;
          }

          function _babelCodeFrame() {
            const data = __webpack_require__(43);

            _babelCodeFrame = function() {
              return data;
            };

            return data;
          }

          var _file = _interopRequireDefault(__webpack_require__(132));

          var _missingPluginHelper = _interopRequireDefault(
            __webpack_require__(444)
          );

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const debug = (0, _debug().default)("babel:transform:file");

          function normalizeFile(pluginPasses, options, code, ast) {
            code = `${code || ""}`;
            let inputMap = null;

            if (options.inputSourceMap !== false) {
              if (typeof options.inputSourceMap === "object") {
                inputMap = _convertSourceMap().default.fromObject(
                  options.inputSourceMap
                );
              }

              if (!inputMap) {
                try {
                  inputMap = _convertSourceMap().default.fromSource(code);

                  if (inputMap) {
                    code = _convertSourceMap().default.removeComments(code);
                  }
                } catch (err) {
                  debug("discarding unknown inline input sourcemap", err);
                  code = _convertSourceMap().default.removeComments(code);
                }
              }

              if (!inputMap) {
                if (typeof options.filename === "string") {
                  try {
                    inputMap = _convertSourceMap().default.fromMapFileSource(
                      code,
                      _path().default.dirname(options.filename)
                    );

                    if (inputMap) {
                      code = _convertSourceMap().default.removeMapFileComments(
                        code
                      );
                    }
                  } catch (err) {
                    debug("discarding unknown file input sourcemap", err);
                    code = _convertSourceMap().default.removeMapFileComments(
                      code
                    );
                  }
                } else {
                  debug("discarding un-loadable file input sourcemap");
                  code = _convertSourceMap().default.removeMapFileComments(
                    code
                  );
                }
              }
            }

            if (ast) {
              if (ast.type === "Program") {
                ast = t().file(ast, [], []);
              } else if (ast.type !== "File") {
                throw new Error("AST root must be a Program or File node");
              }

              ast = (0, _cloneDeep().default)(ast);
            } else {
              ast = parser(pluginPasses, options, code);
            }

            return new _file.default(options, {
              code,
              ast,
              inputMap,
            });
          }

          function parser(
            pluginPasses,
            { parserOpts, highlightCode = true, filename = "unknown" },
            code
          ) {
            try {
              const results = [];

              for (const plugins of pluginPasses) {
                for (const plugin of plugins) {
                  const { parserOverride } = plugin;

                  if (parserOverride) {
                    const ast = parserOverride(
                      code,
                      parserOpts,
                      _babelParser().parse
                    );
                    if (ast !== undefined) results.push(ast);
                  }
                }
              }

              if (results.length === 0) {
                return (0, _babelParser().parse)(code, parserOpts);
              } else if (results.length === 1) {
                if (typeof results[0].then === "function") {
                  throw new Error(
                    `You appear to be using an async codegen plugin, ` +
                      `which your current version of Babel does not support. ` +
                      `If you're using a published plugin, you may need to upgrade ` +
                      `your @gerhobbelt/babel-core version.`
                  );
                }

                return results[0];
              }

              throw new Error(
                "More than one plugin attempted to override parsing."
              );
            } catch (err) {
              if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
                err.message +=
                  "\nConsider renaming the file to '.mjs', or setting sourceType:module " +
                  "or sourceType:unambiguous in your Babel config for this file.";
              }

              const { loc, missingPlugin } = err;

              if (loc) {
                const codeFrame = (0, _babelCodeFrame().codeFrameColumns)(
                  code,
                  {
                    start: {
                      line: loc.line,
                      column: loc.column + 1,
                    },
                  },
                  {
                    highlightCode,
                  }
                );

                if (missingPlugin) {
                  err.message =
                    `${filename}: ` +
                    (0, _missingPluginHelper.default)(
                      missingPlugin[0],
                      loc,
                      codeFrame
                    );
                } else {
                  err.message = `${filename}: ${err.message}\n\n` + codeFrame;
                }

                err.code = "BABEL_PARSE_ERROR";
              }

              throw err;
            }
          }
        },
        /* 164 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var fs = __webpack_require__(442);

          var path = __webpack_require__(14);

          var SafeBuffer = __webpack_require__(443);

          Object.defineProperty(exports, "commentRegex", {
            get: function getCommentRegex() {
              return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
            },
          });
          Object.defineProperty(exports, "mapFileCommentRegex", {
            get: function getMapFileCommentRegex() {
              return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
            },
          });

          function decodeBase64(base64) {
            return SafeBuffer.Buffer.from(base64, "base64").toString();
          }

          function stripComment(sm) {
            return sm.split(",").pop();
          }

          function readFromFileMap(sm, dir) {
            var r = exports.mapFileCommentRegex.exec(sm);
            var filename = r[1] || r[2];
            var filepath = path.resolve(dir, filename);

            try {
              return fs.readFileSync(filepath, "utf8");
            } catch (e) {
              throw new Error(
                "An error occurred while trying to read the map file at " +
                  filepath +
                  "\n" +
                  e
              );
            }
          }

          function Converter(sm, opts) {
            opts = opts || {};
            if (opts.isFileComment)
              sm = readFromFileMap(sm, opts.commentFileDir);
            if (opts.hasComment) sm = stripComment(sm);
            if (opts.isEncoded) sm = decodeBase64(sm);
            if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);
            this.sourcemap = sm;
          }

          Converter.prototype.toJSON = function(space) {
            return JSON.stringify(this.sourcemap, null, space);
          };

          Converter.prototype.toBase64 = function() {
            var json = this.toJSON();
            return SafeBuffer.Buffer.from(json, "utf8").toString("base64");
          };

          Converter.prototype.toComment = function(options) {
            var base64 = this.toBase64();
            var data =
              "sourceMappingURL=data:application/json;charset=utf-8;base64," +
              base64;
            return options && options.multiline
              ? "/*# " + data + " */"
              : "//# " + data;
          };

          Converter.prototype.toObject = function() {
            return JSON.parse(this.toJSON());
          };

          Converter.prototype.addProperty = function(key, value) {
            if (this.sourcemap.hasOwnProperty(key))
              throw new Error(
                'property "' +
                  key +
                  '" already exists on the sourcemap, use set property instead'
              );
            return this.setProperty(key, value);
          };

          Converter.prototype.setProperty = function(key, value) {
            this.sourcemap[key] = value;
            return this;
          };

          Converter.prototype.getProperty = function(key) {
            return this.sourcemap[key];
          };

          exports.fromObject = function(obj) {
            return new Converter(obj);
          };

          exports.fromJSON = function(json) {
            return new Converter(json, {
              isJSON: true,
            });
          };

          exports.fromBase64 = function(base64) {
            return new Converter(base64, {
              isEncoded: true,
            });
          };

          exports.fromComment = function(comment) {
            comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
            return new Converter(comment, {
              isEncoded: true,
              hasComment: true,
            });
          };

          exports.fromMapFileComment = function(comment, dir) {
            return new Converter(comment, {
              commentFileDir: dir,
              isFileComment: true,
              isJSON: true,
            });
          };

          exports.fromSource = function(content) {
            var m = content.match(exports.commentRegex);
            return m ? exports.fromComment(m.pop()) : null;
          };

          exports.fromMapFileSource = function(content, dir) {
            var m = content.match(exports.mapFileCommentRegex);
            return m ? exports.fromMapFileComment(m.pop(), dir) : null;
          };

          exports.removeComments = function(src) {
            return src.replace(exports.commentRegex, "");
          };

          exports.removeMapFileComments = function(src) {
            return src.replace(exports.mapFileCommentRegex, "");
          };

          exports.generateMapFileComment = function(file, options) {
            var data = "sourceMappingURL=" + file;
            return options && options.multiline
              ? "/*# " + data + " */"
              : "//# " + data;
          };
        },
        /* 165 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = exports.transformIncludesAndExcludes = exports.isPluginRequired = void 0;

          function _semver() {
            const data = _interopRequireDefault(__webpack_require__(15));

            _semver = function() {
              return data;
            };

            return data;
          }

          var _builtIns = _interopRequireDefault(__webpack_require__(85));

          var _debug = __webpack_require__(50);

          var _defaults = __webpack_require__(307);

          var _moduleTransformations = _interopRequireDefault(
            __webpack_require__(129)
          );

          var _normalizeOptions = _interopRequireDefault(
            __webpack_require__(128)
          );

          var _plugins = _interopRequireDefault(__webpack_require__(130));

          var _shippedProposals = __webpack_require__(308);

          var _useBuiltInsEntryPlugin = _interopRequireDefault(
            __webpack_require__(309)
          );

          var _useBuiltInsPlugin = _interopRequireDefault(
            __webpack_require__(310)
          );

          var _targetsParser = _interopRequireDefault(__webpack_require__(71));

          var _availablePlugins = _interopRequireDefault(
            __webpack_require__(312)
          );

          var _utils = __webpack_require__(16);

          function _babelHelperPluginUtils() {
            const data = __webpack_require__(40);

            _babelHelperPluginUtils = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const getPlugin = pluginName => {
            const plugin = _availablePlugins.default[pluginName];

            if (!plugin) {
              throw new Error(
                `Could not find plugin "${pluginName}". Ensure there is an entry in ./available-plugins.js for it.`
              );
            }

            return plugin;
          };

          const builtInsListWithoutProposals = (0, _utils.filterStageFromList)(
            _builtIns.default,
            _shippedProposals.builtIns
          );
          const pluginListWithoutProposals = (0, _utils.filterStageFromList)(
            _plugins.default,
            _shippedProposals.features
          );

          const isPluginRequired = (supportedEnvironments, plugin) => {
            const targetEnvironments = Object.keys(supportedEnvironments);

            if (targetEnvironments.length === 0) {
              return true;
            }

            const isRequiredForEnvironments = targetEnvironments.filter(
              environment => {
                if (!plugin[environment]) {
                  return true;
                }

                const lowestImplementedVersion = plugin[environment];
                const lowestTargetedVersion =
                  supportedEnvironments[environment];

                if (
                  (0, _utils.isUnreleasedVersion)(
                    lowestTargetedVersion,
                    environment
                  )
                ) {
                  return false;
                } else if (
                  (0, _utils.isUnreleasedVersion)(
                    lowestImplementedVersion,
                    environment
                  )
                ) {
                  return true;
                }

                if (!_semver().default.valid(lowestTargetedVersion)) {
                  throw new Error(
                    `Invalid version passed for target "${environment}": "${lowestTargetedVersion}". ` +
                      "Versions must be in semver format (major.minor.patch)"
                  );
                }

                return _semver().default.gt(
                  (0, _utils.semverify)(lowestImplementedVersion),
                  lowestTargetedVersion
                );
              }
            );
            return isRequiredForEnvironments.length > 0;
          };

          exports.isPluginRequired = isPluginRequired;

          const getBuiltInTargets = targets => {
            const builtInTargets = Object.assign({}, targets);

            if (builtInTargets.uglify != null) {
              delete builtInTargets.uglify;
            }

            return builtInTargets;
          };

          const transformIncludesAndExcludes = opts => {
            return opts.reduce(
              (result, opt) => {
                const target = opt.match(/^(es\d+|web)\./)
                  ? "builtIns"
                  : "plugins";
                result[target].add(opt);
                return result;
              },
              {
                all: opts,
                plugins: new Set(),
                builtIns: new Set(),
              }
            );
          };

          exports.transformIncludesAndExcludes = transformIncludesAndExcludes;

          const filterItems = (
            list,
            includes,
            excludes,
            targets,
            defaultIncludes,
            defaultExcludes
          ) => {
            const result = new Set();

            for (const item in list) {
              if (
                !excludes.has(item) &&
                (isPluginRequired(targets, list[item]) || includes.has(item))
              ) {
                result.add(item);
              } else {
                const shippedProposalsSyntax = _shippedProposals.pluginSyntaxMap.get(
                  item
                );

                if (shippedProposalsSyntax) {
                  result.add(shippedProposalsSyntax);
                }
              }
            }

            if (defaultIncludes) {
              defaultIncludes.forEach(
                item => !excludes.has(item) && result.add(item)
              );
            }

            if (defaultExcludes) {
              defaultExcludes.forEach(
                item => !includes.has(item) && result.delete(item)
              );
            }

            return result;
          };

          function supportsStaticESM(caller) {
            return !!(caller && caller.supportsStaticESM);
          }

          var _default = (0, _babelHelperPluginUtils().declare)((api, opts) => {
            api.assertVersion(7);
            const {
              configPath,
              debug,
              exclude: optionsExclude,
              forceAllTransforms,
              ignoreBrowserslistConfig,
              include: optionsInclude,
              loose,
              modules,
              shippedProposals,
              spec,
              targets: optionsTargets,
              useBuiltIns,
            } = (0, _normalizeOptions.default)(opts);

            if (optionsTargets && optionsTargets.uglify) {
              throw new Error(
                "The uglify target has been removed. Set the top level" +
                  " option `forceAllTransforms: true` instead."
              );
            }

            if (
              optionsTargets &&
              optionsTargets.esmodules &&
              optionsTargets.browsers
            ) {
              console.log("");
              console.log(
                "@gerhobbelt/babel-preset-env: esmodules and browsers targets have been specified together."
              );
              console.log(
                `\`browsers\` target, \`${
                  optionsTargets.browsers
                }\` will be ignored.`
              );
              console.log("");
            }

            const targets = (0, _targetsParser.default)(optionsTargets, {
              ignoreBrowserslistConfig,
              configPath,
            });
            const include = transformIncludesAndExcludes(optionsInclude);
            const exclude = transformIncludesAndExcludes(optionsExclude);
            const transformTargets = forceAllTransforms ? {} : targets;
            const transformations = filterItems(
              shippedProposals ? _plugins.default : pluginListWithoutProposals,
              include.plugins,
              exclude.plugins,
              transformTargets,
              null,
              (0, _defaults.getOptionSpecificExcludesFor)({
                loose,
              })
            );
            let polyfills;
            let polyfillTargets;

            if (useBuiltIns) {
              polyfillTargets = getBuiltInTargets(targets);
              polyfills = filterItems(
                shippedProposals
                  ? _builtIns.default
                  : builtInsListWithoutProposals,
                include.builtIns,
                exclude.builtIns,
                polyfillTargets,
                (0, _defaults.getPlatformSpecificDefaultFor)(polyfillTargets)
              );
            }

            const plugins = [];
            const pluginUseBuiltIns = useBuiltIns !== false;

            if (
              modules !== false &&
              _moduleTransformations.default[modules] &&
              (modules !== "auto" ||
                !api.caller ||
                !api.caller(supportsStaticESM))
            ) {
              plugins.push([
                getPlugin(_moduleTransformations.default[modules]),
                {
                  loose,
                },
              ]);
            }

            transformations.forEach(pluginName =>
              plugins.push([
                getPlugin(pluginName),
                {
                  spec,
                  loose,
                  useBuiltIns: pluginUseBuiltIns,
                },
              ])
            );
            const regenerator = transformations.has("transform-regenerator");

            if (debug) {
              console.log("@gerhobbelt/babel-preset-env: `DEBUG` option");
              console.log("\nUsing targets:");
              console.log(
                JSON.stringify((0, _utils.prettifyTargets)(targets), null, 2)
              );
              console.log(`\nUsing modules transform: ${modules.toString()}`);
              console.log("\nUsing plugins:");
              transformations.forEach(transform => {
                (0, _debug.logPlugin)(transform, targets, _plugins.default);
              });

              if (!useBuiltIns) {
                console.log(
                  "\nUsing polyfills: No polyfills were added, since the `useBuiltIns` option was not set."
                );
              } else {
                console.log(`
Using polyfills with \`${useBuiltIns}\` option:`);
              }
            }

            if (useBuiltIns === "usage" || useBuiltIns === "entry") {
              const pluginOptions = {
                debug,
                polyfills,
                regenerator,
                onDebug: (polyfills, context) => {
                  polyfills.forEach(polyfill =>
                    (0, _debug.logPlugin)(
                      polyfill,
                      polyfillTargets,
                      _builtIns.default,
                      context
                    )
                  );
                },
              };
              plugins.push([
                useBuiltIns === "usage"
                  ? _useBuiltInsPlugin.default
                  : _useBuiltInsEntryPlugin.default,
                pluginOptions,
              ]);
            }

            return {
              plugins,
            };
          });

          exports.default = _default;
        },
        /* 166 */
        function(module, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "version",
            function() {
              return version;
            }
          );
          /* harmony import */ var _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
            21
          );
          /* harmony import */ var _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
            _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__
          );
          /* harmony import */ var _gerhobbelt_babel_preset_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
            165
          );
          /* harmony import */ var _gerhobbelt_babel_preset_env__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
            _gerhobbelt_babel_preset_env__WEBPACK_IMPORTED_MODULE_1__
          );

          Object(
            _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__[
              "registerPreset"
            ]
          )(
            "env",
            _gerhobbelt_babel_preset_env__WEBPACK_IMPORTED_MODULE_1___default.a
          );
          const version = "7.2.2-27";
        },
        /* 167 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(global, process) {
            var formatRegExp = /%[sdj%]/g;

            exports.format = function(f) {
              if (!isString(f)) {
                var objects = [];

                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }

                return objects.join(" ");
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x) {
                if (x === "%%") return "%";
                if (i >= len) return x;

                switch (x) {
                  case "%s":
                    return String(args[i++]);

                  case "%d":
                    return Number(args[i++]);

                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }

                  default:
                    return x;
                }
              });

              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }

              return str;
            };

            exports.deprecate = function(fn, msg) {
              if (isUndefined(global.process)) {
                return function() {
                  return exports.deprecate(fn, msg).apply(this, arguments);
                };
              }

              if (process.noDeprecation === true) {
                return fn;
              }

              var warned = false;

              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }

                  warned = true;
                }

                return fn.apply(this, arguments);
              }

              return deprecated;
            };

            var debugs = {};
            var debugEnviron;

            exports.debuglog = function(set) {
              if (isUndefined(debugEnviron)) debugEnviron = undefined || "";
              set = set.toUpperCase();

              if (!debugs[set]) {
                if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                  var pid = process.pid;

                  debugs[set] = function() {
                    var msg = exports.format.apply(exports, arguments);
                    console.error("%s %d: %s", set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {};
                }
              }

              return debugs[set];
            };

            function inspect(obj, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor,
              };
              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];

              if (isBoolean(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports._extend(ctx, opts);
              }

              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }

            exports.inspect = inspect;
            inspect.colors = {
              bold: [1, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              white: [37, 39],
              grey: [90, 39],
              black: [30, 39],
              blue: [34, 39],
              cyan: [36, 39],
              green: [32, 39],
              magenta: [35, 39],
              red: [31, 39],
              yellow: [33, 39],
            };
            inspect.styles = {
              special: "cyan",
              number: "yellow",
              boolean: "yellow",
              undefined: "grey",
              null: "bold",
              string: "green",
              date: "magenta",
              regexp: "red",
            };

            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];

              if (style) {
                return (
                  "\u001b[" +
                  inspect.colors[style][0] +
                  "m" +
                  str +
                  "\u001b[" +
                  inspect.colors[style][1] +
                  "m"
                );
              } else {
                return str;
              }
            }

            function stylizeNoColor(str, styleType) {
              return str;
            }

            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }

            function formatValue(ctx, value, recurseTimes) {
              if (
                ctx.customInspect &&
                value &&
                isFunction(value.inspect) &&
                value.inspect !== exports.inspect &&
                !(value.constructor && value.constructor.prototype === value)
              ) {
                var ret = value.inspect(recurseTimes, ctx);

                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }

                return ret;
              }

              var primitive = formatPrimitive(ctx, value);

              if (primitive) {
                return primitive;
              }

              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }

              if (
                isError(value) &&
                (keys.indexOf("message") >= 0 ||
                  keys.indexOf("description") >= 0)
              ) {
                return formatError(value);
              }

              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }

                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    "regexp"
                  );
                }

                if (isDate(value)) {
                  return ctx.stylize(
                    Date.prototype.toString.call(value),
                    "date"
                  );
                }

                if (isError(value)) {
                  return formatError(value);
                }
              }

              var base = "",
                array = false,
                braces = ["{", "}"];

              if (isArray(value)) {
                array = true;
                braces = ["[", "]"];
              }

              if (isFunction(value)) {
                var n = value.name ? ": " + value.name : "";
                base = " [Function" + n + "]";
              }

              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }

              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }

              if (isError(value)) {
                base = " " + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    "regexp"
                  );
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }

              ctx.seen.push(value);
              var output;

              if (array) {
                output = formatArray(
                  ctx,
                  value,
                  recurseTimes,
                  visibleKeys,
                  keys
                );
              } else {
                output = keys.map(function(key) {
                  return formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    array
                  );
                });
              }

              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }

            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");

              if (isString(value)) {
                var simple =
                  "'" +
                  JSON.stringify(value)
                    .replace(/^"|"$/g, "")
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"') +
                  "'";
                return ctx.stylize(simple, "string");
              }

              if (isNumber(value)) return ctx.stylize("" + value, "number");
              if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
              if (isNull(value)) return ctx.stylize("null", "null");
            }

            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }

            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];

              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      String(i),
                      true
                    )
                  );
                } else {
                  output.push("");
                }
              }

              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      key,
                      true
                    )
                  );
                }
              });
              return output;
            }

            function formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              array
            ) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key],
              };

              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }

              if (!hasOwnProperty(visibleKeys, key)) {
                name = "[" + key + "]";
              }

              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }

                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str
                        .split("\n")
                        .map(function(line) {
                          return "  " + line;
                        })
                        .join("\n")
                        .substr(2);
                    } else {
                      str =
                        "\n" +
                        str
                          .split("\n")
                          .map(function(line) {
                            return "   " + line;
                          })
                          .join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }

              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }

                name = JSON.stringify("" + key);

                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"')
                    .replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }

              return name + ": " + str;
            }

            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0;
              var length = output.reduce(function(prev, cur) {
                numLinesEst++;
                if (cur.indexOf("\n") >= 0) numLinesEst++;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);

              if (length > 60) {
                return (
                  braces[0] +
                  (base === "" ? "" : base + "\n ") +
                  " " +
                  output.join(",\n  ") +
                  " " +
                  braces[1]
                );
              }

              return (
                braces[0] + base + " " + output.join(", ") + " " + braces[1]
              );
            }

            function isArray(ar) {
              return Array.isArray(ar);
            }

            exports.isArray = isArray;

            function isBoolean(arg) {
              return typeof arg === "boolean";
            }

            exports.isBoolean = isBoolean;

            function isNull(arg) {
              return arg === null;
            }

            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
              return arg == null;
            }

            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
              return typeof arg === "number";
            }

            exports.isNumber = isNumber;

            function isString(arg) {
              return typeof arg === "string";
            }

            exports.isString = isString;

            function isSymbol(arg) {
              return typeof arg === "symbol";
            }

            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
              return arg === void 0;
            }

            exports.isUndefined = isUndefined;

            function isRegExp(re) {
              return isObject(re) && objectToString(re) === "[object RegExp]";
            }

            exports.isRegExp = isRegExp;

            function isObject(arg) {
              return typeof arg === "object" && arg !== null;
            }

            exports.isObject = isObject;

            function isDate(d) {
              return isObject(d) && objectToString(d) === "[object Date]";
            }

            exports.isDate = isDate;

            function isError(e) {
              return (
                isObject(e) &&
                (objectToString(e) === "[object Error]" || e instanceof Error)
              );
            }

            exports.isError = isError;

            function isFunction(arg) {
              return typeof arg === "function";
            }

            exports.isFunction = isFunction;

            function isPrimitive(arg) {
              return (
                arg === null ||
                typeof arg === "boolean" ||
                typeof arg === "number" ||
                typeof arg === "string" ||
                typeof arg === "symbol" ||
                typeof arg === "undefined"
              );
            }

            exports.isPrimitive = isPrimitive;
            exports.isBuffer = __webpack_require__(168);

            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }

            function pad(n) {
              return n < 10 ? "0" + n.toString(10) : n.toString(10);
            }

            var months = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ];

            function timestamp() {
              var d = new Date();
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds()),
              ].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }

            exports.log = function() {
              console.log(
                "%s - %s",
                timestamp(),
                exports.format.apply(exports, arguments)
              );
            };

            exports.inherits = __webpack_require__(169);

            exports._extend = function(origin, add) {
              if (!add || !isObject(add)) return origin;
              var keys = Object.keys(add);
              var i = keys.length;

              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }

              return origin;
            };

            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(23), __webpack_require__(2)));
        },
        /* 168 */
        function(module, exports) {
          module.exports = function isBuffer(arg) {
            return (
              arg &&
              typeof arg === "object" &&
              typeof arg.copy === "function" &&
              typeof arg.fill === "function" &&
              typeof arg.readUInt8 === "function"
            );
          };
        },
        /* 169 */
        function(module, exports) {
          if (typeof Object.create === "function") {
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              });
            };
          } else {
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;

              var TempCtor = function() {};

              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        },
        /* 170 */
        function(module, exports, __webpack_require__) {
          "use strict";

          module.exports = (function() {
            function _min(d0, d1, d2, bx, ay) {
              return d0 < d1 || d2 < d1
                ? d0 > d2
                  ? d2 + 1
                  : d0 + 1
                : bx === ay
                ? d1
                : d1 + 1;
            }

            return function(a, b) {
              if (a === b) {
                return 0;
              }

              if (a.length > b.length) {
                var tmp = a;
                a = b;
                b = tmp;
              }

              var la = a.length;
              var lb = b.length;

              while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
                la--;
                lb--;
              }

              var offset = 0;

              while (
                offset < la &&
                a.charCodeAt(offset) === b.charCodeAt(offset)
              ) {
                offset++;
              }

              la -= offset;
              lb -= offset;

              if (la === 0 || lb < 3) {
                return lb;
              }

              var x = 0;
              var y;
              var d0;
              var d1;
              var d2;
              var d3;
              var dd;
              var dy;
              var ay;
              var bx0;
              var bx1;
              var bx2;
              var bx3;
              var vector = [];

              for (y = 0; y < la; y++) {
                vector.push(y + 1);
                vector.push(a.charCodeAt(offset + y));
              }

              for (; x + 3 < lb; ) {
                bx0 = b.charCodeAt(offset + (d0 = x));
                bx1 = b.charCodeAt(offset + (d1 = x + 1));
                bx2 = b.charCodeAt(offset + (d2 = x + 2));
                bx3 = b.charCodeAt(offset + (d3 = x + 3));
                dd = x += 4;

                for (y = 0; y < vector.length; y += 2) {
                  dy = vector[y];
                  ay = vector[y + 1];
                  d0 = _min(dy, d0, d1, bx0, ay);
                  d1 = _min(d0, d1, d2, bx1, ay);
                  d2 = _min(d1, d2, d3, bx2, ay);
                  dd = _min(d2, d3, dd, bx3, ay);
                  vector[y] = dd;
                  d3 = d2;
                  d2 = d1;
                  d1 = d0;
                  d0 = dy;
                }
              }

              for (; x < lb; ) {
                bx0 = b.charCodeAt(offset + (d0 = x));
                dd = ++x;

                for (y = 0; y < vector.length; y += 2) {
                  dy = vector[y];
                  vector[y] = dd =
                    dy < d0 || dd < d0
                      ? dy > dd
                        ? dd + 1
                        : dy + 1
                      : bx0 === vector[y + 1]
                      ? d0
                      : d0 + 1;
                  d0 = dy;
                }
              }

              return dd;
            };
          })();
        },
        /* 171 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.addDefault = addDefault;
          exports.addNamed = addNamed;
          exports.addNamespace = addNamespace;
          exports.addSideEffect = addSideEffect;
          Object.defineProperty(exports, "ImportInjector", {
            enumerable: true,
            get: function() {
              return _importInjector.default;
            },
          });
          Object.defineProperty(exports, "isModule", {
            enumerable: true,
            get: function() {
              return _isModule.default;
            },
          });

          var _importInjector = _interopRequireDefault(
            __webpack_require__(172)
          );

          var _isModule = _interopRequireDefault(__webpack_require__(125));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function addDefault(path, importedSource, opts) {
            return new _importInjector.default(path).addDefault(
              importedSource,
              opts
            );
          }

          function addNamed(path, name, importedSource, opts) {
            return new _importInjector.default(path).addNamed(
              name,
              importedSource,
              opts
            );
          }

          function addNamespace(path, importedSource, opts) {
            return new _importInjector.default(path).addNamespace(
              importedSource,
              opts
            );
          }

          function addSideEffect(path, importedSource, opts) {
            return new _importInjector.default(path).addSideEffect(
              importedSource,
              opts
            );
          }
        },
        /* 172 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _assert() {
            const data = _interopRequireDefault(__webpack_require__(22));

            _assert = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _importBuilder = _interopRequireDefault(__webpack_require__(292));

          var _isModule = _interopRequireDefault(__webpack_require__(125));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          class ImportInjector {
            constructor(path, importedSource, opts) {
              const programPath = path.find(p => p.isProgram());
              this._programPath = programPath;
              this._programScope = programPath.scope;
              this._hub = programPath.hub;
              this._defaultOpts = {
                importedSource: null,
                importedType: "commonjs",
                importedInterop: "babel",
                importingInterop: "babel",
                ensureLiveReference: false,
                ensureNoContext: false,
              };
              this._defaultOpts = this._applyDefaults(
                importedSource,
                opts,
                true
              );
            }

            addDefault(importedSourceIn, opts) {
              return this.addNamed("default", importedSourceIn, opts);
            }

            addNamed(importName, importedSourceIn, opts) {
              (0, _assert().default)(typeof importName === "string");
              return this._generateImport(
                this._applyDefaults(importedSourceIn, opts),
                importName
              );
            }

            addNamespace(importedSourceIn, opts) {
              return this._generateImport(
                this._applyDefaults(importedSourceIn, opts),
                null
              );
            }

            addSideEffect(importedSourceIn, opts) {
              return this._generateImport(
                this._applyDefaults(importedSourceIn, opts),
                false
              );
            }

            _applyDefaults(importedSource, opts, isInit = false) {
              const optsList = [];

              if (typeof importedSource === "string") {
                optsList.push({
                  importedSource,
                });
                optsList.push(opts);
              } else {
                (0, _assert().default)(
                  !opts,
                  "Unexpected secondary arguments."
                );
                optsList.push(importedSource);
              }

              const newOpts = Object.assign({}, this._defaultOpts);

              for (const opts of optsList) {
                if (!opts) continue;
                Object.keys(newOpts).forEach(key => {
                  if (opts[key] !== undefined) newOpts[key] = opts[key];
                });

                if (!isInit) {
                  if (opts.nameHint !== undefined)
                    newOpts.nameHint = opts.nameHint;
                  if (opts.blockHoist !== undefined)
                    newOpts.blockHoist = opts.blockHoist;
                }
              }

              return newOpts;
            }

            _generateImport(opts, importName) {
              const isDefault = importName === "default";
              const isNamed = !!importName && !isDefault;
              const isNamespace = importName === null;
              const {
                importedSource,
                importedType,
                importedInterop,
                importingInterop,
                ensureLiveReference,
                ensureNoContext,
                nameHint,
                blockHoist,
              } = opts;
              let name = nameHint || importName;
              const isMod = (0, _isModule.default)(this._programPath);
              const isModuleForNode = isMod && importingInterop === "node";
              const isModuleForBabel = isMod && importingInterop === "babel";
              const builder = new _importBuilder.default(
                importedSource,
                this._programScope,
                this._hub
              );

              if (importedType === "es6") {
                if (!isModuleForNode && !isModuleForBabel) {
                  throw new Error("Cannot import an ES6 module from CommonJS");
                }

                builder.import();

                if (isNamespace) {
                  builder.namespace(nameHint || importedSource);
                } else if (isDefault || isNamed) {
                  builder.named(name, importName);
                }
              } else if (importedType !== "commonjs") {
                throw new Error(`Unexpected interopType "${importedType}"`);
              } else if (importedInterop === "babel") {
                if (isModuleForNode) {
                  name = name !== "default" ? name : importedSource;
                  const es6Default = `${importedSource}$es6Default`;
                  builder.import();

                  if (isNamespace) {
                    builder
                      .default(es6Default)
                      .var(name || importedSource)
                      .wildcardInterop();
                  } else if (isDefault) {
                    if (ensureLiveReference) {
                      builder
                        .default(es6Default)
                        .var(name || importedSource)
                        .defaultInterop()
                        .read("default");
                    } else {
                      builder
                        .default(es6Default)
                        .var(name)
                        .defaultInterop()
                        .prop(importName);
                    }
                  } else if (isNamed) {
                    builder.default(es6Default).read(importName);
                  }
                } else if (isModuleForBabel) {
                  builder.import();

                  if (isNamespace) {
                    builder.namespace(name || importedSource);
                  } else if (isDefault || isNamed) {
                    builder.named(name, importName);
                  }
                } else {
                  builder.require();

                  if (isNamespace) {
                    builder.var(name || importedSource).wildcardInterop();
                  } else if ((isDefault || isNamed) && ensureLiveReference) {
                    if (isDefault) {
                      name = name !== "default" ? name : importedSource;
                      builder.var(name).read(importName);
                      builder.defaultInterop();
                    } else {
                      builder.var(importedSource).read(importName);
                    }
                  } else if (isDefault) {
                    builder
                      .var(name)
                      .defaultInterop()
                      .prop(importName);
                  } else if (isNamed) {
                    builder.var(name).prop(importName);
                  }
                }
              } else if (importedInterop === "compiled") {
                if (isModuleForNode) {
                  builder.import();

                  if (isNamespace) {
                    builder.default(name || importedSource);
                  } else if (isDefault || isNamed) {
                    builder.default(importedSource).read(name);
                  }
                } else if (isModuleForBabel) {
                  builder.import();

                  if (isNamespace) {
                    builder.namespace(name || importedSource);
                  } else if (isDefault || isNamed) {
                    builder.named(name, importName);
                  }
                } else {
                  builder.require();

                  if (isNamespace) {
                    builder.var(name || importedSource);
                  } else if (isDefault || isNamed) {
                    if (ensureLiveReference) {
                      builder.var(importedSource).read(name);
                    } else {
                      builder.prop(importName).var(name);
                    }
                  }
                }
              } else if (importedInterop === "uncompiled") {
                if (isDefault && ensureLiveReference) {
                  throw new Error("No live reference for commonjs default");
                }

                if (isModuleForNode) {
                  builder.import();

                  if (isNamespace) {
                    builder.default(name || importedSource);
                  } else if (isDefault) {
                    builder.default(name);
                  } else if (isNamed) {
                    builder.default(importedSource).read(name);
                  }
                } else if (isModuleForBabel) {
                  builder.import();

                  if (isNamespace) {
                    builder.default(name || importedSource);
                  } else if (isDefault) {
                    builder.default(name);
                  } else if (isNamed) {
                    builder.named(name, importName);
                  }
                } else {
                  builder.require();

                  if (isNamespace) {
                    builder.var(name || importedSource);
                  } else if (isDefault) {
                    builder.var(name);
                  } else if (isNamed) {
                    if (ensureLiveReference) {
                      builder.var(importedSource).read(name);
                    } else {
                      builder.var(name).prop(importName);
                    }
                  }
                }
              } else {
                throw new Error(
                  `Unknown importedInterop "${importedInterop}".`
                );
              }

              const { statements, resultName } = builder.done();

              this._insertStatements(statements, blockHoist);

              if (
                (isDefault || isNamed) &&
                ensureNoContext &&
                resultName.type !== "Identifier"
              ) {
                return t().sequenceExpression([
                  t().numericLiteral(0),
                  resultName,
                ]);
              }

              return resultName;
            }

            _insertStatements(statements, blockHoist = 3) {
              statements.forEach(node => {
                node._blockHoist = blockHoist;
              });

              const targetPath = this._programPath.get("body").filter(p => {
                const val = p.node._blockHoist;
                return Number.isFinite(val) && val < 4;
              })[0];

              if (targetPath) {
                targetPath.insertBefore(statements);
              } else {
                this._programPath.unshiftContainer("body", statements);
              }
            }
          }

          exports.default = ImportInjector;
        },
        /* 173 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          var _buildMatchMemberExpression = _interopRequireDefault(
            __webpack_require__(86)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const isReactComponent = (0, _buildMatchMemberExpression.default)(
            "React.Component"
          );
          var _default = isReactComponent;
          exports.default = _default;
        },
        /* 174 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isCompatTag;

          function isCompatTag(tagName) {
            return !!tagName && /^[a-z]/.test(tagName);
          }
        },
        /* 175 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = buildChildren;

          var _generated = __webpack_require__(1);

          var _cleanJSXElementLiteralChild = _interopRequireDefault(
            __webpack_require__(176)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function buildChildren(node) {
            const elements = [];

            for (let i = 0; i < node.children.length; i++) {
              let child = node.children[i];

              if ((0, _generated.isJSXText)(child)) {
                (0, _cleanJSXElementLiteralChild.default)(child, elements);
                continue;
              }

              if ((0, _generated.isJSXExpressionContainer)(child))
                child = child.expression;
              if ((0, _generated.isJSXEmptyExpression)(child)) continue;
              elements.push(child);
            }

            return elements;
          }
        },
        /* 176 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = cleanJSXElementLiteralChild;

          var _generated = __webpack_require__(3);

          function cleanJSXElementLiteralChild(child, args) {
            const lines = child.value.split(/\r\n|\n|\r/);
            let lastNonEmptyLine = 0;

            for (let i = 0; i < lines.length; i++) {
              if (lines[i].match(/[^ \t]/)) {
                lastNonEmptyLine = i;
              }
            }

            let str = "";

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              const isFirstLine = i === 0;
              const isLastLine = i === lines.length - 1;
              const isLastNonEmptyLine = i === lastNonEmptyLine;
              let trimmedLine = line.replace(/\t/g, " ");

              if (!isFirstLine) {
                trimmedLine = trimmedLine.replace(/^[ ]+/, "");
              }

              if (!isLastLine) {
                trimmedLine = trimmedLine.replace(/[ ]+$/, "");
              }

              if (trimmedLine) {
                if (!isLastNonEmptyLine) {
                  trimmedLine += " ";
                }

                str += trimmedLine;
              }
            }

            if (str) args.push((0, _generated.stringLiteral)(str));
          }
        },
        /* 177 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = builder;

          function _clone() {
            const data = _interopRequireDefault(__webpack_require__(88));

            _clone = function() {
              return data;
            };

            return data;
          }

          var _definitions = __webpack_require__(7);

          var _validate = _interopRequireDefault(__webpack_require__(107));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function builder(type, ...args) {
            const keys = _definitions.BUILDER_KEYS[type];
            const countArgs = args.length;

            if (countArgs > keys.length) {
              throw new Error(
                `${type}: Too many arguments passed. Received ${countArgs} but can receive no more than ${
                  keys.length
                }`
              );
            }

            const node = {
              type,
            };
            let i = 0;
            keys.forEach(key => {
              const field = _definitions.NODE_FIELDS[type][key];
              let arg;
              if (i < countArgs) arg = args[i];
              if (arg === undefined) arg = (0, _clone().default)(field.default);
              node[key] = arg;
              i++;
            });

            for (const key in node) {
              (0, _validate.default)(node, key, node[key]);
            }

            return node;
          }
        },
        /* 178 */
        function(module, exports) {
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }

          module.exports = listCacheClear;
        },
        /* 179 */
        function(module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__(32);

          var arrayProto = Array.prototype;
          var splice = arrayProto.splice;

          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              return false;
            }

            var lastIndex = data.length - 1;

            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }

            --this.size;
            return true;
          }

          module.exports = listCacheDelete;
        },
        /* 180 */
        function(module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__(32);

          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
          }

          module.exports = listCacheGet;
        },
        /* 181 */
        function(module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__(32);

          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }

          module.exports = listCacheHas;
        },
        /* 182 */
        function(module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__(32);

          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }

            return this;
          }

          module.exports = listCacheSet;
        },
        /* 183 */
        function(module, exports, __webpack_require__) {
          var ListCache = __webpack_require__(31);

          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }

          module.exports = stackClear;
        },
        /* 184 */
        function(module, exports) {
          function stackDelete(key) {
            var data = this.__data__,
              result = data["delete"](key);
            this.size = data.size;
            return result;
          }

          module.exports = stackDelete;
        },
        /* 185 */
        function(module, exports) {
          function stackGet(key) {
            return this.__data__.get(key);
          }

          module.exports = stackGet;
        },
        /* 186 */
        function(module, exports) {
          function stackHas(key) {
            return this.__data__.has(key);
          }

          module.exports = stackHas;
        },
        /* 187 */
        function(module, exports, __webpack_require__) {
          var ListCache = __webpack_require__(31),
            Map = __webpack_require__(53),
            MapCache = __webpack_require__(54);

          var LARGE_ARRAY_SIZE = 200;

          function stackSet(key, value) {
            var data = this.__data__;

            if (data instanceof ListCache) {
              var pairs = data.__data__;

              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }

              data = this.__data__ = new MapCache(pairs);
            }

            data.set(key, value);
            this.size = data.size;
            return this;
          }

          module.exports = stackSet;
        },
        /* 188 */
        function(module, exports, __webpack_require__) {
          var isFunction = __webpack_require__(90),
            isMasked = __webpack_require__(191),
            isObject = __webpack_require__(10),
            toSource = __webpack_require__(92);

          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
          var reIsHostCtor = /^\[object .+?Constructor\]$/;
          var funcProto = Function.prototype,
            objectProto = Object.prototype;
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var reIsNative = RegExp(
            "^" +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
          );

          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }

            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }

          module.exports = baseIsNative;
        },
        /* 189 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var nativeObjectToString = objectProto.toString;
          var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];

            try {
              value[symToStringTag] = undefined;
              var unmasked = true;
            } catch (e) {}

            var result = nativeObjectToString.call(value);

            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }

            return result;
          }

          module.exports = getRawTag;
        },
        /* 190 */
        function(module, exports) {
          var objectProto = Object.prototype;
          var nativeObjectToString = objectProto.toString;

          function objectToString(value) {
            return nativeObjectToString.call(value);
          }

          module.exports = objectToString;
        },
        /* 191 */
        function(module, exports, __webpack_require__) {
          var coreJsData = __webpack_require__(192);

          var maskSrcKey = (function() {
            var uid = /[^.]+$/.exec(
              (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
            );
            return uid ? "Symbol(src)_1." + uid : "";
          })();

          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }

          module.exports = isMasked;
        },
        /* 192 */
        function(module, exports, __webpack_require__) {
          var root = __webpack_require__(5);

          var coreJsData = root["__core-js_shared__"];
          module.exports = coreJsData;
        },
        /* 193 */
        function(module, exports) {
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          module.exports = getValue;
        },
        /* 194 */
        function(module, exports, __webpack_require__) {
          var Hash = __webpack_require__(195),
            ListCache = __webpack_require__(31),
            Map = __webpack_require__(53);

          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              hash: new Hash(),
              map: new (Map || ListCache)(),
              string: new Hash(),
            };
          }

          module.exports = mapCacheClear;
        },
        /* 195 */
        function(module, exports, __webpack_require__) {
          var hashClear = __webpack_require__(196),
            hashDelete = __webpack_require__(197),
            hashGet = __webpack_require__(198),
            hashHas = __webpack_require__(199),
            hashSet = __webpack_require__(200);

          function Hash(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          module.exports = Hash;
        },
        /* 196 */
        function(module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__(33);

          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }

          module.exports = hashClear;
        },
        /* 197 */
        function(module, exports) {
          function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
          }

          module.exports = hashDelete;
        },
        /* 198 */
        function(module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__(33);

          var HASH_UNDEFINED = "__lodash_hash_undefined__";
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function hashGet(key) {
            var data = this.__data__;

            if (nativeCreate) {
              var result = data[key];
              return result === HASH_UNDEFINED ? undefined : result;
            }

            return hasOwnProperty.call(data, key) ? data[key] : undefined;
          }

          module.exports = hashGet;
        },
        /* 199 */
        function(module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__(33);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate
              ? data[key] !== undefined
              : hasOwnProperty.call(data, key);
          }

          module.exports = hashHas;
        },
        /* 200 */
        function(module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__(33);

          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] =
              nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
          }

          module.exports = hashSet;
        },
        /* 201 */
        function(module, exports, __webpack_require__) {
          var getMapData = __webpack_require__(34);

          function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
          }

          module.exports = mapCacheDelete;
        },
        /* 202 */
        function(module, exports) {
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" ||
              type == "number" ||
              type == "symbol" ||
              type == "boolean"
              ? value !== "__proto__"
              : value === null;
          }

          module.exports = isKeyable;
        },
        /* 203 */
        function(module, exports, __webpack_require__) {
          var getMapData = __webpack_require__(34);

          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }

          module.exports = mapCacheGet;
        },
        /* 204 */
        function(module, exports, __webpack_require__) {
          var getMapData = __webpack_require__(34);

          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }

          module.exports = mapCacheHas;
        },
        /* 205 */
        function(module, exports, __webpack_require__) {
          var getMapData = __webpack_require__(34);

          function mapCacheSet(key, value) {
            var data = getMapData(this, key),
              size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
          }

          module.exports = mapCacheSet;
        },
        /* 206 */
        function(module, exports) {
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }

            return array;
          }

          module.exports = arrayEach;
        },
        /* 207 */
        function(module, exports, __webpack_require__) {
          var copyObject = __webpack_require__(35),
            keys = __webpack_require__(18);

          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }

          module.exports = baseAssign;
        },
        /* 208 */
        function(module, exports) {
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }

            return result;
          }

          module.exports = baseTimes;
        },
        /* 209 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isObjectLike = __webpack_require__(6);

          var argsTag = "[object Arguments]";

          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }

          module.exports = baseIsArguments;
        },
        /* 210 */
        function(module, exports) {
          function stubFalse() {
            return false;
          }

          module.exports = stubFalse;
        },
        /* 211 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isLength = __webpack_require__(58),
            isObjectLike = __webpack_require__(6);

          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            objectTag = "[object Object]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            weakMapTag = "[object WeakMap]";
          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[
            float64Tag
          ] = typedArrayTags[int8Tag] = typedArrayTags[
            int16Tag
          ] = typedArrayTags[int32Tag] = typedArrayTags[
            uint8Tag
          ] = typedArrayTags[uint8ClampedTag] = typedArrayTags[
            uint16Tag
          ] = typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
            arrayBufferTag
          ] = typedArrayTags[boolTag] = typedArrayTags[
            dataViewTag
          ] = typedArrayTags[dateTag] = typedArrayTags[
            errorTag
          ] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[
            numberTag
          ] = typedArrayTags[objectTag] = typedArrayTags[
            regexpTag
          ] = typedArrayTags[setTag] = typedArrayTags[
            stringTag
          ] = typedArrayTags[weakMapTag] = false;

          function baseIsTypedArray(value) {
            return (
              isObjectLike(value) &&
              isLength(value.length) &&
              !!typedArrayTags[baseGetTag(value)]
            );
          }

          module.exports = baseIsTypedArray;
        },
        /* 212 */
        function(module, exports, __webpack_require__) {
          var isPrototype = __webpack_require__(59),
            nativeKeys = __webpack_require__(213);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }

            var result = [];

            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result.push(key);
              }
            }

            return result;
          }

          module.exports = baseKeys;
        },
        /* 213 */
        function(module, exports, __webpack_require__) {
          var overArg = __webpack_require__(98);

          var nativeKeys = overArg(Object.keys, Object);
          module.exports = nativeKeys;
        },
        /* 214 */
        function(module, exports, __webpack_require__) {
          var copyObject = __webpack_require__(35),
            keysIn = __webpack_require__(60);

          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }

          module.exports = baseAssignIn;
        },
        /* 215 */
        function(module, exports, __webpack_require__) {
          var isObject = __webpack_require__(10),
            isPrototype = __webpack_require__(59),
            nativeKeysIn = __webpack_require__(216);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }

            var isProto = isPrototype(object),
              result = [];

            for (var key in object) {
              if (
                !(
                  key == "constructor" &&
                  (isProto || !hasOwnProperty.call(object, key))
                )
              ) {
                result.push(key);
              }
            }

            return result;
          }

          module.exports = baseKeysIn;
        },
        /* 216 */
        function(module, exports) {
          function nativeKeysIn(object) {
            var result = [];

            if (object != null) {
              for (var key in Object(object)) {
                result.push(key);
              }
            }

            return result;
          }

          module.exports = nativeKeysIn;
        },
        /* 217 */
        function(module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function(module) {
            var root = __webpack_require__(5);

            var freeExports = true && exports && !exports.nodeType && exports;
            var freeModule =
              freeExports &&
              typeof module == "object" &&
              module &&
              !module.nodeType &&
              module;
            var moduleExports =
              freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }

              var length = buffer.length,
                result = allocUnsafe
                  ? allocUnsafe(length)
                  : new buffer.constructor(length);
              buffer.copy(result);
              return result;
            }

            module.exports = cloneBuffer;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(36)(module)));
        },
        /* 218 */
        function(module, exports) {
          function copyArray(source, array) {
            var index = -1,
              length = source.length;
            array || (array = Array(length));

            while (++index < length) {
              array[index] = source[index];
            }

            return array;
          }

          module.exports = copyArray;
        },
        /* 219 */
        function(module, exports, __webpack_require__) {
          var copyObject = __webpack_require__(35),
            getSymbols = __webpack_require__(61);

          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }

          module.exports = copySymbols;
        },
        /* 220 */
        function(module, exports) {
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];

              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }

            return result;
          }

          module.exports = arrayFilter;
        },
        /* 221 */
        function(module, exports, __webpack_require__) {
          var copyObject = __webpack_require__(35),
            getSymbolsIn = __webpack_require__(100);

          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }

          module.exports = copySymbolsIn;
        },
        /* 222 */
        function(module, exports, __webpack_require__) {
          var baseGetAllKeys = __webpack_require__(102),
            getSymbolsIn = __webpack_require__(100),
            keysIn = __webpack_require__(60);

          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }

          module.exports = getAllKeysIn;
        },
        /* 223 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12),
            root = __webpack_require__(5);

          var DataView = getNative(root, "DataView");
          module.exports = DataView;
        },
        /* 224 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12),
            root = __webpack_require__(5);

          var Promise = getNative(root, "Promise");
          module.exports = Promise;
        },
        /* 225 */
        function(module, exports, __webpack_require__) {
          var getNative = __webpack_require__(12),
            root = __webpack_require__(5);

          var WeakMap = getNative(root, "WeakMap");
          module.exports = WeakMap;
        },
        /* 226 */
        function(module, exports) {
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function initCloneArray(array) {
            var length = array.length,
              result = new array.constructor(length);

            if (
              length &&
              typeof array[0] == "string" &&
              hasOwnProperty.call(array, "index")
            ) {
              result.index = array.index;
              result.input = array.input;
            }

            return result;
          }

          module.exports = initCloneArray;
        },
        /* 227 */
        function(module, exports, __webpack_require__) {
          var cloneArrayBuffer = __webpack_require__(64),
            cloneDataView = __webpack_require__(228),
            cloneRegExp = __webpack_require__(229),
            cloneSymbol = __webpack_require__(230),
            cloneTypedArray = __webpack_require__(231);

          var boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]";
          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;

            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case dataViewTag:
                return cloneDataView(object, isDeep);

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);

              case mapTag:
                return new Ctor();

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                return cloneRegExp(object);

              case setTag:
                return new Ctor();

              case symbolTag:
                return cloneSymbol(object);
            }
          }

          module.exports = initCloneByTag;
        },
        /* 228 */
        function(module, exports, __webpack_require__) {
          var cloneArrayBuffer = __webpack_require__(64);

          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep
              ? cloneArrayBuffer(dataView.buffer)
              : dataView.buffer;
            return new dataView.constructor(
              buffer,
              dataView.byteOffset,
              dataView.byteLength
            );
          }

          module.exports = cloneDataView;
        },
        /* 229 */
        function(module, exports) {
          var reFlags = /\w*$/;

          function cloneRegExp(regexp) {
            var result = new regexp.constructor(
              regexp.source,
              reFlags.exec(regexp)
            );
            result.lastIndex = regexp.lastIndex;
            return result;
          }

          module.exports = cloneRegExp;
        },
        /* 230 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17);

          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

          function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
          }

          module.exports = cloneSymbol;
        },
        /* 231 */
        function(module, exports, __webpack_require__) {
          var cloneArrayBuffer = __webpack_require__(64);

          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep
              ? cloneArrayBuffer(typedArray.buffer)
              : typedArray.buffer;
            return new typedArray.constructor(
              buffer,
              typedArray.byteOffset,
              typedArray.length
            );
          }

          module.exports = cloneTypedArray;
        },
        /* 232 */
        function(module, exports, __webpack_require__) {
          var baseCreate = __webpack_require__(233),
            getPrototype = __webpack_require__(63),
            isPrototype = __webpack_require__(59);

          function initCloneObject(object) {
            return typeof object.constructor == "function" &&
              !isPrototype(object)
              ? baseCreate(getPrototype(object))
              : {};
          }

          module.exports = initCloneObject;
        },
        /* 233 */
        function(module, exports, __webpack_require__) {
          var isObject = __webpack_require__(10);

          var objectCreate = Object.create;

          var baseCreate = (function() {
            function object() {}

            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }

              if (objectCreate) {
                return objectCreate(proto);
              }

              object.prototype = proto;
              var result = new object();
              object.prototype = undefined;
              return result;
            };
          })();

          module.exports = baseCreate;
        },
        /* 234 */
        function(module, exports, __webpack_require__) {
          var baseIsMap = __webpack_require__(235),
            baseUnary = __webpack_require__(25),
            nodeUtil = __webpack_require__(37);

          var nodeIsMap = nodeUtil && nodeUtil.isMap;
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          module.exports = isMap;
        },
        /* 235 */
        function(module, exports, __webpack_require__) {
          var getTag = __webpack_require__(38),
            isObjectLike = __webpack_require__(6);

          var mapTag = "[object Map]";

          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }

          module.exports = baseIsMap;
        },
        /* 236 */
        function(module, exports, __webpack_require__) {
          var baseIsSet = __webpack_require__(237),
            baseUnary = __webpack_require__(25),
            nodeUtil = __webpack_require__(37);

          var nodeIsSet = nodeUtil && nodeUtil.isSet;
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          module.exports = isSet;
        },
        /* 237 */
        function(module, exports, __webpack_require__) {
          var getTag = __webpack_require__(38),
            isObjectLike = __webpack_require__(6);

          var setTag = "[object Set]";

          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }

          module.exports = baseIsSet;
        },
        /* 238 */
        function(module, exports, __webpack_require__) {
          "use strict";

          let fastProto = null;

          function FastObject(o) {
            if (fastProto !== null && typeof fastProto.property) {
              const result = fastProto;
              fastProto = FastObject.prototype = null;
              return result;
            }

            fastProto = FastObject.prototype =
              o == null ? Object.create(null) : o;
            return new FastObject();
          }

          FastObject();

          module.exports = function toFastproperties(o) {
            return FastObject(o);
          };
        },
        /* 239 */
        function(module, exports) {
          (function() {
            "use strict";

            function isExpression(node) {
              if (node == null) {
                return false;
              }

              switch (node.type) {
                case "ArrayExpression":
                case "AssignmentExpression":
                case "BinaryExpression":
                case "CallExpression":
                case "ConditionalExpression":
                case "FunctionExpression":
                case "Identifier":
                case "Literal":
                case "LogicalExpression":
                case "MemberExpression":
                case "NewExpression":
                case "ObjectExpression":
                case "SequenceExpression":
                case "ThisExpression":
                case "UnaryExpression":
                case "UpdateExpression":
                  return true;
              }

              return false;
            }

            function isIterationStatement(node) {
              if (node == null) {
                return false;
              }

              switch (node.type) {
                case "DoWhileStatement":
                case "ForInStatement":
                case "ForStatement":
                case "WhileStatement":
                  return true;
              }

              return false;
            }

            function isStatement(node) {
              if (node == null) {
                return false;
              }

              switch (node.type) {
                case "BlockStatement":
                case "BreakStatement":
                case "ContinueStatement":
                case "DebuggerStatement":
                case "DoWhileStatement":
                case "EmptyStatement":
                case "ExpressionStatement":
                case "ForInStatement":
                case "ForStatement":
                case "IfStatement":
                case "LabeledStatement":
                case "ReturnStatement":
                case "SwitchStatement":
                case "ThrowStatement":
                case "TryStatement":
                case "VariableDeclaration":
                case "WhileStatement":
                case "WithStatement":
                  return true;
              }

              return false;
            }

            function isSourceElement(node) {
              return (
                isStatement(node) ||
                (node != null && node.type === "FunctionDeclaration")
              );
            }

            function trailingStatement(node) {
              switch (node.type) {
                case "IfStatement":
                  if (node.alternate != null) {
                    return node.alternate;
                  }

                  return node.consequent;

                case "LabeledStatement":
                case "ForStatement":
                case "ForInStatement":
                case "WhileStatement":
                case "WithStatement":
                  return node.body;
              }

              return null;
            }

            function isProblematicIfStatement(node) {
              var current;

              if (node.type !== "IfStatement") {
                return false;
              }

              if (node.alternate == null) {
                return false;
              }

              current = node.consequent;

              do {
                if (current.type === "IfStatement") {
                  if (current.alternate == null) {
                    return true;
                  }
                }

                current = trailingStatement(current);
              } while (current);

              return false;
            }

            module.exports = {
              isExpression: isExpression,
              isStatement: isStatement,
              isIterationStatement: isIterationStatement,
              isSourceElement: isSourceElement,
              isProblematicIfStatement: isProblematicIfStatement,
              trailingStatement: trailingStatement,
            };
          })();
        },
        /* 240 */
        function(module, exports, __webpack_require__) {
          (function() {
            "use strict";

            var code = __webpack_require__(106);

            function isStrictModeReservedWordES6(id) {
              switch (id) {
                case "implements":
                case "interface":
                case "package":
                case "private":
                case "protected":
                case "public":
                case "static":
                case "let":
                  return true;

                default:
                  return false;
              }
            }

            function isKeywordES5(id, strict) {
              if (!strict && id === "yield") {
                return false;
              }

              return isKeywordES6(id, strict);
            }

            function isKeywordES6(id, strict) {
              if (strict && isStrictModeReservedWordES6(id)) {
                return true;
              }

              switch (id.length) {
                case 2:
                  return id === "if" || id === "in" || id === "do";

                case 3:
                  return (
                    id === "var" || id === "for" || id === "new" || id === "try"
                  );

                case 4:
                  return (
                    id === "this" ||
                    id === "else" ||
                    id === "case" ||
                    id === "void" ||
                    id === "with" ||
                    id === "enum"
                  );

                case 5:
                  return (
                    id === "while" ||
                    id === "break" ||
                    id === "catch" ||
                    id === "throw" ||
                    id === "const" ||
                    id === "yield" ||
                    id === "class" ||
                    id === "super"
                  );

                case 6:
                  return (
                    id === "return" ||
                    id === "typeof" ||
                    id === "delete" ||
                    id === "switch" ||
                    id === "export" ||
                    id === "import"
                  );

                case 7:
                  return (
                    id === "default" || id === "finally" || id === "extends"
                  );

                case 8:
                  return (
                    id === "function" || id === "continue" || id === "debugger"
                  );

                case 10:
                  return id === "instanceof";

                default:
                  return false;
              }
            }

            function isReservedWordES5(id, strict) {
              return (
                id === "null" ||
                id === "true" ||
                id === "false" ||
                isKeywordES5(id, strict)
              );
            }

            function isReservedWordES6(id, strict) {
              return (
                id === "null" ||
                id === "true" ||
                id === "false" ||
                isKeywordES6(id, strict)
              );
            }

            function isRestrictedWord(id) {
              return id === "eval" || id === "arguments";
            }

            function isIdentifierNameES5(id) {
              var i, iz, ch;

              if (id.length === 0) {
                return false;
              }

              ch = id.charCodeAt(0);

              if (!code.isIdentifierStartES5(ch)) {
                return false;
              }

              for (i = 1, iz = id.length; i < iz; ++i) {
                ch = id.charCodeAt(i);

                if (!code.isIdentifierPartES5(ch)) {
                  return false;
                }
              }

              return true;
            }

            function decodeUtf16(lead, trail) {
              return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;
            }

            function isIdentifierNameES6(id) {
              var i, iz, ch, lowCh, check;

              if (id.length === 0) {
                return false;
              }

              check = code.isIdentifierStartES6;

              for (i = 0, iz = id.length; i < iz; ++i) {
                ch = id.charCodeAt(i);

                if (0xd800 <= ch && ch <= 0xdbff) {
                  ++i;

                  if (i >= iz) {
                    return false;
                  }

                  lowCh = id.charCodeAt(i);

                  if (!(0xdc00 <= lowCh && lowCh <= 0xdfff)) {
                    return false;
                  }

                  ch = decodeUtf16(ch, lowCh);
                }

                if (!check(ch)) {
                  return false;
                }

                check = code.isIdentifierPartES6;
              }

              return true;
            }

            function isIdentifierES5(id, strict) {
              return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
            }

            function isIdentifierES6(id, strict) {
              return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
            }

            module.exports = {
              isKeywordES5: isKeywordES5,
              isKeywordES6: isKeywordES6,
              isReservedWordES5: isReservedWordES5,
              isReservedWordES6: isReservedWordES6,
              isRestrictedWord: isRestrictedWord,
              isIdentifierNameES5: isIdentifierNameES5,
              isIdentifierNameES6: isIdentifierNameES6,
              isIdentifierES5: isIdentifierES5,
              isIdentifierES6: isIdentifierES6,
            };
          })();
        },
        /* 241 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const defineInterfaceishType = (
            name,
            typeParameterType = "TypeParameterDeclaration"
          ) => {
            (0, _utils.default)(name, {
              builder: ["id", "typeParameters", "extends", "body"],
              visitor: [
                "id",
                "typeParameters",
                "extends",
                "mixins",
                "implements",
                "body",
              ],
              aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
              fields: {
                id: (0, _utils.validateType)("Identifier"),
                typeParameters: (0, _utils.validateOptionalType)(
                  typeParameterType
                ),
                extends: (0, _utils.validateOptional)(
                  (0, _utils.arrayOfType)("InterfaceExtends")
                ),
                mixins: (0, _utils.validateOptional)(
                  (0, _utils.arrayOfType)("InterfaceExtends")
                ),
                implements: (0, _utils.validateOptional)(
                  (0, _utils.arrayOfType)("ClassImplements")
                ),
                body: (0, _utils.validateType)("ObjectTypeAnnotation"),
              },
            });
          };

          (0, _utils.default)("AnyTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("ArrayTypeAnnotation", {
            visitor: ["elementType"],
            aliases: ["Flow", "FlowType"],
            fields: {
              elementType: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("BooleanTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("BooleanLiteralTypeAnnotation", {
            builder: ["value"],
            aliases: ["Flow", "FlowType"],
            fields: {
              value: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("NullLiteralTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("ClassImplements", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterInstantiation"
              ),
            },
          });
          defineInterfaceishType("DeclareClass", "TypeParameterInstantiation");
          (0, _utils.default)("DeclareFunction", {
            visitor: ["id"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              predicate: (0, _utils.validateOptionalType)("DeclaredPredicate"),
            },
          });
          defineInterfaceishType("DeclareInterface");
          (0, _utils.default)("DeclareModule", {
            builder: ["id", "body", "kind"],
            visitor: ["id", "body"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
              body: (0, _utils.validateType)("BlockStatement"),
              kind: (0, _utils.validateOptional)(
                (0, _utils.assertOneOf)("CommonJS", "ES")
              ),
            },
          });
          (0, _utils.default)("DeclareModuleExports", {
            visitor: ["typeAnnotation"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("TypeAnnotation"),
            },
          });
          (0, _utils.default)("DeclareTypeAlias", {
            visitor: ["id", "typeParameters", "right"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterDeclaration"
              ),
              right: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("DeclareOpaqueType", {
            visitor: ["id", "typeParameters", "supertype"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterDeclaration"
              ),
              supertype: (0, _utils.validateOptionalType)("FlowType"),
            },
          });
          (0, _utils.default)("DeclareVariable", {
            visitor: ["id"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
            },
          });
          (0, _utils.default)("DeclareExportDeclaration", {
            visitor: ["declaration", "specifiers", "source"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              declaration: (0, _utils.validateOptionalType)("Flow"),
              specifiers: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)([
                  "ExportSpecifier",
                  "ExportNamespaceSpecifier",
                ])
              ),
              source: (0, _utils.validateOptionalType)("StringLiteral"),
              default: (0, _utils.validateOptional)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("DeclareExportAllDeclaration", {
            visitor: ["source"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              source: (0, _utils.validateType)("StringLiteral"),
              exportKind: (0, _utils.validateOptional)(
                (0, _utils.assertOneOf)(["type", "value"])
              ),
            },
          });
          (0, _utils.default)("DeclaredPredicate", {
            visitor: ["value"],
            aliases: ["Flow", "FlowPredicate"],
            fields: {
              value: (0, _utils.validateType)("Flow"),
            },
          });
          (0, _utils.default)("ExistsTypeAnnotation", {
            aliases: ["Flow", "FlowType"],
          });
          (0, _utils.default)("FunctionTypeAnnotation", {
            visitor: ["typeParameters", "params", "rest", "returnType"],
            aliases: ["Flow", "FlowType"],
            fields: {
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterDeclaration"
              ),
              params: (0, _utils.validate)(
                (0, _utils.arrayOfType)("FunctionTypeParam")
              ),
              rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
              returnType: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("FunctionTypeParam", {
            visitor: ["name", "typeAnnotation"],
            aliases: ["Flow"],
            fields: {
              name: (0, _utils.validateOptionalType)("Identifier"),
              typeAnnotation: (0, _utils.validateType)("FlowType"),
              optional: (0, _utils.validateOptional)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("GenericTypeAnnotation", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow", "FlowType"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterInstantiation"
              ),
            },
          });
          (0, _utils.default)("InferredPredicate", {
            aliases: ["Flow", "FlowPredicate"],
          });
          (0, _utils.default)("InterfaceExtends", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterInstantiation"
              ),
            },
          });
          defineInterfaceishType("InterfaceDeclaration");
          (0, _utils.default)("InterfaceTypeAnnotation", {
            visitor: ["extends", "body"],
            aliases: ["Flow", "FlowType"],
            fields: {
              extends: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("InterfaceExtends")
              ),
              body: (0, _utils.validateType)("ObjectTypeAnnotation"),
            },
          });
          (0, _utils.default)("IntersectionTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow", "FlowType"],
            fields: {
              types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
            },
          });
          (0, _utils.default)("MixedTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("EmptyTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("NullableTypeAnnotation", {
            visitor: ["typeAnnotation"],
            aliases: ["Flow", "FlowType"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("NumberLiteralTypeAnnotation", {
            builder: ["value"],
            aliases: ["Flow", "FlowType"],
            fields: {
              value: (0, _utils.validate)(
                (0, _utils.assertValueType)("number")
              ),
            },
          });
          (0, _utils.default)("NumberTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("ObjectTypeAnnotation", {
            visitor: [
              "properties",
              "indexers",
              "callProperties",
              "internalSlots",
            ],
            aliases: ["Flow", "FlowType"],
            builder: [
              "properties",
              "indexers",
              "callProperties",
              "internalSlots",
              "exact",
            ],
            fields: {
              properties: (0, _utils.validate)(
                (0, _utils.arrayOfType)([
                  "ObjectTypeProperty",
                  "ObjectTypeSpreadProperty",
                ])
              ),
              indexers: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("ObjectTypeIndexer")
              ),
              callProperties: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("ObjectTypeCallProperty")
              ),
              internalSlots: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("ObjectTypeInternalSlot")
              ),
              exact: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false,
              },
              inexact: (0, _utils.validateOptional)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("ObjectTypeInternalSlot", {
            visitor: ["id", "value", "optional", "static", "method"],
            aliases: ["Flow", "UserWhitespacable"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              value: (0, _utils.validateType)("FlowType"),
              optional: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              static: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              method: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("ObjectTypeCallProperty", {
            visitor: ["value"],
            aliases: ["Flow", "UserWhitespacable"],
            fields: {
              value: (0, _utils.validateType)("FlowType"),
              static: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
            },
          });
          (0, _utils.default)("ObjectTypeIndexer", {
            visitor: ["id", "key", "value", "variance"],
            aliases: ["Flow", "UserWhitespacable"],
            fields: {
              id: (0, _utils.validateOptionalType)("Identifier"),
              key: (0, _utils.validateType)("FlowType"),
              value: (0, _utils.validateType)("FlowType"),
              static: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              variance: (0, _utils.validateOptionalType)("Variance"),
            },
          });
          (0, _utils.default)("ObjectTypeProperty", {
            visitor: ["key", "value", "variance"],
            aliases: ["Flow", "UserWhitespacable"],
            fields: {
              key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
              value: (0, _utils.validateType)("FlowType"),
              kind: (0, _utils.validate)(
                (0, _utils.assertOneOf)("init", "get", "set")
              ),
              static: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              proto: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              optional: (0, _utils.validate)(
                (0, _utils.assertValueType)("boolean")
              ),
              variance: (0, _utils.validateOptionalType)("Variance"),
            },
          });
          (0, _utils.default)("ObjectTypeSpreadProperty", {
            visitor: ["argument"],
            aliases: ["Flow", "UserWhitespacable"],
            fields: {
              argument: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("OpaqueType", {
            visitor: ["id", "typeParameters", "supertype", "impltype"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterDeclaration"
              ),
              supertype: (0, _utils.validateOptionalType)("FlowType"),
              impltype: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("QualifiedTypeIdentifier", {
            visitor: ["id", "qualification"],
            aliases: ["Flow"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              qualification: (0, _utils.validateType)([
                "Identifier",
                "QualifiedTypeIdentifier",
              ]),
            },
          });
          (0, _utils.default)("StringLiteralTypeAnnotation", {
            builder: ["value"],
            aliases: ["Flow", "FlowType"],
            fields: {
              value: (0, _utils.validate)(
                (0, _utils.assertValueType)("string")
              ),
            },
          });
          (0, _utils.default)("StringTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("ThisTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
          (0, _utils.default)("TupleTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow", "FlowType"],
            fields: {
              types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
            },
          });
          (0, _utils.default)("TypeofTypeAnnotation", {
            visitor: ["argument"],
            aliases: ["Flow", "FlowType"],
            fields: {
              argument: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("TypeAlias", {
            visitor: ["id", "typeParameters", "right"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TypeParameterDeclaration"
              ),
              right: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("TypeAnnotation", {
            aliases: ["Flow"],
            visitor: ["typeAnnotation"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("FlowType"),
            },
          });
          (0, _utils.default)("TypeCastExpression", {
            visitor: ["expression", "typeAnnotation"],
            aliases: ["Flow", "ExpressionWrapper", "Expression"],
            fields: {
              expression: (0, _utils.validateType)("Expression"),
              typeAnnotation: (0, _utils.validateType)("TypeAnnotation"),
            },
          });
          (0, _utils.default)("TypeParameter", {
            aliases: ["Flow"],
            visitor: ["bound", "default", "variance"],
            fields: {
              name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
              bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
              default: (0, _utils.validateOptionalType)("FlowType"),
              variance: (0, _utils.validateOptionalType)("Variance"),
            },
          });
          (0, _utils.default)("TypeParameterDeclaration", {
            aliases: ["Flow"],
            visitor: ["params"],
            fields: {
              params: (0, _utils.validate)(
                (0, _utils.arrayOfType)("TypeParameter")
              ),
            },
          });
          (0, _utils.default)("TypeParameterInstantiation", {
            aliases: ["Flow"],
            visitor: ["params"],
            fields: {
              params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
            },
          });
          (0, _utils.default)("UnionTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow", "FlowType"],
            fields: {
              types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
            },
          });
          (0, _utils.default)("Variance", {
            aliases: ["Flow"],
            builder: ["kind"],
            fields: {
              kind: (0, _utils.validate)(
                (0, _utils.assertOneOf)("minus", "plus")
              ),
            },
          });
          (0, _utils.default)("VoidTypeAnnotation", {
            aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
          });
        },
        /* 242 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          (0, _utils.default)("JSXAttribute", {
            visitor: ["name", "value"],
            aliases: ["JSX", "Immutable"],
            fields: {
              name: {
                validate: (0, _utils.assertNodeType)(
                  "JSXIdentifier",
                  "JSXNamespacedName"
                ),
              },
              value: {
                optional: true,
                validate: (0, _utils.assertNodeType)(
                  "JSXElement",
                  "JSXFragment",
                  "StringLiteral",
                  "JSXExpressionContainer"
                ),
              },
            },
          });
          (0, _utils.default)("JSXClosingElement", {
            visitor: ["name"],
            aliases: ["JSX", "Immutable"],
            fields: {
              name: {
                validate: (0, _utils.assertNodeType)(
                  "JSXIdentifier",
                  "JSXMemberExpression"
                ),
              },
            },
          });
          (0, _utils.default)("JSXElement", {
            builder: [
              "openingElement",
              "closingElement",
              "children",
              "selfClosing",
            ],
            visitor: ["openingElement", "children", "closingElement"],
            aliases: ["JSX", "Immutable", "Expression"],
            fields: {
              openingElement: {
                validate: (0, _utils.assertNodeType)("JSXOpeningElement"),
              },
              closingElement: {
                optional: true,
                validate: (0, _utils.assertNodeType)("JSXClosingElement"),
              },
              children: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "JSXText",
                      "JSXExpressionContainer",
                      "JSXSpreadChild",
                      "JSXElement",
                      "JSXFragment"
                    )
                  )
                ),
              },
            },
          });
          (0, _utils.default)("JSXEmptyExpression", {
            aliases: ["JSX"],
          });
          (0, _utils.default)("JSXExpressionContainer", {
            visitor: ["expression"],
            aliases: ["JSX", "Immutable"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)(
                  "Expression",
                  "JSXEmptyExpression"
                ),
              },
            },
          });
          (0, _utils.default)("JSXSpreadChild", {
            visitor: ["expression"],
            aliases: ["JSX", "Immutable"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("JSXIdentifier", {
            builder: ["name"],
            aliases: ["JSX"],
            fields: {
              name: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
          });
          (0, _utils.default)("JSXMemberExpression", {
            visitor: ["object", "property"],
            aliases: ["JSX"],
            fields: {
              object: {
                validate: (0, _utils.assertNodeType)(
                  "JSXMemberExpression",
                  "JSXIdentifier"
                ),
              },
              property: {
                validate: (0, _utils.assertNodeType)("JSXIdentifier"),
              },
            },
          });
          (0, _utils.default)("JSXNamespacedName", {
            visitor: ["namespace", "name"],
            aliases: ["JSX"],
            fields: {
              namespace: {
                validate: (0, _utils.assertNodeType)("JSXIdentifier"),
              },
              name: {
                validate: (0, _utils.assertNodeType)("JSXIdentifier"),
              },
            },
          });
          (0, _utils.default)("JSXOpeningElement", {
            builder: ["name", "attributes", "selfClosing"],
            visitor: ["name", "attributes"],
            aliases: ["JSX", "Immutable"],
            fields: {
              name: {
                validate: (0, _utils.assertNodeType)(
                  "JSXIdentifier",
                  "JSXMemberExpression"
                ),
              },
              selfClosing: {
                default: false,
                validate: (0, _utils.assertValueType)("boolean"),
              },
              attributes: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "JSXAttribute",
                      "JSXSpreadAttribute"
                    )
                  )
                ),
              },
              typeParameters: {
                validate: (0, _utils.assertNodeType)(
                  "TypeParameterInstantiation",
                  "TSTypeParameterInstantiation"
                ),
                optional: true,
              },
            },
          });
          (0, _utils.default)("JSXSpreadAttribute", {
            visitor: ["argument"],
            aliases: ["JSX"],
            fields: {
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("JSXText", {
            aliases: ["JSX", "Immutable"],
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
          });
          (0, _utils.default)("JSXFragment", {
            builder: ["openingFragment", "closingFragment", "children"],
            visitor: ["openingFragment", "children", "closingFragment"],
            aliases: ["JSX", "Immutable", "Expression"],
            fields: {
              openingFragment: {
                validate: (0, _utils.assertNodeType)("JSXOpeningFragment"),
              },
              closingFragment: {
                validate: (0, _utils.assertNodeType)("JSXClosingFragment"),
              },
              children: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "JSXText",
                      "JSXExpressionContainer",
                      "JSXSpreadChild",
                      "JSXElement",
                      "JSXFragment"
                    )
                  )
                ),
              },
            },
          });
          (0, _utils.default)("JSXOpeningFragment", {
            aliases: ["JSX", "Immutable"],
          });
          (0, _utils.default)("JSXClosingFragment", {
            aliases: ["JSX", "Immutable"],
          });
        },
        /* 243 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          (0, _utils.default)("Noop", {
            visitor: [],
          });
          (0, _utils.default)("ParenthesizedExpression", {
            visitor: ["expression"],
            aliases: ["Expression", "ExpressionWrapper"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
        },
        /* 244 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          var _es = __webpack_require__(68);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          (0, _utils.default)("AwaitExpression", {
            builder: ["argument"],
            visitor: ["argument"],
            aliases: ["Expression", "Terminatorless"],
            fields: {
              argument: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("BindExpression", {
            visitor: ["object", "callee"],
            aliases: ["Expression"],
            fields: {},
          });
          (0, _utils.default)("ClassProperty", {
            visitor: ["key", "value", "typeAnnotation", "decorators"],
            builder: [
              "key",
              "value",
              "typeAnnotation",
              "decorators",
              "computed",
            ],
            aliases: ["Property"],
            fields: Object.assign({}, _es.classMethodOrPropertyCommon, {
              value: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
              definite: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              typeAnnotation: {
                validate: (0, _utils.assertNodeType)(
                  "TypeAnnotation",
                  "TSTypeAnnotation",
                  "Noop"
                ),
                optional: true,
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
                optional: true,
              },
              readonly: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
            }),
          });
          (0, _utils.default)("OptionalMemberExpression", {
            builder: ["object", "property", "computed", "optional"],
            visitor: ["object", "property"],
            aliases: ["Expression"],
            fields: {
              object: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              property: {
                validate: (function() {
                  const normal = (0, _utils.assertNodeType)("Identifier");
                  const computed = (0, _utils.assertNodeType)("Expression");
                  return function(node, key, val) {
                    const validator = node.computed ? computed : normal;
                    validator(node, key, val);
                  };
                })(),
              },
              computed: {
                default: false,
              },
              optional: {
                validate: (0, _utils.assertValueType)("boolean"),
              },
            },
          });
          (0, _utils.default)("PipelineTopicExpression", {
            builder: ["expression"],
            visitor: ["expression"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("PipelineBareFunction", {
            builder: ["callee"],
            visitor: ["callee"],
            fields: {
              callee: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("PipelinePrimaryTopicReference", {
            aliases: ["Expression"],
          });
          (0, _utils.default)("OptionalCallExpression", {
            visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
            builder: ["callee", "arguments", "optional"],
            aliases: ["Expression"],
            fields: {
              callee: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
              arguments: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "Expression",
                      "SpreadElement",
                      "JSXNamespacedName"
                    )
                  )
                ),
              },
              optional: {
                validate: (0, _utils.assertValueType)("boolean"),
              },
              typeArguments: {
                validate: (0, _utils.assertNodeType)(
                  "TypeParameterInstantiation"
                ),
                optional: true,
              },
              typeParameters: {
                validate: (0, _utils.assertNodeType)(
                  "TSTypeParameterInstantiation"
                ),
                optional: true,
              },
            },
          });
          (0, _utils.default)("ClassPrivateProperty", {
            visitor: ["key", "value"],
            builder: ["key", "value"],
            aliases: ["Property", "Private"],
            fields: {
              key: {
                validate: (0, _utils.assertNodeType)("PrivateName"),
              },
              value: {
                validate: (0, _utils.assertNodeType)("Expression"),
                optional: true,
              },
            },
          });
          (0, _utils.default)("ClassPrivateMethod", {
            builder: ["kind", "key", "params", "body", "static"],
            visitor: [
              "key",
              "params",
              "body",
              "decorators",
              "returnType",
              "typeParameters",
            ],
            aliases: ["Method", "Private", "Function"],
            fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, {
              key: {
                validate: (0, _utils.assertNodeType)("PrivateName"),
              },
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement"),
              },
            }),
          });
          (0, _utils.default)("Import", {
            aliases: ["Expression"],
          });
          (0, _utils.default)("Decorator", {
            visitor: ["expression"],
            fields: {
              expression: {
                validate: (0, _utils.assertNodeType)("Expression"),
              },
            },
          });
          (0, _utils.default)("DoExpression", {
            visitor: ["body"],
            aliases: ["Expression"],
            fields: {
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement"),
              },
            },
          });
          (0, _utils.default)("ExportDefaultSpecifier", {
            visitor: ["exported"],
            aliases: ["ModuleSpecifier"],
            fields: {
              exported: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("ExportNamespaceSpecifier", {
            visitor: ["exported"],
            aliases: ["ModuleSpecifier"],
            fields: {
              exported: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("PrivateName", {
            visitor: ["id"],
            aliases: ["Private"],
            fields: {
              id: {
                validate: (0, _utils.assertNodeType)("Identifier"),
              },
            },
          });
          (0, _utils.default)("BigIntLiteral", {
            builder: ["value"],
            fields: {
              value: {
                validate: (0, _utils.assertValueType)("string"),
              },
            },
            aliases: ["Expression", "Pureish", "Literal", "Immutable"],
          });
        },
        /* 245 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var _utils = _interopRequireWildcard(__webpack_require__(11));

          var _core = __webpack_require__(65);

          var _es = __webpack_require__(68);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const bool = (0, _utils.assertValueType)("boolean");
          const tSFunctionTypeAnnotationCommon = {
            returnType: {
              validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
              optional: true,
            },
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TSTypeParameterDeclaration",
                "Noop"
              ),
              optional: true,
            },
          };
          (0, _utils.default)("TSParameterProperty", {
            aliases: ["LVal"],
            visitor: ["parameter"],
            fields: {
              accessibility: {
                validate: (0, _utils.assertOneOf)(
                  "public",
                  "private",
                  "protected"
                ),
                optional: true,
              },
              readonly: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              parameter: {
                validate: (0, _utils.assertNodeType)(
                  "Identifier",
                  "AssignmentPattern"
                ),
              },
            },
          });
          (0, _utils.default)("TSDeclareFunction", {
            aliases: ["Statement", "Declaration"],
            visitor: ["id", "typeParameters", "params", "returnType"],
            fields: Object.assign(
              {},
              _core.functionDeclarationCommon,
              tSFunctionTypeAnnotationCommon
            ),
          });
          (0, _utils.default)("TSDeclareMethod", {
            visitor: [
              "decorators",
              "key",
              "typeParameters",
              "params",
              "returnType",
            ],
            fields: Object.assign(
              {},
              _es.classMethodOrDeclareMethodCommon,
              tSFunctionTypeAnnotationCommon
            ),
          });
          (0, _utils.default)("TSQualifiedName", {
            aliases: ["TSEntityName"],
            visitor: ["left", "right"],
            fields: {
              left: (0, _utils.validateType)("TSEntityName"),
              right: (0, _utils.validateType)("Identifier"),
            },
          });
          const signatureDeclarationCommon = {
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterDeclaration"
            ),
            parameters: (0, _utils.validateArrayOfType)([
              "Identifier",
              "RestElement",
            ]),
            typeAnnotation: (0, _utils.validateOptionalType)(
              "TSTypeAnnotation"
            ),
          };
          const callConstructSignatureDeclaration = {
            aliases: ["TSTypeElement"],
            visitor: ["typeParameters", "parameters", "typeAnnotation"],
            fields: signatureDeclarationCommon,
          };
          (0, _utils.default)(
            "TSCallSignatureDeclaration",
            callConstructSignatureDeclaration
          );
          (0, _utils.default)(
            "TSConstructSignatureDeclaration",
            callConstructSignatureDeclaration
          );
          const namedTypeElementCommon = {
            key: (0, _utils.validateType)("Expression"),
            computed: (0, _utils.validate)(bool),
            optional: (0, _utils.validateOptional)(bool),
          };
          (0, _utils.default)("TSPropertySignature", {
            aliases: ["TSTypeElement"],
            visitor: ["key", "typeAnnotation", "initializer"],
            fields: Object.assign({}, namedTypeElementCommon, {
              readonly: (0, _utils.validateOptional)(bool),
              typeAnnotation: (0, _utils.validateOptionalType)(
                "TSTypeAnnotation"
              ),
              initializer: (0, _utils.validateOptionalType)("Expression"),
            }),
          });
          (0, _utils.default)("TSMethodSignature", {
            aliases: ["TSTypeElement"],
            visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
            fields: Object.assign(
              {},
              signatureDeclarationCommon,
              namedTypeElementCommon
            ),
          });
          (0, _utils.default)("TSIndexSignature", {
            aliases: ["TSTypeElement"],
            visitor: ["parameters", "typeAnnotation"],
            fields: {
              readonly: (0, _utils.validateOptional)(bool),
              parameters: (0, _utils.validateArrayOfType)("Identifier"),
              typeAnnotation: (0, _utils.validateOptionalType)(
                "TSTypeAnnotation"
              ),
            },
          });
          const tsKeywordTypes = [
            "TSAnyKeyword",
            "TSUnknownKeyword",
            "TSNumberKeyword",
            "TSObjectKeyword",
            "TSBooleanKeyword",
            "TSStringKeyword",
            "TSSymbolKeyword",
            "TSVoidKeyword",
            "TSUndefinedKeyword",
            "TSNullKeyword",
            "TSNeverKeyword",
          ];

          for (const type of tsKeywordTypes) {
            (0, _utils.default)(type, {
              aliases: ["TSType"],
              visitor: [],
              fields: {},
            });
          }

          (0, _utils.default)("TSThisType", {
            aliases: ["TSType"],
            visitor: [],
            fields: {},
          });
          const fnOrCtr = {
            aliases: ["TSType"],
            visitor: ["typeParameters", "typeAnnotation"],
            fields: signatureDeclarationCommon,
          };
          (0, _utils.default)("TSFunctionType", fnOrCtr);
          (0, _utils.default)("TSConstructorType", fnOrCtr);
          (0, _utils.default)("TSTypeReference", {
            aliases: ["TSType"],
            visitor: ["typeName", "typeParameters"],
            fields: {
              typeName: (0, _utils.validateType)("TSEntityName"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TSTypeParameterInstantiation"
              ),
            },
          });
          (0, _utils.default)("TSTypePredicate", {
            aliases: ["TSType"],
            visitor: ["parameterName", "typeAnnotation"],
            fields: {
              parameterName: (0, _utils.validateType)([
                "Identifier",
                "TSThisType",
              ]),
              typeAnnotation: (0, _utils.validateType)("TSTypeAnnotation"),
            },
          });
          (0, _utils.default)("TSTypeQuery", {
            aliases: ["TSType"],
            visitor: ["exprName"],
            fields: {
              exprName: (0, _utils.validateType)("TSEntityName"),
            },
          });
          (0, _utils.default)("TSTypeLiteral", {
            aliases: ["TSType"],
            visitor: ["members"],
            fields: {
              members: (0, _utils.validateArrayOfType)("TSTypeElement"),
            },
          });
          (0, _utils.default)("TSArrayType", {
            aliases: ["TSType"],
            visitor: ["elementType"],
            fields: {
              elementType: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSTupleType", {
            aliases: ["TSType"],
            visitor: ["elementTypes"],
            fields: {
              elementTypes: (0, _utils.validateArrayOfType)("TSType"),
            },
          });
          (0, _utils.default)("TSOptionalType", {
            aliases: ["TSType"],
            visitor: ["typeAnnotation"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSRestType", {
            aliases: ["TSType"],
            visitor: ["typeAnnotation"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          const unionOrIntersection = {
            aliases: ["TSType"],
            visitor: ["types"],
            fields: {
              types: (0, _utils.validateArrayOfType)("TSType"),
            },
          };
          (0, _utils.default)("TSUnionType", unionOrIntersection);
          (0, _utils.default)("TSIntersectionType", unionOrIntersection);
          (0, _utils.default)("TSConditionalType", {
            aliases: ["TSType"],
            visitor: ["checkType", "extendsType", "trueType", "falseType"],
            fields: {
              checkType: (0, _utils.validateType)("TSType"),
              extendsType: (0, _utils.validateType)("TSType"),
              trueType: (0, _utils.validateType)("TSType"),
              falseType: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSInferType", {
            aliases: ["TSType"],
            visitor: ["typeParameter"],
            fields: {
              typeParameter: (0, _utils.validateType)("TSTypeParameter"),
            },
          });
          (0, _utils.default)("TSParenthesizedType", {
            aliases: ["TSType"],
            visitor: ["typeAnnotation"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSTypeOperator", {
            aliases: ["TSType"],
            visitor: ["typeAnnotation"],
            fields: {
              operator: (0, _utils.validate)(
                (0, _utils.assertValueType)("string")
              ),
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSIndexedAccessType", {
            aliases: ["TSType"],
            visitor: ["objectType", "indexType"],
            fields: {
              objectType: (0, _utils.validateType)("TSType"),
              indexType: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSMappedType", {
            aliases: ["TSType"],
            visitor: ["typeParameter", "typeAnnotation"],
            fields: {
              readonly: (0, _utils.validateOptional)(bool),
              typeParameter: (0, _utils.validateType)("TSTypeParameter"),
              optional: (0, _utils.validateOptional)(bool),
              typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
            },
          });
          (0, _utils.default)("TSLiteralType", {
            aliases: ["TSType"],
            visitor: ["literal"],
            fields: {
              literal: (0, _utils.validateType)([
                "NumericLiteral",
                "StringLiteral",
                "BooleanLiteral",
              ]),
            },
          });
          (0, _utils.default)("TSExpressionWithTypeArguments", {
            aliases: ["TSType"],
            visitor: ["expression", "typeParameters"],
            fields: {
              expression: (0, _utils.validateType)("TSEntityName"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TSTypeParameterInstantiation"
              ),
            },
          });
          (0, _utils.default)("TSInterfaceDeclaration", {
            aliases: ["Statement", "Declaration"],
            visitor: ["id", "typeParameters", "extends", "body"],
            fields: {
              declare: (0, _utils.validateOptional)(bool),
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TSTypeParameterDeclaration"
              ),
              extends: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("TSExpressionWithTypeArguments")
              ),
              body: (0, _utils.validateType)("TSInterfaceBody"),
            },
          });
          (0, _utils.default)("TSInterfaceBody", {
            visitor: ["body"],
            fields: {
              body: (0, _utils.validateArrayOfType)("TSTypeElement"),
            },
          });
          (0, _utils.default)("TSTypeAliasDeclaration", {
            aliases: ["Statement", "Declaration"],
            visitor: ["id", "typeParameters", "typeAnnotation"],
            fields: {
              declare: (0, _utils.validateOptional)(bool),
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                "TSTypeParameterDeclaration"
              ),
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSAsExpression", {
            aliases: ["Expression"],
            visitor: ["expression", "typeAnnotation"],
            fields: {
              expression: (0, _utils.validateType)("Expression"),
              typeAnnotation: (0, _utils.validateType)("TSType"),
            },
          });
          (0, _utils.default)("TSTypeAssertion", {
            aliases: ["Expression"],
            visitor: ["typeAnnotation", "expression"],
            fields: {
              typeAnnotation: (0, _utils.validateType)("TSType"),
              expression: (0, _utils.validateType)("Expression"),
            },
          });
          (0, _utils.default)("TSEnumDeclaration", {
            aliases: ["Statement", "Declaration"],
            visitor: ["id", "members"],
            fields: {
              declare: (0, _utils.validateOptional)(bool),
              const: (0, _utils.validateOptional)(bool),
              id: (0, _utils.validateType)("Identifier"),
              members: (0, _utils.validateArrayOfType)("TSEnumMember"),
              initializer: (0, _utils.validateOptionalType)("Expression"),
            },
          });
          (0, _utils.default)("TSEnumMember", {
            visitor: ["id", "initializer"],
            fields: {
              id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
              initializer: (0, _utils.validateOptionalType)("Expression"),
            },
          });
          (0, _utils.default)("TSModuleDeclaration", {
            aliases: ["Statement", "Declaration"],
            visitor: ["id", "body"],
            fields: {
              declare: (0, _utils.validateOptional)(bool),
              global: (0, _utils.validateOptional)(bool),
              id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
              body: (0, _utils.validateType)([
                "TSModuleBlock",
                "TSModuleDeclaration",
              ]),
            },
          });
          (0, _utils.default)("TSModuleBlock", {
            visitor: ["body"],
            fields: {
              body: (0, _utils.validateArrayOfType)("Statement"),
            },
          });
          (0, _utils.default)("TSImportEqualsDeclaration", {
            aliases: ["Statement"],
            visitor: ["id", "moduleReference"],
            fields: {
              isExport: (0, _utils.validate)(bool),
              id: (0, _utils.validateType)("Identifier"),
              moduleReference: (0, _utils.validateType)([
                "TSEntityName",
                "TSExternalModuleReference",
              ]),
            },
          });
          (0, _utils.default)("TSExternalModuleReference", {
            visitor: ["expression"],
            fields: {
              expression: (0, _utils.validateType)("StringLiteral"),
            },
          });
          (0, _utils.default)("TSNonNullExpression", {
            aliases: ["Expression"],
            visitor: ["expression"],
            fields: {
              expression: (0, _utils.validateType)("Expression"),
            },
          });
          (0, _utils.default)("TSExportAssignment", {
            aliases: ["Statement"],
            visitor: ["expression"],
            fields: {
              expression: (0, _utils.validateType)("Expression"),
            },
          });
          (0, _utils.default)("TSNamespaceExportDeclaration", {
            aliases: ["Statement"],
            visitor: ["id"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
            },
          });
          (0, _utils.default)("TSTypeAnnotation", {
            visitor: ["typeAnnotation"],
            fields: {
              typeAnnotation: {
                validate: (0, _utils.assertNodeType)("TSType"),
              },
            },
          });
          (0, _utils.default)("TSTypeParameterInstantiation", {
            visitor: ["params"],
            fields: {
              params: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))
                ),
              },
            },
          });
          (0, _utils.default)("TSTypeParameterDeclaration", {
            visitor: ["params"],
            fields: {
              params: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("TSTypeParameter")
                  )
                ),
              },
            },
          });
          (0, _utils.default)("TSTypeParameter", {
            visitor: ["constraint", "default"],
            fields: {
              name: {
                validate: (0, _utils.assertValueType)("string"),
              },
              constraint: {
                validate: (0, _utils.assertNodeType)("TSType"),
                optional: true,
              },
              default: {
                validate: (0, _utils.assertNodeType)("TSType"),
                optional: true,
              },
            },
          });
        },
        /* 246 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = assertNode;

          var _isNode = _interopRequireDefault(__webpack_require__(108));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function assertNode(node) {
            if (!(0, _isNode.default)(node)) {
              const type = (node && node.type) || JSON.stringify(node);
              throw new TypeError(`Not a valid node of type "${type}"`);
            }
          }
        },
        /* 247 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.assertArrayExpression = assertArrayExpression;
          exports.assertAssignmentExpression = assertAssignmentExpression;
          exports.assertBinaryExpression = assertBinaryExpression;
          exports.assertInterpreterDirective = assertInterpreterDirective;
          exports.assertDirective = assertDirective;
          exports.assertDirectiveLiteral = assertDirectiveLiteral;
          exports.assertBlockStatement = assertBlockStatement;
          exports.assertBreakStatement = assertBreakStatement;
          exports.assertCallExpression = assertCallExpression;
          exports.assertCatchClause = assertCatchClause;
          exports.assertConditionalExpression = assertConditionalExpression;
          exports.assertContinueStatement = assertContinueStatement;
          exports.assertDebuggerStatement = assertDebuggerStatement;
          exports.assertDoWhileStatement = assertDoWhileStatement;
          exports.assertEmptyStatement = assertEmptyStatement;
          exports.assertExpressionStatement = assertExpressionStatement;
          exports.assertFile = assertFile;
          exports.assertForInStatement = assertForInStatement;
          exports.assertForStatement = assertForStatement;
          exports.assertFunctionDeclaration = assertFunctionDeclaration;
          exports.assertFunctionExpression = assertFunctionExpression;
          exports.assertIdentifier = assertIdentifier;
          exports.assertIfStatement = assertIfStatement;
          exports.assertLabeledStatement = assertLabeledStatement;
          exports.assertStringLiteral = assertStringLiteral;
          exports.assertNumericLiteral = assertNumericLiteral;
          exports.assertNullLiteral = assertNullLiteral;
          exports.assertBooleanLiteral = assertBooleanLiteral;
          exports.assertRegExpLiteral = assertRegExpLiteral;
          exports.assertLogicalExpression = assertLogicalExpression;
          exports.assertMemberExpression = assertMemberExpression;
          exports.assertNewExpression = assertNewExpression;
          exports.assertProgram = assertProgram;
          exports.assertObjectExpression = assertObjectExpression;
          exports.assertObjectMethod = assertObjectMethod;
          exports.assertObjectProperty = assertObjectProperty;
          exports.assertRestElement = assertRestElement;
          exports.assertReturnStatement = assertReturnStatement;
          exports.assertSequenceExpression = assertSequenceExpression;
          exports.assertSwitchCase = assertSwitchCase;
          exports.assertSwitchStatement = assertSwitchStatement;
          exports.assertThisExpression = assertThisExpression;
          exports.assertThrowStatement = assertThrowStatement;
          exports.assertTryStatement = assertTryStatement;
          exports.assertUnaryExpression = assertUnaryExpression;
          exports.assertUpdateExpression = assertUpdateExpression;
          exports.assertVariableDeclaration = assertVariableDeclaration;
          exports.assertVariableDeclarator = assertVariableDeclarator;
          exports.assertWhileStatement = assertWhileStatement;
          exports.assertWithStatement = assertWithStatement;
          exports.assertAssignmentPattern = assertAssignmentPattern;
          exports.assertArrayPattern = assertArrayPattern;
          exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
          exports.assertClassBody = assertClassBody;
          exports.assertClassDeclaration = assertClassDeclaration;
          exports.assertClassExpression = assertClassExpression;
          exports.assertExportAllDeclaration = assertExportAllDeclaration;
          exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
          exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
          exports.assertExportSpecifier = assertExportSpecifier;
          exports.assertForOfStatement = assertForOfStatement;
          exports.assertImportDeclaration = assertImportDeclaration;
          exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
          exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
          exports.assertImportSpecifier = assertImportSpecifier;
          exports.assertMetaProperty = assertMetaProperty;
          exports.assertClassMethod = assertClassMethod;
          exports.assertObjectPattern = assertObjectPattern;
          exports.assertSpreadElement = assertSpreadElement;
          exports.assertSuper = assertSuper;
          exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
          exports.assertTemplateElement = assertTemplateElement;
          exports.assertTemplateLiteral = assertTemplateLiteral;
          exports.assertYieldExpression = assertYieldExpression;
          exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
          exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
          exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
          exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
          exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
          exports.assertClassImplements = assertClassImplements;
          exports.assertDeclareClass = assertDeclareClass;
          exports.assertDeclareFunction = assertDeclareFunction;
          exports.assertDeclareInterface = assertDeclareInterface;
          exports.assertDeclareModule = assertDeclareModule;
          exports.assertDeclareModuleExports = assertDeclareModuleExports;
          exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
          exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
          exports.assertDeclareVariable = assertDeclareVariable;
          exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
          exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
          exports.assertDeclaredPredicate = assertDeclaredPredicate;
          exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
          exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
          exports.assertFunctionTypeParam = assertFunctionTypeParam;
          exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
          exports.assertInferredPredicate = assertInferredPredicate;
          exports.assertInterfaceExtends = assertInterfaceExtends;
          exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
          exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
          exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
          exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
          exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
          exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
          exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
          exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
          exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
          exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
          exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
          exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
          exports.assertObjectTypeProperty = assertObjectTypeProperty;
          exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
          exports.assertOpaqueType = assertOpaqueType;
          exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
          exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
          exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
          exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
          exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
          exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
          exports.assertTypeAlias = assertTypeAlias;
          exports.assertTypeAnnotation = assertTypeAnnotation;
          exports.assertTypeCastExpression = assertTypeCastExpression;
          exports.assertTypeParameter = assertTypeParameter;
          exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
          exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
          exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
          exports.assertVariance = assertVariance;
          exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
          exports.assertJSXAttribute = assertJSXAttribute;
          exports.assertJSXClosingElement = assertJSXClosingElement;
          exports.assertJSXElement = assertJSXElement;
          exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
          exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
          exports.assertJSXSpreadChild = assertJSXSpreadChild;
          exports.assertJSXIdentifier = assertJSXIdentifier;
          exports.assertJSXMemberExpression = assertJSXMemberExpression;
          exports.assertJSXNamespacedName = assertJSXNamespacedName;
          exports.assertJSXOpeningElement = assertJSXOpeningElement;
          exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
          exports.assertJSXText = assertJSXText;
          exports.assertJSXFragment = assertJSXFragment;
          exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
          exports.assertJSXClosingFragment = assertJSXClosingFragment;
          exports.assertNoop = assertNoop;
          exports.assertParenthesizedExpression = assertParenthesizedExpression;
          exports.assertAwaitExpression = assertAwaitExpression;
          exports.assertBindExpression = assertBindExpression;
          exports.assertClassProperty = assertClassProperty;
          exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
          exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
          exports.assertPipelineBareFunction = assertPipelineBareFunction;
          exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
          exports.assertOptionalCallExpression = assertOptionalCallExpression;
          exports.assertClassPrivateProperty = assertClassPrivateProperty;
          exports.assertClassPrivateMethod = assertClassPrivateMethod;
          exports.assertImport = assertImport;
          exports.assertDecorator = assertDecorator;
          exports.assertDoExpression = assertDoExpression;
          exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
          exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
          exports.assertPrivateName = assertPrivateName;
          exports.assertBigIntLiteral = assertBigIntLiteral;
          exports.assertTSParameterProperty = assertTSParameterProperty;
          exports.assertTSDeclareFunction = assertTSDeclareFunction;
          exports.assertTSDeclareMethod = assertTSDeclareMethod;
          exports.assertTSQualifiedName = assertTSQualifiedName;
          exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
          exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
          exports.assertTSPropertySignature = assertTSPropertySignature;
          exports.assertTSMethodSignature = assertTSMethodSignature;
          exports.assertTSIndexSignature = assertTSIndexSignature;
          exports.assertTSAnyKeyword = assertTSAnyKeyword;
          exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
          exports.assertTSNumberKeyword = assertTSNumberKeyword;
          exports.assertTSObjectKeyword = assertTSObjectKeyword;
          exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
          exports.assertTSStringKeyword = assertTSStringKeyword;
          exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
          exports.assertTSVoidKeyword = assertTSVoidKeyword;
          exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
          exports.assertTSNullKeyword = assertTSNullKeyword;
          exports.assertTSNeverKeyword = assertTSNeverKeyword;
          exports.assertTSThisType = assertTSThisType;
          exports.assertTSFunctionType = assertTSFunctionType;
          exports.assertTSConstructorType = assertTSConstructorType;
          exports.assertTSTypeReference = assertTSTypeReference;
          exports.assertTSTypePredicate = assertTSTypePredicate;
          exports.assertTSTypeQuery = assertTSTypeQuery;
          exports.assertTSTypeLiteral = assertTSTypeLiteral;
          exports.assertTSArrayType = assertTSArrayType;
          exports.assertTSTupleType = assertTSTupleType;
          exports.assertTSOptionalType = assertTSOptionalType;
          exports.assertTSRestType = assertTSRestType;
          exports.assertTSUnionType = assertTSUnionType;
          exports.assertTSIntersectionType = assertTSIntersectionType;
          exports.assertTSConditionalType = assertTSConditionalType;
          exports.assertTSInferType = assertTSInferType;
          exports.assertTSParenthesizedType = assertTSParenthesizedType;
          exports.assertTSTypeOperator = assertTSTypeOperator;
          exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
          exports.assertTSMappedType = assertTSMappedType;
          exports.assertTSLiteralType = assertTSLiteralType;
          exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
          exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
          exports.assertTSInterfaceBody = assertTSInterfaceBody;
          exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
          exports.assertTSAsExpression = assertTSAsExpression;
          exports.assertTSTypeAssertion = assertTSTypeAssertion;
          exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
          exports.assertTSEnumMember = assertTSEnumMember;
          exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
          exports.assertTSModuleBlock = assertTSModuleBlock;
          exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
          exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
          exports.assertTSNonNullExpression = assertTSNonNullExpression;
          exports.assertTSExportAssignment = assertTSExportAssignment;
          exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
          exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
          exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
          exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
          exports.assertTSTypeParameter = assertTSTypeParameter;
          exports.assertExpression = assertExpression;
          exports.assertBinary = assertBinary;
          exports.assertScopable = assertScopable;
          exports.assertBlockParent = assertBlockParent;
          exports.assertBlock = assertBlock;
          exports.assertStatement = assertStatement;
          exports.assertTerminatorless = assertTerminatorless;
          exports.assertCompletionStatement = assertCompletionStatement;
          exports.assertConditional = assertConditional;
          exports.assertLoop = assertLoop;
          exports.assertWhile = assertWhile;
          exports.assertExpressionWrapper = assertExpressionWrapper;
          exports.assertFor = assertFor;
          exports.assertForXStatement = assertForXStatement;
          exports.assertFunction = assertFunction;
          exports.assertFunctionParent = assertFunctionParent;
          exports.assertPureish = assertPureish;
          exports.assertDeclaration = assertDeclaration;
          exports.assertPatternLike = assertPatternLike;
          exports.assertLVal = assertLVal;
          exports.assertTSEntityName = assertTSEntityName;
          exports.assertLiteral = assertLiteral;
          exports.assertImmutable = assertImmutable;
          exports.assertUserWhitespacable = assertUserWhitespacable;
          exports.assertMethod = assertMethod;
          exports.assertObjectMember = assertObjectMember;
          exports.assertProperty = assertProperty;
          exports.assertUnaryLike = assertUnaryLike;
          exports.assertPattern = assertPattern;
          exports.assertClass = assertClass;
          exports.assertModuleDeclaration = assertModuleDeclaration;
          exports.assertExportDeclaration = assertExportDeclaration;
          exports.assertModuleSpecifier = assertModuleSpecifier;
          exports.assertFlow = assertFlow;
          exports.assertFlowType = assertFlowType;
          exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
          exports.assertFlowDeclaration = assertFlowDeclaration;
          exports.assertFlowPredicate = assertFlowPredicate;
          exports.assertJSX = assertJSX;
          exports.assertPrivate = assertPrivate;
          exports.assertTSTypeElement = assertTSTypeElement;
          exports.assertTSType = assertTSType;
          exports.assertNumberLiteral = assertNumberLiteral;
          exports.assertRegexLiteral = assertRegexLiteral;
          exports.assertRestProperty = assertRestProperty;
          exports.assertSpreadProperty = assertSpreadProperty;

          var _is = _interopRequireDefault(__webpack_require__(66));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function assert(type, node, opts) {
            if (!(0, _is.default)(type, node, opts)) {
              throw new Error(
                `Expected type "${type}" with option ${JSON.stringify(
                  opts
                )}, but instead got "${node.type}".`
              );
            }
          }

          function assertArrayExpression(node, opts = {}) {
            assert("ArrayExpression", node, opts);
          }

          function assertAssignmentExpression(node, opts = {}) {
            assert("AssignmentExpression", node, opts);
          }

          function assertBinaryExpression(node, opts = {}) {
            assert("BinaryExpression", node, opts);
          }

          function assertInterpreterDirective(node, opts = {}) {
            assert("InterpreterDirective", node, opts);
          }

          function assertDirective(node, opts = {}) {
            assert("Directive", node, opts);
          }

          function assertDirectiveLiteral(node, opts = {}) {
            assert("DirectiveLiteral", node, opts);
          }

          function assertBlockStatement(node, opts = {}) {
            assert("BlockStatement", node, opts);
          }

          function assertBreakStatement(node, opts = {}) {
            assert("BreakStatement", node, opts);
          }

          function assertCallExpression(node, opts = {}) {
            assert("CallExpression", node, opts);
          }

          function assertCatchClause(node, opts = {}) {
            assert("CatchClause", node, opts);
          }

          function assertConditionalExpression(node, opts = {}) {
            assert("ConditionalExpression", node, opts);
          }

          function assertContinueStatement(node, opts = {}) {
            assert("ContinueStatement", node, opts);
          }

          function assertDebuggerStatement(node, opts = {}) {
            assert("DebuggerStatement", node, opts);
          }

          function assertDoWhileStatement(node, opts = {}) {
            assert("DoWhileStatement", node, opts);
          }

          function assertEmptyStatement(node, opts = {}) {
            assert("EmptyStatement", node, opts);
          }

          function assertExpressionStatement(node, opts = {}) {
            assert("ExpressionStatement", node, opts);
          }

          function assertFile(node, opts = {}) {
            assert("File", node, opts);
          }

          function assertForInStatement(node, opts = {}) {
            assert("ForInStatement", node, opts);
          }

          function assertForStatement(node, opts = {}) {
            assert("ForStatement", node, opts);
          }

          function assertFunctionDeclaration(node, opts = {}) {
            assert("FunctionDeclaration", node, opts);
          }

          function assertFunctionExpression(node, opts = {}) {
            assert("FunctionExpression", node, opts);
          }

          function assertIdentifier(node, opts = {}) {
            assert("Identifier", node, opts);
          }

          function assertIfStatement(node, opts = {}) {
            assert("IfStatement", node, opts);
          }

          function assertLabeledStatement(node, opts = {}) {
            assert("LabeledStatement", node, opts);
          }

          function assertStringLiteral(node, opts = {}) {
            assert("StringLiteral", node, opts);
          }

          function assertNumericLiteral(node, opts = {}) {
            assert("NumericLiteral", node, opts);
          }

          function assertNullLiteral(node, opts = {}) {
            assert("NullLiteral", node, opts);
          }

          function assertBooleanLiteral(node, opts = {}) {
            assert("BooleanLiteral", node, opts);
          }

          function assertRegExpLiteral(node, opts = {}) {
            assert("RegExpLiteral", node, opts);
          }

          function assertLogicalExpression(node, opts = {}) {
            assert("LogicalExpression", node, opts);
          }

          function assertMemberExpression(node, opts = {}) {
            assert("MemberExpression", node, opts);
          }

          function assertNewExpression(node, opts = {}) {
            assert("NewExpression", node, opts);
          }

          function assertProgram(node, opts = {}) {
            assert("Program", node, opts);
          }

          function assertObjectExpression(node, opts = {}) {
            assert("ObjectExpression", node, opts);
          }

          function assertObjectMethod(node, opts = {}) {
            assert("ObjectMethod", node, opts);
          }

          function assertObjectProperty(node, opts = {}) {
            assert("ObjectProperty", node, opts);
          }

          function assertRestElement(node, opts = {}) {
            assert("RestElement", node, opts);
          }

          function assertReturnStatement(node, opts = {}) {
            assert("ReturnStatement", node, opts);
          }

          function assertSequenceExpression(node, opts = {}) {
            assert("SequenceExpression", node, opts);
          }

          function assertSwitchCase(node, opts = {}) {
            assert("SwitchCase", node, opts);
          }

          function assertSwitchStatement(node, opts = {}) {
            assert("SwitchStatement", node, opts);
          }

          function assertThisExpression(node, opts = {}) {
            assert("ThisExpression", node, opts);
          }

          function assertThrowStatement(node, opts = {}) {
            assert("ThrowStatement", node, opts);
          }

          function assertTryStatement(node, opts = {}) {
            assert("TryStatement", node, opts);
          }

          function assertUnaryExpression(node, opts = {}) {
            assert("UnaryExpression", node, opts);
          }

          function assertUpdateExpression(node, opts = {}) {
            assert("UpdateExpression", node, opts);
          }

          function assertVariableDeclaration(node, opts = {}) {
            assert("VariableDeclaration", node, opts);
          }

          function assertVariableDeclarator(node, opts = {}) {
            assert("VariableDeclarator", node, opts);
          }

          function assertWhileStatement(node, opts = {}) {
            assert("WhileStatement", node, opts);
          }

          function assertWithStatement(node, opts = {}) {
            assert("WithStatement", node, opts);
          }

          function assertAssignmentPattern(node, opts = {}) {
            assert("AssignmentPattern", node, opts);
          }

          function assertArrayPattern(node, opts = {}) {
            assert("ArrayPattern", node, opts);
          }

          function assertArrowFunctionExpression(node, opts = {}) {
            assert("ArrowFunctionExpression", node, opts);
          }

          function assertClassBody(node, opts = {}) {
            assert("ClassBody", node, opts);
          }

          function assertClassDeclaration(node, opts = {}) {
            assert("ClassDeclaration", node, opts);
          }

          function assertClassExpression(node, opts = {}) {
            assert("ClassExpression", node, opts);
          }

          function assertExportAllDeclaration(node, opts = {}) {
            assert("ExportAllDeclaration", node, opts);
          }

          function assertExportDefaultDeclaration(node, opts = {}) {
            assert("ExportDefaultDeclaration", node, opts);
          }

          function assertExportNamedDeclaration(node, opts = {}) {
            assert("ExportNamedDeclaration", node, opts);
          }

          function assertExportSpecifier(node, opts = {}) {
            assert("ExportSpecifier", node, opts);
          }

          function assertForOfStatement(node, opts = {}) {
            assert("ForOfStatement", node, opts);
          }

          function assertImportDeclaration(node, opts = {}) {
            assert("ImportDeclaration", node, opts);
          }

          function assertImportDefaultSpecifier(node, opts = {}) {
            assert("ImportDefaultSpecifier", node, opts);
          }

          function assertImportNamespaceSpecifier(node, opts = {}) {
            assert("ImportNamespaceSpecifier", node, opts);
          }

          function assertImportSpecifier(node, opts = {}) {
            assert("ImportSpecifier", node, opts);
          }

          function assertMetaProperty(node, opts = {}) {
            assert("MetaProperty", node, opts);
          }

          function assertClassMethod(node, opts = {}) {
            assert("ClassMethod", node, opts);
          }

          function assertObjectPattern(node, opts = {}) {
            assert("ObjectPattern", node, opts);
          }

          function assertSpreadElement(node, opts = {}) {
            assert("SpreadElement", node, opts);
          }

          function assertSuper(node, opts = {}) {
            assert("Super", node, opts);
          }

          function assertTaggedTemplateExpression(node, opts = {}) {
            assert("TaggedTemplateExpression", node, opts);
          }

          function assertTemplateElement(node, opts = {}) {
            assert("TemplateElement", node, opts);
          }

          function assertTemplateLiteral(node, opts = {}) {
            assert("TemplateLiteral", node, opts);
          }

          function assertYieldExpression(node, opts = {}) {
            assert("YieldExpression", node, opts);
          }

          function assertAnyTypeAnnotation(node, opts = {}) {
            assert("AnyTypeAnnotation", node, opts);
          }

          function assertArrayTypeAnnotation(node, opts = {}) {
            assert("ArrayTypeAnnotation", node, opts);
          }

          function assertBooleanTypeAnnotation(node, opts = {}) {
            assert("BooleanTypeAnnotation", node, opts);
          }

          function assertBooleanLiteralTypeAnnotation(node, opts = {}) {
            assert("BooleanLiteralTypeAnnotation", node, opts);
          }

          function assertNullLiteralTypeAnnotation(node, opts = {}) {
            assert("NullLiteralTypeAnnotation", node, opts);
          }

          function assertClassImplements(node, opts = {}) {
            assert("ClassImplements", node, opts);
          }

          function assertDeclareClass(node, opts = {}) {
            assert("DeclareClass", node, opts);
          }

          function assertDeclareFunction(node, opts = {}) {
            assert("DeclareFunction", node, opts);
          }

          function assertDeclareInterface(node, opts = {}) {
            assert("DeclareInterface", node, opts);
          }

          function assertDeclareModule(node, opts = {}) {
            assert("DeclareModule", node, opts);
          }

          function assertDeclareModuleExports(node, opts = {}) {
            assert("DeclareModuleExports", node, opts);
          }

          function assertDeclareTypeAlias(node, opts = {}) {
            assert("DeclareTypeAlias", node, opts);
          }

          function assertDeclareOpaqueType(node, opts = {}) {
            assert("DeclareOpaqueType", node, opts);
          }

          function assertDeclareVariable(node, opts = {}) {
            assert("DeclareVariable", node, opts);
          }

          function assertDeclareExportDeclaration(node, opts = {}) {
            assert("DeclareExportDeclaration", node, opts);
          }

          function assertDeclareExportAllDeclaration(node, opts = {}) {
            assert("DeclareExportAllDeclaration", node, opts);
          }

          function assertDeclaredPredicate(node, opts = {}) {
            assert("DeclaredPredicate", node, opts);
          }

          function assertExistsTypeAnnotation(node, opts = {}) {
            assert("ExistsTypeAnnotation", node, opts);
          }

          function assertFunctionTypeAnnotation(node, opts = {}) {
            assert("FunctionTypeAnnotation", node, opts);
          }

          function assertFunctionTypeParam(node, opts = {}) {
            assert("FunctionTypeParam", node, opts);
          }

          function assertGenericTypeAnnotation(node, opts = {}) {
            assert("GenericTypeAnnotation", node, opts);
          }

          function assertInferredPredicate(node, opts = {}) {
            assert("InferredPredicate", node, opts);
          }

          function assertInterfaceExtends(node, opts = {}) {
            assert("InterfaceExtends", node, opts);
          }

          function assertInterfaceDeclaration(node, opts = {}) {
            assert("InterfaceDeclaration", node, opts);
          }

          function assertInterfaceTypeAnnotation(node, opts = {}) {
            assert("InterfaceTypeAnnotation", node, opts);
          }

          function assertIntersectionTypeAnnotation(node, opts = {}) {
            assert("IntersectionTypeAnnotation", node, opts);
          }

          function assertMixedTypeAnnotation(node, opts = {}) {
            assert("MixedTypeAnnotation", node, opts);
          }

          function assertEmptyTypeAnnotation(node, opts = {}) {
            assert("EmptyTypeAnnotation", node, opts);
          }

          function assertNullableTypeAnnotation(node, opts = {}) {
            assert("NullableTypeAnnotation", node, opts);
          }

          function assertNumberLiteralTypeAnnotation(node, opts = {}) {
            assert("NumberLiteralTypeAnnotation", node, opts);
          }

          function assertNumberTypeAnnotation(node, opts = {}) {
            assert("NumberTypeAnnotation", node, opts);
          }

          function assertObjectTypeAnnotation(node, opts = {}) {
            assert("ObjectTypeAnnotation", node, opts);
          }

          function assertObjectTypeInternalSlot(node, opts = {}) {
            assert("ObjectTypeInternalSlot", node, opts);
          }

          function assertObjectTypeCallProperty(node, opts = {}) {
            assert("ObjectTypeCallProperty", node, opts);
          }

          function assertObjectTypeIndexer(node, opts = {}) {
            assert("ObjectTypeIndexer", node, opts);
          }

          function assertObjectTypeProperty(node, opts = {}) {
            assert("ObjectTypeProperty", node, opts);
          }

          function assertObjectTypeSpreadProperty(node, opts = {}) {
            assert("ObjectTypeSpreadProperty", node, opts);
          }

          function assertOpaqueType(node, opts = {}) {
            assert("OpaqueType", node, opts);
          }

          function assertQualifiedTypeIdentifier(node, opts = {}) {
            assert("QualifiedTypeIdentifier", node, opts);
          }

          function assertStringLiteralTypeAnnotation(node, opts = {}) {
            assert("StringLiteralTypeAnnotation", node, opts);
          }

          function assertStringTypeAnnotation(node, opts = {}) {
            assert("StringTypeAnnotation", node, opts);
          }

          function assertThisTypeAnnotation(node, opts = {}) {
            assert("ThisTypeAnnotation", node, opts);
          }

          function assertTupleTypeAnnotation(node, opts = {}) {
            assert("TupleTypeAnnotation", node, opts);
          }

          function assertTypeofTypeAnnotation(node, opts = {}) {
            assert("TypeofTypeAnnotation", node, opts);
          }

          function assertTypeAlias(node, opts = {}) {
            assert("TypeAlias", node, opts);
          }

          function assertTypeAnnotation(node, opts = {}) {
            assert("TypeAnnotation", node, opts);
          }

          function assertTypeCastExpression(node, opts = {}) {
            assert("TypeCastExpression", node, opts);
          }

          function assertTypeParameter(node, opts = {}) {
            assert("TypeParameter", node, opts);
          }

          function assertTypeParameterDeclaration(node, opts = {}) {
            assert("TypeParameterDeclaration", node, opts);
          }

          function assertTypeParameterInstantiation(node, opts = {}) {
            assert("TypeParameterInstantiation", node, opts);
          }

          function assertUnionTypeAnnotation(node, opts = {}) {
            assert("UnionTypeAnnotation", node, opts);
          }

          function assertVariance(node, opts = {}) {
            assert("Variance", node, opts);
          }

          function assertVoidTypeAnnotation(node, opts = {}) {
            assert("VoidTypeAnnotation", node, opts);
          }

          function assertJSXAttribute(node, opts = {}) {
            assert("JSXAttribute", node, opts);
          }

          function assertJSXClosingElement(node, opts = {}) {
            assert("JSXClosingElement", node, opts);
          }

          function assertJSXElement(node, opts = {}) {
            assert("JSXElement", node, opts);
          }

          function assertJSXEmptyExpression(node, opts = {}) {
            assert("JSXEmptyExpression", node, opts);
          }

          function assertJSXExpressionContainer(node, opts = {}) {
            assert("JSXExpressionContainer", node, opts);
          }

          function assertJSXSpreadChild(node, opts = {}) {
            assert("JSXSpreadChild", node, opts);
          }

          function assertJSXIdentifier(node, opts = {}) {
            assert("JSXIdentifier", node, opts);
          }

          function assertJSXMemberExpression(node, opts = {}) {
            assert("JSXMemberExpression", node, opts);
          }

          function assertJSXNamespacedName(node, opts = {}) {
            assert("JSXNamespacedName", node, opts);
          }

          function assertJSXOpeningElement(node, opts = {}) {
            assert("JSXOpeningElement", node, opts);
          }

          function assertJSXSpreadAttribute(node, opts = {}) {
            assert("JSXSpreadAttribute", node, opts);
          }

          function assertJSXText(node, opts = {}) {
            assert("JSXText", node, opts);
          }

          function assertJSXFragment(node, opts = {}) {
            assert("JSXFragment", node, opts);
          }

          function assertJSXOpeningFragment(node, opts = {}) {
            assert("JSXOpeningFragment", node, opts);
          }

          function assertJSXClosingFragment(node, opts = {}) {
            assert("JSXClosingFragment", node, opts);
          }

          function assertNoop(node, opts = {}) {
            assert("Noop", node, opts);
          }

          function assertParenthesizedExpression(node, opts = {}) {
            assert("ParenthesizedExpression", node, opts);
          }

          function assertAwaitExpression(node, opts = {}) {
            assert("AwaitExpression", node, opts);
          }

          function assertBindExpression(node, opts = {}) {
            assert("BindExpression", node, opts);
          }

          function assertClassProperty(node, opts = {}) {
            assert("ClassProperty", node, opts);
          }

          function assertOptionalMemberExpression(node, opts = {}) {
            assert("OptionalMemberExpression", node, opts);
          }

          function assertPipelineTopicExpression(node, opts = {}) {
            assert("PipelineTopicExpression", node, opts);
          }

          function assertPipelineBareFunction(node, opts = {}) {
            assert("PipelineBareFunction", node, opts);
          }

          function assertPipelinePrimaryTopicReference(node, opts = {}) {
            assert("PipelinePrimaryTopicReference", node, opts);
          }

          function assertOptionalCallExpression(node, opts = {}) {
            assert("OptionalCallExpression", node, opts);
          }

          function assertClassPrivateProperty(node, opts = {}) {
            assert("ClassPrivateProperty", node, opts);
          }

          function assertClassPrivateMethod(node, opts = {}) {
            assert("ClassPrivateMethod", node, opts);
          }

          function assertImport(node, opts = {}) {
            assert("Import", node, opts);
          }

          function assertDecorator(node, opts = {}) {
            assert("Decorator", node, opts);
          }

          function assertDoExpression(node, opts = {}) {
            assert("DoExpression", node, opts);
          }

          function assertExportDefaultSpecifier(node, opts = {}) {
            assert("ExportDefaultSpecifier", node, opts);
          }

          function assertExportNamespaceSpecifier(node, opts = {}) {
            assert("ExportNamespaceSpecifier", node, opts);
          }

          function assertPrivateName(node, opts = {}) {
            assert("PrivateName", node, opts);
          }

          function assertBigIntLiteral(node, opts = {}) {
            assert("BigIntLiteral", node, opts);
          }

          function assertTSParameterProperty(node, opts = {}) {
            assert("TSParameterProperty", node, opts);
          }

          function assertTSDeclareFunction(node, opts = {}) {
            assert("TSDeclareFunction", node, opts);
          }

          function assertTSDeclareMethod(node, opts = {}) {
            assert("TSDeclareMethod", node, opts);
          }

          function assertTSQualifiedName(node, opts = {}) {
            assert("TSQualifiedName", node, opts);
          }

          function assertTSCallSignatureDeclaration(node, opts = {}) {
            assert("TSCallSignatureDeclaration", node, opts);
          }

          function assertTSConstructSignatureDeclaration(node, opts = {}) {
            assert("TSConstructSignatureDeclaration", node, opts);
          }

          function assertTSPropertySignature(node, opts = {}) {
            assert("TSPropertySignature", node, opts);
          }

          function assertTSMethodSignature(node, opts = {}) {
            assert("TSMethodSignature", node, opts);
          }

          function assertTSIndexSignature(node, opts = {}) {
            assert("TSIndexSignature", node, opts);
          }

          function assertTSAnyKeyword(node, opts = {}) {
            assert("TSAnyKeyword", node, opts);
          }

          function assertTSUnknownKeyword(node, opts = {}) {
            assert("TSUnknownKeyword", node, opts);
          }

          function assertTSNumberKeyword(node, opts = {}) {
            assert("TSNumberKeyword", node, opts);
          }

          function assertTSObjectKeyword(node, opts = {}) {
            assert("TSObjectKeyword", node, opts);
          }

          function assertTSBooleanKeyword(node, opts = {}) {
            assert("TSBooleanKeyword", node, opts);
          }

          function assertTSStringKeyword(node, opts = {}) {
            assert("TSStringKeyword", node, opts);
          }

          function assertTSSymbolKeyword(node, opts = {}) {
            assert("TSSymbolKeyword", node, opts);
          }

          function assertTSVoidKeyword(node, opts = {}) {
            assert("TSVoidKeyword", node, opts);
          }

          function assertTSUndefinedKeyword(node, opts = {}) {
            assert("TSUndefinedKeyword", node, opts);
          }

          function assertTSNullKeyword(node, opts = {}) {
            assert("TSNullKeyword", node, opts);
          }

          function assertTSNeverKeyword(node, opts = {}) {
            assert("TSNeverKeyword", node, opts);
          }

          function assertTSThisType(node, opts = {}) {
            assert("TSThisType", node, opts);
          }

          function assertTSFunctionType(node, opts = {}) {
            assert("TSFunctionType", node, opts);
          }

          function assertTSConstructorType(node, opts = {}) {
            assert("TSConstructorType", node, opts);
          }

          function assertTSTypeReference(node, opts = {}) {
            assert("TSTypeReference", node, opts);
          }

          function assertTSTypePredicate(node, opts = {}) {
            assert("TSTypePredicate", node, opts);
          }

          function assertTSTypeQuery(node, opts = {}) {
            assert("TSTypeQuery", node, opts);
          }

          function assertTSTypeLiteral(node, opts = {}) {
            assert("TSTypeLiteral", node, opts);
          }

          function assertTSArrayType(node, opts = {}) {
            assert("TSArrayType", node, opts);
          }

          function assertTSTupleType(node, opts = {}) {
            assert("TSTupleType", node, opts);
          }

          function assertTSOptionalType(node, opts = {}) {
            assert("TSOptionalType", node, opts);
          }

          function assertTSRestType(node, opts = {}) {
            assert("TSRestType", node, opts);
          }

          function assertTSUnionType(node, opts = {}) {
            assert("TSUnionType", node, opts);
          }

          function assertTSIntersectionType(node, opts = {}) {
            assert("TSIntersectionType", node, opts);
          }

          function assertTSConditionalType(node, opts = {}) {
            assert("TSConditionalType", node, opts);
          }

          function assertTSInferType(node, opts = {}) {
            assert("TSInferType", node, opts);
          }

          function assertTSParenthesizedType(node, opts = {}) {
            assert("TSParenthesizedType", node, opts);
          }

          function assertTSTypeOperator(node, opts = {}) {
            assert("TSTypeOperator", node, opts);
          }

          function assertTSIndexedAccessType(node, opts = {}) {
            assert("TSIndexedAccessType", node, opts);
          }

          function assertTSMappedType(node, opts = {}) {
            assert("TSMappedType", node, opts);
          }

          function assertTSLiteralType(node, opts = {}) {
            assert("TSLiteralType", node, opts);
          }

          function assertTSExpressionWithTypeArguments(node, opts = {}) {
            assert("TSExpressionWithTypeArguments", node, opts);
          }

          function assertTSInterfaceDeclaration(node, opts = {}) {
            assert("TSInterfaceDeclaration", node, opts);
          }

          function assertTSInterfaceBody(node, opts = {}) {
            assert("TSInterfaceBody", node, opts);
          }

          function assertTSTypeAliasDeclaration(node, opts = {}) {
            assert("TSTypeAliasDeclaration", node, opts);
          }

          function assertTSAsExpression(node, opts = {}) {
            assert("TSAsExpression", node, opts);
          }

          function assertTSTypeAssertion(node, opts = {}) {
            assert("TSTypeAssertion", node, opts);
          }

          function assertTSEnumDeclaration(node, opts = {}) {
            assert("TSEnumDeclaration", node, opts);
          }

          function assertTSEnumMember(node, opts = {}) {
            assert("TSEnumMember", node, opts);
          }

          function assertTSModuleDeclaration(node, opts = {}) {
            assert("TSModuleDeclaration", node, opts);
          }

          function assertTSModuleBlock(node, opts = {}) {
            assert("TSModuleBlock", node, opts);
          }

          function assertTSImportEqualsDeclaration(node, opts = {}) {
            assert("TSImportEqualsDeclaration", node, opts);
          }

          function assertTSExternalModuleReference(node, opts = {}) {
            assert("TSExternalModuleReference", node, opts);
          }

          function assertTSNonNullExpression(node, opts = {}) {
            assert("TSNonNullExpression", node, opts);
          }

          function assertTSExportAssignment(node, opts = {}) {
            assert("TSExportAssignment", node, opts);
          }

          function assertTSNamespaceExportDeclaration(node, opts = {}) {
            assert("TSNamespaceExportDeclaration", node, opts);
          }

          function assertTSTypeAnnotation(node, opts = {}) {
            assert("TSTypeAnnotation", node, opts);
          }

          function assertTSTypeParameterInstantiation(node, opts = {}) {
            assert("TSTypeParameterInstantiation", node, opts);
          }

          function assertTSTypeParameterDeclaration(node, opts = {}) {
            assert("TSTypeParameterDeclaration", node, opts);
          }

          function assertTSTypeParameter(node, opts = {}) {
            assert("TSTypeParameter", node, opts);
          }

          function assertExpression(node, opts = {}) {
            assert("Expression", node, opts);
          }

          function assertBinary(node, opts = {}) {
            assert("Binary", node, opts);
          }

          function assertScopable(node, opts = {}) {
            assert("Scopable", node, opts);
          }

          function assertBlockParent(node, opts = {}) {
            assert("BlockParent", node, opts);
          }

          function assertBlock(node, opts = {}) {
            assert("Block", node, opts);
          }

          function assertStatement(node, opts = {}) {
            assert("Statement", node, opts);
          }

          function assertTerminatorless(node, opts = {}) {
            assert("Terminatorless", node, opts);
          }

          function assertCompletionStatement(node, opts = {}) {
            assert("CompletionStatement", node, opts);
          }

          function assertConditional(node, opts = {}) {
            assert("Conditional", node, opts);
          }

          function assertLoop(node, opts = {}) {
            assert("Loop", node, opts);
          }

          function assertWhile(node, opts = {}) {
            assert("While", node, opts);
          }

          function assertExpressionWrapper(node, opts = {}) {
            assert("ExpressionWrapper", node, opts);
          }

          function assertFor(node, opts = {}) {
            assert("For", node, opts);
          }

          function assertForXStatement(node, opts = {}) {
            assert("ForXStatement", node, opts);
          }

          function assertFunction(node, opts = {}) {
            assert("Function", node, opts);
          }

          function assertFunctionParent(node, opts = {}) {
            assert("FunctionParent", node, opts);
          }

          function assertPureish(node, opts = {}) {
            assert("Pureish", node, opts);
          }

          function assertDeclaration(node, opts = {}) {
            assert("Declaration", node, opts);
          }

          function assertPatternLike(node, opts = {}) {
            assert("PatternLike", node, opts);
          }

          function assertLVal(node, opts = {}) {
            assert("LVal", node, opts);
          }

          function assertTSEntityName(node, opts = {}) {
            assert("TSEntityName", node, opts);
          }

          function assertLiteral(node, opts = {}) {
            assert("Literal", node, opts);
          }

          function assertImmutable(node, opts = {}) {
            assert("Immutable", node, opts);
          }

          function assertUserWhitespacable(node, opts = {}) {
            assert("UserWhitespacable", node, opts);
          }

          function assertMethod(node, opts = {}) {
            assert("Method", node, opts);
          }

          function assertObjectMember(node, opts = {}) {
            assert("ObjectMember", node, opts);
          }

          function assertProperty(node, opts = {}) {
            assert("Property", node, opts);
          }

          function assertUnaryLike(node, opts = {}) {
            assert("UnaryLike", node, opts);
          }

          function assertPattern(node, opts = {}) {
            assert("Pattern", node, opts);
          }

          function assertClass(node, opts = {}) {
            assert("Class", node, opts);
          }

          function assertModuleDeclaration(node, opts = {}) {
            assert("ModuleDeclaration", node, opts);
          }

          function assertExportDeclaration(node, opts = {}) {
            assert("ExportDeclaration", node, opts);
          }

          function assertModuleSpecifier(node, opts = {}) {
            assert("ModuleSpecifier", node, opts);
          }

          function assertFlow(node, opts = {}) {
            assert("Flow", node, opts);
          }

          function assertFlowType(node, opts = {}) {
            assert("FlowType", node, opts);
          }

          function assertFlowBaseAnnotation(node, opts = {}) {
            assert("FlowBaseAnnotation", node, opts);
          }

          function assertFlowDeclaration(node, opts = {}) {
            assert("FlowDeclaration", node, opts);
          }

          function assertFlowPredicate(node, opts = {}) {
            assert("FlowPredicate", node, opts);
          }

          function assertJSX(node, opts = {}) {
            assert("JSX", node, opts);
          }

          function assertPrivate(node, opts = {}) {
            assert("Private", node, opts);
          }

          function assertTSTypeElement(node, opts = {}) {
            assert("TSTypeElement", node, opts);
          }

          function assertTSType(node, opts = {}) {
            assert("TSType", node, opts);
          }

          function assertNumberLiteral(node, opts) {
            console.trace(
              "The node type NumberLiteral has been renamed to NumericLiteral"
            );
            assert("NumberLiteral", node, opts);
          }

          function assertRegexLiteral(node, opts) {
            console.trace(
              "The node type RegexLiteral has been renamed to RegExpLiteral"
            );
            assert("RegexLiteral", node, opts);
          }

          function assertRestProperty(node, opts) {
            console.trace(
              "The node type RestProperty has been renamed to RestElement"
            );
            assert("RestProperty", node, opts);
          }

          function assertSpreadProperty(node, opts) {
            console.trace(
              "The node type SpreadProperty has been renamed to SpreadElement"
            );
            assert("SpreadProperty", node, opts);
          }
        },
        /* 248 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = createTypeAnnotationBasedOnTypeof;

          var _generated = __webpack_require__(3);

          function createTypeAnnotationBasedOnTypeof(type) {
            if (type === "string") {
              return (0, _generated.stringTypeAnnotation)();
            } else if (type === "number") {
              return (0, _generated.numberTypeAnnotation)();
            } else if (type === "undefined") {
              return (0, _generated.voidTypeAnnotation)();
            } else if (type === "boolean") {
              return (0, _generated.booleanTypeAnnotation)();
            } else if (type === "function") {
              return (0, _generated.genericTypeAnnotation)(
                (0, _generated.identifier)("Function")
              );
            } else if (type === "object") {
              return (0, _generated.genericTypeAnnotation)(
                (0, _generated.identifier)("Object")
              );
            } else if (type === "symbol") {
              return (0, _generated.genericTypeAnnotation)(
                (0, _generated.identifier)("Symbol")
              );
            } else {
              throw new Error("Invalid typeof value");
            }
          }
        },
        /* 249 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = createUnionTypeAnnotation;

          var _generated = __webpack_require__(3);

          var _removeTypeDuplicates = _interopRequireDefault(
            __webpack_require__(109)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function createUnionTypeAnnotation(types) {
            const flattened = (0, _removeTypeDuplicates.default)(types);

            if (flattened.length === 1) {
              return flattened[0];
            } else {
              return (0, _generated.unionTypeAnnotation)(flattened);
            }
          }
        },
        /* 250 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = cloneDeep;

          var _cloneNode = _interopRequireDefault(__webpack_require__(27));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function cloneDeep(node) {
            return (0, _cloneNode.default)(node);
          }
        },
        /* 251 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = cloneWithoutLoc;

          var _clone = _interopRequireDefault(__webpack_require__(110));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function cloneWithoutLoc(node) {
            const newNode = (0, _clone.default)(node);
            newNode.loc = null;
            return newNode;
          }
        },
        /* 252 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = addComment;

          var _addComments = _interopRequireDefault(__webpack_require__(111));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function addComment(node, type, content, line) {
            return (0, _addComments.default)(node, type, [
              {
                type: line ? "CommentLine" : "CommentBlock",
                value: content,
              },
            ]);
          }
        },
        /* 253 */
        function(module, exports, __webpack_require__) {
          var baseUniq = __webpack_require__(254);

          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }

          module.exports = uniq;
        },
        /* 254 */
        function(module, exports, __webpack_require__) {
          var SetCache = __webpack_require__(113),
            arrayIncludes = __webpack_require__(257),
            arrayIncludesWith = __webpack_require__(261),
            cacheHas = __webpack_require__(115),
            createSet = __webpack_require__(262),
            setToArray = __webpack_require__(70);

          var LARGE_ARRAY_SIZE = 200;

          function baseUniq(array, iteratee, comparator) {
            var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;

            if (comparator) {
              isCommon = false;
              includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set = iteratee ? null : createSet(array);

              if (set) {
                return setToArray(set);
              }

              isCommon = false;
              includes = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee ? [] : result;
            }

            outer: while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value;
              value = comparator || value !== 0 ? value : 0;

              if (isCommon && computed === computed) {
                var seenIndex = seen.length;

                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }

                if (iteratee) {
                  seen.push(computed);
                }

                result.push(value);
              } else if (!includes(seen, computed, comparator)) {
                if (seen !== result) {
                  seen.push(computed);
                }

                result.push(value);
              }
            }

            return result;
          }

          module.exports = baseUniq;
        },
        /* 255 */
        function(module, exports) {
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);

            return this;
          }

          module.exports = setCacheAdd;
        },
        /* 256 */
        function(module, exports) {
          function setCacheHas(value) {
            return this.__data__.has(value);
          }

          module.exports = setCacheHas;
        },
        /* 257 */
        function(module, exports, __webpack_require__) {
          var baseIndexOf = __webpack_require__(114);

          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          module.exports = arrayIncludes;
        },
        /* 258 */
        function(module, exports) {
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }

            return -1;
          }

          module.exports = baseFindIndex;
        },
        /* 259 */
        function(module, exports) {
          function baseIsNaN(value) {
            return value !== value;
          }

          module.exports = baseIsNaN;
        },
        /* 260 */
        function(module, exports) {
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }

            return -1;
          }

          module.exports = strictIndexOf;
        },
        /* 261 */
        function(module, exports) {
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }

            return false;
          }

          module.exports = arrayIncludesWith;
        },
        /* 262 */
        function(module, exports, __webpack_require__) {
          var Set = __webpack_require__(103),
            noop = __webpack_require__(263),
            setToArray = __webpack_require__(70);

          var INFINITY = 1 / 0;
          var createSet = !(
            Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
          )
            ? noop
            : function(values) {
                return new Set(values);
              };
          module.exports = createSet;
        },
        /* 263 */
        function(module, exports) {
          function noop() {}

          module.exports = noop;
        },
        /* 264 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = removeComments;

          var _constants = __webpack_require__(13);

          function removeComments(node) {
            _constants.COMMENT_KEYS.forEach(key => {
              node[key] = null;
            });

            return node;
          }
        },
        /* 265 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.PRIVATE_TYPES = exports.JSX_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.FLOWTYPE_TYPES = exports.FLOW_TYPES = exports.MODULESPECIFIER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = exports.CLASS_TYPES = exports.PATTERN_TYPES = exports.UNARYLIKE_TYPES = exports.PROPERTY_TYPES = exports.OBJECTMEMBER_TYPES = exports.METHOD_TYPES = exports.USERWHITESPACABLE_TYPES = exports.IMMUTABLE_TYPES = exports.LITERAL_TYPES = exports.TSENTITYNAME_TYPES = exports.LVAL_TYPES = exports.PATTERNLIKE_TYPES = exports.DECLARATION_TYPES = exports.PUREISH_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FUNCTION_TYPES = exports.FORXSTATEMENT_TYPES = exports.FOR_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.WHILE_TYPES = exports.LOOP_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.SCOPABLE_TYPES = exports.BINARY_TYPES = exports.EXPRESSION_TYPES = void 0;

          var _definitions = __webpack_require__(7);

          const EXPRESSION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["Expression"];
          exports.EXPRESSION_TYPES = EXPRESSION_TYPES;
          const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Binary"];
          exports.BINARY_TYPES = BINARY_TYPES;
          const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Scopable"];
          exports.SCOPABLE_TYPES = SCOPABLE_TYPES;
          const BLOCKPARENT_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["BlockParent"];
          exports.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
          const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Block"];
          exports.BLOCK_TYPES = BLOCK_TYPES;
          const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Statement"];
          exports.STATEMENT_TYPES = STATEMENT_TYPES;
          const TERMINATORLESS_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["Terminatorless"];
          exports.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
          const COMPLETIONSTATEMENT_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["CompletionStatement"];
          exports.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
          const CONDITIONAL_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["Conditional"];
          exports.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
          const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Loop"];
          exports.LOOP_TYPES = LOOP_TYPES;
          const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["While"];
          exports.WHILE_TYPES = WHILE_TYPES;
          const EXPRESSIONWRAPPER_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
          exports.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
          const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS["For"];
          exports.FOR_TYPES = FOR_TYPES;
          const FORXSTATEMENT_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ForXStatement"];
          exports.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
          const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Function"];
          exports.FUNCTION_TYPES = FUNCTION_TYPES;
          const FUNCTIONPARENT_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["FunctionParent"];
          exports.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
          const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pureish"];
          exports.PUREISH_TYPES = PUREISH_TYPES;
          const DECLARATION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["Declaration"];
          exports.DECLARATION_TYPES = DECLARATION_TYPES;
          const PATTERNLIKE_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["PatternLike"];
          exports.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
          const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["LVal"];
          exports.LVAL_TYPES = LVAL_TYPES;
          const TSENTITYNAME_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["TSEntityName"];
          exports.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
          const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Literal"];
          exports.LITERAL_TYPES = LITERAL_TYPES;
          const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Immutable"];
          exports.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
          const USERWHITESPACABLE_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
          exports.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
          const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Method"];
          exports.METHOD_TYPES = METHOD_TYPES;
          const OBJECTMEMBER_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ObjectMember"];
          exports.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
          const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Property"];
          exports.PROPERTY_TYPES = PROPERTY_TYPES;
          const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UnaryLike"];
          exports.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
          const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pattern"];
          exports.PATTERN_TYPES = PATTERN_TYPES;
          const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Class"];
          exports.CLASS_TYPES = CLASS_TYPES;
          const MODULEDECLARATION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
          exports.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
          const EXPORTDECLARATION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
          exports.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
          const MODULESPECIFIER_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
          exports.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
          const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Flow"];
          exports.FLOW_TYPES = FLOW_TYPES;
          const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowType"];
          exports.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
          const FLOWBASEANNOTATION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
          exports.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
          const FLOWDECLARATION_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
          exports.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
          const FLOWPREDICATE_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["FlowPredicate"];
          exports.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
          const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS["JSX"];
          exports.JSX_TYPES = JSX_TYPES;
          const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Private"];
          exports.PRIVATE_TYPES = PRIVATE_TYPES;
          const TSTYPEELEMENT_TYPES =
            _definitions.FLIPPED_ALIAS_KEYS["TSTypeElement"];
          exports.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
          const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSType"];
          exports.TSTYPE_TYPES = TSTYPE_TYPES;
        },
        /* 266 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = ensureBlock;

          var _toBlock = _interopRequireDefault(__webpack_require__(119));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function ensureBlock(node, key = "body") {
            return (node[key] = (0, _toBlock.default)(node[key], node));
          }
        },
        /* 267 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toBindingIdentifierName;

          var _toIdentifier = _interopRequireDefault(__webpack_require__(120));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function toBindingIdentifierName(name) {
            name = (0, _toIdentifier.default)(name);
            if (name === "eval" || name === "arguments") name = "_" + name;
            return name;
          }
        },
        /* 268 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toComputedKey;

          var _generated = __webpack_require__(1);

          var _generated2 = __webpack_require__(3);

          function toComputedKey(node, key = node.key || node.property) {
            if (!node.computed && (0, _generated.isIdentifier)(key))
              key = (0, _generated2.stringLiteral)(key.name);
            return key;
          }
        },
        /* 269 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toExpression;

          var _generated = __webpack_require__(1);

          function toExpression(node) {
            if ((0, _generated.isExpressionStatement)(node)) {
              node = node.expression;
            }

            if ((0, _generated.isExpression)(node)) {
              return node;
            }

            if ((0, _generated.isClass)(node)) {
              node.type = "ClassExpression";
            } else if ((0, _generated.isFunction)(node)) {
              node.type = "FunctionExpression";
            }

            if (!(0, _generated.isExpression)(node)) {
              throw new Error(`cannot turn ${node.type} to an expression`);
            }

            return node;
          }
        },
        /* 270 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toKeyAlias;

          var _generated = __webpack_require__(1);

          var _cloneNode = _interopRequireDefault(__webpack_require__(27));

          var _removePropertiesDeep = _interopRequireDefault(
            __webpack_require__(121)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function toKeyAlias(node, key = node.key) {
            let alias;

            if (node.kind === "method") {
              return toKeyAlias.increment() + "";
            } else if ((0, _generated.isIdentifier)(key)) {
              alias = key.name;
            } else if ((0, _generated.isStringLiteral)(key)) {
              alias = JSON.stringify(key.value);
            } else {
              alias = JSON.stringify(
                (0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))
              );
            }

            if (node.computed) {
              alias = `[${alias}]`;
            }

            if (node.static) {
              alias = `static:${alias}`;
            }

            return alias;
          }

          toKeyAlias.uid = 0;

          toKeyAlias.increment = function() {
            if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
              return (toKeyAlias.uid = 0);
            } else {
              return toKeyAlias.uid++;
            }
          };
        },
        /* 271 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toSequenceExpression;

          var _gatherSequenceExpressions = _interopRequireDefault(
            __webpack_require__(272)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function toSequenceExpression(nodes, scope) {
            if (!nodes || !nodes.length) return;
            const declars = [];
            const result = (0, _gatherSequenceExpressions.default)(
              nodes,
              scope,
              declars
            );
            if (!result) return;

            for (const declar of declars) {
              scope.push(declar);
            }

            return result;
          }
        },
        /* 272 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = gatherSequenceExpressions;

          var _getBindingIdentifiers = _interopRequireDefault(
            __webpack_require__(39)
          );

          var _generated = __webpack_require__(1);

          var _generated2 = __webpack_require__(3);

          var _cloneNode = _interopRequireDefault(__webpack_require__(27));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function gatherSequenceExpressions(nodes, scope, declars) {
            const exprs = [];
            let ensureLastUndefined = true;

            for (const node of nodes) {
              ensureLastUndefined = false;

              if ((0, _generated.isExpression)(node)) {
                exprs.push(node);
              } else if ((0, _generated.isExpressionStatement)(node)) {
                exprs.push(node.expression);
              } else if ((0, _generated.isVariableDeclaration)(node)) {
                if (node.kind !== "var") return;

                for (const declar of node.declarations) {
                  const bindings = (0, _getBindingIdentifiers.default)(declar);

                  for (const key in bindings) {
                    declars.push({
                      kind: node.kind,
                      id: (0, _cloneNode.default)(bindings[key]),
                    });
                  }

                  if (declar.init) {
                    exprs.push(
                      (0, _generated2.assignmentExpression)(
                        "=",
                        declar.id,
                        declar.init
                      )
                    );
                  }
                }

                ensureLastUndefined = true;
              } else if ((0, _generated.isIfStatement)(node)) {
                const consequent = node.consequent
                  ? gatherSequenceExpressions([node.consequent], scope, declars)
                  : scope.buildUndefinedNode();
                const alternate = node.alternate
                  ? gatherSequenceExpressions([node.alternate], scope, declars)
                  : scope.buildUndefinedNode();
                if (!consequent || !alternate) return;
                exprs.push(
                  (0, _generated2.conditionalExpression)(
                    node.test,
                    consequent,
                    alternate
                  )
                );
              } else if ((0, _generated.isBlockStatement)(node)) {
                const body = gatherSequenceExpressions(
                  node.body,
                  scope,
                  declars
                );
                if (!body) return;
                exprs.push(body);
              } else if ((0, _generated.isEmptyStatement)(node)) {
                ensureLastUndefined = true;
              } else {
                return;
              }
            }

            if (ensureLastUndefined) {
              exprs.push(scope.buildUndefinedNode());
            }

            if (exprs.length === 1) {
              return exprs[0];
            } else {
              return (0, _generated2.sequenceExpression)(exprs);
            }
          }
        },
        /* 273 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = toStatement;

          var _generated = __webpack_require__(1);

          var _generated2 = __webpack_require__(3);

          function toStatement(node, ignore) {
            if ((0, _generated.isStatement)(node)) {
              return node;
            }

            let mustHaveId = false;
            let newType;

            if ((0, _generated.isClass)(node)) {
              mustHaveId = true;
              newType = "ClassDeclaration";
            } else if ((0, _generated.isFunction)(node)) {
              mustHaveId = true;
              newType = "FunctionDeclaration";
            } else if ((0, _generated.isAssignmentExpression)(node)) {
              return (0, _generated2.expressionStatement)(node);
            }

            if (mustHaveId && !node.id) {
              newType = false;
            }

            if (!newType) {
              if (ignore) {
                return false;
              } else {
                throw new Error(`cannot turn ${node.type} to a statement`);
              }
            }

            node.type = newType;
            return node;
          }
        },
        /* 274 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = valueToNode;

          function _isPlainObject() {
            const data = _interopRequireDefault(__webpack_require__(275));

            _isPlainObject = function() {
              return data;
            };

            return data;
          }

          function _isRegExp() {
            const data = _interopRequireDefault(__webpack_require__(276));

            _isRegExp = function() {
              return data;
            };

            return data;
          }

          var _isValidIdentifier = _interopRequireDefault(
            __webpack_require__(26)
          );

          var _generated = __webpack_require__(3);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function valueToNode(value) {
            if (value === undefined) {
              return (0, _generated.identifier)("undefined");
            }

            if (value === true || value === false) {
              return (0, _generated.booleanLiteral)(value);
            }

            if (value === null) {
              return (0, _generated.nullLiteral)();
            }

            if (typeof value === "string") {
              return (0, _generated.stringLiteral)(value);
            }

            if (typeof value === "number") {
              let result;

              if (Number.isFinite(value)) {
                result = (0, _generated.numericLiteral)(Math.abs(value));
              } else {
                let numerator;

                if (Number.isNaN(value)) {
                  numerator = (0, _generated.numericLiteral)(0);
                } else {
                  numerator = (0, _generated.numericLiteral)(1);
                }

                result = (0, _generated.binaryExpression)(
                  "/",
                  numerator,
                  (0, _generated.numericLiteral)(0)
                );
              }

              if (value < 0 || Object.is(value, -0)) {
                result = (0, _generated.unaryExpression)("-", result);
              }

              return result;
            }

            if ((0, _isRegExp().default)(value)) {
              const pattern = value.source;
              const flags = value.toString().match(/\/([a-z]+|)$/)[1];
              return (0, _generated.regExpLiteral)(pattern, flags);
            }

            if (Array.isArray(value)) {
              return (0, _generated.arrayExpression)(value.map(valueToNode));
            }

            if ((0, _isPlainObject().default)(value)) {
              const props = [];

              for (const key in value) {
                let nodeKey;

                if ((0, _isValidIdentifier.default)(key)) {
                  nodeKey = (0, _generated.identifier)(key);
                } else {
                  nodeKey = (0, _generated.stringLiteral)(key);
                }

                props.push(
                  (0, _generated.objectProperty)(
                    nodeKey,
                    valueToNode(value[key])
                  )
                );
              }

              return (0, _generated.objectExpression)(props);
            }

            throw new Error("don't know how to turn this value into a node");
          }
        },
        /* 275 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            getPrototype = __webpack_require__(63),
            isObjectLike = __webpack_require__(6);

          var objectTag = "[object Object]";
          var funcProto = Function.prototype,
            objectProto = Object.prototype;
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var objectCtorString = funcToString.call(Object);

          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }

            var proto = getPrototype(value);

            if (proto === null) {
              return true;
            }

            var Ctor =
              hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return (
              typeof Ctor == "function" &&
              Ctor instanceof Ctor &&
              funcToString.call(Ctor) == objectCtorString
            );
          }

          module.exports = isPlainObject;
        },
        /* 276 */
        function(module, exports, __webpack_require__) {
          var baseIsRegExp = __webpack_require__(277),
            baseUnary = __webpack_require__(25),
            nodeUtil = __webpack_require__(37);

          var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          module.exports = isRegExp;
        },
        /* 277 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isObjectLike = __webpack_require__(6);

          var regexpTag = "[object RegExp]";

          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }

          module.exports = baseIsRegExp;
        },
        /* 278 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = appendToMemberExpression;

          var _generated = __webpack_require__(3);

          function appendToMemberExpression(member, append, computed = false) {
            member.object = (0, _generated.memberExpression)(
              member.object,
              member.property,
              member.computed
            );
            member.property = append;
            member.computed = !!computed;
            return member;
          }
        },
        /* 279 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = inherits;

          var _constants = __webpack_require__(13);

          var _inheritsComments = _interopRequireDefault(
            __webpack_require__(117)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function inherits(child, parent) {
            if (!child || !parent) return child;

            for (const key of _constants.INHERIT_KEYS.optional) {
              if (child[key] == null) {
                child[key] = parent[key];
              }
            }

            for (const key in parent) {
              if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
            }

            for (const key of _constants.INHERIT_KEYS.force) {
              child[key] = parent[key];
            }

            (0, _inheritsComments.default)(child, parent);
            return child;
          }
        },
        /* 280 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = prependToMemberExpression;

          var _generated = __webpack_require__(3);

          function prependToMemberExpression(member, prepend) {
            member.object = (0, _generated.memberExpression)(
              prepend,
              member.object
            );
            return member;
          }
        },
        /* 281 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = getOuterBindingIdentifiers;

          var _getBindingIdentifiers = _interopRequireDefault(
            __webpack_require__(39)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function getOuterBindingIdentifiers(node, duplicates) {
            return (0, _getBindingIdentifiers.default)(node, duplicates, true);
          }
        },
        /* 282 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = traverse;

          var _definitions = __webpack_require__(7);

          function traverse(node, handlers, state) {
            if (typeof handlers === "function") {
              handlers = {
                enter: handlers,
              };
            }

            const { enter, exit } = handlers;
            traverseSimpleImpl(node, enter, exit, state, []);
          }

          function traverseSimpleImpl(node, enter, exit, state, ancestors) {
            const keys = _definitions.VISITOR_KEYS[node.type];
            if (!keys) return;
            if (enter) enter(node, ancestors, state);

            for (const key of keys) {
              const subNode = node[key];

              if (Array.isArray(subNode)) {
                for (let i = 0; i < subNode.length; i++) {
                  const child = subNode[i];
                  if (!child) continue;
                  ancestors.push({
                    node,
                    key,
                    index: i,
                  });
                  traverseSimpleImpl(child, enter, exit, state, ancestors);
                  ancestors.pop();
                }
              } else if (subNode) {
                ancestors.push({
                  node,
                  key,
                });
                traverseSimpleImpl(subNode, enter, exit, state, ancestors);
                ancestors.pop();
              }
            }

            if (exit) exit(node, ancestors, state);
          }
        },
        /* 283 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isBinding;

          var _getBindingIdentifiers = _interopRequireDefault(
            __webpack_require__(39)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function isBinding(node, parent) {
            const keys = _getBindingIdentifiers.default.keys[parent.type];

            if (keys) {
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const val = parent[key];

                if (Array.isArray(val)) {
                  if (val.indexOf(node) >= 0) return true;
                } else {
                  if (val === node) return true;
                }
              }
            }

            return false;
          }
        },
        /* 284 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isBlockScoped;

          var _generated = __webpack_require__(1);

          var _isLet = _interopRequireDefault(__webpack_require__(124));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function isBlockScoped(node) {
            return (
              (0, _generated.isFunctionDeclaration)(node) ||
              (0, _generated.isClassDeclaration)(node) ||
              (0, _isLet.default)(node)
            );
          }
        },
        /* 285 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isImmutable;

          var _isType = _interopRequireDefault(__webpack_require__(67));

          var _generated = __webpack_require__(1);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function isImmutable(node) {
            if ((0, _isType.default)(node.type, "Immutable")) return true;

            if ((0, _generated.isIdentifier)(node)) {
              if (node.name === "undefined") {
                return true;
              } else {
                return false;
              }
            }

            return false;
          }
        },
        /* 286 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isNodesEquivalent;

          var _definitions = __webpack_require__(7);

          function isNodesEquivalent(a, b) {
            if (
              typeof a !== "object" ||
              typeof b !== "object" ||
              a == null ||
              b == null
            ) {
              return a === b;
            }

            if (a.type !== b.type) {
              return false;
            }

            const fields = Object.keys(
              _definitions.NODE_FIELDS[a.type] || a.type
            );
            const visitorKeys = _definitions.VISITOR_KEYS[a.type];

            for (const field of fields) {
              if (typeof a[field] !== typeof b[field]) {
                return false;
              }

              if (Array.isArray(a[field])) {
                if (!Array.isArray(b[field])) {
                  return false;
                }

                if (a[field].length !== b[field].length) {
                  return false;
                }

                for (let i = 0; i < a[field].length; i++) {
                  if (!isNodesEquivalent(a[field][i], b[field][i])) {
                    return false;
                  }
                }

                continue;
              }

              if (
                typeof a[field] === "object" &&
                (!visitorKeys || !visitorKeys.includes(field))
              ) {
                for (const key in a[field]) {
                  if (a[field][key] !== b[field][key]) {
                    return false;
                  }
                }

                continue;
              }

              if (!isNodesEquivalent(a[field], b[field])) {
                return false;
              }
            }

            return true;
          }
        },
        /* 287 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isReferenced;

          function isReferenced(node, parent) {
            switch (parent.type) {
              case "MemberExpression":
              case "JSXMemberExpression":
              case "OptionalMemberExpression":
                if (parent.property === node) {
                  return !!parent.computed;
                }

                return parent.object === node;

              case "VariableDeclarator":
                return parent.init === node;

              case "ArrowFunctionExpression":
                return parent.body === node;

              case "ExportSpecifier":
                if (parent.source) {
                  return false;
                }

                return parent.local === node;

              case "ObjectProperty":
              case "ClassProperty":
              case "ClassPrivateProperty":
              case "ClassMethod":
              case "ClassPrivateMethod":
              case "ObjectMethod":
                if (parent.key === node) {
                  return !!parent.computed;
                }

                return parent.value === node;

              case "ClassDeclaration":
              case "ClassExpression":
                return parent.superClass === node;

              case "AssignmentExpression":
                return parent.right === node;

              case "AssignmentPattern":
                return parent.right === node;

              case "LabeledStatement":
                return false;

              case "CatchClause":
                return false;

              case "RestElement":
                return false;

              case "BreakStatement":
              case "ContinueStatement":
                return false;

              case "FunctionDeclaration":
              case "FunctionExpression":
                return false;

              case "ExportNamespaceSpecifier":
              case "ExportDefaultSpecifier":
                return false;

              case "ImportDefaultSpecifier":
              case "ImportNamespaceSpecifier":
              case "ImportSpecifier":
                return false;

              case "JSXAttribute":
                return false;

              case "ObjectPattern":
              case "ArrayPattern":
                return false;

              case "MetaProperty":
                return false;

              case "ObjectTypeProperty":
                return parent.key !== node;
            }

            return true;
          }
        },
        /* 288 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isScope;

          var _generated = __webpack_require__(1);

          function isScope(node, parent) {
            if (
              (0, _generated.isBlockStatement)(node) &&
              (0, _generated.isFunction)(parent, {
                body: node,
              })
            ) {
              return false;
            }

            if (
              (0, _generated.isBlockStatement)(node) &&
              (0, _generated.isCatchClause)(parent, {
                body: node,
              })
            ) {
              return false;
            }

            return (0, _generated.isScopable)(node);
          }
        },
        /* 289 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isSpecifierDefault;

          var _generated = __webpack_require__(1);

          function isSpecifierDefault(specifier) {
            return (
              (0, _generated.isImportDefaultSpecifier)(specifier) ||
              (0, _generated.isIdentifier)(
                specifier.imported || specifier.exported,
                {
                  name: "default",
                }
              )
            );
          }
        },
        /* 290 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isValidES3Identifier;

          var _isValidIdentifier = _interopRequireDefault(
            __webpack_require__(26)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const RESERVED_WORDS_ES3_ONLY = new Set([
            "abstract",
            "boolean",
            "byte",
            "char",
            "double",
            "enum",
            "final",
            "float",
            "goto",
            "implements",
            "int",
            "interface",
            "long",
            "native",
            "package",
            "private",
            "protected",
            "public",
            "short",
            "static",
            "synchronized",
            "throws",
            "transient",
            "volatile",
          ]);

          function isValidES3Identifier(name) {
            return (
              (0, _isValidIdentifier.default)(name) &&
              !RESERVED_WORDS_ES3_ONLY.has(name)
            );
          }
        },
        /* 291 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = isVar;

          var _generated = __webpack_require__(1);

          var _constants = __webpack_require__(13);

          function isVar(node) {
            return (
              (0, _generated.isVariableDeclaration)(node, {
                kind: "var",
              }) && !node[_constants.BLOCK_SCOPED_SYMBOL]
            );
          }
        },
        /* 292 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _assert() {
            const data = _interopRequireDefault(__webpack_require__(22));

            _assert = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          class ImportBuilder {
            constructor(importedSource, scope, hub) {
              this._scope = scope;
              this._hub = hub;
              this._importedSource = importedSource;
              this._statements = [];
              this._resultName = null;
            }

            done() {
              return {
                statements: this._statements,
                resultName: this._resultName,
              };
            }

            import() {
              this._statements.push(
                t().importDeclaration(
                  [],
                  t().stringLiteral(this._importedSource)
                )
              );

              return this;
            }

            require() {
              this._statements.push(
                t().expressionStatement(
                  t().callExpression(t().identifier("require"), [
                    t().stringLiteral(this._importedSource),
                  ])
                )
              );

              return this;
            }

            namespace(name = "namespace") {
              name = this._scope.generateUidIdentifier(name);
              const statement = this._statements[this._statements.length - 1];
              (0, _assert().default)(statement.type === "ImportDeclaration");
              (0, _assert().default)(statement.specifiers.length === 0);
              statement.specifiers = [t().importNamespaceSpecifier(name)];
              this._resultName = t().cloneNode(name);
              return this;
            }

            default(name) {
              name = this._scope.generateUidIdentifier(name);
              const statement = this._statements[this._statements.length - 1];
              (0, _assert().default)(statement.type === "ImportDeclaration");
              (0, _assert().default)(statement.specifiers.length === 0);
              statement.specifiers = [t().importDefaultSpecifier(name)];
              this._resultName = t().cloneNode(name);
              return this;
            }

            named(name, importName) {
              if (importName === "default") return this.default(name);
              name = this._scope.generateUidIdentifier(name);
              const statement = this._statements[this._statements.length - 1];
              (0, _assert().default)(statement.type === "ImportDeclaration");
              (0, _assert().default)(statement.specifiers.length === 0);
              statement.specifiers = [
                t().importSpecifier(name, t().identifier(importName)),
              ];
              this._resultName = t().cloneNode(name);
              return this;
            }

            var(name) {
              name = this._scope.generateUidIdentifier(name);
              let statement = this._statements[this._statements.length - 1];

              if (statement.type !== "ExpressionStatement") {
                (0, _assert().default)(this._resultName);
                statement = t().expressionStatement(this._resultName);

                this._statements.push(statement);
              }

              this._statements[
                this._statements.length - 1
              ] = t().variableDeclaration("var", [
                t().variableDeclarator(name, statement.expression),
              ]);
              this._resultName = t().cloneNode(name);
              return this;
            }

            defaultInterop() {
              return this._interop(
                this._hub.addHelper("interopRequireDefault")
              );
            }

            wildcardInterop() {
              return this._interop(
                this._hub.addHelper("interopRequireWildcard")
              );
            }

            _interop(callee) {
              const statement = this._statements[this._statements.length - 1];

              if (statement.type === "ExpressionStatement") {
                statement.expression = t().callExpression(callee, [
                  statement.expression,
                ]);
              } else if (statement.type === "VariableDeclaration") {
                (0, _assert().default)(statement.declarations.length === 1);
                statement.declarations[0].init = t().callExpression(callee, [
                  statement.declarations[0].init,
                ]);
              } else {
                _assert().default.fail("Unexpected type.");
              }

              return this;
            }

            prop(name) {
              const statement = this._statements[this._statements.length - 1];

              if (statement.type === "ExpressionStatement") {
                statement.expression = t().memberExpression(
                  statement.expression,
                  t().identifier(name)
                );
              } else if (statement.type === "VariableDeclaration") {
                (0, _assert().default)(statement.declarations.length === 1);
                statement.declarations[0].init = t().memberExpression(
                  statement.declarations[0].init,
                  t().identifier(name)
                );
              } else {
                _assert().default.fail("Unexpected type:" + statement.type);
              }

              return this;
            }

            read(name) {
              this._resultName = t().memberExpression(
                this._resultName,
                t().identifier(name)
              );
            }
          }

          exports.default = ImportBuilder;
        },
        /* 293 */
        function(module, exports) {
          module.exports = {
            safari: "tp",
          };
        },
        /* 294 */
        function(module) {
          module.exports = [
            {
              name: "nodejs",
              version: "0.2.0",
              date: "2011-08-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.3.0",
              date: "2011-08-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.4.0",
              date: "2011-08-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.5.0",
              date: "2011-08-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.6.0",
              date: "2011-11-04",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.7.0",
              date: "2012-01-17",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.8.0",
              date: "2012-06-22",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.9.0",
              date: "2012-07-20",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.10.0",
              date: "2013-03-11",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.11.0",
              date: "2013-03-28",
              lts: false,
            },
            {
              name: "nodejs",
              version: "0.12.0",
              date: "2015-02-06",
              lts: false,
            },
            { name: "iojs", version: "1.0.0", date: "2015-01-14" },
            { name: "iojs", version: "1.1.0", date: "2015-02-03" },
            { name: "iojs", version: "1.2.0", date: "2015-02-11" },
            { name: "iojs", version: "1.3.0", date: "2015-02-20" },
            { name: "iojs", version: "1.5.0", date: "2015-03-06" },
            { name: "iojs", version: "1.6.0", date: "2015-03-20" },
            { name: "iojs", version: "2.0.0", date: "2015-05-04" },
            { name: "iojs", version: "2.1.0", date: "2015-05-24" },
            { name: "iojs", version: "2.2.0", date: "2015-06-01" },
            { name: "iojs", version: "2.3.0", date: "2015-06-13" },
            { name: "iojs", version: "2.4.0", date: "2015-07-17" },
            { name: "iojs", version: "2.5.0", date: "2015-07-28" },
            { name: "iojs", version: "3.0.0", date: "2015-08-04" },
            { name: "iojs", version: "3.1.0", date: "2015-08-19" },
            { name: "iojs", version: "3.2.0", date: "2015-08-25" },
            { name: "iojs", version: "3.3.0", date: "2015-09-02" },
            {
              name: "nodejs",
              version: "4.0.0",
              date: "2015-09-08",
              lts: false,
            },
            {
              name: "nodejs",
              version: "4.1.0",
              date: "2015-09-17",
              lts: false,
            },
            {
              name: "nodejs",
              version: "4.2.0",
              date: "2015-10-12",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.3.0",
              date: "2016-02-09",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.4.0",
              date: "2016-03-08",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.5.0",
              date: "2016-08-16",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.6.0",
              date: "2016-09-27",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.7.0",
              date: "2016-12-06",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.8.0",
              date: "2017-02-21",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "4.9.0",
              date: "2018-03-28",
              lts: "Argon",
            },
            {
              name: "nodejs",
              version: "5.0.0",
              date: "2015-10-29",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.1.0",
              date: "2015-11-17",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.2.0",
              date: "2015-12-09",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.3.0",
              date: "2015-12-15",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.4.0",
              date: "2016-01-06",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.5.0",
              date: "2016-01-21",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.6.0",
              date: "2016-02-09",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.7.0",
              date: "2016-02-23",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.8.0",
              date: "2016-03-09",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.9.0",
              date: "2016-03-16",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.10.0",
              date: "2016-04-01",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.11.0",
              date: "2016-04-21",
              lts: false,
            },
            {
              name: "nodejs",
              version: "5.12.0",
              date: "2016-06-23",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.0.0",
              date: "2016-04-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.1.0",
              date: "2016-05-05",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.2.0",
              date: "2016-05-17",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.3.0",
              date: "2016-07-06",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.4.0",
              date: "2016-08-12",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.5.0",
              date: "2016-08-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.6.0",
              date: "2016-09-14",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.7.0",
              date: "2016-09-27",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.8.0",
              date: "2016-10-12",
              lts: false,
            },
            {
              name: "nodejs",
              version: "6.9.0",
              date: "2016-10-18",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.10.0",
              date: "2017-02-21",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.11.0",
              date: "2017-06-06",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.12.0",
              date: "2017-11-06",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.13.0",
              date: "2018-02-10",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.14.0",
              date: "2018-03-28",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "6.15.0",
              date: "2018-11-27",
              lts: "Boron",
            },
            {
              name: "nodejs",
              version: "7.0.0",
              date: "2016-10-25",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.1.0",
              date: "2016-11-08",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.2.0",
              date: "2016-11-22",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.3.0",
              date: "2016-12-20",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.4.0",
              date: "2017-01-04",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.5.0",
              date: "2017-01-31",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.6.0",
              date: "2017-02-21",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.7.0",
              date: "2017-02-28",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.8.0",
              date: "2017-03-29",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.9.0",
              date: "2017-04-11",
              lts: false,
            },
            {
              name: "nodejs",
              version: "7.10.0",
              date: "2017-05-02",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.0.0",
              date: "2017-05-30",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.1.0",
              date: "2017-06-08",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.2.0",
              date: "2017-07-19",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.3.0",
              date: "2017-08-08",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.4.0",
              date: "2017-08-15",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.5.0",
              date: "2017-09-12",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.6.0",
              date: "2017-09-26",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.7.0",
              date: "2017-10-11",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.8.0",
              date: "2017-10-24",
              lts: false,
            },
            {
              name: "nodejs",
              version: "8.9.0",
              date: "2017-10-31",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "8.10.0",
              date: "2018-03-06",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "8.11.0",
              date: "2018-03-28",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "8.12.0",
              date: "2018-09-10",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "8.13.0",
              date: "2018-11-20",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "8.14.0",
              date: "2018-11-27",
              lts: "Carbon",
            },
            {
              name: "nodejs",
              version: "9.0.0",
              date: "2017-10-31",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.1.0",
              date: "2017-11-07",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.2.0",
              date: "2017-11-14",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.3.0",
              date: "2017-12-12",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.4.0",
              date: "2018-01-10",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.5.0",
              date: "2018-01-31",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.6.0",
              date: "2018-02-21",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.7.0",
              date: "2018-03-01",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.8.0",
              date: "2018-03-07",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.9.0",
              date: "2018-03-21",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.10.0",
              date: "2018-03-28",
              lts: false,
            },
            {
              name: "nodejs",
              version: "9.11.0",
              date: "2018-04-04",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.0.0",
              date: "2018-04-24",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.1.0",
              date: "2018-05-08",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.2.0",
              date: "2018-05-23",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.3.0",
              date: "2018-05-29",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.4.0",
              date: "2018-06-06",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.5.0",
              date: "2018-06-20",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.6.0",
              date: "2018-07-04",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.7.0",
              date: "2018-07-18",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.8.0",
              date: "2018-08-01",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.9.0",
              date: "2018-08-15",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.10.0",
              date: "2018-09-06",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.11.0",
              date: "2018-09-19",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.12.0",
              date: "2018-10-10",
              lts: false,
            },
            {
              name: "nodejs",
              version: "10.13.0",
              date: "2018-10-30",
              lts: "Dubnium",
            },
            {
              name: "nodejs",
              version: "10.14.0",
              date: "2018-11-27",
              lts: "Dubnium",
            },
            {
              name: "nodejs",
              version: "11.0.0",
              date: "2018-10-23",
              lts: false,
            },
            {
              name: "nodejs",
              version: "11.1.0",
              date: "2018-10-30",
              lts: false,
            },
            {
              name: "nodejs",
              version: "11.2.0",
              date: "2018-11-15",
              lts: false,
            },
            {
              name: "nodejs",
              version: "11.3.0",
              date: "2018-11-27",
              lts: false,
            },
            {
              name: "nodejs",
              version: "11.4.0",
              date: "2018-12-07",
              lts: false,
            },
          ];
        },
        /* 295 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.agents = undefined;

          var _browsers = __webpack_require__(296);

          var _browserVersions = __webpack_require__(298);

          var agentsData = __webpack_require__(300);

          function unpackBrowserVersions(versionsData) {
            return Object.keys(versionsData).reduce(function(usage, version) {
              usage[_browserVersions.browserVersions[version]] =
                versionsData[version];
              return usage;
            }, {});
          }

          var agents = (exports.agents = Object.keys(agentsData).reduce(
            function(map, key) {
              var versionsData = agentsData[key];
              map[_browsers.browsers[key]] = Object.keys(versionsData).reduce(
                function(data, entry) {
                  if (entry === "A") {
                    data.usage_global = unpackBrowserVersions(
                      versionsData[entry]
                    );
                  } else if (entry === "C") {
                    data.versions = versionsData[entry].reduce(function(
                      list,
                      version
                    ) {
                      if (version === "") {
                        list.push(null);
                      } else {
                        list.push(_browserVersions.browserVersions[version]);
                      }

                      return list;
                    },
                    []);
                  } else if (entry === "D") {
                    data.prefix_exceptions = unpackBrowserVersions(
                      versionsData[entry]
                    );
                  } else if (entry === "E") {
                    data.browser = versionsData[entry];
                  } else if (entry === "F") {
                    data.release_date = Object.keys(versionsData[entry]).reduce(
                      function(map, key) {
                        map[_browserVersions.browserVersions[key]] =
                          versionsData[entry][key];
                        return map;
                      },
                      {}
                    );
                  } else {
                    data.prefix = versionsData[entry];
                  }

                  return data;
                },
                {}
              );
              return map;
            },
            {}
          ));
        },
        /* 296 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });

          var browsers = (exports.browsers = __webpack_require__(297));
        },
        /* 297 */
        function(module, exports) {
          module.exports = {
            A: "ie",
            B: "edge",
            C: "firefox",
            D: "chrome",
            E: "safari",
            F: "opera",
            G: "ios_saf",
            H: "op_mini",
            I: "android",
            J: "bb",
            K: "op_mob",
            L: "and_chr",
            M: "and_ff",
            N: "ie_mob",
            O: "and_uc",
            P: "samsung",
            Q: "and_qq",
            R: "baidu",
          };
        },
        /* 298 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });

          var browserVersions = (exports.browserVersions = __webpack_require__(
            299
          ));
        },
        /* 299 */
        function(module, exports) {
          module.exports = {
            "0": "57",
            "1": "14",
            "2": "63",
            "3": "33",
            "4": "4.2-4.3",
            "5": "58",
            "6": "59",
            "7": "60",
            "8": "61",
            "9": "62",
            A: "10",
            B: "11",
            C: "12",
            D: "7",
            E: "9",
            F: "4",
            G: "8",
            H: "6",
            I: "18",
            J: "15",
            K: "5",
            L: "16",
            M: "46",
            N: "17",
            O: "19",
            P: "20",
            Q: "21",
            R: "22",
            S: "23",
            T: "24",
            U: "25",
            V: "26",
            W: "27",
            X: "28",
            Y: "29",
            Z: "30",
            a: "31",
            b: "32",
            c: "11.1",
            d: "34",
            e: "35",
            f: "36",
            g: "37",
            h: "38",
            i: "39",
            j: "40",
            k: "41",
            l: "42",
            m: "43",
            n: "44",
            o: "45",
            p: "13",
            q: "47",
            r: "48",
            s: "49",
            t: "50",
            u: "51",
            v: "52",
            w: "53",
            x: "54",
            y: "55",
            z: "56",
            AB: "12.1",
            BB: "64",
            CB: "65",
            DB: "11.5",
            EB: "3",
            FB: "3.2",
            GB: "67",
            HB: "70",
            IB: "5.0-5.1",
            JB: "69",
            KB: "71",
            LB: "72",
            MB: "73",
            NB: "3.1",
            OB: "66",
            PB: "5.1",
            QB: "6.1",
            RB: "7.1",
            SB: "9.1",
            TB: "10.1",
            UB: "3.6",
            VB: "TP",
            WB: "9.5-9.6",
            XB: "10.0-10.1",
            YB: "10.5",
            ZB: "10.6",
            aB: "3.5",
            bB: "11.6",
            cB: "2",
            dB: "4.0-4.1",
            eB: "5.5",
            fB: "68",
            gB: "6.0-6.1",
            hB: "7.0-7.1",
            iB: "8.1-8.4",
            jB: "9.0-9.2",
            kB: "9.3",
            lB: "10.0-10.2",
            mB: "10.3",
            nB: "11.0-11.2",
            oB: "11.3-11.4",
            pB: "12-12.1",
            qB: "all",
            rB: "2.1",
            sB: "2.2",
            tB: "2.3",
            uB: "4.1",
            vB: "4.4",
            wB: "4.4.3-4.4.4",
            xB: "11.8",
            yB: "6.2",
            zB: "7.2",
            "0B": "1.2",
            "1B": "7.12",
          };
        },
        /* 300 */
        function(module, exports) {
          module.exports = {
            A: {
              A: {
                H: 0.0107346,
                D: 0.0107346,
                G: 0.144917,
                E: 0.155651,
                A: 0.0751421,
                B: 2.48506,
                eB: 0.009298,
              },
              B: "ms",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "eB",
                "H",
                "D",
                "G",
                "E",
                "A",
                "B",
                "",
                "",
                "",
              ],
              E: "IE",
              F: {
                eB: 962323200,
                H: 998870400,
                D: 1161129600,
                G: 1237420800,
                E: 1300060800,
                A: 1346716800,
                B: 1381968000,
              },
            },
            B: {
              A: {
                "1": 0.046908,
                C: 0.015636,
                p: 0.02606,
                J: 0.057332,
                L: 0.140724,
                N: 1.75123,
                I: 0,
              },
              B: "ms",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "C",
                "p",
                "1",
                "J",
                "L",
                "N",
                "I",
                "",
                "",
                "",
              ],
              E: "Edge",
              F: {
                "1": 1470096000,
                C: 1438128000,
                p: 1447286400,
                J: 1491868800,
                L: 1508198400,
                N: 1525046400,
                I: 1542067200,
              },
            },
            C: {
              A: {
                "0": 0.041696,
                "1": 0.00453,
                "2": 3.26792,
                "3": 0.005212,
                "5": 0.02606,
                "6": 0.046908,
                "7": 0.177208,
                "8": 0.072968,
                "9": 0.15636,
                cB: 0.005212,
                EB: 0.004417,
                F: 0.015636,
                K: 0.004879,
                H: 0.020136,
                D: 0.005725,
                G: 0.004417,
                E: 0.00533,
                A: 0.004283,
                B: 0.004317,
                C: 0.004471,
                p: 0.004486,
                J: 0.005212,
                L: 0.004417,
                N: 0.004349,
                I: 0.004393,
                O: 0.004443,
                P: 0.004283,
                Q: 0.008652,
                R: 0.004393,
                S: 0.005212,
                T: 0.008786,
                U: 0.004326,
                V: 0.004317,
                W: 0.004393,
                X: 0.004418,
                Y: 0.008834,
                Z: 0.005212,
                a: 0.010424,
                b: 0.004471,
                d: 0.005212,
                e: 0.015636,
                f: 0.004417,
                g: 0.004783,
                h: 0.041696,
                i: 0.004783,
                j: 0.005212,
                k: 0.005212,
                l: 0.005212,
                m: 0.020848,
                n: 0.010424,
                o: 0.020848,
                M: 0.004783,
                q: 0.057332,
                r: 0.083392,
                s: 0.015636,
                t: 0.015636,
                u: 0.015636,
                v: 0.244964,
                w: 0.015636,
                x: 0.02606,
                y: 0.015636,
                z: 0.05212,
                BB: 0.088604,
                CB: 0,
                aB: 0.008786,
                UB: 0.015636,
              },
              B: "moz",
              C: [
                "",
                "",
                "",
                "cB",
                "EB",
                "aB",
                "UB",
                "F",
                "K",
                "H",
                "D",
                "G",
                "E",
                "A",
                "B",
                "C",
                "p",
                "1",
                "J",
                "L",
                "N",
                "I",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                "a",
                "b",
                "3",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "M",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z",
                "0",
                "5",
                "6",
                "7",
                "8",
                "9",
                "2",
                "BB",
                "CB",
                "",
              ],
              E: "Firefox",
              F: {
                "0": 1510617600,
                "1": 1338854400,
                "2": 1540252800,
                "3": 1413244800,
                "5": 1516665600,
                "6": 1520985600,
                "7": 1525824000,
                "8": 1529971200,
                "9": 1536105600,
                cB: 1161648000,
                EB: 1213660800,
                aB: 1246320000,
                UB: 1264032000,
                F: 1300752000,
                K: 1308614400,
                H: 1313452800,
                D: 1317081600,
                G: 1317081600,
                E: 1320710400,
                A: 1324339200,
                B: 1327968000,
                C: 1331596800,
                p: 1335225600,
                J: 1342483200,
                L: 1346112000,
                N: 1349740800,
                I: 1353628800,
                O: 1357603200,
                P: 1361232000,
                Q: 1364860800,
                R: 1368489600,
                S: 1372118400,
                T: 1375747200,
                U: 1379376000,
                V: 1386633600,
                W: 1391472000,
                X: 1395100800,
                Y: 1398729600,
                Z: 1402358400,
                a: 1405987200,
                b: 1409616000,
                d: 1417392000,
                e: 1421107200,
                f: 1424736000,
                g: 1428278400,
                h: 1431475200,
                i: 1435881600,
                j: 1439251200,
                k: 1442880000,
                l: 1446508800,
                m: 1450137600,
                n: 1453852800,
                o: 1457395200,
                M: 1461628800,
                q: 1465257600,
                r: 1470096000,
                s: 1474329600,
                t: 1479168000,
                u: 1485216000,
                v: 1488844800,
                w: 1492560000,
                x: 1497312000,
                y: 1502150400,
                z: 1506556800,
                BB: null,
                CB: null,
              },
            },
            D: {
              A: {
                "0": 0.083392,
                "1": 0.004706,
                "2": 0.3909,
                "3": 0.015636,
                "5": 0.151148,
                "6": 0.041696,
                "7": 0.05212,
                "8": 0.125088,
                "9": 0.088604,
                F: 0.004706,
                K: 0.004879,
                H: 0.004879,
                D: 0.005591,
                G: 0.005591,
                E: 0.005591,
                A: 0.004534,
                B: 0.010424,
                C: 0.010424,
                p: 0.004879,
                J: 0.015636,
                L: 0.004393,
                N: 0.004393,
                I: 0.008652,
                O: 0.004418,
                P: 0.004393,
                Q: 0.004317,
                R: 0.020848,
                S: 0.008786,
                T: 0.015636,
                U: 0.005212,
                V: 0.010424,
                W: 0.004326,
                X: 0.004783,
                Y: 0.177208,
                Z: 0.010424,
                a: 0.020848,
                b: 0.005212,
                d: 0.015636,
                e: 0.015636,
                f: 0.005212,
                g: 0.015636,
                h: 0.036484,
                i: 0.010424,
                j: 0.031272,
                k: 0.010424,
                l: 0.005212,
                m: 0.036484,
                n: 0.010424,
                o: 0.010424,
                M: 0.010424,
                q: 0.020848,
                r: 0.041696,
                s: 0.59938,
                t: 0.020848,
                u: 0.02606,
                v: 0.015636,
                w: 0.020848,
                x: 0.046908,
                y: 0.067756,
                z: 0.072968,
                BB: 0.114664,
                CB: 0.187632,
                OB: 0.135512,
                GB: 0.333568,
                fB: 0.354416,
                JB: 1.33427,
                HB: 25.3929,
                KB: 0.072968,
                LB: 0.041696,
                MB: 0,
              },
              B: "webkit",
              C: [
                "F",
                "K",
                "H",
                "D",
                "G",
                "E",
                "A",
                "B",
                "C",
                "p",
                "1",
                "J",
                "L",
                "N",
                "I",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                "a",
                "b",
                "3",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "M",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z",
                "0",
                "5",
                "6",
                "7",
                "8",
                "9",
                "2",
                "BB",
                "CB",
                "OB",
                "GB",
                "fB",
                "JB",
                "HB",
                "KB",
                "LB",
                "MB",
              ],
              E: "Chrome",
              F: {
                "0": 1489017600,
                "1": 1316131200,
                "2": 1512518400,
                "3": 1392940800,
                "5": 1492560000,
                "6": 1496707200,
                "7": 1500940800,
                "8": 1504569600,
                "9": 1508198400,
                F: 1264377600,
                K: 1274745600,
                H: 1283385600,
                D: 1287619200,
                G: 1291248000,
                E: 1296777600,
                A: 1299542400,
                B: 1303862400,
                C: 1307404800,
                p: 1312243200,
                J: 1316131200,
                L: 1319500800,
                N: 1323734400,
                I: 1328659200,
                O: 1332892800,
                P: 1337040000,
                Q: 1340668800,
                R: 1343692800,
                S: 1348531200,
                T: 1352246400,
                U: 1357862400,
                V: 1361404800,
                W: 1364428800,
                X: 1369094400,
                Y: 1374105600,
                Z: 1376956800,
                a: 1384214400,
                b: 1389657600,
                d: 1397001600,
                e: 1400544000,
                f: 1405468800,
                g: 1409011200,
                h: 1412640000,
                i: 1416268800,
                j: 1421798400,
                k: 1425513600,
                l: 1429401600,
                m: 1432080000,
                n: 1437523200,
                o: 1441152000,
                M: 1444780800,
                q: 1449014400,
                r: 1453248000,
                s: 1456963200,
                t: 1460592000,
                u: 1464134400,
                v: 1469059200,
                w: 1472601600,
                x: 1476230400,
                y: 1480550400,
                z: 1485302400,
                BB: 1516752000,
                CB: 1520294400,
                OB: 1523923200,
                GB: 1527552000,
                fB: 1532390400,
                JB: 1536019200,
                HB: 1539648000,
                KB: null,
                LB: null,
                MB: null,
              },
            },
            E: {
              A: {
                F: 0,
                K: 0.010424,
                H: 0.004349,
                D: 0.005212,
                G: 0.031272,
                E: 0.02606,
                A: 0.046908,
                B: 0.1303,
                C: 1.57402,
                NB: 0,
                FB: 0.008692,
                PB: 0.020848,
                QB: 0.010424,
                RB: 0.004283,
                SB: 0.088604,
                TB: 0.20848,
                c: 0.453444,
                VB: 0,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "NB",
                "FB",
                "F",
                "K",
                "PB",
                "H",
                "QB",
                "D",
                "RB",
                "G",
                "E",
                "SB",
                "A",
                "TB",
                "B",
                "c",
                "C",
                "VB",
                "",
                "",
              ],
              E: "Safari",
              F: {
                NB: 1205798400,
                FB: 1226534400,
                F: 1244419200,
                K: 1275868800,
                PB: 1311120000,
                H: 1343174400,
                QB: 1382400000,
                D: 1382400000,
                RB: 1410998400,
                G: 1413417600,
                E: 1443657600,
                SB: 1458518400,
                A: 1474329600,
                TB: 1490572800,
                B: 1505779200,
                c: 1522281600,
                C: 1537142400,
                VB: null,
              },
            },
            F: {
              A: {
                "0": 0,
                "3": 0.005014,
                E: 0.0082,
                B: 0.016581,
                C: 0.004317,
                J: 0.00685,
                L: 0.00685,
                N: 0.00685,
                I: 0.005014,
                O: 0.006015,
                P: 0.004879,
                Q: 0.006597,
                R: 0.006597,
                S: 0.013434,
                T: 0.006702,
                U: 0.006015,
                V: 0.005595,
                W: 0.004393,
                X: 0.008652,
                Y: 0.004879,
                Z: 0.004879,
                a: 0.005212,
                b: 0.005152,
                d: 0.009758,
                e: 0.004879,
                f: 0.02606,
                g: 0.004283,
                h: 0.004367,
                i: 0.004534,
                j: 0.004367,
                k: 0.004227,
                l: 0.004418,
                m: 0.010424,
                n: 0.004227,
                o: 0.004471,
                M: 0.004417,
                q: 0.008942,
                r: 0.004369,
                s: 0.005212,
                t: 0.004369,
                u: 0.004317,
                v: 0.004326,
                w: 0.004783,
                x: 0.014349,
                y: 0.010424,
                z: 0.922524,
                WB: 0.00685,
                XB: 0,
                YB: 0.008392,
                ZB: 0.004706,
                c: 0.006229,
                DB: 0.004879,
                bB: 0.008786,
                AB: 0.020848,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "E",
                "WB",
                "XB",
                "YB",
                "ZB",
                "B",
                "c",
                "DB",
                "bB",
                "C",
                "AB",
                "J",
                "L",
                "N",
                "I",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                "a",
                "b",
                "3",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "M",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z",
                "0",
                "",
                "",
                "",
              ],
              E: "Opera",
              F: {
                "0": 1543363200,
                "3": 1445904000,
                E: 1150761600,
                WB: 1223424000,
                XB: 1251763200,
                YB: 1267488000,
                ZB: 1277942400,
                B: 1292457600,
                c: 1302566400,
                DB: 1309219200,
                bB: 1323129600,
                C: 1323129600,
                AB: 1352073600,
                J: 1372723200,
                L: 1377561600,
                N: 1381104000,
                I: 1386288000,
                O: 1390867200,
                P: 1393891200,
                Q: 1399334400,
                R: 1401753600,
                S: 1405987200,
                T: 1409616000,
                U: 1413331200,
                V: 1417132800,
                W: 1422316800,
                X: 1425945600,
                Y: 1430179200,
                Z: 1433808000,
                a: 1438646400,
                b: 1442448000,
                d: 1449100800,
                e: 1454371200,
                f: 1457308800,
                g: 1462320000,
                h: 1465344000,
                i: 1470096000,
                j: 1474329600,
                k: 1477267200,
                l: 1481587200,
                m: 1486425600,
                n: 1490054400,
                o: 1494374400,
                M: 1498003200,
                q: 1502236800,
                r: 1506470400,
                s: 1510099200,
                t: 1515024000,
                u: 1517961600,
                v: 1521676800,
                w: 1525910400,
                x: 1530144000,
                y: 1534982400,
                z: 1537833600,
              },
              D: {
                E: "o",
                B: "o",
                C: "o",
                WB: "o",
                XB: "o",
                YB: "o",
                ZB: "o",
                c: "o",
                DB: "o",
                bB: "o",
                AB: "o",
              },
            },
            G: {
              A: {
                "4": 0.00107662,
                G: 0.174412,
                FB: 0.00107662,
                dB: 0,
                IB: 0.0129194,
                gB: 0.0064597,
                hB: 0.0247622,
                iB: 0.0602906,
                jB: 0.0344518,
                kB: 0.248699,
                lB: 0.291763,
                mB: 0.376816,
                nB: 0.680422,
                oB: 1.81087,
                pB: 7.03462,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "FB",
                "dB",
                "4",
                "IB",
                "gB",
                "hB",
                "G",
                "iB",
                "jB",
                "kB",
                "lB",
                "mB",
                "nB",
                "oB",
                "pB",
                "",
                "",
                "",
              ],
              E: "iOS Safari",
              F: {
                "4": 1299628800,
                FB: 1270252800,
                dB: 1283904000,
                IB: 1331078400,
                gB: 1359331200,
                hB: 1394409600,
                G: 1410912000,
                iB: 1413763200,
                jB: 1442361600,
                kB: 1458518400,
                lB: 1473724800,
                mB: 1490572800,
                nB: 1505779200,
                oB: 1522281600,
                pB: 1537142400,
              },
            },
            H: {
              A: {
                qB: 2.0489,
              },
              B: "o",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "qB",
                "",
                "",
                "",
              ],
              E: "Opera Mini",
              F: {
                qB: 1426464000,
              },
            },
            I: {
              A: {
                "4": 0.21192,
                EB: 0.000894176,
                F: 0.111772,
                GB: 0,
                rB: 0,
                sB: 0.000894176,
                tB: 0.0250369,
                uB: 0.0438146,
                vB: 0,
                wB: 0.429204,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "rB",
                "sB",
                "tB",
                "EB",
                "F",
                "uB",
                "4",
                "vB",
                "wB",
                "GB",
                "",
                "",
                "",
              ],
              E: "Android Browser",
              F: {
                "4": 1374624000,
                rB: 1256515200,
                sB: 1274313600,
                tB: 1291593600,
                EB: 1298332800,
                F: 1318896000,
                uB: 1341792000,
                vB: 1386547200,
                wB: 1401667200,
                GB: 1494115200,
              },
            },
            J: {
              A: {
                D: 0.004788,
                A: 0.019152,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "D",
                "A",
                "",
                "",
                "",
              ],
              E: "Blackberry Browser",
              F: {
                D: 1325376000,
                A: 1359504000,
              },
            },
            K: {
              A: {
                A: 0,
                B: 0,
                C: 0,
                M: 0.0111391,
                c: 0,
                DB: 0,
                AB: 0,
              },
              B: "o",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "A",
                "B",
                "c",
                "DB",
                "C",
                "AB",
                "M",
                "",
                "",
                "",
              ],
              E: "Opera Mobile",
              F: {
                A: 1287100800,
                B: 1300752000,
                c: 1314835200,
                DB: 1318291200,
                C: 1330300800,
                AB: 1349740800,
                M: 1474588800,
              },
              D: {
                M: "webkit",
              },
            },
            L: {
              A: {
                HB: 32.6429,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "HB",
                "",
                "",
                "",
              ],
              E: "Chrome for Android",
              F: {
                HB: 1539734400,
              },
            },
            M: {
              A: {
                "2": 0.177156,
              },
              B: "moz",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "2",
                "",
                "",
                "",
              ],
              E: "Firefox for Android",
              F: {
                "2": 1540252800,
              },
            },
            N: {
              A: {
                A: 0.0115934,
                B: 0.134064,
              },
              B: "ms",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "A",
                "B",
                "",
                "",
                "",
              ],
              E: "IE Mobile",
              F: {
                A: 1340150400,
                B: 1353456000,
              },
            },
            O: {
              A: {
                xB: 4.25174,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "xB",
                "",
                "",
                "",
              ],
              E: "UC Browser for Android",
              F: {
                xB: 1471392000,
              },
              D: {
                xB: "webkit",
              },
            },
            P: {
              A: {
                F: 0.730358,
                K: 0.0846792,
                yB: 0.116434,
                zB: 0,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "F",
                "K",
                "yB",
                "zB",
                "",
                "",
                "",
              ],
              E: "Samsung Internet",
              F: {
                F: 1461024000,
                K: 1481846400,
                yB: 1509408000,
                zB: 1528329600,
              },
            },
            Q: {
              A: {
                "0B": 0,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "0B",
                "",
                "",
                "",
              ],
              E: "QQ Browser",
              F: {
                "0B": 1483228800,
              },
            },
            R: {
              A: {
                "1B": 0,
              },
              B: "webkit",
              C: [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "1B",
                "",
                "",
                "",
              ],
              E: "Baidu Browser",
              F: {
                "1B": 1491004800,
              },
            },
          };
        },
        /* 301 */
        function(module) {
          module.exports = {
            "v0.10": { start: "2013-03-11", end: "2016-10-31" },
            "v0.12": { start: "2015-02-06", end: "2016-12-31" },
            v4: {
              start: "2015-09-08",
              lts: "2015-10-12",
              maintenance: "2017-04-01",
              end: "2018-04-30",
              codename: "Argon",
            },
            v5: {
              start: "2015-10-29",
              maintenance: "2016-04-30",
              end: "2016-06-30",
            },
            v6: {
              start: "2016-04-26",
              lts: "2016-10-18",
              maintenance: "2018-04-30",
              end: "2019-04-01",
              codename: "Boron",
            },
            v7: {
              start: "2016-10-25",
              maintenance: "2017-04-30",
              end: "2017-06-30",
            },
            v8: {
              start: "2017-05-30",
              lts: "2017-10-31",
              maintenance: "2019-01-01",
              end: "2019-12-31",
              codename: "Carbon",
            },
            v9: {
              start: "2017-10-01",
              maintenance: "2018-04-01",
              end: "2018-06-30",
            },
            v10: {
              start: "2018-04-24",
              lts: "2018-10-30",
              maintenance: "2020-04-01",
              end: "2021-04-01",
              codename: "Dubnium",
            },
            v11: {
              start: "2018-10-23",
              maintenance: "2019-04-01",
              end: "2019-06-30",
            },
            v12: {
              start: "2019-04-23",
              lts: "2019-10-22",
              maintenance: "2021-04-01",
              end: "2022-04-01",
              codename: "",
            },
          };
        },
        /* 302 */
        function(module, exports) {
          /* (ignored) */
        },
        /* 303 */
        function(module, exports) {
          module.exports = {
            "4.0": "69",
            "3.1": "66",
            "3.0": "66",
            "2.1": "61",
            "2.0": "61",
            "1.8": "59",
            "1.7": "58",
            "1.6": "56",
            "1.5": "54",
            "1.4": "53",
            "1.3": "52",
            "1.2": "51",
            "1.1": "50",
            "1.0": "49",
            "0.37": "49",
            "0.36": "47",
            "0.35": "45",
            "0.34": "45",
            "0.33": "45",
            "0.32": "45",
            "0.31": "44",
            "0.30": "44",
            "0.29": "43",
            "0.28": "43",
            "0.27": "42",
            "0.26": "42",
            "0.25": "42",
            "0.24": "41",
            "0.23": "41",
            "0.22": "41",
            "0.21": "40",
            "0.20": "39",
          };
        },
        /* 304 */
        function(module, exports, __webpack_require__) {
          var BrowserslistError = __webpack_require__(127);

          function noop() {}

          module.exports = {
            loadQueries: function loadQueries() {
              throw new BrowserslistError(
                "Sharable configs are not supported in client-side build of Browserslist"
              );
            },
            getStat: function getStat(opts) {
              return opts.stats;
            },
            loadConfig: function loadConfig(opts) {
              if (opts.config) {
                throw new BrowserslistError(
                  "Browserslist config are not supported in client-side build"
                );
              }
            },
            loadCountry: function loadCountry() {
              throw new BrowserslistError(
                "Country statistics is not supported " +
                  "in client-side build of Browserslist"
              );
            },
            currentNode: function currentNode(resolve, context) {
              return resolve(["maintained node versions"], context)[0];
            },
            parseConfig: noop,
            readConfig: noop,
            findConfig: noop,
            clearCaches: noop,
            oldDataWarning: noop,
          };
        },
        /* 305 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.defaultWebIncludes = void 0;
          const defaultWebIncludes = [
            "web.timers",
            "web.immediate",
            "web.dom.iterable",
          ];
          exports.defaultWebIncludes = defaultWebIncludes;
        },
        /* 306 */
        function(module) {
          module.exports = {
            "es6.module": {
              firefox: "60",
              chrome: "61",
              safari: "10.1",
              opera: "48",
              ios_saf: "10.3",
              android: "67",
              and_ff: "63",
            },
          };
        },
        /* 307 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.getOptionSpecificExcludesFor = exports.getPlatformSpecificDefaultFor = void 0;
          const defaultWebIncludes = [
            "web.timers",
            "web.immediate",
            "web.dom.iterable",
          ];
          const defaultExcludesForLooseMode = ["transform-typeof-symbol"];

          const getPlatformSpecificDefaultFor = targets => {
            const targetNames = Object.keys(targets);
            const isAnyTarget = !targetNames.length;
            const isWebTarget = targetNames.some(name => name !== "node");
            return isAnyTarget || isWebTarget ? defaultWebIncludes : null;
          };

          exports.getPlatformSpecificDefaultFor = getPlatformSpecificDefaultFor;

          const getOptionSpecificExcludesFor = ({ loose }) => {
            if (loose) {
              return defaultExcludesForLooseMode;
            }

            return null;
          };

          exports.getOptionSpecificExcludesFor = getOptionSpecificExcludesFor;
        },
        /* 308 */
        function(module, exports) {
          const builtIns = {
            "es7.array.flat-map":
              "Array.prototype.{flat, flatMap} / Array.prototype.flatMap",
          };
          const features = {};
          const pluginSyntaxMap = new Map([
            ["proposal-async-generator-functions", "syntax-async-generators"],
            ["proposal-object-rest-spread", "syntax-object-rest-spread"],
            [
              "proposal-optional-catch-binding",
              "syntax-optional-catch-binding",
            ],
            ["proposal-unicode-property-regex", null],
            ["proposal-json-strings", "syntax-json-strings"],
          ]);
          module.exports = {
            builtIns,
            features,
            pluginSyntaxMap,
          };
        },
        /* 309 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          var _debug = __webpack_require__(50);

          var _utils = __webpack_require__(16);

          function _default({ types: t }) {
            function replaceWithPolyfillImports(path, polyfills, regenerator) {
              if (regenerator) {
                (0, _utils.createImport)(path, "regenerator-runtime");
              }

              const items = Array.isArray(polyfills)
                ? new Set(polyfills)
                : polyfills;

              for (const p of Array.from(items).reverse()) {
                (0, _utils.createImport)(path, p);
              }

              path.remove();
            }

            const isPolyfillImport = {
              ImportDeclaration(path, state) {
                if (
                  path.node.specifiers.length === 0 &&
                  (0, _utils.isPolyfillSource)(path.node.source.value)
                ) {
                  this.importPolyfillIncluded = true;
                  replaceWithPolyfillImports(
                    path,
                    state.opts.polyfills,
                    state.opts.regenerator
                  );
                }
              },

              Program(path, state) {
                path.get("body").forEach(bodyPath => {
                  if ((0, _utils.isRequire)(t, bodyPath)) {
                    replaceWithPolyfillImports(
                      bodyPath,
                      state.opts.polyfills,
                      state.opts.regenerator
                    );
                  }
                });
              },
            };
            return {
              name: "transform-polyfill-require",
              visitor: isPolyfillImport,

              pre() {
                this.numPolyfillImports = 0;
                this.importPolyfillIncluded = false;
              },

              post() {
                const { debug, onDebug, polyfills } = this.opts;

                if (debug) {
                  (0, _debug.logEntryPolyfills)(
                    this.importPolyfillIncluded,
                    polyfills,
                    this.file.opts.filename,
                    onDebug
                  );
                }
              },
            };
          }
        },
        /* 310 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          var _builtInDefinitions = __webpack_require__(311);

          var _debug = __webpack_require__(50);

          var _utils = __webpack_require__(16);

          function has(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
          }

          function getType(target) {
            if (Array.isArray(target)) return "array";
            return typeof target;
          }

          function _default({ types: t }) {
            function addImport(path, builtIn, builtIns) {
              if (builtIn && !builtIns.has(builtIn)) {
                builtIns.add(builtIn);
                (0, _utils.createImport)(path, builtIn);
              }
            }

            function addUnsupported(path, polyfills, builtIn, builtIns) {
              if (Array.isArray(builtIn)) {
                for (const i of builtIn) {
                  if (polyfills.has(i)) {
                    addImport(path, i, builtIns);
                  }
                }
              } else {
                if (polyfills.has(builtIn)) {
                  addImport(path, builtIn, builtIns);
                }
              }
            }

            const addAndRemovePolyfillImports = {
              ImportDeclaration(path) {
                if (
                  path.node.specifiers.length === 0 &&
                  (0, _utils.isPolyfillSource)(path.node.source.value)
                ) {
                  console.warn(`
  When setting \`useBuiltIns: 'usage'\`, polyfills are automatically imported when needed.
  Please remove the \`import '@gerhobbelt/babel-polyfill'\` call or use \`useBuiltIns: 'entry'\` instead.`);
                  path.remove();
                }
              },

              Program: {
                enter(path) {
                  path.get("body").forEach(bodyPath => {
                    if ((0, _utils.isRequire)(t, bodyPath)) {
                      console.warn(`
  When setting \`useBuiltIns: 'usage'\`, polyfills are automatically imported when needed.
  Please remove the \`require('@gerhobbelt/babel-polyfill')\` call or use \`useBuiltIns: 'entry'\` instead.`);
                      bodyPath.remove();
                    }
                  });
                },
              },

              ReferencedIdentifier(path, state) {
                const { node, parent, scope } = path;
                if (t.isMemberExpression(parent)) return;
                if (!has(_builtInDefinitions.definitions.builtins, node.name))
                  return;
                if (scope.getBindingIdentifier(node.name)) return;
                const builtIn =
                  _builtInDefinitions.definitions.builtins[node.name];
                addUnsupported(
                  path,
                  state.opts.polyfills,
                  builtIn,
                  this.builtIns
                );
              },

              CallExpression(path) {
                if (path.node.arguments.length) return;
                const callee = path.node.callee;
                if (!t.isMemberExpression(callee)) return;
                if (!callee.computed) return;

                if (
                  !path.get("callee.property").matchesPattern("Symbol.iterator")
                ) {
                  return;
                }

                addImport(path, "web.dom.iterable", this.builtIns);
              },

              BinaryExpression(path) {
                if (path.node.operator !== "in") return;
                if (!path.get("left").matchesPattern("Symbol.iterator")) return;
                addImport(path, "web.dom.iterable", this.builtIns);
              },

              YieldExpression(path) {
                if (!path.node.delegate) return;
                addImport(path, "web.dom.iterable", this.builtIns);
              },

              MemberExpression: {
                enter(path, state) {
                  if (!path.isReferenced()) return;
                  const { node } = path;
                  const obj = node.object;
                  const prop = node.property;
                  if (!t.isReferenced(obj, node)) return;
                  let instanceType;
                  let evaluatedPropType = obj.name;
                  let propName = prop.name;

                  if (node.computed) {
                    if (t.isStringLiteral(prop)) {
                      propName = prop.value;
                    } else {
                      const res = path.get("property").evaluate();

                      if (res.confident && res.value) {
                        propName = res.value;
                      }
                    }
                  }

                  if (path.scope.getBindingIdentifier(obj.name)) {
                    const result = path.get("object").evaluate();

                    if (result.value) {
                      instanceType = getType(result.value);
                    } else if (result.deopt && result.deopt.isIdentifier()) {
                      evaluatedPropType = result.deopt.node.name;
                    }
                  }

                  if (
                    has(
                      _builtInDefinitions.definitions.staticMethods,
                      evaluatedPropType
                    )
                  ) {
                    const staticMethods =
                      _builtInDefinitions.definitions.staticMethods[
                        evaluatedPropType
                      ];

                    if (has(staticMethods, propName)) {
                      const builtIn = staticMethods[propName];
                      addUnsupported(
                        path,
                        state.opts.polyfills,
                        builtIn,
                        this.builtIns
                      );
                    }
                  }

                  if (
                    has(
                      _builtInDefinitions.definitions.instanceMethods,
                      propName
                    )
                  ) {
                    let builtIn =
                      _builtInDefinitions.definitions.instanceMethods[propName];

                    if (instanceType) {
                      builtIn = builtIn.filter(item =>
                        item.includes(instanceType)
                      );
                    }

                    addUnsupported(
                      path,
                      state.opts.polyfills,
                      builtIn,
                      this.builtIns
                    );
                  }
                },

                exit(path, state) {
                  if (!path.isReferenced()) return;
                  const { node } = path;
                  const obj = node.object;
                  if (!has(_builtInDefinitions.definitions.builtins, obj.name))
                    return;
                  if (path.scope.getBindingIdentifier(obj.name)) return;
                  const builtIn =
                    _builtInDefinitions.definitions.builtins[obj.name];
                  addUnsupported(
                    path,
                    state.opts.polyfills,
                    builtIn,
                    this.builtIns
                  );
                },
              },

              VariableDeclarator(path, state) {
                if (!path.isReferenced()) return;
                const { node } = path;
                const obj = node.init;
                if (!t.isObjectPattern(node.id)) return;
                if (!t.isReferenced(obj, node)) return;
                if (obj && path.scope.getBindingIdentifier(obj.name)) return;

                for (let prop of node.id.properties) {
                  prop = prop.key;

                  if (
                    !node.computed &&
                    t.isIdentifier(prop) &&
                    has(
                      _builtInDefinitions.definitions.instanceMethods,
                      prop.name
                    )
                  ) {
                    const builtIn =
                      _builtInDefinitions.definitions.instanceMethods[
                        prop.name
                      ];
                    addUnsupported(
                      path,
                      state.opts.polyfills,
                      builtIn,
                      this.builtIns
                    );
                  }
                }
              },

              Function(path, state) {
                if (
                  !this.usesRegenerator &&
                  (path.node.generator || path.node.async)
                ) {
                  this.usesRegenerator = true;

                  if (state.opts.regenerator) {
                    addImport(path, "regenerator-runtime", this.builtIns);
                  }
                }
              },
            };
            return {
              name: "use-built-ins",

              pre() {
                this.builtIns = new Set();
                this.usesRegenerator = false;
              },

              post() {
                const { debug, onDebug } = this.opts;

                if (debug) {
                  (0, _debug.logUsagePolyfills)(
                    this.builtIns,
                    this.file.opts.filename,
                    onDebug
                  );
                }
              },

              visitor: addAndRemovePolyfillImports,
            };
          }
        },
        /* 311 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.definitions = void 0;
          const ArrayNatureIterators = [
            "es6.object.to-string",
            "es6.array.iterator",
            "web.dom.iterable",
          ];
          const CommonIterators = ["es6.string.iterator"].concat(
            ArrayNatureIterators
          );
          const definitions = {
            builtins: {
              DataView: "es6.typed.data-view",
              Float32Array: "es6.typed.float32-array",
              Float64Array: "es6.typed.float64-array",
              Int8Array: "es6.typed.int8-array",
              Int16Array: "es6.typed.int16-array",
              Int32Array: "es6.typed.int32-array",
              Map: ["es6.map"].concat(CommonIterators),
              Number: "es6.number.constructor",
              Promise: ["es6.object.to-string", "es6.promise"],
              RegExp: ["es6.regexp.constructor"],
              Set: ["es6.set"].concat(CommonIterators),
              Symbol: ["es6.symbol", "es7.symbol.async-iterator"],
              Uint8Array: "es6.typed.uint8-array",
              Uint8ClampedArray: "es6.typed.uint8-clamped-array",
              Uint16Array: "es6.typed.uint16-array",
              Uint32Array: "es6.typed.uint32-array",
              WeakMap: ["es6.weak-map"].concat(CommonIterators),
              WeakSet: ["es6.weak-set"].concat(CommonIterators),
            },
            instanceMethods: {
              __defineGetter__: ["es7.object.define-getter"],
              __defineSetter__: ["es7.object.define-setter"],
              __lookupGetter__: ["es7.object.lookup-getter"],
              __lookupSetter__: ["es7.object.lookup-setter"],
              anchor: ["es6.string.anchor"],
              big: ["es6.string.big"],
              bind: ["es6.function.bind"],
              blink: ["es6.string.blink"],
              bold: ["es6.string.bold"],
              codePointAt: ["es6.string.code-point-at"],
              copyWithin: ["es6.array.copy-within"],
              endsWith: ["es6.string.ends-with"],
              entries: ArrayNatureIterators,
              every: ["es6.array.is-array"],
              fill: ["es6.array.fill"],
              filter: ["es6.array.filter"],
              finally: ["es7.promise.finally"],
              find: ["es6.array.find"],
              findIndex: ["es6.array.find-index"],
              fixed: ["es6.string.fixed"],
              flags: ["es6.regexp.flags"],
              fontcolor: ["es6.string.fontcolor"],
              fontsize: ["es6.string.fontsize"],
              forEach: ["es6.array.for-each", "web.dom.iterable"],
              includes: ["es6.string.includes", "es7.array.includes"],
              indexOf: ["es6.array.index-of"],
              italics: ["es6.string.italics"],
              keys: ArrayNatureIterators,
              lastIndexOf: ["es6.array.last-index-of"],
              link: ["es6.string.link"],
              map: ["es6.array.map"],
              match: ["es6.regexp.match"],
              name: ["es6.function.name"],
              padStart: ["es7.string.pad-start"],
              padEnd: ["es7.string.pad-end"],
              reduce: ["es6.array.reduce"],
              reduceRight: ["es6.array.reduce-right"],
              repeat: ["es6.string.repeat"],
              replace: ["es6.regexp.replace"],
              search: ["es6.regexp.search"],
              slice: ["es6.array.slice"],
              small: ["es6.string.small"],
              some: ["es6.array.some"],
              sort: ["es6.array.sort"],
              split: ["es6.regexp.split"],
              startsWith: ["es6.string.starts-with"],
              strike: ["es6.string.strike"],
              sub: ["es6.string.sub"],
              sup: ["es6.string.sup"],
              toISOString: ["es6.date.to-iso-string"],
              toJSON: ["es6.date.to-json"],
              toString: [
                "es6.object.to-string",
                "es6.date.to-string",
                "es6.regexp.to-string",
              ],
              trim: ["es6.string.trim"],
              values: ArrayNatureIterators,
            },
            staticMethods: {
              Array: {
                from: ["es6.array.from", "es6.string.iterator"],
                isArray: "es6.array.is-array",
                of: "es6.array.of",
              },
              Date: {
                now: "es6.date.now",
              },
              Object: {
                assign: "es6.object.assign",
                create: "es6.object.create",
                defineProperty: "es6.object.define-property",
                defineProperties: "es6.object.define-properties",
                entries: "es7.object.entries",
                freeze: "es6.object.freeze",
                getOwnPropertyDescriptors:
                  "es7.object.get-own-property-descriptors",
                getOwnPropertySymbols: "es6.object.get-own-property-symbols",
                is: "es6.object.is",
                isExtensible: "es6.object.is-extensible",
                isFrozen: "es6.object.is-frozen",
                isSealed: "es6.object.is-sealed",
                keys: "es6.object.keys",
                preventExtensions: "es6.object.prevent-extensions",
                seal: "es6.object.seal",
                setPrototypeOf: "es6.object.set-prototype-of",
                values: "es7.object.values",
              },
              Math: {
                acosh: "es6.math.acosh",
                asinh: "es6.math.asinh",
                atanh: "es6.math.atanh",
                cbrt: "es6.math.cbrt",
                clz32: "es6.math.clz32",
                cosh: "es6.math.cosh",
                expm1: "es6.math.expm1",
                fround: "es6.math.fround",
                hypot: "es6.math.hypot",
                imul: "es6.math.imul",
                log1p: "es6.math.log1p",
                log10: "es6.math.log10",
                log2: "es6.math.log2",
                sign: "es6.math.sign",
                sinh: "es6.math.sinh",
                tanh: "es6.math.tanh",
                trunc: "es6.math.trunc",
              },
              String: {
                fromCodePoint: "es6.string.from-code-point",
                raw: "es6.string.raw",
              },
              Number: {
                EPSILON: "es6.number.epsilon",
                MIN_SAFE_INTEGER: "es6.number.min-safe-integer",
                MAX_SAFE_INTEGER: "es6.number.max-safe-integer",
                isFinite: "es6.number.is-finite",
                isInteger: "es6.number.is-integer",
                isSafeInteger: "es6.number.is-safe-integer",
                isNaN: "es6.number.is-nan",
                parseFloat: "es6.number.parse-float",
                parseInt: "es6.number.parse-int",
              },
              Promise: {
                all: CommonIterators,
                race: CommonIterators,
              },
              Reflect: {
                apply: "es6.reflect.apply",
                construct: "es6.reflect.construct",
                defineProperty: "es6.reflect.define-property",
                deleteProperty: "es6.reflect.delete-property",
                get: "es6.reflect.get",
                getOwnPropertyDescriptor:
                  "es6.reflect.get-own-property-descriptor",
                getPrototypeOf: "es6.reflect.get-prototype-of",
                has: "es6.reflect.has",
                isExtensible: "es6.reflect.is-extensible",
                ownKeys: "es6.reflect.own-keys",
                preventExtensions: "es6.reflect.prevent-extensions",
                set: "es6.reflect.set",
                setPrototypeOf: "es6.reflect.set-prototype-of",
              },
            },
          };
          exports.definitions = definitions;
        },
        /* 312 */
        function(module, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          /* harmony import */ var _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
            21
          );
          /* harmony import */ var _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
            _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__
          );

          const notIncludedPlugins = {
            "transform-new-target": __webpack_require__(313),
            "proposal-json-strings": __webpack_require__(450),
          };
          Object.keys(notIncludedPlugins).forEach(pluginName => {
            if (
              !_gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__[
                "availablePlugins"
              ][pluginName]
            ) {
              Object(
                _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__[
                  "registerPlugin"
                ]
              )(pluginName, notIncludedPlugins[pluginName]);
            }
          });
          /* harmony default export */ __webpack_exports__["default"] =
            _gerhobbelt_babel_standalone__WEBPACK_IMPORTED_MODULE_0__[
              "availablePlugins"
            ];
        },
        /* 313 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _babelHelperPluginUtils() {
            const data = __webpack_require__(40);

            _babelHelperPluginUtils = function() {
              return data;
            };

            return data;
          }

          function _babelCore() {
            const data = __webpack_require__(72);

            _babelCore = function() {
              return data;
            };

            return data;
          }

          var _default = (0, _babelHelperPluginUtils().declare)(api => {
            api.assertVersion(7);
            return {
              name: "transform-new-target",
              visitor: {
                MetaProperty(path) {
                  const meta = path.get("meta");
                  const property = path.get("property");
                  const { scope } = path;

                  if (
                    meta.isIdentifier({
                      name: "new",
                    }) &&
                    property.isIdentifier({
                      name: "target",
                    })
                  ) {
                    const func = path.findParent(path => {
                      if (path.isClass()) return true;

                      if (
                        path.isFunction() &&
                        !path.isArrowFunctionExpression()
                      ) {
                        if (
                          path.isClassMethod({
                            kind: "constructor",
                          })
                        ) {
                          return false;
                        }

                        return true;
                      }

                      return false;
                    });

                    if (!func) {
                      throw path.buildCodeFrameError(
                        "new.target must be under a (non-arrow) function or a class."
                      );
                    }

                    const { node } = func;

                    if (!node.id) {
                      if (func.isMethod()) {
                        path.replaceWith(scope.buildUndefinedNode());
                        return;
                      }

                      node.id = scope.generateUidIdentifier("target");
                    }

                    const constructor = _babelCore().types.memberExpression(
                      _babelCore().types.thisExpression(),
                      _babelCore().types.identifier("constructor")
                    );

                    if (func.isClass()) {
                      path.replaceWith(constructor);
                      return;
                    }

                    path.replaceWith(
                      _babelCore().types.conditionalExpression(
                        _babelCore().types.binaryExpression(
                          "instanceof",
                          _babelCore().types.thisExpression(),
                          _babelCore().types.cloneNode(node.id)
                        ),
                        constructor,
                        scope.buildUndefinedNode()
                      )
                    );
                  }
                },
              },
            };
          });

          exports.default = _default;
        },
        /* 314 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          var _path = _interopRequireDefault(__webpack_require__(20));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const testing = "development" === "test";

          class TraversalContext {
            constructor(scope, opts, state, parentPath) {
              this.parentPath = parentPath;
              this.scope = scope;
              this.state = state;
              this.opts = opts;
              this.queue = null;
            }

            shouldVisit(node) {
              const opts = this.opts;
              if (opts.enter || opts.exit) return true;
              if (opts[node.type]) return true;
              const keys = t().VISITOR_KEYS[node.type];
              if (!keys || !keys.length) return false;

              for (const key of keys) {
                if (node[key]) return true;
              }

              return false;
            }

            create(node, obj, key, listKey) {
              return _path.default.get({
                parentPath: this.parentPath,
                parent: node,
                container: obj,
                key: key,
                listKey,
              });
            }

            maybeQueue(path, notPriority) {
              if (this.trap) {
                throw new Error("Infinite cycle detected");
              }

              if (this.queue) {
                if (notPriority) {
                  this.queue.push(path);
                } else {
                  this.priorityQueue.push(path);
                }
              }
            }

            visitMultiple(container, parent, listKey) {
              if (container.length === 0) return false;
              const queue = [];

              for (let key = 0; key < container.length; key++) {
                const node = container[key];

                if (node && this.shouldVisit(node)) {
                  queue.push(this.create(parent, container, key, listKey));
                }
              }

              return this.visitQueue(queue);
            }

            visitSingle(node, key) {
              if (this.shouldVisit(node[key])) {
                return this.visitQueue([this.create(node, node, key)]);
              } else {
                return false;
              }
            }

            visitQueue(queue) {
              this.queue = queue;
              this.priorityQueue = [];
              const visited = [];
              let stop = false;

              for (const path of queue) {
                path.resync();

                if (
                  path.contexts.length === 0 ||
                  path.contexts[path.contexts.length - 1] !== this
                ) {
                  path.pushContext(this);
                }

                if (path.key === null) continue;

                if (testing && queue.length >= 10000) {
                  this.trap = true;
                }

                if (visited.indexOf(path.node) >= 0) continue;
                visited.push(path.node);

                if (path.visit()) {
                  stop = true;
                  break;
                }

                if (this.priorityQueue.length) {
                  stop = this.visitQueue(this.priorityQueue);
                  this.priorityQueue = [];
                  this.queue = queue;
                  if (stop) break;
                }
              }

              for (const path of queue) {
                path.popContext();
              }

              this.queue = null;
              return stop;
            }

            visit(node, key) {
              const nodes = node[key];
              if (!nodes) return false;

              if (Array.isArray(nodes)) {
                return this.visitMultiple(nodes, node, key);
              } else {
                return this.visitSingle(node, key);
              }
            }
          }

          exports.default = TraversalContext;
        },
        /* 315 */
        function(module, exports, __webpack_require__) {
          module.exports = function setup(env) {
            createDebug.debug = createDebug["default"] = createDebug;
            createDebug.coerce = coerce;
            createDebug.disable = disable;
            createDebug.enable = enable;
            createDebug.enabled = enabled;
            createDebug.humanize = __webpack_require__(316);
            Object.keys(env).forEach(function(key) {
              createDebug[key] = env[key];
            });
            createDebug.instances = [];
            createDebug.names = [];
            createDebug.skips = [];
            createDebug.formatters = {};

            function selectColor(namespace) {
              var hash = 0,
                i;

              for (i in namespace) {
                hash = (hash << 5) - hash + namespace.charCodeAt(i);
                hash |= 0;
              }

              return createDebug.colors[
                Math.abs(hash) % createDebug.colors.length
              ];
            }

            createDebug.selectColor = selectColor;

            function createDebug(namespace) {
              var prevTime;

              function debug() {
                if (!debug.enabled) return;
                var self = debug;
                var curr = +new Date();
                var ms = curr - (prevTime || curr);
                self.diff = ms;
                self.prev = prevTime;
                self.curr = curr;
                prevTime = curr;
                var args = new Array(arguments.length);

                for (var i = 0; i < args.length; i++) {
                  args[i] = arguments[i];
                }

                args[0] = createDebug.coerce(args[0]);

                if ("string" !== typeof args[0]) {
                  args.unshift("%O");
                }

                var index = 0;
                args[0] = args[0].replace(/%([a-zA-Z%])/g, function(
                  match,
                  format
                ) {
                  if (match === "%%") return match;
                  index++;
                  var formatter = createDebug.formatters[format];

                  if ("function" === typeof formatter) {
                    var val = args[index];
                    match = formatter.call(self, val);
                    args.splice(index, 1);
                    index--;
                  }

                  return match;
                });
                createDebug.formatArgs.call(self, args);
                var logFn = self.log || createDebug.log;
                logFn.apply(self, args);
              }

              debug.namespace = namespace;
              debug.enabled = createDebug.enabled(namespace);
              debug.useColors = createDebug.useColors();
              debug.color = selectColor(namespace);
              debug.destroy = destroy;

              if ("function" === typeof createDebug.init) {
                createDebug.init(debug);
              }

              createDebug.instances.push(debug);
              return debug;
            }

            function destroy() {
              var index = createDebug.instances.indexOf(this);

              if (index !== -1) {
                createDebug.instances.splice(index, 1);
                return true;
              } else {
                return false;
              }
            }

            function enable(namespaces, options) {
              options = options || {};
              createDebug.save(namespaces);

              if (!options.append && options.append !== undefined) {
                createDebug.names = [];
                createDebug.skips = [];
              }

              createDebug.names = createDebug.names || [];
              createDebug.skips = createDebug.skips || [];
              var i, re, s;
              var split = (typeof namespaces === "string"
                ? namespaces
                : ""
              ).split(/[\s,]+/);
              var len = split.length;

              for (i = 0; i < len; i++) {
                if (!split[i]) continue;
                namespaces = split[i]
                  .replace(/[.?$^()+{}[\]|/\\]/g, "\\$&")
                  .replace(/\*/g, ".*?");

                if (namespaces[0] === "-") {
                  namespaces = namespaces.substr(1);
                  re = new RegExp("^" + namespaces + "$");
                  createDebug.skips.push(re);
                  s = re.toString();
                  createDebug.names = createDebug.names.filter(function(el) {
                    return el.toString() !== s;
                  });
                } else {
                  re = new RegExp("^" + namespaces + "$");
                  createDebug.names.push(re);
                  s = re.toString();
                  createDebug.skips = createDebug.skips.filter(function(el) {
                    return el.toString() !== s;
                  });
                }
              }

              for (i = 0; i < createDebug.instances.length; i++) {
                var instance = createDebug.instances[i];
                instance.enabled = createDebug.enabled(instance.namespace);
              }
            }

            function disable() {
              createDebug.names = [];
              createDebug.skips = [];
            }

            function enabled(name) {
              if (name[name.length - 1] === "*") {
                return createDebug.names.length > 0;
              }

              var i, len;

              for (i = 0, len = createDebug.skips.length; i < len; i++) {
                if (createDebug.skips[i].test(name)) {
                  return false;
                }
              }

              for (i = 0, len = createDebug.names.length; i < len; i++) {
                if (createDebug.names[i].test(name)) {
                  return true;
                }
              }

              return false;
            }

            function coerce(val) {
              if (val instanceof Error) return val.stack || val.message;
              return val;
            }

            createDebug.enable(createDebug.load());
            return createDebug;
          };
        },
        /* 316 */
        function(module, exports) {
          var s = 1000;
          var m = s * 60;
          var h = m * 60;
          var d = h * 24;
          var w = d * 7;
          var y = d * 365.25;

          module.exports = function(val, options) {
            options = options || {};
            var type = typeof val;

            if (type === "string" && val.length > 0) {
              return parse(val);
            } else if (type === "number" && isNaN(val) === false) {
              return options.long ? fmtLong(val) : fmtShort(val);
            }

            throw new Error(
              "val is not a non-empty string or a valid number. val=" +
                JSON.stringify(val)
            );
          };

          function parse(str) {
            str = String(str);

            if (str.length > 100) {
              return;
            }

            var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
              str
            );

            if (!match) {
              return;
            }

            var n = parseFloat(match[1]);
            var type = (match[2] || "ms").toLowerCase();

            switch (type) {
              case "years":
              case "year":
              case "yrs":
              case "yr":
              case "y":
                return n * y;

              case "weeks":
              case "week":
              case "w":
                return n * w;

              case "days":
              case "day":
              case "d":
                return n * d;

              case "hours":
              case "hour":
              case "hrs":
              case "hr":
              case "h":
                return n * h;

              case "minutes":
              case "minute":
              case "mins":
              case "min":
              case "m":
                return n * m;

              case "seconds":
              case "second":
              case "secs":
              case "sec":
              case "s":
                return n * s;

              case "milliseconds":
              case "millisecond":
              case "msecs":
              case "msec":
              case "ms":
                return n;

              default:
                return undefined;
            }
          }

          function fmtShort(ms) {
            var msAbs = Math.abs(ms);

            if (msAbs >= d) {
              return Math.round(ms / d) + "d";
            }

            if (msAbs >= h) {
              return Math.round(ms / h) + "h";
            }

            if (msAbs >= m) {
              return Math.round(ms / m) + "m";
            }

            if (msAbs >= s) {
              return Math.round(ms / s) + "s";
            }

            return ms + "ms";
          }

          function fmtLong(ms) {
            var msAbs = Math.abs(ms);

            if (msAbs >= d) {
              return plural(ms, msAbs, d, "day");
            }

            if (msAbs >= h) {
              return plural(ms, msAbs, h, "hour");
            }

            if (msAbs >= m) {
              return plural(ms, msAbs, m, "minute");
            }

            if (msAbs >= s) {
              return plural(ms, msAbs, s, "second");
            }

            return ms + " ms";
          }

          function plural(ms, msAbs, n, name) {
            var isPlural = msAbs >= n * 1.5;
            return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
          }
        },
        /* 317 */
        function(module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__(9),
            isArray = __webpack_require__(4),
            isObjectLike = __webpack_require__(6);

          var stringTag = "[object String]";

          function isString(value) {
            return (
              typeof value == "string" ||
              (!isArray(value) &&
                isObjectLike(value) &&
                baseGetTag(value) == stringTag)
            );
          }

          module.exports = isString;
        },
        /* 318 */
        function(module, exports, __webpack_require__) {
          var toNumber = __webpack_require__(319);

          var INFINITY = 1 / 0,
            MAX_INTEGER = 1.7976931348623157e308;

          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }

            value = toNumber(value);

            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }

            return value === value ? value : 0;
          }

          module.exports = toFinite;
        },
        /* 319 */
        function(module, exports, __webpack_require__) {
          var isObject = __webpack_require__(10),
            isSymbol = __webpack_require__(28);

          var NAN = 0 / 0;
          var reTrim = /^\s+|\s+$/g;
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
          var reIsBinary = /^0b[01]+$/i;
          var reIsOctal = /^0o[0-7]+$/i;
          var freeParseInt = parseInt;

          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }

            if (isSymbol(value)) {
              return NAN;
            }

            if (isObject(value)) {
              var other =
                typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }

            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }

            value = value.replace(reTrim, "");
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value)
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : reIsBadHex.test(value)
              ? NAN
              : +value;
          }

          module.exports = toNumber;
        },
        /* 320 */
        function(module, exports, __webpack_require__) {
          var baseValues = __webpack_require__(321),
            keys = __webpack_require__(18);

          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }

          module.exports = values;
        },
        /* 321 */
        function(module, exports, __webpack_require__) {
          var arrayMap = __webpack_require__(76);

          function baseValues(object, props) {
            return arrayMap(props, function(key) {
              return object[key];
            });
          }

          module.exports = baseValues;
        },
        /* 322 */
        function(module, exports) {
          var MAX_SAFE_INTEGER = 9007199254740991;
          var nativeFloor = Math.floor;

          function baseRepeat(string, n) {
            var result = "";

            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result;
            }

            do {
              if (n % 2) {
                result += string;
              }

              n = nativeFloor(n / 2);

              if (n) {
                string += string;
              }
            } while (n);

            return result;
          }

          module.exports = baseRepeat;
        },
        /* 323 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17),
            arrayMap = __webpack_require__(76),
            isArray = __webpack_require__(4),
            isSymbol = __webpack_require__(28);

          var INFINITY = 1 / 0;
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;

          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }

            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }

            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }

            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
          }

          module.exports = baseToString;
        },
        /* 324 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          var _binding = _interopRequireDefault(__webpack_require__(137));

          function _babelHelperSplitExportDeclaration() {
            const data = _interopRequireDefault(__webpack_require__(325));

            _babelHelperSplitExportDeclaration = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const renameVisitor = {
            ReferencedIdentifier({ node }, state) {
              if (node.name === state.oldName) {
                node.name = state.newName;
              }
            },

            Scope(path, state) {
              if (
                !path.scope.bindingIdentifierEquals(
                  state.oldName,
                  state.binding.identifier
                )
              ) {
                path.skip();
              }
            },

            "AssignmentExpression|Declaration"(path, state) {
              const ids = path.getOuterBindingIdentifiers();

              for (const name in ids) {
                if (name === state.oldName) ids[name].name = state.newName;
              }
            },
          };

          class Renamer {
            constructor(binding, oldName, newName) {
              this.newName = newName;
              this.oldName = oldName;
              this.binding = binding;
            }

            maybeConvertFromExportDeclaration(parentDeclar) {
              const maybeExportDeclar = parentDeclar.parentPath;

              if (!maybeExportDeclar.isExportDeclaration()) {
                return;
              }

              if (
                maybeExportDeclar.isExportDefaultDeclaration() &&
                !maybeExportDeclar.get("declaration").node.id
              ) {
                return;
              }

              (0, _babelHelperSplitExportDeclaration().default)(
                maybeExportDeclar
              );
            }

            maybeConvertFromClassFunctionDeclaration(path) {
              return;
              if (!path.isFunctionDeclaration() && !path.isClassDeclaration())
                return;
              if (this.binding.kind !== "hoisted") return;
              path.node.id = t().identifier(this.oldName);
              path.node._blockHoist = 3;
              path.replaceWith(
                t().variableDeclaration("let", [
                  t().variableDeclarator(
                    t().identifier(this.newName),
                    t().toExpression(path.node)
                  ),
                ])
              );
            }

            maybeConvertFromClassFunctionExpression(path) {
              return;
              if (!path.isFunctionExpression() && !path.isClassExpression())
                return;
              if (this.binding.kind !== "local") return;
              path.node.id = t().identifier(this.oldName);
              this.binding.scope.parent.push({
                id: t().identifier(this.newName),
              });
              path.replaceWith(
                t().assignmentExpression(
                  "=",
                  t().identifier(this.newName),
                  path.node
                )
              );
            }

            rename(block) {
              const { binding, oldName, newName } = this;
              const { scope, path } = binding;
              const parentDeclar = path.find(
                path =>
                  path.isDeclaration() ||
                  path.isFunctionExpression() ||
                  path.isClassExpression()
              );

              if (parentDeclar) {
                const bindingIds = parentDeclar.getOuterBindingIdentifiers();

                if (bindingIds[oldName] === binding.identifier) {
                  this.maybeConvertFromExportDeclaration(parentDeclar);
                }
              }

              scope.traverse(block || scope.block, renameVisitor, this);

              if (!block) {
                scope.removeOwnBinding(oldName);
                scope.bindings[newName] = binding;
                this.binding.identifier.name = newName;
              }

              if (binding.type === "hoisted") {
              }

              if (parentDeclar) {
                this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
                this.maybeConvertFromClassFunctionExpression(parentDeclar);
              }
            }
          }

          exports.default = Renamer;
        },
        /* 325 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = splitExportDeclaration;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function splitExportDeclaration(exportDeclaration) {
            if (!exportDeclaration.isExportDeclaration()) {
              throw new Error("Only export declarations can be splitted.");
            }

            const isDefault = exportDeclaration.isExportDefaultDeclaration();
            const declaration = exportDeclaration.get("declaration");
            const isClassDeclaration = declaration.isClassDeclaration();

            if (isDefault) {
              const standaloneDeclaration =
                declaration.isFunctionDeclaration() || isClassDeclaration;
              const scope = declaration.isScope()
                ? declaration.scope.parent
                : declaration.scope;
              let id = declaration.node.id;
              let needBindingRegistration = false;

              if (!id) {
                needBindingRegistration = true;
                id = scope.generateUidIdentifier("default");

                if (
                  standaloneDeclaration ||
                  declaration.isFunctionExpression() ||
                  declaration.isClassExpression()
                ) {
                  declaration.node.id = t().cloneNode(id);
                }
              }

              const updatedDeclaration = standaloneDeclaration
                ? declaration
                : t().variableDeclaration("var", [
                    t().variableDeclarator(t().cloneNode(id), declaration.node),
                  ]);
              const updatedExportDeclaration = t().exportNamedDeclaration(
                null,
                [
                  t().exportSpecifier(
                    t().cloneNode(id),
                    t().identifier("default")
                  ),
                ]
              );
              exportDeclaration.insertAfter(updatedExportDeclaration);
              exportDeclaration.replaceWith(updatedDeclaration);

              if (needBindingRegistration) {
                scope.registerBinding(
                  isClassDeclaration ? "let" : "var",
                  exportDeclaration
                );
              }

              return exportDeclaration;
            }

            if (exportDeclaration.get("specifiers").length > 0) {
              throw new Error(
                "It doesn't make sense to split exported specifiers."
              );
            }

            const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
            const specifiers = Object.keys(bindingIdentifiers).map(name => {
              return t().exportSpecifier(
                t().identifier(name),
                t().identifier(name)
              );
            });
            const aliasDeclar = t().exportNamedDeclaration(null, specifiers);
            exportDeclaration.insertAfter(aliasDeclar);
            exportDeclaration.replaceWith(declaration.node);
            return exportDeclaration;
          }
        },
        /* 326 */
        function(module, exports, __webpack_require__) {
          var baseRest = __webpack_require__(138),
            eq = __webpack_require__(24),
            isIterateeCall = __webpack_require__(77),
            keysIn = __webpack_require__(60);

          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var defaults = baseRest(function(object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }

            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;

              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];

                if (
                  value === undefined ||
                  (eq(value, objectProto[key]) &&
                    !hasOwnProperty.call(object, key))
                ) {
                  object[key] = source[key];
                }
              }
            }

            return object;
          });
          module.exports = defaults;
        },
        /* 327 */
        function(module, exports, __webpack_require__) {
          var apply = __webpack_require__(328);

          var nativeMax = Math.max;

          function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
              var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

              while (++index < length) {
                array[index] = args[start + index];
              }

              index = -1;
              var otherArgs = Array(start + 1);

              while (++index < start) {
                otherArgs[index] = args[index];
              }

              otherArgs[start] = transform(array);
              return apply(func, this, otherArgs);
            };
          }

          module.exports = overRest;
        },
        /* 328 */
        function(module, exports) {
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);

              case 1:
                return func.call(thisArg, args[0]);

              case 2:
                return func.call(thisArg, args[0], args[1]);

              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }

            return func.apply(thisArg, args);
          }

          module.exports = apply;
        },
        /* 329 */
        function(module, exports, __webpack_require__) {
          var baseSetToString = __webpack_require__(330),
            shortOut = __webpack_require__(332);

          var setToString = shortOut(baseSetToString);
          module.exports = setToString;
        },
        /* 330 */
        function(module, exports, __webpack_require__) {
          var constant = __webpack_require__(331),
            defineProperty = __webpack_require__(95),
            identity = __webpack_require__(41);

          var baseSetToString = !defineProperty
            ? identity
            : function(func, string) {
                return defineProperty(func, "toString", {
                  configurable: true,
                  enumerable: false,
                  value: constant(string),
                  writable: true,
                });
              };
          module.exports = baseSetToString;
        },
        /* 331 */
        function(module, exports) {
          function constant(value) {
            return function() {
              return value;
            };
          }

          module.exports = constant;
        },
        /* 332 */
        function(module, exports) {
          var HOT_COUNT = 800,
            HOT_SPAN = 16;
          var nativeNow = Date.now;

          function shortOut(func) {
            var count = 0,
              lastCalled = 0;
            return function() {
              var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;

              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }

              return func.apply(undefined, arguments);
            };
          }

          module.exports = shortOut;
        },
        /* 333 */
        function(module, exports, __webpack_require__) {
          "use strict";

          module.exports = __webpack_require__(334);
        },
        /* 334 */
        function(module) {
          module.exports = {
            builtin: {
              Array: false,
              ArrayBuffer: false,
              Atomics: false,
              BigInt: false,
              BigInt64Array: false,
              BigUint64Array: false,
              Boolean: false,
              constructor: false,
              DataView: false,
              Date: false,
              decodeURI: false,
              decodeURIComponent: false,
              encodeURI: false,
              encodeURIComponent: false,
              Error: false,
              escape: false,
              eval: false,
              EvalError: false,
              Float32Array: false,
              Float64Array: false,
              Function: false,
              hasOwnProperty: false,
              Infinity: false,
              Int16Array: false,
              Int32Array: false,
              Int8Array: false,
              isFinite: false,
              isNaN: false,
              isPrototypeOf: false,
              JSON: false,
              Map: false,
              Math: false,
              NaN: false,
              Number: false,
              Object: false,
              parseFloat: false,
              parseInt: false,
              Promise: false,
              propertyIsEnumerable: false,
              Proxy: false,
              RangeError: false,
              ReferenceError: false,
              Reflect: false,
              RegExp: false,
              Set: false,
              SharedArrayBuffer: false,
              String: false,
              Symbol: false,
              SyntaxError: false,
              toLocaleString: false,
              toString: false,
              TypeError: false,
              Uint16Array: false,
              Uint32Array: false,
              Uint8Array: false,
              Uint8ClampedArray: false,
              undefined: false,
              unescape: false,
              URIError: false,
              valueOf: false,
              WeakMap: false,
              WeakSet: false,
            },
            es5: {
              Array: false,
              Boolean: false,
              constructor: false,
              Date: false,
              decodeURI: false,
              decodeURIComponent: false,
              encodeURI: false,
              encodeURIComponent: false,
              Error: false,
              escape: false,
              eval: false,
              EvalError: false,
              Function: false,
              hasOwnProperty: false,
              Infinity: false,
              isFinite: false,
              isNaN: false,
              isPrototypeOf: false,
              JSON: false,
              Math: false,
              NaN: false,
              Number: false,
              Object: false,
              parseFloat: false,
              parseInt: false,
              propertyIsEnumerable: false,
              RangeError: false,
              ReferenceError: false,
              RegExp: false,
              String: false,
              SyntaxError: false,
              toLocaleString: false,
              toString: false,
              TypeError: false,
              undefined: false,
              unescape: false,
              URIError: false,
              valueOf: false,
            },
            es2015: {
              Array: false,
              ArrayBuffer: false,
              Boolean: false,
              constructor: false,
              DataView: false,
              Date: false,
              decodeURI: false,
              decodeURIComponent: false,
              encodeURI: false,
              encodeURIComponent: false,
              Error: false,
              escape: false,
              eval: false,
              EvalError: false,
              Float32Array: false,
              Float64Array: false,
              Function: false,
              hasOwnProperty: false,
              Infinity: false,
              Int16Array: false,
              Int32Array: false,
              Int8Array: false,
              isFinite: false,
              isNaN: false,
              isPrototypeOf: false,
              JSON: false,
              Map: false,
              Math: false,
              NaN: false,
              Number: false,
              Object: false,
              parseFloat: false,
              parseInt: false,
              Promise: false,
              propertyIsEnumerable: false,
              Proxy: false,
              RangeError: false,
              ReferenceError: false,
              Reflect: false,
              RegExp: false,
              Set: false,
              String: false,
              Symbol: false,
              SyntaxError: false,
              toLocaleString: false,
              toString: false,
              TypeError: false,
              Uint16Array: false,
              Uint32Array: false,
              Uint8Array: false,
              Uint8ClampedArray: false,
              undefined: false,
              unescape: false,
              URIError: false,
              valueOf: false,
              WeakMap: false,
              WeakSet: false,
            },
            es2017: {
              Array: false,
              ArrayBuffer: false,
              Atomics: false,
              Boolean: false,
              constructor: false,
              DataView: false,
              Date: false,
              decodeURI: false,
              decodeURIComponent: false,
              encodeURI: false,
              encodeURIComponent: false,
              Error: false,
              escape: false,
              eval: false,
              EvalError: false,
              Float32Array: false,
              Float64Array: false,
              Function: false,
              hasOwnProperty: false,
              Infinity: false,
              Int16Array: false,
              Int32Array: false,
              Int8Array: false,
              isFinite: false,
              isNaN: false,
              isPrototypeOf: false,
              JSON: false,
              Map: false,
              Math: false,
              NaN: false,
              Number: false,
              Object: false,
              parseFloat: false,
              parseInt: false,
              Promise: false,
              propertyIsEnumerable: false,
              Proxy: false,
              RangeError: false,
              ReferenceError: false,
              Reflect: false,
              RegExp: false,
              Set: false,
              SharedArrayBuffer: false,
              String: false,
              Symbol: false,
              SyntaxError: false,
              toLocaleString: false,
              toString: false,
              TypeError: false,
              Uint16Array: false,
              Uint32Array: false,
              Uint8Array: false,
              Uint8ClampedArray: false,
              undefined: false,
              unescape: false,
              URIError: false,
              valueOf: false,
              WeakMap: false,
              WeakSet: false,
            },
            browser: {
              AbortController: false,
              AbortSignal: false,
              addEventListener: false,
              alert: false,
              AnalyserNode: false,
              Animation: false,
              AnimationEffectReadOnly: false,
              AnimationEffectTiming: false,
              AnimationEffectTimingReadOnly: false,
              AnimationEvent: false,
              AnimationPlaybackEvent: false,
              AnimationTimeline: false,
              applicationCache: false,
              ApplicationCache: false,
              ApplicationCacheErrorEvent: false,
              atob: false,
              Attr: false,
              Audio: false,
              AudioBuffer: false,
              AudioBufferSourceNode: false,
              AudioContext: false,
              AudioDestinationNode: false,
              AudioListener: false,
              AudioNode: false,
              AudioParam: false,
              AudioProcessingEvent: false,
              AudioScheduledSourceNode: false,
              "AudioWorkletGlobalScope ": false,
              AudioWorkletNode: false,
              AudioWorkletProcessor: false,
              BarProp: false,
              BaseAudioContext: false,
              BatteryManager: false,
              BeforeUnloadEvent: false,
              BiquadFilterNode: false,
              Blob: false,
              BlobEvent: false,
              blur: false,
              BroadcastChannel: false,
              btoa: false,
              BudgetService: false,
              ByteLengthQueuingStrategy: false,
              Cache: false,
              caches: false,
              CacheStorage: false,
              cancelAnimationFrame: false,
              cancelIdleCallback: false,
              CanvasCaptureMediaStreamTrack: false,
              CanvasGradient: false,
              CanvasPattern: false,
              CanvasRenderingContext2D: false,
              ChannelMergerNode: false,
              ChannelSplitterNode: false,
              CharacterData: false,
              clearInterval: false,
              clearTimeout: false,
              clientInformation: false,
              ClipboardEvent: false,
              close: false,
              closed: false,
              CloseEvent: false,
              Comment: false,
              CompositionEvent: false,
              confirm: false,
              console: false,
              ConstantSourceNode: false,
              ConvolverNode: false,
              CountQueuingStrategy: false,
              createImageBitmap: false,
              Credential: false,
              CredentialsContainer: false,
              crypto: false,
              Crypto: false,
              CryptoKey: false,
              CSS: false,
              CSSConditionRule: false,
              CSSFontFaceRule: false,
              CSSGroupingRule: false,
              CSSImportRule: false,
              CSSKeyframeRule: false,
              CSSKeyframesRule: false,
              CSSMediaRule: false,
              CSSNamespaceRule: false,
              CSSPageRule: false,
              CSSRule: false,
              CSSRuleList: false,
              CSSStyleDeclaration: false,
              CSSStyleRule: false,
              CSSStyleSheet: false,
              CSSSupportsRule: false,
              CustomElementRegistry: false,
              customElements: false,
              CustomEvent: false,
              DataTransfer: false,
              DataTransferItem: false,
              DataTransferItemList: false,
              defaultstatus: false,
              defaultStatus: false,
              DelayNode: false,
              DeviceMotionEvent: false,
              DeviceOrientationEvent: false,
              devicePixelRatio: false,
              dispatchEvent: false,
              document: false,
              Document: false,
              DocumentFragment: false,
              DocumentType: false,
              DOMError: false,
              DOMException: false,
              DOMImplementation: false,
              DOMMatrix: false,
              DOMMatrixReadOnly: false,
              DOMParser: false,
              DOMPoint: false,
              DOMPointReadOnly: false,
              DOMQuad: false,
              DOMRect: false,
              DOMRectReadOnly: false,
              DOMStringList: false,
              DOMStringMap: false,
              DOMTokenList: false,
              DragEvent: false,
              DynamicsCompressorNode: false,
              Element: false,
              ErrorEvent: false,
              event: false,
              Event: false,
              EventSource: false,
              EventTarget: false,
              external: false,
              fetch: false,
              File: false,
              FileList: false,
              FileReader: false,
              find: false,
              focus: false,
              FocusEvent: false,
              FontFace: false,
              FontFaceSetLoadEvent: false,
              FormData: false,
              frameElement: false,
              frames: false,
              GainNode: false,
              Gamepad: false,
              GamepadButton: false,
              GamepadEvent: false,
              getComputedStyle: false,
              getSelection: false,
              HashChangeEvent: false,
              Headers: false,
              history: false,
              History: false,
              HTMLAllCollection: false,
              HTMLAnchorElement: false,
              HTMLAreaElement: false,
              HTMLAudioElement: false,
              HTMLBaseElement: false,
              HTMLBodyElement: false,
              HTMLBRElement: false,
              HTMLButtonElement: false,
              HTMLCanvasElement: false,
              HTMLCollection: false,
              HTMLContentElement: false,
              HTMLDataElement: false,
              HTMLDataListElement: false,
              HTMLDetailsElement: false,
              HTMLDialogElement: false,
              HTMLDirectoryElement: false,
              HTMLDivElement: false,
              HTMLDListElement: false,
              HTMLDocument: false,
              HTMLElement: false,
              HTMLEmbedElement: false,
              HTMLFieldSetElement: false,
              HTMLFontElement: false,
              HTMLFormControlsCollection: false,
              HTMLFormElement: false,
              HTMLFrameElement: false,
              HTMLFrameSetElement: false,
              HTMLHeadElement: false,
              HTMLHeadingElement: false,
              HTMLHRElement: false,
              HTMLHtmlElement: false,
              HTMLIFrameElement: false,
              HTMLImageElement: false,
              HTMLInputElement: false,
              HTMLLabelElement: false,
              HTMLLegendElement: false,
              HTMLLIElement: false,
              HTMLLinkElement: false,
              HTMLMapElement: false,
              HTMLMarqueeElement: false,
              HTMLMediaElement: false,
              HTMLMenuElement: false,
              HTMLMetaElement: false,
              HTMLMeterElement: false,
              HTMLModElement: false,
              HTMLObjectElement: false,
              HTMLOListElement: false,
              HTMLOptGroupElement: false,
              HTMLOptionElement: false,
              HTMLOptionsCollection: false,
              HTMLOutputElement: false,
              HTMLParagraphElement: false,
              HTMLParamElement: false,
              HTMLPictureElement: false,
              HTMLPreElement: false,
              HTMLProgressElement: false,
              HTMLQuoteElement: false,
              HTMLScriptElement: false,
              HTMLSelectElement: false,
              HTMLShadowElement: false,
              HTMLSlotElement: false,
              HTMLSourceElement: false,
              HTMLSpanElement: false,
              HTMLStyleElement: false,
              HTMLTableCaptionElement: false,
              HTMLTableCellElement: false,
              HTMLTableColElement: false,
              HTMLTableElement: false,
              HTMLTableRowElement: false,
              HTMLTableSectionElement: false,
              HTMLTemplateElement: false,
              HTMLTextAreaElement: false,
              HTMLTimeElement: false,
              HTMLTitleElement: false,
              HTMLTrackElement: false,
              HTMLUListElement: false,
              HTMLUnknownElement: false,
              HTMLVideoElement: false,
              IDBCursor: false,
              IDBCursorWithValue: false,
              IDBDatabase: false,
              IDBFactory: false,
              IDBIndex: false,
              IDBKeyRange: false,
              IDBObjectStore: false,
              IDBOpenDBRequest: false,
              IDBRequest: false,
              IDBTransaction: false,
              IDBVersionChangeEvent: false,
              IdleDeadline: false,
              IIRFilterNode: false,
              Image: false,
              ImageBitmap: false,
              ImageBitmapRenderingContext: false,
              ImageCapture: false,
              ImageData: false,
              indexedDB: false,
              innerHeight: false,
              innerWidth: false,
              InputEvent: false,
              IntersectionObserver: false,
              IntersectionObserverEntry: false,
              Intl: false,
              isSecureContext: false,
              KeyboardEvent: false,
              KeyframeEffect: false,
              KeyframeEffectReadOnly: false,
              length: false,
              localStorage: false,
              location: false,
              Location: false,
              locationbar: false,
              matchMedia: false,
              MediaDeviceInfo: false,
              MediaDevices: false,
              MediaElementAudioSourceNode: false,
              MediaEncryptedEvent: false,
              MediaError: false,
              MediaKeyMessageEvent: false,
              MediaKeySession: false,
              MediaKeyStatusMap: false,
              MediaKeySystemAccess: false,
              MediaList: false,
              MediaQueryList: false,
              MediaQueryListEvent: false,
              MediaRecorder: false,
              MediaSettingsRange: false,
              MediaSource: false,
              MediaStream: false,
              MediaStreamAudioDestinationNode: false,
              MediaStreamAudioSourceNode: false,
              MediaStreamEvent: false,
              MediaStreamTrack: false,
              MediaStreamTrackEvent: false,
              menubar: false,
              MessageChannel: false,
              MessageEvent: false,
              MessagePort: false,
              MIDIAccess: false,
              MIDIConnectionEvent: false,
              MIDIInput: false,
              MIDIInputMap: false,
              MIDIMessageEvent: false,
              MIDIOutput: false,
              MIDIOutputMap: false,
              MIDIPort: false,
              MimeType: false,
              MimeTypeArray: false,
              MouseEvent: false,
              moveBy: false,
              moveTo: false,
              MutationEvent: false,
              MutationObserver: false,
              MutationRecord: false,
              name: false,
              NamedNodeMap: false,
              NavigationPreloadManager: false,
              navigator: false,
              Navigator: false,
              NetworkInformation: false,
              Node: false,
              NodeFilter: false,
              NodeIterator: false,
              NodeList: false,
              Notification: false,
              OfflineAudioCompletionEvent: false,
              OfflineAudioContext: false,
              offscreenBuffering: false,
              OffscreenCanvas: true,
              onabort: true,
              onafterprint: true,
              onanimationend: true,
              onanimationiteration: true,
              onanimationstart: true,
              onappinstalled: true,
              onauxclick: true,
              onbeforeinstallprompt: true,
              onbeforeprint: true,
              onbeforeunload: true,
              onblur: true,
              oncancel: true,
              oncanplay: true,
              oncanplaythrough: true,
              onchange: true,
              onclick: true,
              onclose: true,
              oncontextmenu: true,
              oncuechange: true,
              ondblclick: true,
              ondevicemotion: true,
              ondeviceorientation: true,
              ondeviceorientationabsolute: true,
              ondrag: true,
              ondragend: true,
              ondragenter: true,
              ondragleave: true,
              ondragover: true,
              ondragstart: true,
              ondrop: true,
              ondurationchange: true,
              onemptied: true,
              onended: true,
              onerror: true,
              onfocus: true,
              ongotpointercapture: true,
              onhashchange: true,
              oninput: true,
              oninvalid: true,
              onkeydown: true,
              onkeypress: true,
              onkeyup: true,
              onlanguagechange: true,
              onload: true,
              onloadeddata: true,
              onloadedmetadata: true,
              onloadstart: true,
              onlostpointercapture: true,
              onmessage: true,
              onmessageerror: true,
              onmousedown: true,
              onmouseenter: true,
              onmouseleave: true,
              onmousemove: true,
              onmouseout: true,
              onmouseover: true,
              onmouseup: true,
              onmousewheel: true,
              onoffline: true,
              ononline: true,
              onpagehide: true,
              onpageshow: true,
              onpause: true,
              onplay: true,
              onplaying: true,
              onpointercancel: true,
              onpointerdown: true,
              onpointerenter: true,
              onpointerleave: true,
              onpointermove: true,
              onpointerout: true,
              onpointerover: true,
              onpointerup: true,
              onpopstate: true,
              onprogress: true,
              onratechange: true,
              onrejectionhandled: true,
              onreset: true,
              onresize: true,
              onscroll: true,
              onsearch: true,
              onseeked: true,
              onseeking: true,
              onselect: true,
              onstalled: true,
              onstorage: true,
              onsubmit: true,
              onsuspend: true,
              ontimeupdate: true,
              ontoggle: true,
              ontransitionend: true,
              onunhandledrejection: true,
              onunload: true,
              onvolumechange: true,
              onwaiting: true,
              onwheel: true,
              open: false,
              openDatabase: false,
              opener: false,
              Option: false,
              origin: false,
              OscillatorNode: false,
              outerHeight: false,
              outerWidth: false,
              PageTransitionEvent: false,
              pageXOffset: false,
              pageYOffset: false,
              PannerNode: false,
              parent: false,
              Path2D: false,
              PaymentAddress: false,
              PaymentRequest: false,
              PaymentRequestUpdateEvent: false,
              PaymentResponse: false,
              performance: false,
              Performance: false,
              PerformanceEntry: false,
              PerformanceLongTaskTiming: false,
              PerformanceMark: false,
              PerformanceMeasure: false,
              PerformanceNavigation: false,
              PerformanceNavigationTiming: false,
              PerformanceObserver: false,
              PerformanceObserverEntryList: false,
              PerformancePaintTiming: false,
              PerformanceResourceTiming: false,
              PerformanceTiming: false,
              PeriodicWave: false,
              Permissions: false,
              PermissionStatus: false,
              personalbar: false,
              PhotoCapabilities: false,
              Plugin: false,
              PluginArray: false,
              PointerEvent: false,
              PopStateEvent: false,
              postMessage: false,
              Presentation: false,
              PresentationAvailability: false,
              PresentationConnection: false,
              PresentationConnectionAvailableEvent: false,
              PresentationConnectionCloseEvent: false,
              PresentationConnectionList: false,
              PresentationReceiver: false,
              PresentationRequest: false,
              print: false,
              ProcessingInstruction: false,
              ProgressEvent: false,
              PromiseRejectionEvent: false,
              prompt: false,
              PushManager: false,
              PushSubscription: false,
              PushSubscriptionOptions: false,
              queueMicrotask: false,
              RadioNodeList: false,
              Range: false,
              ReadableStream: false,
              registerProcessor: false,
              RemotePlayback: false,
              removeEventListener: false,
              Request: false,
              requestAnimationFrame: false,
              requestIdleCallback: false,
              resizeBy: false,
              ResizeObserver: false,
              ResizeObserverEntry: false,
              resizeTo: false,
              Response: false,
              RTCCertificate: false,
              RTCDataChannel: false,
              RTCDataChannelEvent: false,
              RTCDtlsTransport: false,
              RTCIceCandidate: false,
              RTCIceGatherer: false,
              RTCIceTransport: false,
              RTCPeerConnection: false,
              RTCPeerConnectionIceEvent: false,
              RTCRtpContributingSource: false,
              RTCRtpReceiver: false,
              RTCRtpSender: false,
              RTCSctpTransport: false,
              RTCSessionDescription: false,
              RTCStatsReport: false,
              RTCTrackEvent: false,
              screen: false,
              Screen: false,
              screenLeft: false,
              ScreenOrientation: false,
              screenTop: false,
              screenX: false,
              screenY: false,
              ScriptProcessorNode: false,
              scroll: false,
              scrollbars: false,
              scrollBy: false,
              scrollTo: false,
              scrollX: false,
              scrollY: false,
              SecurityPolicyViolationEvent: false,
              Selection: false,
              self: false,
              ServiceWorker: false,
              ServiceWorkerContainer: false,
              ServiceWorkerRegistration: false,
              sessionStorage: false,
              setInterval: false,
              setTimeout: false,
              ShadowRoot: false,
              SharedWorker: false,
              SourceBuffer: false,
              SourceBufferList: false,
              speechSynthesis: false,
              SpeechSynthesisEvent: false,
              SpeechSynthesisUtterance: false,
              StaticRange: false,
              status: false,
              statusbar: false,
              StereoPannerNode: false,
              stop: false,
              Storage: false,
              StorageEvent: false,
              StorageManager: false,
              styleMedia: false,
              StyleSheet: false,
              StyleSheetList: false,
              SubtleCrypto: false,
              SVGAElement: false,
              SVGAngle: false,
              SVGAnimatedAngle: false,
              SVGAnimatedBoolean: false,
              SVGAnimatedEnumeration: false,
              SVGAnimatedInteger: false,
              SVGAnimatedLength: false,
              SVGAnimatedLengthList: false,
              SVGAnimatedNumber: false,
              SVGAnimatedNumberList: false,
              SVGAnimatedPreserveAspectRatio: false,
              SVGAnimatedRect: false,
              SVGAnimatedString: false,
              SVGAnimatedTransformList: false,
              SVGAnimateElement: false,
              SVGAnimateMotionElement: false,
              SVGAnimateTransformElement: false,
              SVGAnimationElement: false,
              SVGCircleElement: false,
              SVGClipPathElement: false,
              SVGComponentTransferFunctionElement: false,
              SVGDefsElement: false,
              SVGDescElement: false,
              SVGDiscardElement: false,
              SVGElement: false,
              SVGEllipseElement: false,
              SVGFEBlendElement: false,
              SVGFEColorMatrixElement: false,
              SVGFEComponentTransferElement: false,
              SVGFECompositeElement: false,
              SVGFEConvolveMatrixElement: false,
              SVGFEDiffuseLightingElement: false,
              SVGFEDisplacementMapElement: false,
              SVGFEDistantLightElement: false,
              SVGFEDropShadowElement: false,
              SVGFEFloodElement: false,
              SVGFEFuncAElement: false,
              SVGFEFuncBElement: false,
              SVGFEFuncGElement: false,
              SVGFEFuncRElement: false,
              SVGFEGaussianBlurElement: false,
              SVGFEImageElement: false,
              SVGFEMergeElement: false,
              SVGFEMergeNodeElement: false,
              SVGFEMorphologyElement: false,
              SVGFEOffsetElement: false,
              SVGFEPointLightElement: false,
              SVGFESpecularLightingElement: false,
              SVGFESpotLightElement: false,
              SVGFETileElement: false,
              SVGFETurbulenceElement: false,
              SVGFilterElement: false,
              SVGForeignObjectElement: false,
              SVGGElement: false,
              SVGGeometryElement: false,
              SVGGradientElement: false,
              SVGGraphicsElement: false,
              SVGImageElement: false,
              SVGLength: false,
              SVGLengthList: false,
              SVGLinearGradientElement: false,
              SVGLineElement: false,
              SVGMarkerElement: false,
              SVGMaskElement: false,
              SVGMatrix: false,
              SVGMetadataElement: false,
              SVGMPathElement: false,
              SVGNumber: false,
              SVGNumberList: false,
              SVGPathElement: false,
              SVGPatternElement: false,
              SVGPoint: false,
              SVGPointList: false,
              SVGPolygonElement: false,
              SVGPolylineElement: false,
              SVGPreserveAspectRatio: false,
              SVGRadialGradientElement: false,
              SVGRect: false,
              SVGRectElement: false,
              SVGScriptElement: false,
              SVGSetElement: false,
              SVGStopElement: false,
              SVGStringList: false,
              SVGStyleElement: false,
              SVGSVGElement: false,
              SVGSwitchElement: false,
              SVGSymbolElement: false,
              SVGTextContentElement: false,
              SVGTextElement: false,
              SVGTextPathElement: false,
              SVGTextPositioningElement: false,
              SVGTitleElement: false,
              SVGTransform: false,
              SVGTransformList: false,
              SVGTSpanElement: false,
              SVGUnitTypes: false,
              SVGUseElement: false,
              SVGViewElement: false,
              TaskAttributionTiming: false,
              Text: false,
              TextDecoder: false,
              TextEncoder: false,
              TextEvent: false,
              TextMetrics: false,
              TextTrack: false,
              TextTrackCue: false,
              TextTrackCueList: false,
              TextTrackList: false,
              TimeRanges: false,
              toolbar: false,
              top: false,
              Touch: false,
              TouchEvent: false,
              TouchList: false,
              TrackEvent: false,
              TransitionEvent: false,
              TreeWalker: false,
              UIEvent: false,
              URL: false,
              URLSearchParams: false,
              ValidityState: false,
              visualViewport: false,
              VisualViewport: false,
              VTTCue: false,
              WaveShaperNode: false,
              WebAssembly: false,
              WebGL2RenderingContext: false,
              WebGLActiveInfo: false,
              WebGLBuffer: false,
              WebGLContextEvent: false,
              WebGLFramebuffer: false,
              WebGLProgram: false,
              WebGLQuery: false,
              WebGLRenderbuffer: false,
              WebGLRenderingContext: false,
              WebGLSampler: false,
              WebGLShader: false,
              WebGLShaderPrecisionFormat: false,
              WebGLSync: false,
              WebGLTexture: false,
              WebGLTransformFeedback: false,
              WebGLUniformLocation: false,
              WebGLVertexArrayObject: false,
              WebSocket: false,
              WheelEvent: false,
              window: false,
              Window: false,
              Worker: false,
              WritableStream: false,
              XMLDocument: false,
              XMLHttpRequest: false,
              XMLHttpRequestEventTarget: false,
              XMLHttpRequestUpload: false,
              XMLSerializer: false,
              XPathEvaluator: false,
              XPathExpression: false,
              XPathResult: false,
              XSLTProcessor: false,
            },
            worker: {
              applicationCache: false,
              atob: false,
              Blob: false,
              BroadcastChannel: false,
              btoa: false,
              Cache: false,
              caches: false,
              clearInterval: false,
              clearTimeout: false,
              close: true,
              console: false,
              fetch: false,
              FileReaderSync: false,
              FormData: false,
              Headers: false,
              IDBCursor: false,
              IDBCursorWithValue: false,
              IDBDatabase: false,
              IDBFactory: false,
              IDBIndex: false,
              IDBKeyRange: false,
              IDBObjectStore: false,
              IDBOpenDBRequest: false,
              IDBRequest: false,
              IDBTransaction: false,
              IDBVersionChangeEvent: false,
              ImageData: false,
              importScripts: true,
              indexedDB: false,
              location: false,
              MessageChannel: false,
              MessagePort: false,
              name: false,
              navigator: false,
              Notification: false,
              onclose: true,
              onconnect: true,
              onerror: true,
              onlanguagechange: true,
              onmessage: true,
              onoffline: true,
              ononline: true,
              onrejectionhandled: true,
              onunhandledrejection: true,
              performance: false,
              Performance: false,
              PerformanceEntry: false,
              PerformanceMark: false,
              PerformanceMeasure: false,
              PerformanceNavigation: false,
              PerformanceResourceTiming: false,
              PerformanceTiming: false,
              postMessage: true,
              Promise: false,
              queueMicrotask: false,
              Request: false,
              Response: false,
              self: true,
              ServiceWorkerRegistration: false,
              setInterval: false,
              setTimeout: false,
              TextDecoder: false,
              TextEncoder: false,
              URL: false,
              URLSearchParams: false,
              WebSocket: false,
              Worker: false,
              WorkerGlobalScope: false,
              XMLHttpRequest: false,
            },
            node: {
              __dirname: false,
              __filename: false,
              Buffer: false,
              clearImmediate: false,
              clearInterval: false,
              clearTimeout: false,
              console: false,
              exports: true,
              global: false,
              Intl: false,
              module: false,
              process: false,
              queueMicrotask: false,
              require: false,
              setImmediate: false,
              setInterval: false,
              setTimeout: false,
              TextDecoder: false,
              TextEncoder: false,
              URL: false,
              URLSearchParams: false,
            },
            commonjs: {
              exports: true,
              global: false,
              module: false,
              require: false,
            },
            amd: { define: false, require: false },
            mocha: {
              after: false,
              afterEach: false,
              before: false,
              beforeEach: false,
              context: false,
              describe: false,
              it: false,
              mocha: false,
              run: false,
              setup: false,
              specify: false,
              suite: false,
              suiteSetup: false,
              suiteTeardown: false,
              teardown: false,
              test: false,
              xcontext: false,
              xdescribe: false,
              xit: false,
              xspecify: false,
            },
            jasmine: {
              afterAll: false,
              afterEach: false,
              beforeAll: false,
              beforeEach: false,
              describe: false,
              expect: false,
              fail: false,
              fdescribe: false,
              fit: false,
              it: false,
              jasmine: false,
              pending: false,
              runs: false,
              spyOn: false,
              spyOnProperty: false,
              waits: false,
              waitsFor: false,
              xdescribe: false,
              xit: false,
            },
            jest: {
              afterAll: false,
              afterEach: false,
              beforeAll: false,
              beforeEach: false,
              describe: false,
              expect: false,
              fdescribe: false,
              fit: false,
              it: false,
              jest: false,
              pit: false,
              require: false,
              test: false,
              xdescribe: false,
              xit: false,
              xtest: false,
            },
            qunit: {
              asyncTest: false,
              deepEqual: false,
              equal: false,
              expect: false,
              module: false,
              notDeepEqual: false,
              notEqual: false,
              notOk: false,
              notPropEqual: false,
              notStrictEqual: false,
              ok: false,
              propEqual: false,
              QUnit: false,
              raises: false,
              start: false,
              stop: false,
              strictEqual: false,
              test: false,
              throws: false,
            },
            phantomjs: {
              console: true,
              exports: true,
              phantom: true,
              require: true,
              WebPage: true,
            },
            couch: {
              emit: false,
              exports: false,
              getRow: false,
              log: false,
              module: false,
              provides: false,
              require: false,
              respond: false,
              send: false,
              start: false,
              sum: false,
            },
            rhino: {
              defineClass: false,
              deserialize: false,
              gc: false,
              help: false,
              importClass: false,
              importPackage: false,
              java: false,
              load: false,
              loadClass: false,
              Packages: false,
              print: false,
              quit: false,
              readFile: false,
              readUrl: false,
              runCommand: false,
              seal: false,
              serialize: false,
              spawn: false,
              sync: false,
              toint32: false,
              version: false,
            },
            nashorn: {
              __DIR__: false,
              __FILE__: false,
              __LINE__: false,
              com: false,
              edu: false,
              exit: false,
              java: false,
              Java: false,
              javafx: false,
              JavaImporter: false,
              javax: false,
              JSAdapter: false,
              load: false,
              loadWithNewGlobal: false,
              org: false,
              Packages: false,
              print: false,
              quit: false,
            },
            wsh: {
              ActiveXObject: true,
              Enumerator: true,
              GetObject: true,
              ScriptEngine: true,
              ScriptEngineBuildVersion: true,
              ScriptEngineMajorVersion: true,
              ScriptEngineMinorVersion: true,
              VBArray: true,
              WScript: true,
              WSH: true,
              XDomainRequest: true,
            },
            jquery: { $: false, jQuery: false },
            yui: {
              YAHOO: false,
              YAHOO_config: false,
              YUI: false,
              YUI_config: false,
            },
            shelljs: {
              cat: false,
              cd: false,
              chmod: false,
              config: false,
              cp: false,
              dirs: false,
              echo: false,
              env: false,
              error: false,
              exec: false,
              exit: false,
              find: false,
              grep: false,
              ln: false,
              ls: false,
              mkdir: false,
              mv: false,
              popd: false,
              pushd: false,
              pwd: false,
              rm: false,
              sed: false,
              set: false,
              target: false,
              tempdir: false,
              test: false,
              touch: false,
              which: false,
            },
            prototypejs: {
              $: false,
              $$: false,
              $A: false,
              $break: false,
              $continue: false,
              $F: false,
              $H: false,
              $R: false,
              $w: false,
              Abstract: false,
              Ajax: false,
              Autocompleter: false,
              Builder: false,
              Class: false,
              Control: false,
              Draggable: false,
              Draggables: false,
              Droppables: false,
              Effect: false,
              Element: false,
              Enumerable: false,
              Event: false,
              Field: false,
              Form: false,
              Hash: false,
              Insertion: false,
              ObjectRange: false,
              PeriodicalExecuter: false,
              Position: false,
              Prototype: false,
              Scriptaculous: false,
              Selector: false,
              Sortable: false,
              SortableObserver: false,
              Sound: false,
              Template: false,
              Toggle: false,
              Try: false,
            },
            meteor: {
              _: false,
              $: false,
              Accounts: false,
              AccountsClient: false,
              AccountsCommon: false,
              AccountsServer: false,
              App: false,
              Assets: false,
              Blaze: false,
              check: false,
              Cordova: false,
              DDP: false,
              DDPRateLimiter: false,
              DDPServer: false,
              Deps: false,
              EJSON: false,
              Email: false,
              HTTP: false,
              Log: false,
              Match: false,
              Meteor: false,
              Mongo: false,
              MongoInternals: false,
              Npm: false,
              Package: false,
              Plugin: false,
              process: false,
              Random: false,
              ReactiveDict: false,
              ReactiveVar: false,
              Router: false,
              ServiceConfiguration: false,
              Session: false,
              share: false,
              Spacebars: false,
              Template: false,
              Tinytest: false,
              Tracker: false,
              UI: false,
              Utils: false,
              WebApp: false,
              WebAppInternals: false,
            },
            mongo: {
              _isWindows: false,
              _rand: false,
              BulkWriteResult: false,
              cat: false,
              cd: false,
              connect: false,
              db: false,
              getHostName: false,
              getMemInfo: false,
              hostname: false,
              ISODate: false,
              listFiles: false,
              load: false,
              ls: false,
              md5sumFile: false,
              mkdir: false,
              Mongo: false,
              NumberInt: false,
              NumberLong: false,
              ObjectId: false,
              PlanCache: false,
              print: false,
              printjson: false,
              pwd: false,
              quit: false,
              removeFile: false,
              rs: false,
              sh: false,
              UUID: false,
              version: false,
              WriteResult: false,
            },
            applescript: {
              $: false,
              Application: false,
              Automation: false,
              console: false,
              delay: false,
              Library: false,
              ObjC: false,
              ObjectSpecifier: false,
              Path: false,
              Progress: false,
              Ref: false,
            },
            serviceworker: {
              Cache: false,
              caches: false,
              CacheStorage: false,
              Client: false,
              clients: false,
              Clients: false,
              ExtendableEvent: false,
              ExtendableMessageEvent: false,
              FetchEvent: false,
              importScripts: false,
              registration: false,
              self: false,
              ServiceWorker: false,
              ServiceWorkerContainer: false,
              ServiceWorkerGlobalScope: false,
              ServiceWorkerMessageEvent: false,
              ServiceWorkerRegistration: false,
              skipWaiting: false,
              WindowClient: false,
            },
            atomtest: {
              advanceClock: false,
              fakeClearInterval: false,
              fakeClearTimeout: false,
              fakeSetInterval: false,
              fakeSetTimeout: false,
              resetTimeouts: false,
              waitsForPromise: false,
            },
            embertest: {
              andThen: false,
              click: false,
              currentPath: false,
              currentRouteName: false,
              currentURL: false,
              fillIn: false,
              find: false,
              findAll: false,
              findWithAssert: false,
              keyEvent: false,
              pauseTest: false,
              resumeTest: false,
              triggerEvent: false,
              visit: false,
              wait: false,
            },
            protractor: {
              $: false,
              $$: false,
              browser: false,
              by: false,
              By: false,
              DartObject: false,
              element: false,
              protractor: false,
            },
            "shared-node-browser": {
              clearInterval: false,
              clearTimeout: false,
              console: false,
              setInterval: false,
              setTimeout: false,
              URL: false,
              URLSearchParams: false,
            },
            webextensions: { browser: false, chrome: false, opr: false },
            greasemonkey: {
              GM: false,
              GM_addStyle: false,
              GM_deleteValue: false,
              GM_getResourceText: false,
              GM_getResourceURL: false,
              GM_getValue: false,
              GM_info: false,
              GM_listValues: false,
              GM_log: false,
              GM_openInTab: false,
              GM_registerMenuCommand: false,
              GM_setClipboard: false,
              GM_setValue: false,
              GM_xmlhttpRequest: false,
              unsafeWindow: false,
            },
            devtools: {
              $: false,
              $_: false,
              $$: false,
              $0: false,
              $1: false,
              $2: false,
              $3: false,
              $4: false,
              $x: false,
              chrome: false,
              clear: false,
              copy: false,
              debug: false,
              dir: false,
              dirxml: false,
              getEventListeners: false,
              inspect: false,
              keys: false,
              monitor: false,
              monitorEvents: false,
              profile: false,
              profileEnd: false,
              queryObjects: false,
              table: false,
              undebug: false,
              unmonitor: false,
              unmonitorEvents: false,
              values: false,
            },
          };
        },
        /* 335 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _sourceMap() {
            const data = _interopRequireDefault(__webpack_require__(139));

            _sourceMap = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          class SourceMap {
            constructor(opts, code) {
              this._cachedMap = null;
              this._code = code;
              this._opts = opts;
              this._rawMappings = [];
            }

            get() {
              if (!this._cachedMap) {
                const map = (this._cachedMap = new (_sourceMap()).default.SourceMapGenerator(
                  {
                    sourceRoot: this._opts.sourceRoot,
                  }
                ));
                const code = this._code;

                if (typeof code === "string") {
                  map.setSourceContent(this._opts.sourceFileName, code);
                } else if (typeof code === "object") {
                  Object.keys(code).forEach(sourceFileName => {
                    map.setSourceContent(sourceFileName, code[sourceFileName]);
                  });
                }

                this._rawMappings.forEach(map.addMapping, map);
              }

              return this._cachedMap.toJSON();
            }

            getRawMappings() {
              return this._rawMappings.slice();
            }

            mark(
              generatedLine,
              generatedColumn,
              line,
              column,
              identifierName,
              filename,
              force
            ) {
              if (this._lastGenLine !== generatedLine && line === null) return;

              if (
                !force &&
                this._lastGenLine === generatedLine &&
                this._lastSourceLine === line &&
                this._lastSourceColumn === column
              ) {
                return;
              }

              this._cachedMap = null;
              this._lastGenLine = generatedLine;
              this._lastSourceLine = line;
              this._lastSourceColumn = column;

              this._rawMappings.push({
                name: identifierName || undefined,
                generated: {
                  line: generatedLine,
                  column: generatedColumn,
                },
                source:
                  line == null
                    ? undefined
                    : filename || this._opts.sourceFileName,
                original:
                  line == null
                    ? undefined
                    : {
                        line: line,
                        column: column,
                      },
              });
            }
          }

          exports.default = SourceMap;
        },
        /* 336 */
        function(module, exports) {
          var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(
            ""
          );

          exports.encode = function(number) {
            if (0 <= number && number < intToCharMap.length) {
              return intToCharMap[number];
            }

            throw new TypeError("Must be between 0 and 63: " + number);
          };

          exports.decode = function(charCode) {
            var bigA = 65;
            var bigZ = 90;
            var littleA = 97;
            var littleZ = 122;
            var zero = 48;
            var nine = 57;
            var plus = 43;
            var slash = 47;
            var littleOffset = 26;
            var numberOffset = 52;

            if (bigA <= charCode && charCode <= bigZ) {
              return charCode - bigA;
            }

            if (littleA <= charCode && charCode <= littleZ) {
              return charCode - littleA + littleOffset;
            }

            if (zero <= charCode && charCode <= nine) {
              return charCode - zero + numberOffset;
            }

            if (charCode == plus) {
              return 62;
            }

            if (charCode == slash) {
              return 63;
            }

            return -1;
          };
        },
        /* 337 */
        function(module, exports, __webpack_require__) {
          var util = __webpack_require__(29);

          function generatedPositionAfter(mappingA, mappingB) {
            var lineA = mappingA.generatedLine;
            var lineB = mappingB.generatedLine;
            var columnA = mappingA.generatedColumn;
            var columnB = mappingB.generatedColumn;
            return (
              lineB > lineA ||
              (lineB == lineA && columnB >= columnA) ||
              util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0
            );
          }

          function MappingList() {
            this._array = [];
            this._sorted = true;
            this._last = {
              generatedLine: -1,
              generatedColumn: 0,
            };
          }

          MappingList.prototype.unsortedForEach = function MappingList_forEach(
            aCallback,
            aThisArg
          ) {
            this._array.forEach(aCallback, aThisArg);
          };

          MappingList.prototype.add = function MappingList_add(aMapping) {
            if (generatedPositionAfter(this._last, aMapping)) {
              this._last = aMapping;

              this._array.push(aMapping);
            } else {
              this._sorted = false;

              this._array.push(aMapping);
            }
          };

          MappingList.prototype.toArray = function MappingList_toArray() {
            if (!this._sorted) {
              this._array.sort(util.compareByGeneratedPositionsInflated);

              this._sorted = true;
            }

            return this._array;
          };

          exports.MappingList = MappingList;
        },
        /* 338 */
        function(module, exports, __webpack_require__) {
          var util = __webpack_require__(29);

          var binarySearch = __webpack_require__(339);

          var ArraySet = __webpack_require__(142).ArraySet;

          var base64VLQ = __webpack_require__(141);

          var quickSort = __webpack_require__(340).quickSort;

          function SourceMapConsumer(aSourceMap, aSourceMapURL) {
            var sourceMap = aSourceMap;

            if (typeof aSourceMap === "string") {
              sourceMap = util.parseSourceMapInput(aSourceMap);
            }

            return sourceMap.sections != null
              ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
              : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
          }

          SourceMapConsumer.fromSourceMap = function(
            aSourceMap,
            aSourceMapURL
          ) {
            return BasicSourceMapConsumer.fromSourceMap(
              aSourceMap,
              aSourceMapURL
            );
          };

          SourceMapConsumer.prototype._version = 3;
          SourceMapConsumer.prototype.__generatedMappings = null;
          Object.defineProperty(
            SourceMapConsumer.prototype,
            "_generatedMappings",
            {
              configurable: true,
              enumerable: true,
              get: function() {
                if (!this.__generatedMappings) {
                  this._parseMappings(this._mappings, this.sourceRoot);
                }

                return this.__generatedMappings;
              },
            }
          );
          SourceMapConsumer.prototype.__originalMappings = null;
          Object.defineProperty(
            SourceMapConsumer.prototype,
            "_originalMappings",
            {
              configurable: true,
              enumerable: true,
              get: function() {
                if (!this.__originalMappings) {
                  this._parseMappings(this._mappings, this.sourceRoot);
                }

                return this.__originalMappings;
              },
            }
          );

          SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(
            aStr,
            index
          ) {
            var c = aStr.charAt(index);
            return c === ";" || c === ",";
          };

          SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
            aStr,
            aSourceRoot
          ) {
            throw new Error("Subclasses must implement _parseMappings");
          };

          SourceMapConsumer.GENERATED_ORDER = 1;
          SourceMapConsumer.ORIGINAL_ORDER = 2;
          SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
          SourceMapConsumer.LEAST_UPPER_BOUND = 2;

          SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(
            aCallback,
            aContext,
            aOrder
          ) {
            var context = aContext || null;
            var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
            var mappings;

            switch (order) {
              case SourceMapConsumer.GENERATED_ORDER:
                mappings = this._generatedMappings;
                break;

              case SourceMapConsumer.ORIGINAL_ORDER:
                mappings = this._originalMappings;
                break;

              default:
                throw new Error("Unknown order of iteration.");
            }

            var sourceRoot = this.sourceRoot;
            mappings
              .map(function(mapping) {
                var source =
                  mapping.source === null
                    ? null
                    : this._sources.at(mapping.source);
                source = util.computeSourceURL(
                  sourceRoot,
                  source,
                  this._sourceMapURL
                );
                return {
                  source: source,
                  generatedLine: mapping.generatedLine,
                  generatedColumn: mapping.generatedColumn,
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name:
                    mapping.name === null ? null : this._names.at(mapping.name),
                };
              }, this)
              .forEach(aCallback, context);
          };

          SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(
            aArgs
          ) {
            var line = util.getArg(aArgs, "line");
            var needle = {
              source: util.getArg(aArgs, "source"),
              originalLine: line,
              originalColumn: util.getArg(aArgs, "column", 0),
            };
            needle.source = this._findSourceIndex(needle.source);

            if (needle.source < 0) {
              return [];
            }

            var mappings = [];

            var index = this._findMapping(
              needle,
              this._originalMappings,
              "originalLine",
              "originalColumn",
              util.compareByOriginalPositions,
              binarySearch.LEAST_UPPER_BOUND
            );

            if (index >= 0) {
              var mapping = this._originalMappings[index];

              if (aArgs.column === undefined) {
                var originalLine = mapping.originalLine;

                while (mapping && mapping.originalLine === originalLine) {
                  mappings.push({
                    line: util.getArg(mapping, "generatedLine", null),
                    column: util.getArg(mapping, "generatedColumn", null),
                    lastColumn: util.getArg(
                      mapping,
                      "lastGeneratedColumn",
                      null
                    ),
                  });
                  mapping = this._originalMappings[++index];
                }
              } else {
                var originalColumn = mapping.originalColumn;

                while (
                  mapping &&
                  mapping.originalLine === line &&
                  mapping.originalColumn == originalColumn
                ) {
                  mappings.push({
                    line: util.getArg(mapping, "generatedLine", null),
                    column: util.getArg(mapping, "generatedColumn", null),
                    lastColumn: util.getArg(
                      mapping,
                      "lastGeneratedColumn",
                      null
                    ),
                  });
                  mapping = this._originalMappings[++index];
                }
              }
            }

            return mappings;
          };

          exports.SourceMapConsumer = SourceMapConsumer;

          function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
            var sourceMap = aSourceMap;

            if (typeof aSourceMap === "string") {
              sourceMap = util.parseSourceMapInput(aSourceMap);
            }

            var version = util.getArg(sourceMap, "version");
            var sources = util.getArg(sourceMap, "sources");
            var names = util.getArg(sourceMap, "names", []);
            var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
            var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
            var mappings = util.getArg(sourceMap, "mappings");
            var file = util.getArg(sourceMap, "file", null);

            if (version != this._version) {
              throw new Error("Unsupported version: " + version);
            }

            if (sourceRoot) {
              sourceRoot = util.normalize(sourceRoot);
            }

            sources = sources
              .map(String)
              .map(util.normalize)
              .map(function(source) {
                return sourceRoot &&
                  util.isAbsolute(sourceRoot) &&
                  util.isAbsolute(source)
                  ? util.relative(sourceRoot, source)
                  : source;
              });
            this._names = ArraySet.fromArray(names.map(String), true);
            this._sources = ArraySet.fromArray(sources, true);
            this._absoluteSources = this._sources.toArray().map(function(s) {
              return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
            });
            this.sourceRoot = sourceRoot;
            this.sourcesContent = sourcesContent;
            this._mappings = mappings;
            this._sourceMapURL = aSourceMapURL;
            this.file = file;
          }

          BasicSourceMapConsumer.prototype = Object.create(
            SourceMapConsumer.prototype
          );
          BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

          BasicSourceMapConsumer.prototype._findSourceIndex = function(
            aSource
          ) {
            var relativeSource = aSource;

            if (this.sourceRoot != null) {
              relativeSource = util.relative(this.sourceRoot, relativeSource);
            }

            if (this._sources.has(relativeSource)) {
              return this._sources.indexOf(relativeSource);
            }

            var i;

            for (i = 0; i < this._absoluteSources.length; ++i) {
              if (this._absoluteSources[i] == aSource) {
                return i;
              }
            }

            return -1;
          };

          BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(
            aSourceMap,
            aSourceMapURL
          ) {
            var smc = Object.create(BasicSourceMapConsumer.prototype);
            var names = (smc._names = ArraySet.fromArray(
              aSourceMap._names.toArray(),
              true
            ));
            var sources = (smc._sources = ArraySet.fromArray(
              aSourceMap._sources.toArray(),
              true
            ));
            smc.sourceRoot = aSourceMap._sourceRoot;
            smc.sourcesContent = aSourceMap._generateSourcesContent(
              smc._sources.toArray(),
              smc.sourceRoot
            );
            smc.file = aSourceMap._file;
            smc._sourceMapURL = aSourceMapURL;
            smc._absoluteSources = smc._sources.toArray().map(function(s) {
              return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
            });

            var generatedMappings = aSourceMap._mappings.toArray().slice();

            var destGeneratedMappings = (smc.__generatedMappings = []);
            var destOriginalMappings = (smc.__originalMappings = []);

            for (
              var i = 0, length = generatedMappings.length;
              i < length;
              i++
            ) {
              var srcMapping = generatedMappings[i];
              var destMapping = new Mapping();
              destMapping.generatedLine = srcMapping.generatedLine;
              destMapping.generatedColumn = srcMapping.generatedColumn;

              if (srcMapping.source) {
                destMapping.source = sources.indexOf(srcMapping.source);
                destMapping.originalLine = srcMapping.originalLine;
                destMapping.originalColumn = srcMapping.originalColumn;

                if (srcMapping.name) {
                  destMapping.name = names.indexOf(srcMapping.name);
                }

                destOriginalMappings.push(destMapping);
              }

              destGeneratedMappings.push(destMapping);
            }

            quickSort(smc.__originalMappings, util.compareByOriginalPositions);
            return smc;
          };

          BasicSourceMapConsumer.prototype._version = 3;
          Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
            get: function() {
              return this._absoluteSources.slice();
            },
          });

          function Mapping() {
            this.generatedLine = 0;
            this.generatedColumn = 0;
            this.source = null;
            this.originalLine = null;
            this.originalColumn = null;
            this.name = null;
          }

          BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
            aStr,
            aSourceRoot
          ) {
            var generatedLine = 1;
            var previousGeneratedColumn = 0;
            var previousOriginalLine = 0;
            var previousOriginalColumn = 0;
            var previousSource = 0;
            var previousName = 0;
            var length = aStr.length;
            var index = 0;
            var cachedSegments = {};
            var temp = {};
            var originalMappings = [];
            var generatedMappings = [];
            var mapping, str, segment, end, value;

            while (index < length) {
              if (aStr.charAt(index) === ";") {
                generatedLine++;
                index++;
                previousGeneratedColumn = 0;
              } else if (aStr.charAt(index) === ",") {
                index++;
              } else {
                mapping = new Mapping();
                mapping.generatedLine = generatedLine;

                for (end = index; end < length; end++) {
                  if (this._charIsMappingSeparator(aStr, end)) {
                    break;
                  }
                }

                str = aStr.slice(index, end);
                segment = cachedSegments[str];

                if (segment) {
                  index += str.length;
                } else {
                  segment = [];

                  while (index < end) {
                    base64VLQ.decode(aStr, index, temp);
                    value = temp.value;
                    index = temp.rest;
                    segment.push(value);
                  }

                  if (segment.length === 2) {
                    throw new Error("Found a source, but no line and column");
                  }

                  if (segment.length === 3) {
                    throw new Error("Found a source and line, but no column");
                  }

                  cachedSegments[str] = segment;
                }

                mapping.generatedColumn = previousGeneratedColumn + segment[0];
                previousGeneratedColumn = mapping.generatedColumn;

                if (segment.length > 1) {
                  mapping.source = previousSource + segment[1];
                  previousSource += segment[1];
                  mapping.originalLine = previousOriginalLine + segment[2];
                  previousOriginalLine = mapping.originalLine;
                  mapping.originalLine += 1;
                  mapping.originalColumn = previousOriginalColumn + segment[3];
                  previousOriginalColumn = mapping.originalColumn;

                  if (segment.length > 4) {
                    mapping.name = previousName + segment[4];
                    previousName += segment[4];
                  }
                }

                generatedMappings.push(mapping);

                if (typeof mapping.originalLine === "number") {
                  originalMappings.push(mapping);
                }
              }
            }

            quickSort(
              generatedMappings,
              util.compareByGeneratedPositionsDeflated
            );
            this.__generatedMappings = generatedMappings;
            quickSort(originalMappings, util.compareByOriginalPositions);
            this.__originalMappings = originalMappings;
          };

          BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(
            aNeedle,
            aMappings,
            aLineName,
            aColumnName,
            aComparator,
            aBias
          ) {
            if (aNeedle[aLineName] <= 0) {
              throw new TypeError(
                "Line must be greater than or equal to 1, got " +
                  aNeedle[aLineName]
              );
            }

            if (aNeedle[aColumnName] < 0) {
              throw new TypeError(
                "Column must be greater than or equal to 0, got " +
                  aNeedle[aColumnName]
              );
            }

            return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
          };

          BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
            for (
              var index = 0;
              index < this._generatedMappings.length;
              ++index
            ) {
              var mapping = this._generatedMappings[index];

              if (index + 1 < this._generatedMappings.length) {
                var nextMapping = this._generatedMappings[index + 1];

                if (mapping.generatedLine === nextMapping.generatedLine) {
                  mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                  continue;
                }
              }

              mapping.lastGeneratedColumn = Infinity;
            }
          };

          BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(
            aArgs
          ) {
            var needle = {
              generatedLine: util.getArg(aArgs, "line"),
              generatedColumn: util.getArg(aArgs, "column"),
            };

            var index = this._findMapping(
              needle,
              this._generatedMappings,
              "generatedLine",
              "generatedColumn",
              util.compareByGeneratedPositionsDeflated,
              util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
            );

            if (index >= 0) {
              var mapping = this._generatedMappings[index];

              if (mapping.generatedLine === needle.generatedLine) {
                var source = util.getArg(mapping, "source", null);

                if (source !== null) {
                  source = this._sources.at(source);
                  source = util.computeSourceURL(
                    this.sourceRoot,
                    source,
                    this._sourceMapURL
                  );
                }

                var name = util.getArg(mapping, "name", null);

                if (name !== null) {
                  name = this._names.at(name);
                }

                return {
                  source: source,
                  line: util.getArg(mapping, "originalLine", null),
                  column: util.getArg(mapping, "originalColumn", null),
                  name: name,
                };
              }
            }

            return {
              source: null,
              line: null,
              column: null,
              name: null,
            };
          };

          BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
            if (!this.sourcesContent) {
              return false;
            }

            return (
              this.sourcesContent.length >= this._sources.size() &&
              !this.sourcesContent.some(function(sc) {
                return sc == null;
              })
            );
          };

          BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(
            aSource,
            nullOnMissing
          ) {
            if (!this.sourcesContent) {
              return null;
            }

            var index = this._findSourceIndex(aSource);

            if (index >= 0) {
              return this.sourcesContent[index];
            }

            var relativeSource = aSource;

            if (this.sourceRoot != null) {
              relativeSource = util.relative(this.sourceRoot, relativeSource);
            }

            var url;

            if (
              this.sourceRoot != null &&
              (url = util.urlParse(this.sourceRoot))
            ) {
              var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");

              if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
                return this.sourcesContent[
                  this._sources.indexOf(fileUriAbsPath)
                ];
              }

              if (
                (!url.path || url.path == "/") &&
                this._sources.has("/" + relativeSource)
              ) {
                return this.sourcesContent[
                  this._sources.indexOf("/" + relativeSource)
                ];
              }
            }

            if (nullOnMissing) {
              return null;
            } else {
              throw new Error(
                '"' + relativeSource + '" is not in the SourceMap.'
              );
            }
          };

          BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(
            aArgs
          ) {
            var source = util.getArg(aArgs, "source");
            source = this._findSourceIndex(source);

            if (source < 0) {
              return {
                line: null,
                column: null,
                lastColumn: null,
              };
            }

            var needle = {
              source: source,
              originalLine: util.getArg(aArgs, "line"),
              originalColumn: util.getArg(aArgs, "column"),
            };

            var index = this._findMapping(
              needle,
              this._originalMappings,
              "originalLine",
              "originalColumn",
              util.compareByOriginalPositions,
              util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
            );

            if (index >= 0) {
              var mapping = this._originalMappings[index];

              if (mapping.source === needle.source) {
                return {
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn: util.getArg(mapping, "lastGeneratedColumn", null),
                };
              }
            }

            return {
              line: null,
              column: null,
              lastColumn: null,
            };
          };

          exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

          function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
            var sourceMap = aSourceMap;

            if (typeof aSourceMap === "string") {
              sourceMap = util.parseSourceMapInput(aSourceMap);
            }

            var version = util.getArg(sourceMap, "version");
            var sections = util.getArg(sourceMap, "sections");

            if (version != this._version) {
              throw new Error("Unsupported version: " + version);
            }

            this._sources = new ArraySet();
            this._names = new ArraySet();
            var lastOffset = {
              line: -1,
              column: 0,
            };
            this._sections = sections.map(function(s) {
              if (s.url) {
                throw new Error(
                  "Support for url field in sections not implemented."
                );
              }

              var offset = util.getArg(s, "offset");
              var offsetLine = util.getArg(offset, "line");
              var offsetColumn = util.getArg(offset, "column");

              if (
                offsetLine < lastOffset.line ||
                (offsetLine === lastOffset.line &&
                  offsetColumn < lastOffset.column)
              ) {
                throw new Error(
                  "Section offsets must be ordered and non-overlapping."
                );
              }

              lastOffset = offset;
              return {
                generatedOffset: {
                  generatedLine: offsetLine + 1,
                  generatedColumn: offsetColumn + 1,
                },
                consumer: new SourceMapConsumer(
                  util.getArg(s, "map"),
                  aSourceMapURL
                ),
              };
            });
          }

          IndexedSourceMapConsumer.prototype = Object.create(
            SourceMapConsumer.prototype
          );
          IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
          IndexedSourceMapConsumer.prototype._version = 3;
          Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
            get: function() {
              var sources = [];

              for (var i = 0; i < this._sections.length; i++) {
                for (
                  var j = 0;
                  j < this._sections[i].consumer.sources.length;
                  j++
                ) {
                  sources.push(this._sections[i].consumer.sources[j]);
                }
              }

              return sources;
            },
          });

          IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(
            aArgs
          ) {
            var needle = {
              generatedLine: util.getArg(aArgs, "line"),
              generatedColumn: util.getArg(aArgs, "column"),
            };
            var sectionIndex = binarySearch.search(
              needle,
              this._sections,
              function(needle, section) {
                var cmp =
                  needle.generatedLine - section.generatedOffset.generatedLine;

                if (cmp) {
                  return cmp;
                }

                return (
                  needle.generatedColumn -
                  section.generatedOffset.generatedColumn
                );
              }
            );
            var section = this._sections[sectionIndex];

            if (!section) {
              return {
                source: null,
                line: null,
                column: null,
                name: null,
              };
            }

            return section.consumer.originalPositionFor({
              line:
                needle.generatedLine -
                (section.generatedOffset.generatedLine - 1),
              column:
                needle.generatedColumn -
                (section.generatedOffset.generatedLine === needle.generatedLine
                  ? section.generatedOffset.generatedColumn - 1
                  : 0),
              bias: aArgs.bias,
            });
          };

          IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
            return this._sections.every(function(s) {
              return s.consumer.hasContentsOfAllSources();
            });
          };

          IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(
            aSource,
            nullOnMissing
          ) {
            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];
              var content = section.consumer.sourceContentFor(aSource, true);

              if (content) {
                return content;
              }
            }

            if (nullOnMissing) {
              return null;
            } else {
              throw new Error('"' + aSource + '" is not in the SourceMap.');
            }
          };

          IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(
            aArgs
          ) {
            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];

              if (
                section.consumer._findSourceIndex(
                  util.getArg(aArgs, "source")
                ) === -1
              ) {
                continue;
              }

              var generatedPosition = section.consumer.generatedPositionFor(
                aArgs
              );

              if (generatedPosition) {
                var ret = {
                  line:
                    generatedPosition.line +
                    (section.generatedOffset.generatedLine - 1),
                  column:
                    generatedPosition.column +
                    (section.generatedOffset.generatedLine ===
                    generatedPosition.line
                      ? section.generatedOffset.generatedColumn - 1
                      : 0),
                };
                return ret;
              }
            }

            return {
              line: null,
              column: null,
            };
          };

          IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(
            aStr,
            aSourceRoot
          ) {
            this.__generatedMappings = [];
            this.__originalMappings = [];

            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];
              var sectionMappings = section.consumer._generatedMappings;

              for (var j = 0; j < sectionMappings.length; j++) {
                var mapping = sectionMappings[j];

                var source = section.consumer._sources.at(mapping.source);

                source = util.computeSourceURL(
                  section.consumer.sourceRoot,
                  source,
                  this._sourceMapURL
                );

                this._sources.add(source);

                source = this._sources.indexOf(source);
                var name = null;

                if (mapping.name) {
                  name = section.consumer._names.at(mapping.name);

                  this._names.add(name);

                  name = this._names.indexOf(name);
                }

                var adjustedMapping = {
                  source: source,
                  generatedLine:
                    mapping.generatedLine +
                    (section.generatedOffset.generatedLine - 1),
                  generatedColumn:
                    mapping.generatedColumn +
                    (section.generatedOffset.generatedLine ===
                    mapping.generatedLine
                      ? section.generatedOffset.generatedColumn - 1
                      : 0),
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name: name,
                };

                this.__generatedMappings.push(adjustedMapping);

                if (typeof adjustedMapping.originalLine === "number") {
                  this.__originalMappings.push(adjustedMapping);
                }
              }
            }

            quickSort(
              this.__generatedMappings,
              util.compareByGeneratedPositionsDeflated
            );
            quickSort(this.__originalMappings, util.compareByOriginalPositions);
          };

          exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
        },
        /* 339 */
        function(module, exports) {
          exports.GREATEST_LOWER_BOUND = 1;
          exports.LEAST_UPPER_BOUND = 2;

          function recursiveSearch(
            aLow,
            aHigh,
            aNeedle,
            aHaystack,
            aCompare,
            aBias
          ) {
            var mid = Math.floor((aHigh - aLow) / 2) + aLow;
            var cmp = aCompare(aNeedle, aHaystack[mid], true);

            if (cmp === 0) {
              return mid;
            } else if (cmp > 0) {
              if (aHigh - mid > 1) {
                return recursiveSearch(
                  mid,
                  aHigh,
                  aNeedle,
                  aHaystack,
                  aCompare,
                  aBias
                );
              }

              if (aBias == exports.LEAST_UPPER_BOUND) {
                return aHigh < aHaystack.length ? aHigh : -1;
              } else {
                return mid;
              }
            } else {
              if (mid - aLow > 1) {
                return recursiveSearch(
                  aLow,
                  mid,
                  aNeedle,
                  aHaystack,
                  aCompare,
                  aBias
                );
              }

              if (aBias == exports.LEAST_UPPER_BOUND) {
                return mid;
              } else {
                return aLow < 0 ? -1 : aLow;
              }
            }
          }

          exports.search = function search(
            aNeedle,
            aHaystack,
            aCompare,
            aBias
          ) {
            if (aHaystack.length === 0) {
              return -1;
            }

            var index = recursiveSearch(
              -1,
              aHaystack.length,
              aNeedle,
              aHaystack,
              aCompare,
              aBias || exports.GREATEST_LOWER_BOUND
            );

            if (index < 0) {
              return -1;
            }

            while (index - 1 >= 0) {
              if (
                aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0
              ) {
                break;
              }

              --index;
            }

            return index;
          };
        },
        /* 340 */
        function(module, exports) {
          function swap(ary, x, y) {
            var temp = ary[x];
            ary[x] = ary[y];
            ary[y] = temp;
          }

          function randomIntInRange(low, high) {
            return Math.round(low + Math.random() * (high - low));
          }

          function doQuickSort(ary, comparator, p, r) {
            if (p < r) {
              var pivotIndex = randomIntInRange(p, r);
              var i = p - 1;
              swap(ary, pivotIndex, r);
              var pivot = ary[r];

              for (var j = p; j < r; j++) {
                if (comparator(ary[j], pivot) <= 0) {
                  i += 1;
                  swap(ary, i, j);
                }
              }

              swap(ary, i + 1, j);
              var q = i + 1;
              doQuickSort(ary, comparator, p, q - 1);
              doQuickSort(ary, comparator, q + 1, r);
            }
          }

          exports.quickSort = function(ary, comparator) {
            doQuickSort(ary, comparator, 0, ary.length - 1);
          };
        },
        /* 341 */
        function(module, exports, __webpack_require__) {
          var SourceMapGenerator = __webpack_require__(140).SourceMapGenerator;

          var util = __webpack_require__(29);

          var REGEX_NEWLINE = /(\r?\n)/;
          var NEWLINE_CODE = 10;
          var isSourceNode = "$$$isSourceNode$$$";

          function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
            this.children = [];
            this.sourceContents = {};
            this.line = aLine == null ? null : aLine;
            this.column = aColumn == null ? null : aColumn;
            this.source = aSource == null ? null : aSource;
            this.name = aName == null ? null : aName;
            this[isSourceNode] = true;
            if (aChunks != null) this.add(aChunks);
          }

          SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(
            aGeneratedCode,
            aSourceMapConsumer,
            aRelativePath
          ) {
            var node = new SourceNode();
            var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
            var remainingLinesIndex = 0;

            var shiftNextLine = function() {
              var lineContents = getNextLine();
              var newLine = getNextLine() || "";
              return lineContents + newLine;

              function getNextLine() {
                return remainingLinesIndex < remainingLines.length
                  ? remainingLines[remainingLinesIndex++]
                  : undefined;
              }
            };

            var lastGeneratedLine = 1,
              lastGeneratedColumn = 0;
            var lastMapping = null;
            aSourceMapConsumer.eachMapping(function(mapping) {
              if (lastMapping !== null) {
                if (lastGeneratedLine < mapping.generatedLine) {
                  addMappingWithCode(lastMapping, shiftNextLine());
                  lastGeneratedLine++;
                  lastGeneratedColumn = 0;
                } else {
                  var nextLine = remainingLines[remainingLinesIndex] || "";
                  var code = nextLine.substr(
                    0,
                    mapping.generatedColumn - lastGeneratedColumn
                  );
                  remainingLines[remainingLinesIndex] = nextLine.substr(
                    mapping.generatedColumn - lastGeneratedColumn
                  );
                  lastGeneratedColumn = mapping.generatedColumn;
                  addMappingWithCode(lastMapping, code);
                  lastMapping = mapping;
                  return;
                }
              }

              while (lastGeneratedLine < mapping.generatedLine) {
                node.add(shiftNextLine());
                lastGeneratedLine++;
              }

              if (lastGeneratedColumn < mapping.generatedColumn) {
                var nextLine = remainingLines[remainingLinesIndex] || "";
                node.add(nextLine.substr(0, mapping.generatedColumn));
                remainingLines[remainingLinesIndex] = nextLine.substr(
                  mapping.generatedColumn
                );
                lastGeneratedColumn = mapping.generatedColumn;
              }

              lastMapping = mapping;
            }, this);

            if (remainingLinesIndex < remainingLines.length) {
              if (lastMapping) {
                addMappingWithCode(lastMapping, shiftNextLine());
              }

              node.add(remainingLines.splice(remainingLinesIndex).join(""));
            }

            aSourceMapConsumer.sources.forEach(function(sourceFile) {
              var content = aSourceMapConsumer.sourceContentFor(sourceFile);

              if (content != null) {
                if (aRelativePath != null) {
                  sourceFile = util.join(aRelativePath, sourceFile);
                }

                node.setSourceContent(sourceFile, content);
              }
            });
            return node;

            function addMappingWithCode(mapping, code) {
              if (mapping === null || mapping.source === undefined) {
                node.add(code);
              } else {
                var source = aRelativePath
                  ? util.join(aRelativePath, mapping.source)
                  : mapping.source;
                node.add(
                  new SourceNode(
                    mapping.originalLine,
                    mapping.originalColumn,
                    source,
                    code,
                    mapping.name
                  )
                );
              }
            }
          };

          SourceNode.prototype.add = function SourceNode_add(aChunk) {
            if (Array.isArray(aChunk)) {
              aChunk.forEach(function(chunk) {
                this.add(chunk);
              }, this);
            } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
              if (aChunk) {
                this.children.push(aChunk);
              }
            } else {
              throw new TypeError(
                "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                  aChunk
              );
            }

            return this;
          };

          SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
            if (Array.isArray(aChunk)) {
              for (var i = aChunk.length - 1; i >= 0; i--) {
                this.prepend(aChunk[i]);
              }
            } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
              this.children.unshift(aChunk);
            } else {
              throw new TypeError(
                "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                  aChunk
              );
            }

            return this;
          };

          SourceNode.prototype.walk = function SourceNode_walk(aFn) {
            var chunk;

            for (var i = 0, len = this.children.length; i < len; i++) {
              chunk = this.children[i];

              if (chunk[isSourceNode]) {
                chunk.walk(aFn);
              } else {
                if (chunk !== "") {
                  aFn(chunk, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name,
                  });
                }
              }
            }
          };

          SourceNode.prototype.join = function SourceNode_join(aSep) {
            var newChildren;
            var i;
            var len = this.children.length;

            if (len > 0) {
              newChildren = [];

              for (i = 0; i < len - 1; i++) {
                newChildren.push(this.children[i]);
                newChildren.push(aSep);
              }

              newChildren.push(this.children[i]);
              this.children = newChildren;
            }

            return this;
          };

          SourceNode.prototype.replaceRight = function SourceNode_replaceRight(
            aPattern,
            aReplacement
          ) {
            var lastChild = this.children[this.children.length - 1];

            if (lastChild[isSourceNode]) {
              lastChild.replaceRight(aPattern, aReplacement);
            } else if (typeof lastChild === "string") {
              this.children[this.children.length - 1] = lastChild.replace(
                aPattern,
                aReplacement
              );
            } else {
              this.children.push("".replace(aPattern, aReplacement));
            }

            return this;
          };

          SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(
            aSourceFile,
            aSourceContent
          ) {
            this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
          };

          SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(
            aFn
          ) {
            for (var i = 0, len = this.children.length; i < len; i++) {
              if (this.children[i][isSourceNode]) {
                this.children[i].walkSourceContents(aFn);
              }
            }

            var sources = Object.keys(this.sourceContents);

            for (var i = 0, len = sources.length; i < len; i++) {
              aFn(
                util.fromSetString(sources[i]),
                this.sourceContents[sources[i]]
              );
            }
          };

          SourceNode.prototype.toString = function SourceNode_toString() {
            var str = "";
            this.walk(function(chunk) {
              str += chunk;
            });
            return str;
          };

          SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(
            aArgs
          ) {
            var generated = {
              code: "",
              line: 1,
              column: 0,
            };
            var map = new SourceMapGenerator(aArgs);
            var sourceMappingActive = false;
            var lastOriginalSource = null;
            var lastOriginalLine = null;
            var lastOriginalColumn = null;
            var lastOriginalName = null;
            this.walk(function(chunk, original) {
              generated.code += chunk;

              if (
                original.source !== null &&
                original.line !== null &&
                original.column !== null
              ) {
                if (
                  lastOriginalSource !== original.source ||
                  lastOriginalLine !== original.line ||
                  lastOriginalColumn !== original.column ||
                  lastOriginalName !== original.name
                ) {
                  map.addMapping({
                    source: original.source,
                    original: {
                      line: original.line,
                      column: original.column,
                    },
                    generated: {
                      line: generated.line,
                      column: generated.column,
                    },
                    name: original.name,
                  });
                }

                lastOriginalSource = original.source;
                lastOriginalLine = original.line;
                lastOriginalColumn = original.column;
                lastOriginalName = original.name;
                sourceMappingActive = true;
              } else if (sourceMappingActive) {
                map.addMapping({
                  generated: {
                    line: generated.line,
                    column: generated.column,
                  },
                });
                lastOriginalSource = null;
                sourceMappingActive = false;
              }

              for (var idx = 0, length = chunk.length; idx < length; idx++) {
                if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                  generated.line++;
                  generated.column = 0;

                  if (idx + 1 === length) {
                    lastOriginalSource = null;
                    sourceMappingActive = false;
                  } else if (sourceMappingActive) {
                    map.addMapping({
                      source: original.source,
                      original: {
                        line: original.line,
                        column: original.column,
                      },
                      generated: {
                        line: generated.line,
                        column: generated.column,
                      },
                      name: original.name,
                    });
                  }
                } else {
                  generated.column++;
                }
              }
            });
            this.walkSourceContents(function(sourceFile, sourceContent) {
              map.setSourceContent(sourceFile, sourceContent);
            });
            return {
              code: generated.code,
              map: map,
            };
          };

          exports.SourceNode = SourceNode;
        },
        /* 342 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _isInteger() {
            const data = _interopRequireDefault(__webpack_require__(343));

            _isInteger = function() {
              return data;
            };

            return data;
          }

          function _repeat() {
            const data = _interopRequireDefault(__webpack_require__(136));

            _repeat = function() {
              return data;
            };

            return data;
          }

          var _buffer = _interopRequireDefault(__webpack_require__(344));

          var n = _interopRequireWildcard(__webpack_require__(143));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var generatorFunctions = _interopRequireWildcard(
            __webpack_require__(348)
          );

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const SCIENTIFIC_NOTATION = /e/i;
          const ZERO_DECIMAL_INTEGER = /\.0+$/;
          const NON_DECIMAL_LITERAL = /^0[box]/;

          class Printer {
            constructor(format, map) {
              this.format = format || {};
              this._buf = new _buffer.default(map);
              this.inForStatementInitCounter = 0;
              this._printStack = [];
              this._indent = 0;
              this._insideAux = false;
              this._printedCommentStarts = {};
              this._parenPushNewlineState = null;
              this._noLineTerminator = false;
              this._printAuxAfterOnNextUserNode = false;
              this._printedComments = new WeakSet();
              this._endsWithInteger = false;
              this._endsWithWord = false;
            }

            generate(ast) {
              this.print(ast);

              this._maybeAddAuxComment();

              return this._buf.get();
            }

            indent() {
              if (this.format.compact || this.format.concise) return;
              this._indent++;
            }

            dedent() {
              if (this.format.compact || this.format.concise) return;
              this._indent--;
            }

            semicolon(force = false) {
              this._maybeAddAuxComment();

              this._append(";", !force);
            }

            rightBrace() {
              if (this.format.minified) {
                this._buf.removeLastSemicolon();
              }

              this.token("}");
            }

            space(force = false) {
              if (this.format.compact) return;

              if (
                (this._buf.hasContent() &&
                  !this.endsWith(" ") &&
                  !this.endsWith("\n")) ||
                force
              ) {
                this._space();
              }
            }

            word(str) {
              if (
                this._endsWithWord ||
                (this.endsWith("/") && str.indexOf("/") === 0)
              ) {
                this._space();
              }

              this._maybeAddAuxComment();

              this._append(str);

              this._endsWithWord = true;
            }

            number(str) {
              this.word(str);
              this._endsWithInteger =
                (0, _isInteger().default)(+str) &&
                !NON_DECIMAL_LITERAL.test(str) &&
                !SCIENTIFIC_NOTATION.test(str) &&
                !ZERO_DECIMAL_INTEGER.test(str) &&
                str[str.length - 1] !== ".";
            }

            token(str) {
              if (
                (str === "--" && this.endsWith("!")) ||
                (str[0] === "+" && this.endsWith("+")) ||
                (str[0] === "-" && this.endsWith("-")) ||
                (str[0] === "." && this._endsWithInteger)
              ) {
                this._space();
              }

              this._maybeAddAuxComment();

              this._append(str);
            }

            newline(i) {
              if (this.format.retainLines || this.format.compact) return;

              if (this.format.concise) {
                this.space();
                return;
              }

              if (this.endsWith("\n\n")) return;
              if (typeof i !== "number") i = 1;
              i = Math.min(2, i);
              if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
              if (i <= 0) return;

              for (let j = 0; j < i; j++) {
                this._newline();
              }
            }

            endsWith(str) {
              return this._buf.endsWith(str);
            }

            removeTrailingNewline() {
              this._buf.removeTrailingNewline();
            }

            exactSource(loc, cb) {
              this._catchUp("start", loc);

              this._buf.exactSource(loc, cb);
            }

            source(prop, loc) {
              this._catchUp(prop, loc);

              this._buf.source(prop, loc);
            }

            withSource(prop, loc, cb) {
              this._catchUp(prop, loc);

              this._buf.withSource(prop, loc, cb);
            }

            _space() {
              this._append(" ", true);
            }

            _newline() {
              this._append("\n", true);
            }

            _append(str, queue = false) {
              this._maybeAddParen(str);

              this._maybeIndent(str);

              if (queue) this._buf.queue(str);
              else this._buf.append(str);
              this._endsWithWord = false;
              this._endsWithInteger = false;
            }

            _maybeIndent(str) {
              if (this._indent && this.endsWith("\n") && str[0] !== "\n") {
                this._buf.queue(this._getIndent());
              }
            }

            _maybeAddParen(str) {
              const parenPushNewlineState = this._parenPushNewlineState;
              if (!parenPushNewlineState) return;
              this._parenPushNewlineState = null;
              let i;

              for (i = 0; i < str.length && str[i] === " "; i++) continue;

              if (i === str.length) return;
              const cha = str[i];

              if (cha !== "\n") {
                if (cha !== "/") return;
                if (i + 1 === str.length) return;
                const chaPost = str[i + 1];
                if (chaPost !== "/" && chaPost !== "*") return;
              }

              this.token("(");
              this.indent();
              parenPushNewlineState.printed = true;
            }

            _catchUp(prop, loc) {
              if (!this.format.retainLines) return;
              const pos = loc ? loc[prop] : null;

              if (pos && pos.line !== null) {
                const count = pos.line - this._buf.getCurrentLine();

                for (let i = 0; i < count; i++) {
                  this._newline();
                }
              }
            }

            _getIndent() {
              return (0, _repeat().default)(
                this.format.indent.style,
                this._indent
              );
            }

            startTerminatorless(isLabel = false) {
              if (isLabel) {
                this._noLineTerminator = true;
                return null;
              } else {
                return (this._parenPushNewlineState = {
                  printed: false,
                });
              }
            }

            endTerminatorless(state) {
              this._noLineTerminator = false;

              if (state && state.printed) {
                this.dedent();
                this.newline();
                this.token(")");
              }
            }

            print(node, parent) {
              if (!node) return;
              const oldConcise = this.format.concise;

              if (node._compact) {
                this.format.concise = true;
              }

              const printMethod = this[node.type];

              if (!printMethod) {
                throw new ReferenceError(
                  `unknown node of type ${JSON.stringify(
                    node.type
                  )} with constructor ${JSON.stringify(
                    node && node.constructor.name
                  )}`
                );
              }

              this._printStack.push(node);

              const oldInAux = this._insideAux;
              this._insideAux = !node.loc;

              this._maybeAddAuxComment(this._insideAux && !oldInAux);

              let needsParens = n.needsParens(node, parent, this._printStack);

              if (
                this.format.retainFunctionParens &&
                node.type === "FunctionExpression" &&
                node.extra &&
                node.extra.parenthesized
              ) {
                needsParens = true;
              }

              if (needsParens) this.token("(");

              this._printLeadingComments(node);

              const loc =
                t().isProgram(node) || t().isFile(node) ? null : node.loc;
              this.withSource("start", loc, () => {
                this[node.type](node, parent);
              });

              this._printTrailingComments(node);

              if (needsParens) this.token(")");

              this._printStack.pop();

              this.format.concise = oldConcise;
              this._insideAux = oldInAux;
            }

            _maybeAddAuxComment(enteredPositionlessNode) {
              if (enteredPositionlessNode) this._printAuxBeforeComment();
              if (!this._insideAux) this._printAuxAfterComment();
            }

            _printAuxBeforeComment() {
              if (this._printAuxAfterOnNextUserNode) return;
              this._printAuxAfterOnNextUserNode = true;
              const comment = this.format.auxiliaryCommentBefore;

              if (comment) {
                this._printComment({
                  type: "CommentBlock",
                  value: comment,
                });
              }
            }

            _printAuxAfterComment() {
              if (!this._printAuxAfterOnNextUserNode) return;
              this._printAuxAfterOnNextUserNode = false;
              const comment = this.format.auxiliaryCommentAfter;

              if (comment) {
                this._printComment({
                  type: "CommentBlock",
                  value: comment,
                });
              }
            }

            getPossibleRaw(node) {
              const extra = node.extra;

              if (
                extra &&
                extra.raw != null &&
                extra.rawValue != null &&
                node.value === extra.rawValue
              ) {
                return extra.raw;
              }
            }

            printJoin(nodes, parent, opts = {}) {
              if (!nodes || !nodes.length) return;
              if (opts.indent) this.indent();
              const newlineOpts = {
                addNewlines: opts.addNewlines,
              };

              for (let i = 0; i < nodes.length; i++) {
                const node = nodes[i];
                if (!node) continue;
                if (opts.statement)
                  this._printNewline(true, node, parent, newlineOpts);
                this.print(node, parent);

                if (opts.iterator) {
                  opts.iterator(node, i);
                }

                if (opts.separator && i < nodes.length - 1) {
                  opts.separator.call(this);
                }

                if (opts.statement)
                  this._printNewline(false, node, parent, newlineOpts);
              }

              if (opts.indent) this.dedent();
            }

            printAndIndentOnComments(node, parent) {
              const indent =
                node.leadingComments && node.leadingComments.length > 0;
              if (indent) this.indent();
              this.print(node, parent);
              if (indent) this.dedent();
            }

            printBlock(parent) {
              const node = parent.body;

              if (!t().isEmptyStatement(node)) {
                this.space();
              }

              this.print(node, parent);
            }

            _printTrailingComments(node) {
              this._printComments(this._getComments(false, node));
            }

            _printLeadingComments(node) {
              this._printComments(this._getComments(true, node));
            }

            printInnerComments(node, indent = true) {
              if (!node.innerComments || !node.innerComments.length) return;
              if (indent) this.indent();

              this._printComments(node.innerComments);

              if (indent) this.dedent();
            }

            printSequence(nodes, parent, opts = {}) {
              opts.statement = true;
              return this.printJoin(nodes, parent, opts);
            }

            printList(items, parent, opts = {}) {
              if (opts.separator == null) {
                opts.separator = commaSeparator;
              }

              return this.printJoin(items, parent, opts);
            }

            _printNewline(leading, node, parent, opts) {
              if (this.format.retainLines || this.format.compact) return;

              if (this.format.concise) {
                this.space();
                return;
              }

              let lines = 0;

              if (this._buf.hasContent()) {
                if (!leading) lines++;
                if (opts.addNewlines)
                  lines += opts.addNewlines(leading, node) || 0;
                const needs = leading
                  ? n.needsWhitespaceBefore
                  : n.needsWhitespaceAfter;
                if (needs(node, parent)) lines++;
              }

              this.newline(lines);
            }

            _getComments(leading, node) {
              return (
                (node &&
                  (leading ? node.leadingComments : node.trailingComments)) ||
                []
              );
            }

            _printComment(comment) {
              if (!this.format.shouldPrintComment(comment.value)) return;
              if (comment.ignore) return;
              if (this._printedComments.has(comment)) return;

              this._printedComments.add(comment);

              if (comment.start != null) {
                if (this._printedCommentStarts[comment.start]) return;
                this._printedCommentStarts[comment.start] = true;
              }

              const isBlockComment = comment.type === "CommentBlock";
              this.newline(
                this._buf.hasContent() &&
                  !this._noLineTerminator &&
                  isBlockComment
                  ? 1
                  : 0
              );
              if (!this.endsWith("[") && !this.endsWith("{")) this.space();
              let val =
                !isBlockComment && !this._noLineTerminator
                  ? `//${comment.value}\n`
                  : `/*${comment.value}*/`;

              if (isBlockComment && this.format.indent.adjustMultilineComment) {
                const offset = comment.loc && comment.loc.start.column;

                if (offset) {
                  const newlineRegex = new RegExp(
                    "\\n\\s{1," + offset + "}",
                    "g"
                  );
                  val = val.replace(newlineRegex, "\n");
                }

                const indentSize = Math.max(
                  this._getIndent().length,
                  this._buf.getCurrentColumn()
                );
                val = val.replace(
                  /\n(?!$)/g,
                  `\n${(0, _repeat().default)(" ", indentSize)}`
                );
              }

              if (this.endsWith("/")) this._space();
              this.withSource("start", comment.loc, () => {
                this._append(val);
              });
              this.newline(isBlockComment && !this._noLineTerminator ? 1 : 0);
            }

            _printComments(comments) {
              if (!comments || !comments.length) return;

              for (const comment of comments) {
                this._printComment(comment);
              }
            }
          }

          exports.default = Printer;
          Object.assign(Printer.prototype, generatorFunctions);

          function commaSeparator() {
            this.token(",");
            this.space();
          }
        },
        /* 343 */
        function(module, exports, __webpack_require__) {
          var toInteger = __webpack_require__(75);

          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }

          module.exports = isInteger;
        },
        /* 344 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _trimRight() {
            const data = _interopRequireDefault(__webpack_require__(345));

            _trimRight = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const SPACES_RE = /^[ \t]+$/;

          class Buffer {
            constructor(map) {
              this._map = map;
              this._buf = [];
              this._last = "";
              this._queue = [];
              this._position = {
                line: 1,
                column: 0,
              };
              this._sourcePosition = {
                identifierName: null,
                line: null,
                column: null,
                filename: null,
              };
              this._disallowedPop = null;
            }

            get() {
              this._flush();

              const map = this._map;
              const result = {
                code: (0, _trimRight().default)(this._buf.join("")),
                map: null,
                rawMappings: map && map.getRawMappings(),
              };

              if (map) {
                Object.defineProperty(result, "map", {
                  configurable: true,
                  enumerable: true,

                  get() {
                    return (this.map = map.get());
                  },

                  set(value) {
                    Object.defineProperty(this, "map", {
                      value,
                      writable: true,
                    });
                  },
                });
              }

              return result;
            }

            append(str) {
              this._flush();

              const {
                line,
                column,
                filename,
                identifierName,
                force,
              } = this._sourcePosition;

              this._append(str, line, column, identifierName, filename, force);
            }

            queue(str) {
              if (str === "\n") {
                while (
                  this._queue.length > 0 &&
                  SPACES_RE.test(this._queue[0][0])
                ) {
                  this._queue.shift();
                }
              }

              const {
                line,
                column,
                filename,
                identifierName,
                force,
              } = this._sourcePosition;

              this._queue.unshift([
                str,
                line,
                column,
                identifierName,
                filename,
                force,
              ]);
            }

            _flush() {
              let item;

              while ((item = this._queue.pop())) this._append(...item);
            }

            _append(str, line, column, identifierName, filename, force) {
              if (this._map && str[0] !== "\n") {
                this._map.mark(
                  this._position.line,
                  this._position.column,
                  line,
                  column,
                  identifierName,
                  filename,
                  force
                );
              }

              this._buf.push(str);

              this._last = str[str.length - 1];

              for (let i = 0; i < str.length; i++) {
                if (str[i] === "\n") {
                  this._position.line++;
                  this._position.column = 0;
                } else {
                  this._position.column++;
                }
              }
            }

            removeTrailingNewline() {
              if (this._queue.length > 0 && this._queue[0][0] === "\n") {
                this._queue.shift();
              }
            }

            removeLastSemicolon() {
              if (this._queue.length > 0 && this._queue[0][0] === ";") {
                this._queue.shift();
              }
            }

            endsWith(suffix) {
              if (suffix.length === 1) {
                let last;

                if (this._queue.length > 0) {
                  const str = this._queue[0][0];
                  last = str[str.length - 1];
                } else {
                  last = this._last;
                }

                return last === suffix;
              }

              const end =
                this._last +
                this._queue.reduce((acc, item) => item[0] + acc, "");

              if (suffix.length <= end.length) {
                return end.slice(-suffix.length) === suffix;
              }

              return false;
            }

            hasContent() {
              return this._queue.length > 0 || !!this._last;
            }

            exactSource(loc, cb) {
              this.source("start", loc, true);
              cb();
              this.source("end", loc);

              this._disallowPop("start", loc);
            }

            source(prop, loc, force) {
              if (prop && !loc) return;

              this._normalizePosition(prop, loc, this._sourcePosition, force);
            }

            withSource(prop, loc, cb) {
              if (!this._map) return cb();
              const originalLine = this._sourcePosition.line;
              const originalColumn = this._sourcePosition.column;
              const originalFilename = this._sourcePosition.filename;
              const originalIdentifierName = this._sourcePosition
                .identifierName;
              this.source(prop, loc);
              cb();

              if (
                (!this._sourcePosition.force ||
                  this._sourcePosition.line !== originalLine ||
                  this._sourcePosition.column !== originalColumn ||
                  this._sourcePosition.filename !== originalFilename) &&
                (!this._disallowedPop ||
                  this._disallowedPop.line !== originalLine ||
                  this._disallowedPop.column !== originalColumn ||
                  this._disallowedPop.filename !== originalFilename)
              ) {
                this._sourcePosition.line = originalLine;
                this._sourcePosition.column = originalColumn;
                this._sourcePosition.filename = originalFilename;
                this._sourcePosition.identifierName = originalIdentifierName;
                this._sourcePosition.force = false;
                this._disallowedPop = null;
              }
            }

            _disallowPop(prop, loc) {
              if (prop && !loc) return;
              this._disallowedPop = this._normalizePosition(prop, loc);
            }

            _normalizePosition(prop, loc, targetObj, force) {
              const pos = loc ? loc[prop] : null;

              if (targetObj === undefined) {
                targetObj = {
                  identifierName: null,
                  line: null,
                  column: null,
                  filename: null,
                  force: false,
                };
              }

              const origLine = targetObj.line;
              const origColumn = targetObj.column;
              const origFilename = targetObj.filename;
              targetObj.identifierName =
                (prop === "start" && loc && loc.identifierName) || null;
              targetObj.line = pos ? pos.line : null;
              targetObj.column = pos ? pos.column : null;
              targetObj.filename = (loc && loc.filename) || null;

              if (
                force ||
                targetObj.line !== origLine ||
                targetObj.column !== origColumn ||
                targetObj.filename !== origFilename
              ) {
                targetObj.force = force;
              }

              return targetObj;
            }

            getCurrentColumn() {
              const extra = this._queue.reduce(
                (acc, item) => item[0] + acc,
                ""
              );

              const lastIndex = extra.lastIndexOf("\n");
              return lastIndex === -1
                ? this._position.column + extra.length
                : extra.length - 1 - lastIndex;
            }

            getCurrentLine() {
              const extra = this._queue.reduce(
                (acc, item) => item[0] + acc,
                ""
              );

              let count = 0;

              for (let i = 0; i < extra.length; i++) {
                if (extra[i] === "\n") count++;
              }

              return this._position.line + count;
            }
          }

          exports.default = Buffer;
        },
        /* 345 */
        function(module, exports, __webpack_require__) {
          "use strict";

          module.exports = function(str) {
            var tail = str.length;

            while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
              tail--;
            }

            return str.slice(0, tail);
          };
        },
        /* 346 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.list = exports.nodes = void 0;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function crawl(node, state = {}) {
            if (t().isMemberExpression(node)) {
              crawl(node.object, state);
              if (node.computed) crawl(node.property, state);
            } else if (t().isBinary(node) || t().isAssignmentExpression(node)) {
              crawl(node.left, state);
              crawl(node.right, state);
            } else if (t().isCallExpression(node)) {
              state.hasCall = true;
              crawl(node.callee, state);
            } else if (t().isFunction(node)) {
              state.hasFunction = true;
            } else if (t().isIdentifier(node)) {
              state.hasHelper = state.hasHelper || isHelper(node.callee);
            }

            return state;
          }

          function isHelper(node) {
            if (t().isMemberExpression(node)) {
              return isHelper(node.object) || isHelper(node.property);
            } else if (t().isIdentifier(node)) {
              return node.name === "require" || node.name[0] === "_";
            } else if (t().isCallExpression(node)) {
              return isHelper(node.callee);
            } else if (t().isBinary(node) || t().isAssignmentExpression(node)) {
              return (
                (t().isIdentifier(node.left) && isHelper(node.left)) ||
                isHelper(node.right)
              );
            } else {
              return false;
            }
          }

          function isType(node) {
            return (
              t().isLiteral(node) ||
              t().isObjectExpression(node) ||
              t().isArrayExpression(node) ||
              t().isIdentifier(node) ||
              t().isMemberExpression(node)
            );
          }

          const nodes = {
            AssignmentExpression(node) {
              const state = crawl(node.right);

              if ((state.hasCall && state.hasHelper) || state.hasFunction) {
                return {
                  before: state.hasFunction,
                  after: true,
                };
              }
            },

            SwitchCase(node, parent) {
              return {
                before: node.consequent.length || parent.cases[0] === node,
                after:
                  !node.consequent.length &&
                  parent.cases[parent.cases.length - 1] === node,
              };
            },

            LogicalExpression(node) {
              if (t().isFunction(node.left) || t().isFunction(node.right)) {
                return {
                  after: true,
                };
              }
            },

            Literal(node) {
              if (node.value === "use strict") {
                return {
                  after: true,
                };
              }
            },

            CallExpression(node) {
              if (t().isFunction(node.callee) || isHelper(node)) {
                return {
                  before: true,
                  after: true,
                };
              }
            },

            VariableDeclaration(node) {
              for (let i = 0; i < node.declarations.length; i++) {
                const declar = node.declarations[i];
                let enabled = isHelper(declar.id) && !isType(declar.init);

                if (!enabled) {
                  const state = crawl(declar.init);
                  enabled =
                    (isHelper(declar.init) && state.hasCall) ||
                    state.hasFunction;
                }

                if (enabled) {
                  return {
                    before: true,
                    after: true,
                  };
                }
              }
            },

            IfStatement(node) {
              if (t().isBlockStatement(node.consequent)) {
                return {
                  before: true,
                  after: true,
                };
              }
            },
          };
          exports.nodes = nodes;

          nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(
            node,
            parent
          ) {
            if (parent.properties[0] === node) {
              return {
                before: true,
              };
            }
          };

          nodes.ObjectTypeCallProperty = function(node, parent) {
            if (
              parent.callProperties[0] === node &&
              (!parent.properties || !parent.properties.length)
            ) {
              return {
                before: true,
              };
            }
          };

          nodes.ObjectTypeIndexer = function(node, parent) {
            if (
              parent.indexers[0] === node &&
              (!parent.properties || !parent.properties.length) &&
              (!parent.callProperties || !parent.callProperties.length)
            ) {
              return {
                before: true,
              };
            }
          };

          nodes.ObjectTypeInternalSlot = function(node, parent) {
            if (
              parent.internalSlots[0] === node &&
              (!parent.properties || !parent.properties.length) &&
              (!parent.callProperties || !parent.callProperties.length) &&
              (!parent.indexers || !parent.indexers.length)
            ) {
              return {
                before: true,
              };
            }
          };

          const list = {
            VariableDeclaration(node) {
              return node.declarations.map(decl => decl.init);
            },

            ArrayExpression(node) {
              return node.elements;
            },

            ObjectExpression(node) {
              return node.properties;
            },
          };
          exports.list = list;
          [
            ["Function", true],
            ["Class", true],
            ["Loop", true],
            ["LabeledStatement", true],
            ["SwitchStatement", true],
            ["TryStatement", true],
          ].forEach(function([type, amounts]) {
            if (typeof amounts === "boolean") {
              amounts = {
                after: amounts,
                before: amounts,
              };
            }

            [type]
              .concat(t().FLIPPED_ALIAS_KEYS[type] || [])
              .forEach(function(type) {
                nodes[type] = function() {
                  return amounts;
                };
              });
          });
        },
        /* 347 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.FunctionTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;
          exports.UpdateExpression = UpdateExpression;
          exports.ObjectExpression = ObjectExpression;
          exports.DoExpression = DoExpression;
          exports.Binary = Binary;
          exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
          exports.TSAsExpression = TSAsExpression;
          exports.TSTypeAssertion = TSTypeAssertion;
          exports.BinaryExpression = BinaryExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.AwaitExpression = exports.YieldExpression = YieldExpression;
          exports.ClassExpression = ClassExpression;
          exports.UnaryLike = UnaryLike;
          exports.FunctionExpression = FunctionExpression;
          exports.ArrowFunctionExpression = ArrowFunctionExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.OptionalMemberExpression = OptionalMemberExpression;
          exports.AssignmentExpression = AssignmentExpression;
          exports.NewExpression = NewExpression;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const PRECEDENCE = {
            "||": 0,
            "&&": 1,
            "|": 2,
            "^": 3,
            "&": 4,
            "==": 5,
            "===": 5,
            "!=": 5,
            "!==": 5,
            "<": 6,
            ">": 6,
            "<=": 6,
            ">=": 6,
            in: 6,
            instanceof: 6,
            ">>": 7,
            "<<": 7,
            ">>>": 7,
            "+": 8,
            "-": 8,
            "*": 9,
            "/": 9,
            "%": 9,
            "**": 10,
          };

          const isClassExtendsClause = (node, parent) =>
            (t().isClassDeclaration(parent) || t().isClassExpression(parent)) &&
            parent.superClass === node;

          function NullableTypeAnnotation(node, parent) {
            return t().isArrayTypeAnnotation(parent);
          }

          function UpdateExpression(node, parent) {
            return (
              t().isMemberExpression(parent, {
                object: node,
              }) ||
              t().isCallExpression(parent, {
                callee: node,
              }) ||
              t().isNewExpression(parent, {
                callee: node,
              }) ||
              isClassExtendsClause(node, parent)
            );
          }

          function ObjectExpression(node, parent, printStack) {
            return isFirstInStatement(printStack, {
              considerArrow: true,
            });
          }

          function DoExpression(node, parent, printStack) {
            return isFirstInStatement(printStack);
          }

          function Binary(node, parent) {
            if (
              node.operator === "**" &&
              t().isBinaryExpression(parent, {
                operator: "**",
              })
            ) {
              return parent.left === node;
            }

            if (isClassExtendsClause(node, parent)) {
              return true;
            }

            if (
              ((t().isCallExpression(parent) || t().isNewExpression(parent)) &&
                parent.callee === node) ||
              t().isUnaryLike(parent) ||
              (t().isMemberExpression(parent) && parent.object === node) ||
              t().isAwaitExpression(parent)
            ) {
              return true;
            }

            if (t().isBinary(parent)) {
              const parentOp = parent.operator;
              const parentPos = PRECEDENCE[parentOp];
              const nodeOp = node.operator;
              const nodePos = PRECEDENCE[nodeOp];

              if (
                (parentPos === nodePos &&
                  parent.right === node &&
                  !t().isLogicalExpression(parent)) ||
                parentPos > nodePos
              ) {
                return true;
              }
            }

            return false;
          }

          function UnionTypeAnnotation(node, parent) {
            return (
              t().isArrayTypeAnnotation(parent) ||
              t().isNullableTypeAnnotation(parent) ||
              t().isIntersectionTypeAnnotation(parent) ||
              t().isUnionTypeAnnotation(parent)
            );
          }

          function TSAsExpression() {
            return true;
          }

          function TSTypeAssertion() {
            return true;
          }

          function BinaryExpression(node, parent) {
            return (
              node.operator === "in" &&
              (t().isVariableDeclarator(parent) || t().isFor(parent))
            );
          }

          function SequenceExpression(node, parent) {
            if (
              t().isForStatement(parent) ||
              t().isThrowStatement(parent) ||
              t().isReturnStatement(parent) ||
              (t().isIfStatement(parent) && parent.test === node) ||
              (t().isWhileStatement(parent) && parent.test === node) ||
              (t().isForInStatement(parent) && parent.right === node) ||
              (t().isSwitchStatement(parent) && parent.discriminant === node) ||
              (t().isExpressionStatement(parent) && parent.expression === node)
            ) {
              return false;
            }

            return true;
          }

          function YieldExpression(node, parent) {
            return (
              t().isBinary(parent) ||
              t().isUnaryLike(parent) ||
              t().isCallExpression(parent) ||
              t().isMemberExpression(parent) ||
              t().isNewExpression(parent) ||
              (t().isAwaitExpression(parent) && t().isYieldExpression(node)) ||
              (t().isConditionalExpression(parent) && node === parent.test) ||
              isClassExtendsClause(node, parent)
            );
          }

          function ClassExpression(node, parent, printStack) {
            return isFirstInStatement(printStack, {
              considerDefaultExports: true,
            });
          }

          function UnaryLike(node, parent) {
            return (
              t().isMemberExpression(parent, {
                object: node,
              }) ||
              t().isCallExpression(parent, {
                callee: node,
              }) ||
              t().isNewExpression(parent, {
                callee: node,
              }) ||
              t().isBinaryExpression(parent, {
                operator: "**",
                left: node,
              }) ||
              isClassExtendsClause(node, parent)
            );
          }

          function FunctionExpression(node, parent, printStack) {
            return isFirstInStatement(printStack, {
              considerDefaultExports: true,
            });
          }

          function ArrowFunctionExpression(node, parent) {
            return (
              t().isExportDeclaration(parent) ||
              ConditionalExpression(node, parent)
            );
          }

          function ConditionalExpression(node, parent) {
            if (
              t().isUnaryLike(parent) ||
              t().isBinary(parent) ||
              t().isConditionalExpression(parent, {
                test: node,
              }) ||
              t().isAwaitExpression(parent) ||
              t().isOptionalMemberExpression(parent) ||
              t().isTaggedTemplateExpression(parent) ||
              t().isTSTypeAssertion(parent) ||
              t().isTSAsExpression(parent)
            ) {
              return true;
            }

            return UnaryLike(node, parent);
          }

          function OptionalMemberExpression(node, parent) {
            return (
              t().isCallExpression(parent) || t().isMemberExpression(parent)
            );
          }

          function AssignmentExpression(node) {
            if (t().isObjectPattern(node.left)) {
              return true;
            } else {
              return ConditionalExpression(...arguments);
            }
          }

          function NewExpression(node, parent) {
            return isClassExtendsClause(node, parent);
          }

          function isFirstInStatement(
            printStack,
            { considerArrow = false, considerDefaultExports = false } = {}
          ) {
            let i = printStack.length - 1;
            let node = printStack[i];
            i--;
            let parent = printStack[i];

            while (i > 0) {
              if (
                t().isExpressionStatement(parent, {
                  expression: node,
                }) ||
                t().isTaggedTemplateExpression(parent) ||
                (considerDefaultExports &&
                  t().isExportDefaultDeclaration(parent, {
                    declaration: node,
                  })) ||
                (considerArrow &&
                  t().isArrowFunctionExpression(parent, {
                    body: node,
                  }))
              ) {
                return true;
              }

              if (
                t().isCallExpression(parent, {
                  callee: node,
                }) ||
                (t().isSequenceExpression(parent) &&
                  parent.expressions[0] === node) ||
                t().isMemberExpression(parent, {
                  object: node,
                }) ||
                t().isConditional(parent, {
                  test: node,
                }) ||
                t().isBinary(parent, {
                  left: node,
                }) ||
                t().isAssignmentExpression(parent, {
                  left: node,
                })
              ) {
                node = parent;
                i--;
                parent = printStack[i];
              } else {
                return false;
              }
            }

            return false;
          }
        },
        /* 348 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });

          var _templateLiterals = __webpack_require__(349);

          Object.keys(_templateLiterals).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _templateLiterals[key];
              },
            });
          });

          var _expressions = __webpack_require__(350);

          Object.keys(_expressions).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _expressions[key];
              },
            });
          });

          var _statements = __webpack_require__(351);

          Object.keys(_statements).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _statements[key];
              },
            });
          });

          var _classes = __webpack_require__(352);

          Object.keys(_classes).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _classes[key];
              },
            });
          });

          var _methods = __webpack_require__(353);

          Object.keys(_methods).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _methods[key];
              },
            });
          });

          var _modules = __webpack_require__(144);

          Object.keys(_modules).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _modules[key];
              },
            });
          });

          var _types = __webpack_require__(80);

          Object.keys(_types).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _types[key];
              },
            });
          });

          var _flow = __webpack_require__(358);

          Object.keys(_flow).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _flow[key];
              },
            });
          });

          var _base = __webpack_require__(359);

          Object.keys(_base).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _base[key];
              },
            });
          });

          var _jsx = __webpack_require__(360);

          Object.keys(_jsx).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _jsx[key];
              },
            });
          });

          var _typescript = __webpack_require__(361);

          Object.keys(_typescript).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function() {
                return _typescript[key];
              },
            });
          });
        },
        /* 349 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.TaggedTemplateExpression = TaggedTemplateExpression;
          exports.TemplateElement = TemplateElement;
          exports.TemplateLiteral = TemplateLiteral;

          function TaggedTemplateExpression(node) {
            this.print(node.tag, node);
            this.print(node.typeParameters, node);
            this.print(node.quasi, node);
          }

          function TemplateElement(node, parent) {
            const isFirst = parent.quasis[0] === node;
            const isLast = parent.quasis[parent.quasis.length - 1] === node;
            const value =
              (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
            this.token(value);
          }

          function TemplateLiteral(node) {
            const quasis = node.quasis;

            for (let i = 0; i < quasis.length; i++) {
              this.print(quasis[i], node);

              if (i + 1 < quasis.length) {
                this.print(node.expressions[i], node);
              }
            }
          }
        },
        /* 350 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.UnaryExpression = UnaryExpression;
          exports.DoExpression = DoExpression;
          exports.ParenthesizedExpression = ParenthesizedExpression;
          exports.UpdateExpression = UpdateExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.NewExpression = NewExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.ThisExpression = ThisExpression;
          exports.Super = Super;
          exports.Decorator = Decorator;
          exports.OptionalMemberExpression = OptionalMemberExpression;
          exports.OptionalCallExpression = OptionalCallExpression;
          exports.CallExpression = CallExpression;
          exports.Import = Import;
          exports.EmptyStatement = EmptyStatement;
          exports.ExpressionStatement = ExpressionStatement;
          exports.AssignmentPattern = AssignmentPattern;
          exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;
          exports.BindExpression = BindExpression;
          exports.MemberExpression = MemberExpression;
          exports.MetaProperty = MetaProperty;
          exports.PrivateName = PrivateName;
          exports.AwaitExpression = exports.YieldExpression = void 0;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var n = _interopRequireWildcard(__webpack_require__(143));

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function UnaryExpression(node) {
            if (
              node.operator === "void" ||
              node.operator === "delete" ||
              node.operator === "typeof" ||
              node.operator === "throw"
            ) {
              this.word(node.operator);
              this.space();
            } else {
              this.token(node.operator);
            }

            this.print(node.argument, node);
          }

          function DoExpression(node) {
            this.word("do");
            this.space();
            this.print(node.body, node);
          }

          function ParenthesizedExpression(node) {
            this.token("(");
            this.print(node.expression, node);
            this.token(")");
          }

          function UpdateExpression(node) {
            if (node.prefix) {
              this.token(node.operator);
              this.print(node.argument, node);
            } else {
              this.startTerminatorless(true);
              this.print(node.argument, node);
              this.endTerminatorless();
              this.token(node.operator);
            }
          }

          function ConditionalExpression(node) {
            this.print(node.test, node);
            this.space();
            this.token("?");
            this.space();
            this.print(node.consequent, node);
            this.space();
            this.token(":");
            this.space();
            this.print(node.alternate, node);
          }

          function NewExpression(node, parent) {
            this.word("new");
            this.space();
            this.print(node.callee, node);

            if (
              this.format.minified &&
              node.arguments.length === 0 &&
              !node.optional &&
              !t().isCallExpression(parent, {
                callee: node,
              }) &&
              !t().isMemberExpression(parent) &&
              !t().isNewExpression(parent)
            ) {
              return;
            }

            this.print(node.typeArguments, node);
            this.print(node.typeParameters, node);

            if (node.optional) {
              this.token("?.");
            }

            this.token("(");
            this.printList(node.arguments, node);
            this.token(")");
          }

          function SequenceExpression(node) {
            this.printList(node.expressions, node);
          }

          function ThisExpression() {
            this.word("this");
          }

          function Super() {
            this.word("super");
          }

          function Decorator(node) {
            this.token("@");
            this.print(node.expression, node);
            this.newline();
          }

          function OptionalMemberExpression(node) {
            this.print(node.object, node);

            if (!node.computed && t().isMemberExpression(node.property)) {
              throw new TypeError(
                "Got a MemberExpression for MemberExpression property"
              );
            }

            let computed = node.computed;

            if (
              t().isLiteral(node.property) &&
              typeof node.property.value === "number"
            ) {
              computed = true;
            }

            if (node.optional) {
              this.token("?.");
            }

            if (computed) {
              this.token("[");
              this.print(node.property, node);
              this.token("]");
            } else {
              if (!node.optional) {
                this.token(".");
              }

              this.print(node.property, node);
            }
          }

          function OptionalCallExpression(node) {
            this.print(node.callee, node);
            this.print(node.typeArguments, node);
            this.print(node.typeParameters, node);

            if (node.optional) {
              this.token("?.");
            }

            this.token("(");
            this.printList(node.arguments, node);
            this.token(")");
          }

          function CallExpression(node) {
            this.print(node.callee, node);
            this.print(node.typeArguments, node);
            this.print(node.typeParameters, node);
            this.token("(");
            this.printList(node.arguments, node);
            this.token(")");
          }

          function Import() {
            this.word("import");
          }

          function buildYieldAwait(keyword) {
            return function(node) {
              this.word(keyword);

              if (node.delegate) {
                this.token("*");
              }

              if (node.argument) {
                this.space();
                const terminatorState = this.startTerminatorless();
                this.print(node.argument, node);
                this.endTerminatorless(terminatorState);
              }
            };
          }

          const YieldExpression = buildYieldAwait("yield");
          exports.YieldExpression = YieldExpression;
          const AwaitExpression = buildYieldAwait("await");
          exports.AwaitExpression = AwaitExpression;

          function EmptyStatement() {
            this.semicolon(true);
          }

          function ExpressionStatement(node) {
            this.print(node.expression, node);
            this.semicolon();
          }

          function AssignmentPattern(node) {
            this.print(node.left, node);
            if (node.left.optional) this.token("?");
            this.print(node.left.typeAnnotation, node);
            this.space();
            this.token("=");
            this.space();
            this.print(node.right, node);
          }

          function AssignmentExpression(node, parent) {
            const parens =
              this.inForStatementInitCounter &&
              node.operator === "in" &&
              !n.needsParens(node, parent);

            if (parens) {
              this.token("(");
            }

            this.print(node.left, node);
            this.space();

            if (node.operator === "in" || node.operator === "instanceof") {
              this.word(node.operator);
            } else {
              this.token(node.operator);
            }

            this.space();
            this.print(node.right, node);

            if (parens) {
              this.token(")");
            }
          }

          function BindExpression(node) {
            this.print(node.object, node);
            this.token("::");
            this.print(node.callee, node);
          }

          function MemberExpression(node) {
            this.print(node.object, node);

            if (!node.computed && t().isMemberExpression(node.property)) {
              throw new TypeError(
                "Got a MemberExpression for MemberExpression property"
              );
            }

            let computed = node.computed;

            if (
              t().isLiteral(node.property) &&
              typeof node.property.value === "number"
            ) {
              computed = true;
            }

            if (computed) {
              this.token("[");
              this.print(node.property, node);
              this.token("]");
            } else {
              this.token(".");
              this.print(node.property, node);
            }
          }

          function MetaProperty(node) {
            this.print(node.meta, node);
            this.token(".");
            this.print(node.property, node);
          }

          function PrivateName(node) {
            this.token("#");
            this.print(node.id, node);
          }
        },
        /* 351 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.WithStatement = WithStatement;
          exports.IfStatement = IfStatement;
          exports.ForStatement = ForStatement;
          exports.WhileStatement = WhileStatement;
          exports.DoWhileStatement = DoWhileStatement;
          exports.LabeledStatement = LabeledStatement;
          exports.TryStatement = TryStatement;
          exports.CatchClause = CatchClause;
          exports.SwitchStatement = SwitchStatement;
          exports.SwitchCase = SwitchCase;
          exports.DebuggerStatement = DebuggerStatement;
          exports.VariableDeclaration = VariableDeclaration;
          exports.VariableDeclarator = VariableDeclarator;
          exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function WithStatement(node) {
            this.word("with");
            this.space();
            this.token("(");
            this.print(node.object, node);
            this.token(")");
            this.printBlock(node);
          }

          function IfStatement(node) {
            this.word("if");
            this.space();
            this.token("(");
            this.print(node.test, node);
            this.token(")");
            this.space();
            const needsBlock =
              node.alternate &&
              t().isIfStatement(getLastStatement(node.consequent));

            if (needsBlock) {
              this.token("{");
              this.newline();
              this.indent();
            }

            this.printAndIndentOnComments(node.consequent, node);

            if (needsBlock) {
              this.dedent();
              this.newline();
              this.token("}");
            }

            if (node.alternate) {
              if (this.endsWith("}")) this.space();
              this.word("else");
              this.space();
              this.printAndIndentOnComments(node.alternate, node);
            }
          }

          function getLastStatement(statement) {
            if (!t().isStatement(statement.body)) return statement;
            return getLastStatement(statement.body);
          }

          function ForStatement(node) {
            this.word("for");
            this.space();
            this.token("(");
            this.inForStatementInitCounter++;
            this.print(node.init, node);
            this.inForStatementInitCounter--;
            this.token(";");

            if (node.test) {
              this.space();
              this.print(node.test, node);
            }

            this.token(";");

            if (node.update) {
              this.space();
              this.print(node.update, node);
            }

            this.token(")");
            this.printBlock(node);
          }

          function WhileStatement(node) {
            this.word("while");
            this.space();
            this.token("(");
            this.print(node.test, node);
            this.token(")");
            this.printBlock(node);
          }

          const buildForXStatement = function(op) {
            return function(node) {
              this.word("for");
              this.space();

              if (op === "of" && node.await) {
                this.word("await");
                this.space();
              }

              this.token("(");
              this.print(node.left, node);
              this.space();
              this.word(op);
              this.space();
              this.print(node.right, node);
              this.token(")");
              this.printBlock(node);
            };
          };

          const ForInStatement = buildForXStatement("in");
          exports.ForInStatement = ForInStatement;
          const ForOfStatement = buildForXStatement("of");
          exports.ForOfStatement = ForOfStatement;

          function DoWhileStatement(node) {
            this.word("do");
            this.space();
            this.print(node.body, node);
            this.space();
            this.word("while");
            this.space();
            this.token("(");
            this.print(node.test, node);
            this.token(")");
            this.semicolon();
          }

          function buildLabelStatement(prefix, key = "label") {
            return function(node) {
              this.word(prefix);
              const label = node[key];

              if (label) {
                this.space();
                const isLabel = key == "label";
                const terminatorState = this.startTerminatorless(isLabel);
                this.print(label, node);
                this.endTerminatorless(terminatorState);
              }

              this.semicolon();
            };
          }

          const ContinueStatement = buildLabelStatement("continue");
          exports.ContinueStatement = ContinueStatement;
          const ReturnStatement = buildLabelStatement("return", "argument");
          exports.ReturnStatement = ReturnStatement;
          const BreakStatement = buildLabelStatement("break");
          exports.BreakStatement = BreakStatement;
          const ThrowStatement = buildLabelStatement("throw", "argument");
          exports.ThrowStatement = ThrowStatement;

          function LabeledStatement(node) {
            this.print(node.label, node);
            this.token(":");
            this.space();
            this.print(node.body, node);
          }

          function TryStatement(node) {
            this.word("try");
            this.space();
            this.print(node.block, node);
            this.space();

            if (node.handlers) {
              this.print(node.handlers[0], node);
            } else {
              this.print(node.handler, node);
            }

            if (node.finalizer) {
              this.space();
              this.word("finally");
              this.space();
              this.print(node.finalizer, node);
            }
          }

          function CatchClause(node) {
            this.word("catch");
            this.space();

            if (node.param) {
              this.token("(");
              this.print(node.param, node);
              this.token(")");
              this.space();
            }

            this.print(node.body, node);
          }

          function SwitchStatement(node) {
            this.word("switch");
            this.space();
            this.token("(");
            this.print(node.discriminant, node);
            this.token(")");
            this.space();
            this.token("{");
            this.printSequence(node.cases, node, {
              indent: true,

              addNewlines(leading, cas) {
                if (!leading && node.cases[node.cases.length - 1] === cas)
                  return -1;
              },
            });
            this.token("}");
          }

          function SwitchCase(node) {
            if (node.test) {
              this.word("case");
              this.space();
              this.print(node.test, node);
              this.token(":");
            } else {
              this.word("default");
              this.token(":");
            }

            if (node.consequent.length) {
              this.newline();
              this.printSequence(node.consequent, node, {
                indent: true,
              });
            }
          }

          function DebuggerStatement() {
            this.word("debugger");
            this.semicolon();
          }

          function variableDeclarationIndent() {
            this.token(",");
            this.newline();
            if (this.endsWith("\n"))
              for (let i = 0; i < 4; i++) this.space(true);
          }

          function constDeclarationIndent() {
            this.token(",");
            this.newline();
            if (this.endsWith("\n"))
              for (let i = 0; i < 6; i++) this.space(true);
          }

          function VariableDeclaration(node, parent) {
            if (node.declare) {
              this.word("declare");
              this.space();
            }

            this.word(node.kind);
            this.space();
            let hasInits = false;

            if (!t().isFor(parent)) {
              for (const declar of node.declarations) {
                if (declar.init) {
                  hasInits = true;
                }
              }
            }

            let separator;

            if (hasInits) {
              separator =
                node.kind === "const"
                  ? constDeclarationIndent
                  : variableDeclarationIndent;
            }

            this.printList(node.declarations, node, {
              separator,
            });

            if (t().isFor(parent)) {
              if (parent.left === node || parent.init === node) return;
            }

            this.semicolon();
          }

          function VariableDeclarator(node) {
            this.print(node.id, node);
            if (node.definite) this.token("!");
            this.print(node.id.typeAnnotation, node);

            if (node.init) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.init, node);
            }
          }
        },
        /* 352 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
          exports.ClassBody = ClassBody;
          exports.ClassProperty = ClassProperty;
          exports.ClassPrivateProperty = ClassPrivateProperty;
          exports.ClassMethod = ClassMethod;
          exports.ClassPrivateMethod = ClassPrivateMethod;
          exports._classMethodHead = _classMethodHead;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function ClassDeclaration(node, parent) {
            if (
              !this.format.decoratorsBeforeExport ||
              (!t().isExportDefaultDeclaration(parent) &&
                !t().isExportNamedDeclaration(parent))
            ) {
              this.printJoin(node.decorators, node);
            }

            if (node.declare) {
              this.word("declare");
              this.space();
            }

            if (node.abstract) {
              this.word("abstract");
              this.space();
            }

            this.word("class");

            if (node.id) {
              this.space();
              this.print(node.id, node);
            }

            this.print(node.typeParameters, node);

            if (node.superClass) {
              this.space();
              this.word("extends");
              this.space();
              this.print(node.superClass, node);
              this.print(node.superTypeParameters, node);
            }

            if (node.implements) {
              this.space();
              this.word("implements");
              this.space();
              this.printList(node.implements, node);
            }

            this.space();
            this.print(node.body, node);
          }

          function ClassBody(node) {
            this.token("{");
            this.printInnerComments(node);

            if (node.body.length === 0) {
              this.token("}");
            } else {
              this.newline();
              this.indent();
              this.printSequence(node.body, node);
              this.dedent();
              if (!this.endsWith("\n")) this.newline();
              this.rightBrace();
            }
          }

          function ClassProperty(node) {
            this.printJoin(node.decorators, node);

            if (node.accessibility) {
              this.word(node.accessibility);
              this.space();
            }

            if (node.static) {
              this.word("static");
              this.space();
            }

            if (node.abstract) {
              this.word("abstract");
              this.space();
            }

            if (node.readonly) {
              this.word("readonly");
              this.space();
            }

            if (node.computed) {
              this.token("[");
              this.print(node.key, node);
              this.token("]");
            } else {
              this._variance(node);

              this.print(node.key, node);
            }

            if (node.optional) {
              this.token("?");
            }

            if (node.definite) {
              this.token("!");
            }

            this.print(node.typeAnnotation, node);

            if (node.value) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.value, node);
            }

            this.semicolon();
          }

          function ClassPrivateProperty(node) {
            if (node.static) {
              this.word("static");
              this.space();
            }

            this.print(node.key, node);
            this.print(node.typeAnnotation, node);

            if (node.value) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.value, node);
            }

            this.semicolon();
          }

          function ClassMethod(node) {
            this._classMethodHead(node);

            this.space();
            this.print(node.body, node);
          }

          function ClassPrivateMethod(node) {
            this._classMethodHead(node);

            this.space();
            this.print(node.body, node);
          }

          function _classMethodHead(node) {
            this.printJoin(node.decorators, node);

            if (node.accessibility) {
              this.word(node.accessibility);
              this.space();
            }

            if (node.abstract) {
              this.word("abstract");
              this.space();
            }

            if (node.static) {
              this.word("static");
              this.space();
            }

            this._methodHead(node);
          }
        },
        /* 353 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports._params = _params;
          exports._parameters = _parameters;
          exports._param = _param;
          exports._methodHead = _methodHead;
          exports._predicate = _predicate;
          exports._functionHead = _functionHead;
          exports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;
          exports.ArrowFunctionExpression = ArrowFunctionExpression;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _params(node) {
            this.print(node.typeParameters, node);
            this.token("(");

            this._parameters(node.params, node);

            this.token(")");
            this.print(node.returnType, node);
          }

          function _parameters(parameters, parent) {
            for (let i = 0; i < parameters.length; i++) {
              this._param(parameters[i], parent);

              if (i < parameters.length - 1) {
                this.token(",");
                this.space();
              }
            }
          }

          function _param(parameter, parent) {
            this.printJoin(parameter.decorators, parameter);
            this.print(parameter, parent);
            if (parameter.optional) this.token("?");
            this.print(parameter.typeAnnotation, parameter);
          }

          function _methodHead(node) {
            const kind = node.kind;
            const key = node.key;

            if (kind === "get" || kind === "set") {
              this.word(kind);
              this.space();
            }

            if (node.async) {
              this.word("async");
              this.space();
            }

            if (kind === "method" || kind === "init") {
              if (node.generator) {
                this.token("*");
              }
            }

            if (node.computed) {
              this.token("[");
              this.print(key, node);
              this.token("]");
            } else {
              this.print(key, node);
            }

            if (node.optional) {
              this.token("?");
            }

            this._params(node);
          }

          function _predicate(node) {
            if (node.predicate) {
              if (!node.returnType) {
                this.token(":");
              }

              this.space();
              this.print(node.predicate, node);
            }
          }

          function _functionHead(node) {
            if (node.async) {
              this.word("async");
              this.space();
            }

            this.word("function");
            if (node.generator) this.token("*");
            this.space();

            if (node.id) {
              this.print(node.id, node);
            }

            this._params(node);

            this._predicate(node);
          }

          function FunctionExpression(node) {
            this._functionHead(node);

            this.space();
            this.print(node.body, node);
          }

          function ArrowFunctionExpression(node) {
            if (node.async) {
              this.word("async");
              this.space();
            }

            const firstParam = node.params[0];

            if (
              node.params.length === 1 &&
              t().isIdentifier(firstParam) &&
              !hasTypes(node, firstParam)
            ) {
              if (
                this.format.retainLines &&
                node.loc &&
                node.body.loc &&
                node.loc.start.line < node.body.loc.start.line
              ) {
                this.token("(");

                if (
                  firstParam.loc &&
                  firstParam.loc.start.line > node.loc.start.line
                ) {
                  this.indent();
                  this.print(firstParam, node);
                  this.dedent();

                  this._catchUp("start", node.body.loc);
                } else {
                  this.print(firstParam, node);
                }

                this.token(")");
              } else {
                this.print(firstParam, node);
              }
            } else {
              this._params(node);
            }

            this._predicate(node);

            this.space();
            this.token("=>");
            this.space();
            this.print(node.body, node);
          }

          function hasTypes(node, param) {
            return (
              node.typeParameters ||
              node.returnType ||
              param.typeAnnotation ||
              param.optional ||
              param.trailingComments
            );
          }
        },
        /* 354 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(Buffer) {
            const object = {};
            const hasOwnProperty = object.hasOwnProperty;

            const forOwn = (object, callback) => {
              for (const key in object) {
                if (hasOwnProperty.call(object, key)) {
                  callback(key, object[key]);
                }
              }
            };

            const extend = (destination, source) => {
              if (!source) {
                return destination;
              }

              forOwn(source, (key, value) => {
                destination[key] = value;
              });
              return destination;
            };

            const forEach = (array, callback) => {
              const length = array.length;
              let index = -1;

              while (++index < length) {
                callback(array[index]);
              }
            };

            const toString = object.toString;
            const isArray = Array.isArray;
            const isBuffer = Buffer.isBuffer;

            const isObject = value => {
              return toString.call(value) == "[object Object]";
            };

            const isString = value => {
              return (
                typeof value == "string" ||
                toString.call(value) == "[object String]"
              );
            };

            const isNumber = value => {
              return (
                typeof value == "number" ||
                toString.call(value) == "[object Number]"
              );
            };

            const isFunction = value => {
              return typeof value == "function";
            };

            const isMap = value => {
              return toString.call(value) == "[object Map]";
            };

            const isSet = value => {
              return toString.call(value) == "[object Set]";
            };

            const singleEscapes = {
              '"': '\\"',
              "'": "\\'",
              "\\": "\\\\",
              "\b": "\\b",
              "\f": "\\f",
              "\n": "\\n",
              "\r": "\\r",
              "\t": "\\t",
            };
            const regexSingleEscape = /["'\\\b\f\n\r\t]/;
            const regexDigit = /[0-9]/;
            const regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;

            const jsesc = (argument, options) => {
              const increaseIndentation = () => {
                oldIndent = indent;
                ++options.indentLevel;
                indent = options.indent.repeat(options.indentLevel);
              };

              const defaults = {
                escapeEverything: false,
                minimal: false,
                isScriptContext: false,
                quotes: "single",
                wrap: false,
                es6: false,
                json: false,
                compact: true,
                lowercaseHex: false,
                numbers: "decimal",
                indent: "\t",
                indentLevel: 0,
                __inline1__: false,
                __inline2__: false,
              };
              const json = options && options.json;

              if (json) {
                defaults.quotes = "double";
                defaults.wrap = true;
              }

              options = extend(defaults, options);

              if (
                options.quotes != "single" &&
                options.quotes != "double" &&
                options.quotes != "backtick"
              ) {
                options.quotes = "single";
              }

              const quote =
                options.quotes == "double"
                  ? '"'
                  : options.quotes == "backtick"
                  ? "`"
                  : "'";
              const compact = options.compact;
              const lowercaseHex = options.lowercaseHex;
              let indent = options.indent.repeat(options.indentLevel);
              let oldIndent = "";
              const inline1 = options.__inline1__;
              const inline2 = options.__inline2__;
              const newLine = compact ? "" : "\n";
              let result;
              let isEmpty = true;
              const useBinNumbers = options.numbers == "binary";
              const useOctNumbers = options.numbers == "octal";
              const useDecNumbers = options.numbers == "decimal";
              const useHexNumbers = options.numbers == "hexadecimal";

              if (json && argument && isFunction(argument.toJSON)) {
                argument = argument.toJSON();
              }

              if (!isString(argument)) {
                if (isMap(argument)) {
                  if (argument.size == 0) {
                    return "new Map()";
                  }

                  if (!compact) {
                    options.__inline1__ = true;
                    options.__inline2__ = false;
                  }

                  return (
                    "new Map(" + jsesc(Array.from(argument), options) + ")"
                  );
                }

                if (isSet(argument)) {
                  if (argument.size == 0) {
                    return "new Set()";
                  }

                  return (
                    "new Set(" + jsesc(Array.from(argument), options) + ")"
                  );
                }

                if (isBuffer(argument)) {
                  if (argument.length == 0) {
                    return "Buffer.from([])";
                  }

                  return (
                    "Buffer.from(" + jsesc(Array.from(argument), options) + ")"
                  );
                }

                if (isArray(argument)) {
                  result = [];
                  options.wrap = true;

                  if (inline1) {
                    options.__inline1__ = false;
                    options.__inline2__ = true;
                  }

                  if (!inline2) {
                    increaseIndentation();
                  }

                  forEach(argument, value => {
                    isEmpty = false;

                    if (inline2) {
                      options.__inline2__ = false;
                    }

                    result.push(
                      (compact || inline2 ? "" : indent) + jsesc(value, options)
                    );
                  });

                  if (isEmpty) {
                    return "[]";
                  }

                  if (inline2) {
                    return "[" + result.join(", ") + "]";
                  }

                  return (
                    "[" +
                    newLine +
                    result.join("," + newLine) +
                    newLine +
                    (compact ? "" : oldIndent) +
                    "]"
                  );
                } else if (isNumber(argument)) {
                  if (json) {
                    return JSON.stringify(argument);
                  }

                  if (useDecNumbers) {
                    return String(argument);
                  }

                  if (useHexNumbers) {
                    let hexadecimal = argument.toString(16);

                    if (!lowercaseHex) {
                      hexadecimal = hexadecimal.toUpperCase();
                    }

                    return "0x" + hexadecimal;
                  }

                  if (useBinNumbers) {
                    return "0b" + argument.toString(2);
                  }

                  if (useOctNumbers) {
                    return "0o" + argument.toString(8);
                  }
                } else if (!isObject(argument)) {
                  if (json) {
                    return JSON.stringify(argument) || "null";
                  }

                  return String(argument);
                } else {
                  result = [];
                  options.wrap = true;
                  increaseIndentation();
                  forOwn(argument, (key, value) => {
                    isEmpty = false;
                    result.push(
                      (compact ? "" : indent) +
                        jsesc(key, options) +
                        ":" +
                        (compact ? "" : " ") +
                        jsesc(value, options)
                    );
                  });

                  if (isEmpty) {
                    return "{}";
                  }

                  return (
                    "{" +
                    newLine +
                    result.join("," + newLine) +
                    newLine +
                    (compact ? "" : oldIndent) +
                    "}"
                  );
                }
              }

              const string = argument;
              let index = -1;
              const length = string.length;
              result = "";

              while (++index < length) {
                const character = string.charAt(index);

                if (options.es6) {
                  const first = string.charCodeAt(index);

                  if (
                    first >= 0xd800 &&
                    first <= 0xdbff &&
                    length > index + 1
                  ) {
                    const second = string.charCodeAt(index + 1);

                    if (second >= 0xdc00 && second <= 0xdfff) {
                      const codePoint =
                        (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                      let hexadecimal = codePoint.toString(16);

                      if (!lowercaseHex) {
                        hexadecimal = hexadecimal.toUpperCase();
                      }

                      result += "\\u{" + hexadecimal + "}";
                      ++index;
                      continue;
                    }
                  }
                }

                if (!options.escapeEverything) {
                  if (regexWhitelist.test(character)) {
                    result += character;
                    continue;
                  }

                  if (character == '"') {
                    result += quote == character ? '\\"' : character;
                    continue;
                  }

                  if (character == "`") {
                    result += quote == character ? "\\`" : character;
                    continue;
                  }

                  if (character == "'") {
                    result += quote == character ? "\\'" : character;
                    continue;
                  }
                }

                if (
                  character == "\0" &&
                  !json &&
                  !regexDigit.test(string.charAt(index + 1))
                ) {
                  result += "\\0";
                  continue;
                }

                if (regexSingleEscape.test(character)) {
                  result += singleEscapes[character];
                  continue;
                }

                const charCode = character.charCodeAt(0);

                if (
                  options.minimal &&
                  charCode != 0x2028 &&
                  charCode != 0x2029
                ) {
                  result += character;
                  continue;
                }

                let hexadecimal = charCode.toString(16);

                if (!lowercaseHex) {
                  hexadecimal = hexadecimal.toUpperCase();
                }

                const longhand = hexadecimal.length > 2 || json;
                const escaped =
                  "\\" +
                  (longhand ? "u" : "x") +
                  ("0000" + hexadecimal).slice(longhand ? -4 : -2);
                result += escaped;
                continue;
              }

              if (options.wrap) {
                result = quote + result + quote;
              }

              if (quote == "`") {
                result = result.replace(/\$\{/g, "\\${");
              }

              if (options.isScriptContext) {
                return result
                  .replace(/<\/(script|style)/gi, "<\\/$1")
                  .replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
              }

              return result;
            };

            jsesc.version = "2.5.2";
            module.exports = jsesc;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(145).Buffer));
        },
        /* 355 */
        function(module, exports, __webpack_require__) {
          "use strict";

          exports.byteLength = byteLength;
          exports.toByteArray = toByteArray;
          exports.fromByteArray = fromByteArray;
          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
          var code =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          }

          revLookup["-".charCodeAt(0)] = 62;
          revLookup["_".charCodeAt(0)] = 63;

          function getLens(b64) {
            var len = b64.length;

            if (len % 4 > 0) {
              throw new Error("Invalid string. Length must be a multiple of 4");
            }

            var validLen = b64.indexOf("=");
            if (validLen === -1) validLen = len;
            var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);
            return [validLen, placeHoldersLen];
          }

          function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
          }

          function _byteLength(b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
          }

          function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0;
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

            for (var i = 0; i < len; i += 4) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)];
              arr[curByte++] = (tmp >> 16) & 0xff;
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4);
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2);
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            return arr;
          }

          function tripletToBase64(num) {
            return (
              lookup[(num >> 18) & 0x3f] +
              lookup[(num >> 12) & 0x3f] +
              lookup[(num >> 6) & 0x3f] +
              lookup[num & 0x3f]
            );
          }

          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];

            for (var i = start; i < end; i += 3) {
              tmp =
                ((uint8[i] << 16) & 0xff0000) +
                ((uint8[i + 1] << 8) & 0xff00) +
                (uint8[i + 2] & 0xff);
              output.push(tripletToBase64(tmp));
            }

            return output.join("");
          }

          function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3;
            var parts = [];
            var maxChunkLength = 16383;

            for (
              var i = 0, len2 = len - extraBytes;
              i < len2;
              i += maxChunkLength
            ) {
              parts.push(
                encodeChunk(
                  uint8,
                  i,
                  i + maxChunkLength > len2 ? len2 : i + maxChunkLength
                )
              );
            }

            if (extraBytes === 1) {
              tmp = uint8[len - 1];
              parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1];
              parts.push(
                lookup[tmp >> 10] +
                  lookup[(tmp >> 4) & 0x3f] +
                  lookup[(tmp << 2) & 0x3f] +
                  "="
              );
            }

            return parts.join("");
          }
        },
        /* 356 */
        function(module, exports) {
          exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & ((1 << -nBits) - 1);
            s >>= -nBits;
            nBits += eLen;

            for (
              ;
              nBits > 0;
              e = e * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            m = e & ((1 << -nBits) - 1);
            e >>= -nBits;
            nBits += mLen;

            for (
              ;
              nBits > 0;
              m = m * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }

            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };

          exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
            value = Math.abs(value);

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);

              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }

              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }

              if (value * c >= 2) {
                e++;
                c /= 2;
              }

              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }

            for (
              ;
              mLen >= 8;
              buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
            ) {}

            e = (e << mLen) | m;
            eLen += mLen;

            for (
              ;
              eLen > 0;
              buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
            ) {}

            buffer[offset + i - d] |= s * 128;
          };
        },
        /* 357 */
        function(module, exports) {
          var toString = {}.toString;

          module.exports =
            Array.isArray ||
            function(arr) {
              return toString.call(arr) == "[object Array]";
            };
        },
        /* 358 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.AnyTypeAnnotation = AnyTypeAnnotation;
          exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
          exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
          exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
          exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
          exports.DeclareClass = DeclareClass;
          exports.DeclareFunction = DeclareFunction;
          exports.InferredPredicate = InferredPredicate;
          exports.DeclaredPredicate = DeclaredPredicate;
          exports.DeclareInterface = DeclareInterface;
          exports.DeclareModule = DeclareModule;
          exports.DeclareModuleExports = DeclareModuleExports;
          exports.DeclareTypeAlias = DeclareTypeAlias;
          exports.DeclareOpaqueType = DeclareOpaqueType;
          exports.DeclareVariable = DeclareVariable;
          exports.DeclareExportDeclaration = DeclareExportDeclaration;
          exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
          exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
          exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
          exports.FunctionTypeParam = FunctionTypeParam;
          exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
          exports._interfaceish = _interfaceish;
          exports._variance = _variance;
          exports.InterfaceDeclaration = InterfaceDeclaration;
          exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
          exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
          exports.MixedTypeAnnotation = MixedTypeAnnotation;
          exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
          exports.NullableTypeAnnotation = NullableTypeAnnotation;
          exports.NumberTypeAnnotation = NumberTypeAnnotation;
          exports.StringTypeAnnotation = StringTypeAnnotation;
          exports.ThisTypeAnnotation = ThisTypeAnnotation;
          exports.TupleTypeAnnotation = TupleTypeAnnotation;
          exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
          exports.TypeAlias = TypeAlias;
          exports.TypeAnnotation = TypeAnnotation;
          exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
          exports.TypeParameter = TypeParameter;
          exports.OpaqueType = OpaqueType;
          exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
          exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
          exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
          exports.ObjectTypeIndexer = ObjectTypeIndexer;
          exports.ObjectTypeProperty = ObjectTypeProperty;
          exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
          exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
          exports.UnionTypeAnnotation = UnionTypeAnnotation;
          exports.TypeCastExpression = TypeCastExpression;
          exports.Variance = Variance;
          exports.VoidTypeAnnotation = VoidTypeAnnotation;
          Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
            enumerable: true,
            get: function() {
              return _types.NumericLiteral;
            },
          });
          Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
            enumerable: true,
            get: function() {
              return _types.StringLiteral;
            },
          });

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _modules = __webpack_require__(144);

          var _types = __webpack_require__(80);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function AnyTypeAnnotation() {
            this.word("any");
          }

          function ArrayTypeAnnotation(node) {
            this.print(node.elementType, node);
            this.token("[");
            this.token("]");
          }

          function BooleanTypeAnnotation() {
            this.word("boolean");
          }

          function BooleanLiteralTypeAnnotation(node) {
            this.word(node.value ? "true" : "false");
          }

          function NullLiteralTypeAnnotation() {
            this.word("null");
          }

          function DeclareClass(node, parent) {
            if (!t().isDeclareExportDeclaration(parent)) {
              this.word("declare");
              this.space();
            }

            this.word("class");
            this.space();

            this._interfaceish(node);
          }

          function DeclareFunction(node, parent) {
            if (!t().isDeclareExportDeclaration(parent)) {
              this.word("declare");
              this.space();
            }

            this.word("function");
            this.space();
            this.print(node.id, node);
            this.print(node.id.typeAnnotation.typeAnnotation, node);

            if (node.predicate) {
              this.space();
              this.print(node.predicate, node);
            }

            this.semicolon();
          }

          function InferredPredicate() {
            this.token("%");
            this.word("checks");
          }

          function DeclaredPredicate(node) {
            this.token("%");
            this.word("checks");
            this.token("(");
            this.print(node.value, node);
            this.token(")");
          }

          function DeclareInterface(node) {
            this.word("declare");
            this.space();
            this.InterfaceDeclaration(node);
          }

          function DeclareModule(node) {
            this.word("declare");
            this.space();
            this.word("module");
            this.space();
            this.print(node.id, node);
            this.space();
            this.print(node.body, node);
          }

          function DeclareModuleExports(node) {
            this.word("declare");
            this.space();
            this.word("module");
            this.token(".");
            this.word("exports");
            this.print(node.typeAnnotation, node);
          }

          function DeclareTypeAlias(node) {
            this.word("declare");
            this.space();
            this.TypeAlias(node);
          }

          function DeclareOpaqueType(node, parent) {
            if (!t().isDeclareExportDeclaration(parent)) {
              this.word("declare");
              this.space();
            }

            this.OpaqueType(node);
          }

          function DeclareVariable(node, parent) {
            if (!t().isDeclareExportDeclaration(parent)) {
              this.word("declare");
              this.space();
            }

            this.word("var");
            this.space();
            this.print(node.id, node);
            this.print(node.id.typeAnnotation, node);
            this.semicolon();
          }

          function DeclareExportDeclaration(node) {
            this.word("declare");
            this.space();
            this.word("export");
            this.space();

            if (node.default) {
              this.word("default");
              this.space();
            }

            FlowExportDeclaration.apply(this, arguments);
          }

          function DeclareExportAllDeclaration() {
            this.word("declare");
            this.space();

            _modules.ExportAllDeclaration.apply(this, arguments);
          }

          function FlowExportDeclaration(node) {
            if (node.declaration) {
              const declar = node.declaration;
              this.print(declar, node);
              if (!t().isStatement(declar)) this.semicolon();
            } else {
              this.token("{");

              if (node.specifiers.length) {
                this.space();
                this.printList(node.specifiers, node);
                this.space();
              }

              this.token("}");

              if (node.source) {
                this.space();
                this.word("from");
                this.space();
                this.print(node.source, node);
              }

              this.semicolon();
            }
          }

          function ExistsTypeAnnotation() {
            this.token("*");
          }

          function FunctionTypeAnnotation(node, parent) {
            this.print(node.typeParameters, node);
            this.token("(");
            this.printList(node.params, node);

            if (node.rest) {
              if (node.params.length) {
                this.token(",");
                this.space();
              }

              this.token("...");
              this.print(node.rest, node);
            }

            this.token(")");

            if (
              parent.type === "ObjectTypeCallProperty" ||
              parent.type === "DeclareFunction" ||
              (parent.type === "ObjectTypeProperty" && parent.method)
            ) {
              this.token(":");
            } else {
              this.space();
              this.token("=>");
            }

            this.space();
            this.print(node.returnType, node);
          }

          function FunctionTypeParam(node) {
            this.print(node.name, node);
            if (node.optional) this.token("?");

            if (node.name) {
              this.token(":");
              this.space();
            }

            this.print(node.typeAnnotation, node);
          }

          function InterfaceExtends(node) {
            this.print(node.id, node);
            this.print(node.typeParameters, node);
          }

          function _interfaceish(node) {
            this.print(node.id, node);
            this.print(node.typeParameters, node);

            if (node.extends.length) {
              this.space();
              this.word("extends");
              this.space();
              this.printList(node.extends, node);
            }

            if (node.mixins && node.mixins.length) {
              this.space();
              this.word("mixins");
              this.space();
              this.printList(node.mixins, node);
            }

            if (node.implements && node.implements.length) {
              this.space();
              this.word("implements");
              this.space();
              this.printList(node.implements, node);
            }

            this.space();
            this.print(node.body, node);
          }

          function _variance(node) {
            if (node.variance) {
              if (node.variance.kind === "plus") {
                this.token("+");
              } else if (node.variance.kind === "minus") {
                this.token("-");
              }
            }
          }

          function InterfaceDeclaration(node) {
            this.word("interface");
            this.space();

            this._interfaceish(node);
          }

          function andSeparator() {
            this.space();
            this.token("&");
            this.space();
          }

          function InterfaceTypeAnnotation(node) {
            this.word("interface");

            if (node.extends && node.extends.length) {
              this.space();
              this.word("extends");
              this.space();
              this.printList(node.extends, node);
            }

            this.space();
            this.print(node.body, node);
          }

          function IntersectionTypeAnnotation(node) {
            this.printJoin(node.types, node, {
              separator: andSeparator,
            });
          }

          function MixedTypeAnnotation() {
            this.word("mixed");
          }

          function EmptyTypeAnnotation() {
            this.word("empty");
          }

          function NullableTypeAnnotation(node) {
            this.token("?");
            this.print(node.typeAnnotation, node);
          }

          function NumberTypeAnnotation() {
            this.word("number");
          }

          function StringTypeAnnotation() {
            this.word("string");
          }

          function ThisTypeAnnotation() {
            this.word("this");
          }

          function TupleTypeAnnotation(node) {
            this.token("[");
            this.printList(node.types, node);
            this.token("]");
          }

          function TypeofTypeAnnotation(node) {
            this.word("typeof");
            this.space();
            this.print(node.argument, node);
          }

          function TypeAlias(node) {
            this.word("type");
            this.space();
            this.print(node.id, node);
            this.print(node.typeParameters, node);
            this.space();
            this.token("=");
            this.space();
            this.print(node.right, node);
            this.semicolon();
          }

          function TypeAnnotation(node) {
            this.token(":");
            this.space();
            if (node.optional) this.token("?");
            this.print(node.typeAnnotation, node);
          }

          function TypeParameterInstantiation(node) {
            this.token("<");
            this.printList(node.params, node, {});
            this.token(">");
          }

          function TypeParameter(node) {
            this._variance(node);

            this.word(node.name);

            if (node.bound) {
              this.print(node.bound, node);
            }

            if (node.default) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.default, node);
            }
          }

          function OpaqueType(node) {
            this.word("opaque");
            this.space();
            this.word("type");
            this.space();
            this.print(node.id, node);
            this.print(node.typeParameters, node);

            if (node.supertype) {
              this.token(":");
              this.space();
              this.print(node.supertype, node);
            }

            if (node.impltype) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.impltype, node);
            }

            this.semicolon();
          }

          function ObjectTypeAnnotation(node) {
            if (node.exact) {
              this.token("{|");
            } else {
              this.token("{");
            }

            const props = node.properties.concat(
              node.callProperties || [],
              node.indexers || [],
              node.internalSlots || []
            );

            if (props.length) {
              this.space();
              this.printJoin(props, node, {
                addNewlines(leading) {
                  if (leading && !props[0]) return 1;
                },

                indent: true,
                statement: true,
                iterator: () => {
                  if (props.length !== 1) {
                    this.token(",");
                    this.space();
                  }
                },
              });
              this.space();
            }

            if (node.exact) {
              this.token("|}");
            } else {
              this.token("}");
            }
          }

          function ObjectTypeInternalSlot(node) {
            if (node.static) {
              this.word("static");
              this.space();
            }

            this.token("[");
            this.token("[");
            this.print(node.id, node);
            this.token("]");
            this.token("]");
            if (node.optional) this.token("?");

            if (!node.method) {
              this.token(":");
              this.space();
            }

            this.print(node.value, node);
          }

          function ObjectTypeCallProperty(node) {
            if (node.static) {
              this.word("static");
              this.space();
            }

            this.print(node.value, node);
          }

          function ObjectTypeIndexer(node) {
            if (node.static) {
              this.word("static");
              this.space();
            }

            this._variance(node);

            this.token("[");

            if (node.id) {
              this.print(node.id, node);
              this.token(":");
              this.space();
            }

            this.print(node.key, node);
            this.token("]");
            this.token(":");
            this.space();
            this.print(node.value, node);
          }

          function ObjectTypeProperty(node) {
            if (node.proto) {
              this.word("proto");
              this.space();
            }

            if (node.static) {
              this.word("static");
              this.space();
            }

            this._variance(node);

            this.print(node.key, node);
            if (node.optional) this.token("?");

            if (!node.method) {
              this.token(":");
              this.space();
            }

            this.print(node.value, node);
          }

          function ObjectTypeSpreadProperty(node) {
            this.token("...");
            this.print(node.argument, node);
          }

          function QualifiedTypeIdentifier(node) {
            this.print(node.qualification, node);
            this.token(".");
            this.print(node.id, node);
          }

          function orSeparator() {
            this.space();
            this.token("|");
            this.space();
          }

          function UnionTypeAnnotation(node) {
            this.printJoin(node.types, node, {
              separator: orSeparator,
            });
          }

          function TypeCastExpression(node) {
            this.token("(");
            this.print(node.expression, node);
            this.print(node.typeAnnotation, node);
            this.token(")");
          }

          function Variance(node) {
            if (node.kind === "plus") {
              this.token("+");
            } else {
              this.token("-");
            }
          }

          function VoidTypeAnnotation() {
            this.word("void");
          }
        },
        /* 359 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.File = File;
          exports.Program = Program;
          exports.BlockStatement = BlockStatement;
          exports.Noop = Noop;
          exports.Directive = Directive;
          exports.InterpreterDirective = InterpreterDirective;
          Object.defineProperty(exports, "DirectiveLiteral", {
            enumerable: true,
            get: function() {
              return _types.StringLiteral;
            },
          });

          var _types = __webpack_require__(80);

          function File(node) {
            if (node.program) {
              this.print(node.program.interpreter, node);
            }

            this.print(node.program, node);
          }

          function Program(node) {
            this.printInnerComments(node, false);
            this.printSequence(node.directives, node);
            if (node.directives && node.directives.length) this.newline();
            this.printSequence(node.body, node);
          }

          function BlockStatement(node) {
            this.token("{");
            this.printInnerComments(node);
            const hasDirectives = node.directives && node.directives.length;

            if (node.body.length || hasDirectives) {
              this.newline();
              this.printSequence(node.directives, node, {
                indent: true,
              });
              if (hasDirectives) this.newline();
              this.printSequence(node.body, node, {
                indent: true,
              });
              this.removeTrailingNewline();
              this.source("end", node.loc);
              if (!this.endsWith("\n")) this.newline();
              this.rightBrace();
            } else {
              this.source("end", node.loc);
              this.token("}");
            }
          }

          function Noop() {}

          function Directive(node) {
            this.print(node.value, node);
            this.semicolon();
          }

          function InterpreterDirective(node) {
            this.token(`#!${node.value}\n`);
          }
        },
        /* 360 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.JSXAttribute = JSXAttribute;
          exports.JSXIdentifier = JSXIdentifier;
          exports.JSXNamespacedName = JSXNamespacedName;
          exports.JSXMemberExpression = JSXMemberExpression;
          exports.JSXSpreadAttribute = JSXSpreadAttribute;
          exports.JSXExpressionContainer = JSXExpressionContainer;
          exports.JSXSpreadChild = JSXSpreadChild;
          exports.JSXText = JSXText;
          exports.JSXElement = JSXElement;
          exports.JSXOpeningElement = JSXOpeningElement;
          exports.JSXClosingElement = JSXClosingElement;
          exports.JSXEmptyExpression = JSXEmptyExpression;
          exports.JSXFragment = JSXFragment;
          exports.JSXOpeningFragment = JSXOpeningFragment;
          exports.JSXClosingFragment = JSXClosingFragment;

          function JSXAttribute(node) {
            this.print(node.name, node);

            if (node.value) {
              this.token("=");
              this.print(node.value, node);
            }
          }

          function JSXIdentifier(node) {
            this.word(node.name);
          }

          function JSXNamespacedName(node) {
            this.print(node.namespace, node);
            this.token(":");
            this.print(node.name, node);
          }

          function JSXMemberExpression(node) {
            this.print(node.object, node);
            this.token(".");
            this.print(node.property, node);
          }

          function JSXSpreadAttribute(node) {
            this.token("{");
            this.token("...");
            this.print(node.argument, node);
            this.token("}");
          }

          function JSXExpressionContainer(node) {
            this.token("{");
            this.print(node.expression, node);
            this.token("}");
          }

          function JSXSpreadChild(node) {
            this.token("{");
            this.token("...");
            this.print(node.expression, node);
            this.token("}");
          }

          function JSXText(node) {
            const raw = this.getPossibleRaw(node);

            if (raw != null) {
              this.token(raw);
            } else {
              this.token(node.value);
            }
          }

          function JSXElement(node) {
            const open = node.openingElement;
            this.print(open, node);
            if (open.selfClosing) return;
            this.indent();

            for (const child of node.children) {
              this.print(child, node);
            }

            this.dedent();
            this.print(node.closingElement, node);
          }

          function spaceSeparator() {
            this.space();
          }

          function JSXOpeningElement(node) {
            this.token("<");
            this.print(node.name, node);
            this.print(node.typeParameters, node);

            if (node.attributes.length > 0) {
              this.space();
              this.printJoin(node.attributes, node, {
                separator: spaceSeparator,
              });
            }

            if (node.selfClosing) {
              this.space();
              this.token("/>");
            } else {
              this.token(">");
            }
          }

          function JSXClosingElement(node) {
            this.token("</");
            this.print(node.name, node);
            this.token(">");
          }

          function JSXEmptyExpression(node) {
            this.printInnerComments(node);
          }

          function JSXFragment(node) {
            this.print(node.openingFragment, node);
            this.indent();

            for (const child of node.children) {
              this.print(child, node);
            }

            this.dedent();
            this.print(node.closingFragment, node);
          }

          function JSXOpeningFragment() {
            this.token("<");
            this.token(">");
          }

          function JSXClosingFragment() {
            this.token("</");
            this.token(">");
          }
        },
        /* 361 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.TSTypeAnnotation = TSTypeAnnotation;
          exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
          exports.TSTypeParameter = TSTypeParameter;
          exports.TSParameterProperty = TSParameterProperty;
          exports.TSDeclareFunction = TSDeclareFunction;
          exports.TSDeclareMethod = TSDeclareMethod;
          exports.TSQualifiedName = TSQualifiedName;
          exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
          exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
          exports.TSPropertySignature = TSPropertySignature;
          exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
          exports.TSMethodSignature = TSMethodSignature;
          exports.TSIndexSignature = TSIndexSignature;
          exports.TSAnyKeyword = TSAnyKeyword;
          exports.TSUnknownKeyword = TSUnknownKeyword;
          exports.TSNumberKeyword = TSNumberKeyword;
          exports.TSObjectKeyword = TSObjectKeyword;
          exports.TSBooleanKeyword = TSBooleanKeyword;
          exports.TSStringKeyword = TSStringKeyword;
          exports.TSSymbolKeyword = TSSymbolKeyword;
          exports.TSVoidKeyword = TSVoidKeyword;
          exports.TSUndefinedKeyword = TSUndefinedKeyword;
          exports.TSNullKeyword = TSNullKeyword;
          exports.TSNeverKeyword = TSNeverKeyword;
          exports.TSThisType = TSThisType;
          exports.TSFunctionType = TSFunctionType;
          exports.TSConstructorType = TSConstructorType;
          exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
          exports.TSTypeReference = TSTypeReference;
          exports.TSTypePredicate = TSTypePredicate;
          exports.TSTypeQuery = TSTypeQuery;
          exports.TSTypeLiteral = TSTypeLiteral;
          exports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
          exports.tsPrintBraced = tsPrintBraced;
          exports.TSArrayType = TSArrayType;
          exports.TSTupleType = TSTupleType;
          exports.TSOptionalType = TSOptionalType;
          exports.TSRestType = TSRestType;
          exports.TSUnionType = TSUnionType;
          exports.TSIntersectionType = TSIntersectionType;
          exports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;
          exports.TSConditionalType = TSConditionalType;
          exports.TSInferType = TSInferType;
          exports.TSParenthesizedType = TSParenthesizedType;
          exports.TSTypeOperator = TSTypeOperator;
          exports.TSIndexedAccessType = TSIndexedAccessType;
          exports.TSMappedType = TSMappedType;
          exports.TSLiteralType = TSLiteralType;
          exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
          exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
          exports.TSInterfaceBody = TSInterfaceBody;
          exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
          exports.TSAsExpression = TSAsExpression;
          exports.TSTypeAssertion = TSTypeAssertion;
          exports.TSEnumDeclaration = TSEnumDeclaration;
          exports.TSEnumMember = TSEnumMember;
          exports.TSModuleDeclaration = TSModuleDeclaration;
          exports.TSModuleBlock = TSModuleBlock;
          exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
          exports.TSExternalModuleReference = TSExternalModuleReference;
          exports.TSNonNullExpression = TSNonNullExpression;
          exports.TSExportAssignment = TSExportAssignment;
          exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
          exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;

          function TSTypeAnnotation(node) {
            this.token(":");
            this.space();
            if (node.optional) this.token("?");
            this.print(node.typeAnnotation, node);
          }

          function TSTypeParameterInstantiation(node) {
            this.token("<");
            this.printList(node.params, node, {});
            this.token(">");
          }

          function TSTypeParameter(node) {
            this.word(node.name);

            if (node.constraint) {
              this.space();
              this.word("extends");
              this.space();
              this.print(node.constraint, node);
            }

            if (node.default) {
              this.space();
              this.token("=");
              this.space();
              this.print(node.default, node);
            }
          }

          function TSParameterProperty(node) {
            if (node.accessibility) {
              this.word(node.accessibility);
              this.space();
            }

            if (node.readonly) {
              this.word("readonly");
              this.space();
            }

            this._param(node.parameter);
          }

          function TSDeclareFunction(node) {
            if (node.declare) {
              this.word("declare");
              this.space();
            }

            this._functionHead(node);

            this.token(";");
          }

          function TSDeclareMethod(node) {
            this._classMethodHead(node);

            this.token(";");
          }

          function TSQualifiedName(node) {
            this.print(node.left, node);
            this.token(".");
            this.print(node.right, node);
          }

          function TSCallSignatureDeclaration(node) {
            this.tsPrintSignatureDeclarationBase(node);
          }

          function TSConstructSignatureDeclaration(node) {
            this.word("new");
            this.space();
            this.tsPrintSignatureDeclarationBase(node);
          }

          function TSPropertySignature(node) {
            const { readonly, initializer } = node;

            if (readonly) {
              this.word("readonly");
              this.space();
            }

            this.tsPrintPropertyOrMethodName(node);
            this.print(node.typeAnnotation, node);

            if (initializer) {
              this.space();
              this.token("=");
              this.space();
              this.print(initializer, node);
            }

            this.token(";");
          }

          function tsPrintPropertyOrMethodName(node) {
            if (node.computed) {
              this.token("[");
            }

            this.print(node.key, node);

            if (node.computed) {
              this.token("]");
            }

            if (node.optional) {
              this.token("?");
            }
          }

          function TSMethodSignature(node) {
            this.tsPrintPropertyOrMethodName(node);
            this.tsPrintSignatureDeclarationBase(node);
            this.token(";");
          }

          function TSIndexSignature(node) {
            const { readonly } = node;

            if (readonly) {
              this.word("readonly");
              this.space();
            }

            this.token("[");

            this._parameters(node.parameters, node);

            this.token("]");
            this.print(node.typeAnnotation, node);
            this.token(";");
          }

          function TSAnyKeyword() {
            this.word("any");
          }

          function TSUnknownKeyword() {
            this.word("unknown");
          }

          function TSNumberKeyword() {
            this.word("number");
          }

          function TSObjectKeyword() {
            this.word("object");
          }

          function TSBooleanKeyword() {
            this.word("boolean");
          }

          function TSStringKeyword() {
            this.word("string");
          }

          function TSSymbolKeyword() {
            this.word("symbol");
          }

          function TSVoidKeyword() {
            this.word("void");
          }

          function TSUndefinedKeyword() {
            this.word("undefined");
          }

          function TSNullKeyword() {
            this.word("null");
          }

          function TSNeverKeyword() {
            this.word("never");
          }

          function TSThisType() {
            this.word("this");
          }

          function TSFunctionType(node) {
            this.tsPrintFunctionOrConstructorType(node);
          }

          function TSConstructorType(node) {
            this.word("new");
            this.space();
            this.tsPrintFunctionOrConstructorType(node);
          }

          function tsPrintFunctionOrConstructorType(node) {
            const { typeParameters, parameters } = node;
            this.print(typeParameters, node);
            this.token("(");

            this._parameters(parameters, node);

            this.token(")");
            this.space();
            this.token("=>");
            this.space();
            this.print(node.typeAnnotation.typeAnnotation, node);
          }

          function TSTypeReference(node) {
            this.print(node.typeName, node);
            this.print(node.typeParameters, node);
          }

          function TSTypePredicate(node) {
            this.print(node.parameterName);
            this.space();
            this.word("is");
            this.space();
            this.print(node.typeAnnotation.typeAnnotation);
          }

          function TSTypeQuery(node) {
            this.word("typeof");
            this.space();
            this.print(node.exprName);
          }

          function TSTypeLiteral(node) {
            this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
          }

          function tsPrintTypeLiteralOrInterfaceBody(members, node) {
            this.tsPrintBraced(members, node);
          }

          function tsPrintBraced(members, node) {
            this.token("{");

            if (members.length) {
              this.indent();
              this.newline();

              for (const member of members) {
                this.print(member, node);
                this.newline();
              }

              this.dedent();
              this.rightBrace();
            } else {
              this.token("}");
            }
          }

          function TSArrayType(node) {
            this.print(node.elementType);
            this.token("[]");
          }

          function TSTupleType(node) {
            this.token("[");
            this.printList(node.elementTypes, node);
            this.token("]");
          }

          function TSOptionalType(node) {
            this.print(node.typeAnnotation, node);
            this.token("?");
          }

          function TSRestType(node) {
            this.token("...");
            this.print(node.typeAnnotation, node);
          }

          function TSUnionType(node) {
            this.tsPrintUnionOrIntersectionType(node, "|");
          }

          function TSIntersectionType(node) {
            this.tsPrintUnionOrIntersectionType(node, "&");
          }

          function tsPrintUnionOrIntersectionType(node, sep) {
            this.printJoin(node.types, node, {
              separator() {
                this.space();
                this.token(sep);
                this.space();
              },
            });
          }

          function TSConditionalType(node) {
            this.print(node.checkType);
            this.space();
            this.word("extends");
            this.space();
            this.print(node.extendsType);
            this.space();
            this.token("?");
            this.space();
            this.print(node.trueType);
            this.space();
            this.token(":");
            this.space();
            this.print(node.falseType);
          }

          function TSInferType(node) {
            this.token("infer");
            this.space();
            this.print(node.typeParameter);
          }

          function TSParenthesizedType(node) {
            this.token("(");
            this.print(node.typeAnnotation, node);
            this.token(")");
          }

          function TSTypeOperator(node) {
            this.token(node.operator);
            this.space();
            this.print(node.typeAnnotation, node);
          }

          function TSIndexedAccessType(node) {
            this.print(node.objectType, node);
            this.token("[");
            this.print(node.indexType, node);
            this.token("]");
          }

          function TSMappedType(node) {
            const { readonly, typeParameter, optional } = node;
            this.token("{");
            this.space();

            if (readonly) {
              tokenIfPlusMinus(this, readonly);
              this.word("readonly");
              this.space();
            }

            this.token("[");
            this.word(typeParameter.name);
            this.space();
            this.word("in");
            this.space();
            this.print(typeParameter.constraint, typeParameter);
            this.token("]");

            if (optional) {
              tokenIfPlusMinus(this, optional);
              this.token("?");
            }

            this.token(":");
            this.space();
            this.print(node.typeAnnotation, node);
            this.space();
            this.token("}");
          }

          function tokenIfPlusMinus(self, tok) {
            if (tok !== true) {
              self.token(tok);
            }
          }

          function TSLiteralType(node) {
            this.print(node.literal, node);
          }

          function TSExpressionWithTypeArguments(node) {
            this.print(node.expression, node);
            this.print(node.typeParameters, node);
          }

          function TSInterfaceDeclaration(node) {
            const {
              declare,
              id,
              typeParameters,
              extends: extendz,
              body,
            } = node;

            if (declare) {
              this.word("declare");
              this.space();
            }

            this.word("interface");
            this.space();
            this.print(id, node);
            this.print(typeParameters, node);

            if (extendz) {
              this.space();
              this.word("extends");
              this.space();
              this.printList(extendz, node);
            }

            this.space();
            this.print(body, node);
          }

          function TSInterfaceBody(node) {
            this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
          }

          function TSTypeAliasDeclaration(node) {
            const { declare, id, typeParameters, typeAnnotation } = node;

            if (declare) {
              this.word("declare");
              this.space();
            }

            this.word("type");
            this.space();
            this.print(id, node);
            this.print(typeParameters, node);
            this.space();
            this.token("=");
            this.space();
            this.print(typeAnnotation, node);
            this.token(";");
          }

          function TSAsExpression(node) {
            const { expression, typeAnnotation } = node;
            this.print(expression, node);
            this.space();
            this.word("as");
            this.space();
            this.print(typeAnnotation, node);
          }

          function TSTypeAssertion(node) {
            const { typeAnnotation, expression } = node;
            this.token("<");
            this.print(typeAnnotation, node);
            this.token(">");
            this.space();
            this.print(expression, node);
          }

          function TSEnumDeclaration(node) {
            const { declare, const: isConst, id, members } = node;

            if (declare) {
              this.word("declare");
              this.space();
            }

            if (isConst) {
              this.word("const");
              this.space();
            }

            this.word("enum");
            this.space();
            this.print(id, node);
            this.space();
            this.tsPrintBraced(members, node);
          }

          function TSEnumMember(node) {
            const { id, initializer } = node;
            this.print(id, node);

            if (initializer) {
              this.space();
              this.token("=");
              this.space();
              this.print(initializer, node);
            }

            this.token(",");
          }

          function TSModuleDeclaration(node) {
            const { declare, id } = node;

            if (declare) {
              this.word("declare");
              this.space();
            }

            if (!node.global) {
              this.word(id.type === "Identifier" ? "namespace" : "module");
              this.space();
            }

            this.print(id, node);

            if (!node.body) {
              this.token(";");
              return;
            }

            let body = node.body;

            while (body.type === "TSModuleDeclaration") {
              this.token(".");
              this.print(body.id, body);
              body = body.body;
            }

            this.space();
            this.print(body, node);
          }

          function TSModuleBlock(node) {
            this.tsPrintBraced(node.body, node);
          }

          function TSImportEqualsDeclaration(node) {
            const { isExport, id, moduleReference } = node;

            if (isExport) {
              this.word("export");
              this.space();
            }

            this.word("import");
            this.space();
            this.print(id, node);
            this.space();
            this.token("=");
            this.space();
            this.print(moduleReference, node);
            this.token(";");
          }

          function TSExternalModuleReference(node) {
            this.token("require(");
            this.print(node.expression, node);
            this.token(")");
          }

          function TSNonNullExpression(node) {
            this.print(node.expression, node);
            this.token("!");
          }

          function TSExportAssignment(node) {
            this.word("export");
            this.space();
            this.token("=");
            this.space();
            this.print(node.expression, node);
            this.token(";");
          }

          function TSNamespaceExportDeclaration(node) {
            this.word("export");
            this.space();
            this.word("as");
            this.space();
            this.word("namespace");
            this.space();
            this.print(node.id, node);
          }

          function tsPrintSignatureDeclarationBase(node) {
            const { typeParameters, parameters } = node;
            this.print(typeParameters, node);
            this.token("(");

            this._parameters(parameters, node);

            this.token(")");
            this.print(node.typeAnnotation, node);
          }
        },
        /* 362 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.findParent = findParent;
          exports.find = find;
          exports.getFunctionParent = getFunctionParent;
          exports.getStatementParent = getStatementParent;
          exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
          exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
          exports.getAncestry = getAncestry;
          exports.isAncestor = isAncestor;
          exports.isDescendant = isDescendant;
          exports.inType = inType;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _index = _interopRequireDefault(__webpack_require__(20));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function findParent(callback) {
            let path = this;

            while ((path = path.parentPath)) {
              if (callback(path)) return path;
            }

            return null;
          }

          function find(callback) {
            let path = this;

            do {
              if (callback(path)) return path;
            } while ((path = path.parentPath));

            return null;
          }

          function getFunctionParent() {
            return this.findParent(p => p.isFunction());
          }

          function getStatementParent() {
            let path = this;

            do {
              if (
                !path.parentPath ||
                (Array.isArray(path.container) && path.isStatement())
              ) {
                break;
              } else {
                path = path.parentPath;
              }
            } while (path);

            if (path && (path.isProgram() || path.isFile())) {
              throw new Error(
                "File/Program node, we can't possibly find a statement parent to this"
              );
            }

            return path;
          }

          function getEarliestCommonAncestorFrom(paths) {
            return this.getDeepestCommonAncestorFrom(paths, function(
              deepest,
              i,
              ancestries
            ) {
              let earliest;
              const keys = t().VISITOR_KEYS[deepest.type];

              for (const ancestry of ancestries) {
                const path = ancestry[i + 1];

                if (!earliest) {
                  earliest = path;
                  continue;
                }

                if (path.listKey && earliest.listKey === path.listKey) {
                  if (path.key < earliest.key) {
                    earliest = path;
                    continue;
                  }
                }

                const earliestKeyIndex = keys.indexOf(earliest.parentKey);
                const currentKeyIndex = keys.indexOf(path.parentKey);

                if (earliestKeyIndex > currentKeyIndex) {
                  earliest = path;
                }
              }

              return earliest;
            });
          }

          function getDeepestCommonAncestorFrom(paths, filter) {
            if (!paths.length) {
              return this;
            }

            if (paths.length === 1) {
              return paths[0];
            }

            let minDepth = Infinity;
            let lastCommonIndex, lastCommon;
            const ancestries = paths.map(path => {
              const ancestry = [];

              do {
                ancestry.unshift(path);
              } while ((path = path.parentPath) && path !== this);

              if (ancestry.length < minDepth) {
                minDepth = ancestry.length;
              }

              return ancestry;
            });
            const first = ancestries[0];

            depthLoop: for (let i = 0; i < minDepth; i++) {
              const shouldMatch = first[i];

              for (const ancestry of ancestries) {
                if (ancestry[i] !== shouldMatch) {
                  break depthLoop;
                }
              }

              lastCommonIndex = i;
              lastCommon = shouldMatch;
            }

            if (lastCommon) {
              if (filter) {
                return filter(lastCommon, lastCommonIndex, ancestries);
              } else {
                return lastCommon;
              }
            } else {
              throw new Error("Couldn't find intersection");
            }
          }

          function getAncestry() {
            let path = this;
            const paths = [];

            do {
              paths.push(path);
            } while ((path = path.parentPath));

            return paths;
          }

          function isAncestor(maybeDescendant) {
            return maybeDescendant.isDescendant(this);
          }

          function isDescendant(maybeAncestor) {
            return !!this.findParent(parent => parent === maybeAncestor);
          }

          function inType() {
            let path = this;

            while (path) {
              for (const type of arguments) {
                if (path.node.type === type) return true;
              }

              path = path.parentPath;
            }

            return false;
          }
        },
        /* 363 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.getTypeAnnotation = getTypeAnnotation;
          exports._getTypeAnnotation = _getTypeAnnotation;
          exports.isBaseType = isBaseType;
          exports.couldBeBaseType = couldBeBaseType;
          exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
          exports.isGenericType = isGenericType;

          var inferers = _interopRequireWildcard(__webpack_require__(364));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function getTypeAnnotation() {
            if (this.typeAnnotation) return this.typeAnnotation;
            let type = this._getTypeAnnotation() || t().anyTypeAnnotation();
            if (t().isTypeAnnotation(type)) type = type.typeAnnotation;
            return (this.typeAnnotation = type);
          }

          function _getTypeAnnotation() {
            const node = this.node;

            if (!node) {
              if (
                this.key === "init" &&
                this.parentPath.isVariableDeclarator()
              ) {
                const declar = this.parentPath.parentPath;
                const declarParent = declar.parentPath;

                if (declar.key === "left" && declarParent.isForInStatement()) {
                  return t().stringTypeAnnotation();
                }

                if (declar.key === "left" && declarParent.isForOfStatement()) {
                  return t().anyTypeAnnotation();
                }

                return t().voidTypeAnnotation();
              } else {
                return;
              }
            }

            if (node.typeAnnotation) {
              return node.typeAnnotation;
            }

            let inferer = inferers[node.type];

            if (inferer) {
              return inferer.call(this, node);
            }

            inferer = inferers[this.parentPath.type];

            if (inferer && inferer.validParent) {
              return this.parentPath.getTypeAnnotation();
            }
          }

          function isBaseType(baseName, soft) {
            return _isBaseType(baseName, this.getTypeAnnotation(), soft);
          }

          function _isBaseType(baseName, type, soft) {
            if (baseName === "string") {
              return t().isStringTypeAnnotation(type);
            } else if (baseName === "number") {
              return t().isNumberTypeAnnotation(type);
            } else if (baseName === "boolean") {
              return t().isBooleanTypeAnnotation(type);
            } else if (baseName === "any") {
              return t().isAnyTypeAnnotation(type);
            } else if (baseName === "mixed") {
              return t().isMixedTypeAnnotation(type);
            } else if (baseName === "empty") {
              return t().isEmptyTypeAnnotation(type);
            } else if (baseName === "void") {
              return t().isVoidTypeAnnotation(type);
            } else {
              if (soft) {
                return false;
              } else {
                throw new Error(`Unknown base type ${baseName}`);
              }
            }
          }

          function couldBeBaseType(name) {
            const type = this.getTypeAnnotation();
            if (t().isAnyTypeAnnotation(type)) return true;

            if (t().isUnionTypeAnnotation(type)) {
              for (const type2 of type.types) {
                if (
                  t().isAnyTypeAnnotation(type2) ||
                  _isBaseType(name, type2, true)
                ) {
                  return true;
                }
              }

              return false;
            } else {
              return _isBaseType(name, type, true);
            }
          }

          function baseTypeStrictlyMatches(right) {
            const left = this.getTypeAnnotation();
            right = right.getTypeAnnotation();

            if (
              !t().isAnyTypeAnnotation(left) &&
              t().isFlowBaseAnnotation(left)
            ) {
              return right.type === left.type;
            }
          }

          function isGenericType(genericName) {
            const type = this.getTypeAnnotation();
            return (
              t().isGenericTypeAnnotation(type) &&
              t().isIdentifier(type.id, {
                name: genericName,
              })
            );
          }
        },
        /* 364 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.VariableDeclarator = VariableDeclarator;
          exports.TypeCastExpression = TypeCastExpression;
          exports.NewExpression = NewExpression;
          exports.TemplateLiteral = TemplateLiteral;
          exports.UnaryExpression = UnaryExpression;
          exports.BinaryExpression = BinaryExpression;
          exports.LogicalExpression = LogicalExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.AssignmentExpression = AssignmentExpression;
          exports.UpdateExpression = UpdateExpression;
          exports.StringLiteral = StringLiteral;
          exports.NumericLiteral = NumericLiteral;
          exports.BooleanLiteral = BooleanLiteral;
          exports.NullLiteral = NullLiteral;
          exports.RegExpLiteral = RegExpLiteral;
          exports.ObjectExpression = ObjectExpression;
          exports.ArrayExpression = ArrayExpression;
          exports.RestElement = RestElement;
          exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
          exports.CallExpression = CallExpression;
          exports.TaggedTemplateExpression = TaggedTemplateExpression;
          Object.defineProperty(exports, "Identifier", {
            enumerable: true,
            get: function() {
              return _infererReference.default;
            },
          });

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          var _infererReference = _interopRequireDefault(
            __webpack_require__(365)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function VariableDeclarator() {
            const id = this.get("id");
            if (!id.isIdentifier()) return;
            const init = this.get("init");
            let type = init.getTypeAnnotation();

            if (type && type.type === "AnyTypeAnnotation") {
              if (
                init.isCallExpression() &&
                init.get("callee").isIdentifier({
                  name: "Array",
                }) &&
                !init.scope.hasBinding("Array", true)
              ) {
                type = ArrayExpression();
              }
            }

            return type;
          }

          function TypeCastExpression(node) {
            return node.typeAnnotation;
          }

          TypeCastExpression.validParent = true;

          function NewExpression(node) {
            if (this.get("callee").isIdentifier()) {
              return t().genericTypeAnnotation(node.callee);
            }
          }

          function TemplateLiteral() {
            return t().stringTypeAnnotation();
          }

          function UnaryExpression(node) {
            const operator = node.operator;

            if (operator === "void") {
              return t().voidTypeAnnotation();
            } else if (t().NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t().numberTypeAnnotation();
            } else if (t().STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t().stringTypeAnnotation();
            } else if (t().BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t().booleanTypeAnnotation();
            }
          }

          function BinaryExpression(node) {
            const operator = node.operator;

            if (t().NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t().numberTypeAnnotation();
            } else if (t().BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t().booleanTypeAnnotation();
            } else if (operator === "+") {
              const right = this.get("right");
              const left = this.get("left");

              if (left.isBaseType("number") && right.isBaseType("number")) {
                return t().numberTypeAnnotation();
              } else if (
                left.isBaseType("string") ||
                right.isBaseType("string")
              ) {
                return t().stringTypeAnnotation();
              }

              return t().unionTypeAnnotation([
                t().stringTypeAnnotation(),
                t().numberTypeAnnotation(),
              ]);
            }
          }

          function LogicalExpression() {
            return t().createUnionTypeAnnotation([
              this.get("left").getTypeAnnotation(),
              this.get("right").getTypeAnnotation(),
            ]);
          }

          function ConditionalExpression() {
            return t().createUnionTypeAnnotation([
              this.get("consequent").getTypeAnnotation(),
              this.get("alternate").getTypeAnnotation(),
            ]);
          }

          function SequenceExpression() {
            return this.get("expressions")
              .pop()
              .getTypeAnnotation();
          }

          function AssignmentExpression() {
            return this.get("right").getTypeAnnotation();
          }

          function UpdateExpression(node) {
            const operator = node.operator;

            if (operator === "++" || operator === "--") {
              return t().numberTypeAnnotation();
            }
          }

          function StringLiteral() {
            return t().stringTypeAnnotation();
          }

          function NumericLiteral() {
            return t().numberTypeAnnotation();
          }

          function BooleanLiteral() {
            return t().booleanTypeAnnotation();
          }

          function NullLiteral() {
            return t().nullLiteralTypeAnnotation();
          }

          function RegExpLiteral() {
            return t().genericTypeAnnotation(t().identifier("RegExp"));
          }

          function ObjectExpression() {
            return t().genericTypeAnnotation(t().identifier("Object"));
          }

          function ArrayExpression() {
            return t().genericTypeAnnotation(t().identifier("Array"));
          }

          function RestElement() {
            return ArrayExpression();
          }

          RestElement.validParent = true;

          function Func() {
            return t().genericTypeAnnotation(t().identifier("Function"));
          }

          const isArrayFrom = t().buildMatchMemberExpression("Array.from");
          const isObjectKeys = t().buildMatchMemberExpression("Object.keys");
          const isObjectValues = t().buildMatchMemberExpression(
            "Object.values"
          );
          const isObjectEntries = t().buildMatchMemberExpression(
            "Object.entries"
          );

          function CallExpression() {
            const { callee } = this.node;

            if (isObjectKeys(callee)) {
              return t().arrayTypeAnnotation(t().stringTypeAnnotation());
            } else if (isArrayFrom(callee) || isObjectValues(callee)) {
              return t().arrayTypeAnnotation(t().anyTypeAnnotation());
            } else if (isObjectEntries(callee)) {
              return t().arrayTypeAnnotation(
                t().tupleTypeAnnotation([
                  t().stringTypeAnnotation(),
                  t().anyTypeAnnotation(),
                ])
              );
            }

            return resolveCall(this.get("callee"));
          }

          function TaggedTemplateExpression() {
            return resolveCall(this.get("tag"));
          }

          function resolveCall(callee) {
            callee = callee.resolve();

            if (callee.isFunction()) {
              if (callee.is("async")) {
                if (callee.is("generator")) {
                  return t().genericTypeAnnotation(
                    t().identifier("AsyncIterator")
                  );
                } else {
                  return t().genericTypeAnnotation(t().identifier("Promise"));
                }
              } else {
                if (callee.node.returnType) {
                  return callee.node.returnType;
                } else {
                }
              }
            }
          }
        },
        /* 365 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _default(node) {
            if (!this.isReferenced()) return;
            const binding = this.scope.getBinding(node.name);

            if (binding) {
              if (binding.identifier.typeAnnotation) {
                return binding.identifier.typeAnnotation;
              } else {
                return getTypeAnnotationBindingConstantViolations(
                  binding,
                  this,
                  node.name
                );
              }
            }

            if (node.name === "undefined") {
              return t().voidTypeAnnotation();
            } else if (node.name === "NaN" || node.name === "Infinity") {
              return t().numberTypeAnnotation();
            } else if (node.name === "arguments") {
            }
          }

          function getTypeAnnotationBindingConstantViolations(
            binding,
            path,
            name
          ) {
            const types = [];
            const functionConstantViolations = [];
            let constantViolations = getConstantViolationsBefore(
              binding,
              path,
              functionConstantViolations
            );
            const testType = getConditionalAnnotation(binding, path, name);

            if (testType) {
              const testConstantViolations = getConstantViolationsBefore(
                binding,
                testType.ifStatement
              );
              constantViolations = constantViolations.filter(
                path => testConstantViolations.indexOf(path) < 0
              );
              types.push(testType.typeAnnotation);
            }

            if (constantViolations.length) {
              constantViolations = constantViolations.concat(
                functionConstantViolations
              );

              for (const violation of constantViolations) {
                types.push(violation.getTypeAnnotation());
              }
            }

            if (types.length) {
              return t().createUnionTypeAnnotation(types);
            }
          }

          function getConstantViolationsBefore(binding, path, functions) {
            const violations = binding.constantViolations.slice();
            violations.unshift(binding.path);
            return violations.filter(violation => {
              violation = violation.resolve();

              const status = violation._guessExecutionStatusRelativeTo(path);

              if (functions && status === "function") functions.push(violation);
              return status === "before";
            });
          }

          function inferAnnotationFromBinaryExpression(name, path) {
            const operator = path.node.operator;
            const right = path.get("right").resolve();
            const left = path.get("left").resolve();
            let target;

            if (
              left.isIdentifier({
                name,
              })
            ) {
              target = right;
            } else if (
              right.isIdentifier({
                name,
              })
            ) {
              target = left;
            }

            if (target) {
              if (operator === "===") {
                return target.getTypeAnnotation();
              }

              if (t().BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
                return t().numberTypeAnnotation();
              }

              return;
            }

            if (operator !== "===" && operator !== "==") return;
            let typeofPath;
            let typePath;

            if (
              left.isUnaryExpression({
                operator: "typeof",
              })
            ) {
              typeofPath = left;
              typePath = right;
            } else if (
              right.isUnaryExpression({
                operator: "typeof",
              })
            ) {
              typeofPath = right;
              typePath = left;
            }

            if (!typeofPath) return;
            if (
              !typeofPath.get("argument").isIdentifier({
                name,
              })
            )
              return;
            typePath = typePath.resolve();
            if (!typePath.isLiteral()) return;
            const typeValue = typePath.node.value;
            if (typeof typeValue !== "string") return;
            return t().createTypeAnnotationBasedOnTypeof(typeValue);
          }

          function getParentConditionalPath(binding, path, name) {
            let parentPath;

            while ((parentPath = path.parentPath)) {
              if (
                parentPath.isIfStatement() ||
                parentPath.isConditionalExpression()
              ) {
                if (path.key === "test") {
                  return;
                }

                return parentPath;
              }

              if (parentPath.isFunction()) {
                if (parentPath.parentPath.scope.getBinding(name) !== binding)
                  return;
              }

              path = parentPath;
            }
          }

          function getConditionalAnnotation(binding, path, name) {
            const ifStatement = getParentConditionalPath(binding, path, name);
            if (!ifStatement) return;
            const test = ifStatement.get("test");
            const paths = [test];
            const types = [];

            for (let i = 0; i < paths.length; i++) {
              const path = paths[i];

              if (path.isLogicalExpression()) {
                if (path.node.operator === "&&") {
                  paths.push(path.get("left"));
                  paths.push(path.get("right"));
                }
              } else if (path.isBinaryExpression()) {
                const type = inferAnnotationFromBinaryExpression(name, path);
                if (type) types.push(type);
              }
            }

            if (types.length) {
              return {
                typeAnnotation: t().createUnionTypeAnnotation(types),
                ifStatement,
              };
            }

            return getConditionalAnnotation(ifStatement, name);
          }
        },
        /* 366 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.replaceWithMultiple = replaceWithMultiple;
          exports.replaceWithSourceString = replaceWithSourceString;
          exports.replaceWith = replaceWith;
          exports._replaceWith = _replaceWith;
          exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
          exports.replaceInline = replaceInline;

          function _babelCodeFrame() {
            const data = __webpack_require__(43);

            _babelCodeFrame = function() {
              return data;
            };

            return data;
          }

          var _index = _interopRequireDefault(__webpack_require__(8));

          var _index2 = _interopRequireDefault(__webpack_require__(20));

          function _babelParser() {
            const data = __webpack_require__(44);

            _babelParser = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const hoistVariablesVisitor = {
            Function(path) {
              path.skip();
            },

            VariableDeclaration(path) {
              if (path.node.kind !== "var") return;
              const bindings = path.getBindingIdentifiers();

              for (const key in bindings) {
                path.scope.push({
                  id: bindings[key],
                });
              }

              const exprs = [];

              for (const declar of path.node.declarations) {
                if (declar.init) {
                  exprs.push(
                    t().expressionStatement(
                      t().assignmentExpression("=", declar.id, declar.init)
                    )
                  );
                }
              }

              path.replaceWithMultiple(exprs);
            },
          };

          function replaceWithMultiple(nodes) {
            this.resync();
            nodes = this._verifyNodeList(nodes);
            t().inheritLeadingComments(nodes[0], this.node);
            t().inheritTrailingComments(nodes[nodes.length - 1], this.node);
            this.node = this.container[this.key] = null;
            const paths = this.insertAfter(nodes);

            if (this.node) {
              this.requeue();
            } else {
              this.remove();
            }

            return paths;
          }

          function replaceWithSourceString(replacement) {
            this.resync();

            try {
              replacement = `(${replacement})`;
              replacement = (0, _babelParser().parse)(replacement);
            } catch (err) {
              const loc = err.loc;

              if (loc) {
                err.message +=
                  " - make sure this is an expression.\n" +
                  (0, _babelCodeFrame().codeFrameColumns)(replacement, {
                    start: {
                      line: loc.line,
                      column: loc.column + 1,
                    },
                  });
                err.code = "BABEL_REPLACE_SOURCE_ERROR";
              }

              throw err;
            }

            replacement = replacement.program.body[0].expression;

            _index.default.removeProperties(replacement);

            return this.replaceWith(replacement);
          }

          function replaceWith(replacement) {
            this.resync();

            if (this.removed) {
              throw new Error(
                "You can't replace this node, we've already removed it"
              );
            }

            if (replacement instanceof _index2.default) {
              replacement = replacement.node;
            }

            if (!replacement) {
              throw new Error(
                "You passed `path.replaceWith()` a falsy node, use `path.remove()` instead"
              );
            }

            if (this.node === replacement) {
              return [this];
            }

            if (this.isProgram() && !t().isProgram(replacement)) {
              throw new Error(
                "You can only replace a Program root node with another Program node"
              );
            }

            if (Array.isArray(replacement)) {
              throw new Error(
                "Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`"
              );
            }

            if (typeof replacement === "string") {
              throw new Error(
                "Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`"
              );
            }

            let nodePath = "";

            if (this.isNodeType("Statement") && t().isExpression(replacement)) {
              if (
                !this.canHaveVariableDeclarationOrExpression() &&
                !this.canSwapBetweenExpressionAndStatement(replacement) &&
                !this.parentPath.isExportDefaultDeclaration()
              ) {
                replacement = t().expressionStatement(replacement);
                nodePath = "expression";
              }
            }

            if (this.isNodeType("Expression") && t().isStatement(replacement)) {
              if (
                !this.canHaveVariableDeclarationOrExpression() &&
                !this.canSwapBetweenExpressionAndStatement(replacement)
              ) {
                return this.replaceExpressionWithStatements([replacement]);
              }
            }

            const oldNode = this.node;

            if (oldNode) {
              t().inheritsComments(replacement, oldNode);
              t().removeComments(oldNode);
            }

            this._replaceWith(replacement);

            this.type = replacement.type;
            this.setScope();
            this.requeue();
            return [nodePath ? this.get(nodePath) : this];
          }

          function _replaceWith(node) {
            if (!this.container) {
              throw new ReferenceError("Container is falsy");
            }

            if (this.inList) {
              t().validate(this.parent, this.key, [node]);
            } else {
              t().validate(this.parent, this.key, node);
            }

            this.debug(`Replace with ${node && node.type}`);
            this.node = this.container[this.key] = node;
          }

          function replaceExpressionWithStatements(nodes) {
            this.resync();
            const toSequenceExpression = t().toSequenceExpression(
              nodes,
              this.scope
            );

            if (toSequenceExpression) {
              return this.replaceWith(toSequenceExpression)[0].get(
                "expressions"
              );
            }

            const container = t().arrowFunctionExpression(
              [],
              t().blockStatement(nodes)
            );
            this.replaceWith(t().callExpression(container, []));
            this.traverse(hoistVariablesVisitor);
            const completionRecords = this.get("callee").getCompletionRecords();

            for (const path of completionRecords) {
              if (!path.isExpressionStatement()) continue;
              const loop = path.findParent(path => path.isLoop());

              if (loop) {
                let uid = loop.getData("expressionReplacementReturnUid");

                if (!uid) {
                  const callee = this.get("callee");
                  uid = callee.scope.generateDeclaredUidIdentifier("ret");
                  callee
                    .get("body")
                    .pushContainer(
                      "body",
                      t().returnStatement(t().cloneNode(uid))
                    );
                  loop.setData("expressionReplacementReturnUid", uid);
                } else {
                  uid = t().identifier(uid.name);
                }

                path
                  .get("expression")
                  .replaceWith(
                    t().assignmentExpression(
                      "=",
                      t().cloneNode(uid),
                      path.node.expression
                    )
                  );
              } else {
                path.replaceWith(t().returnStatement(path.node.expression));
              }
            }

            const callee = this.get("callee");
            callee.arrowFunctionToExpression();
            return callee.get("body.body");
          }

          function replaceInline(nodes) {
            this.resync();

            if (Array.isArray(nodes)) {
              if (Array.isArray(this.container)) {
                nodes = this._verifyNodeList(nodes);

                const paths = this._containerInsertAfter(nodes);

                this.remove();
                return paths;
              } else {
                return this.replaceWithMultiple(nodes);
              }
            } else {
              return this.replaceWith(nodes);
            }
          }
        },
        /* 367 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.shouldHighlight = shouldHighlight;
          exports.getChalk = getChalk;
          exports.default = highlight;

          function _jsTokens() {
            const data = _interopRequireWildcard(__webpack_require__(368));

            _jsTokens = function() {
              return data;
            };

            return data;
          }

          function _esutils() {
            const data = _interopRequireDefault(__webpack_require__(105));

            _esutils = function() {
              return data;
            };

            return data;
          }

          function _chalk() {
            const data = _interopRequireDefault(__webpack_require__(369));

            _chalk = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function getDefs(chalk) {
            return {
              keyword: chalk.cyan,
              capitalized: chalk.yellow,
              jsx_tag: chalk.yellow,
              punctuator: chalk.yellow,
              number: chalk.magenta,
              string: chalk.green,
              regex: chalk.magenta,
              comment: chalk.grey,
              invalid: chalk.white.bgRed.bold,
            };
          }

          const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
          const JSX_TAG = /^[a-z][\w-]*$/i;
          const BRACKET = /^[()[\]{}]$/;

          function getTokenType(match) {
            const [offset, text] = match.slice(-2);
            const token = (0, _jsTokens().matchToToken)(match);

            if (token.type === "name") {
              if (_esutils().default.keyword.isReservedWordES6(token.value)) {
                return "keyword";
              }

              if (
                JSX_TAG.test(token.value) &&
                (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")
              ) {
                return "jsx_tag";
              }

              if (token.value[0] !== token.value[0].toLowerCase()) {
                return "capitalized";
              }
            }

            if (token.type === "punctuator" && BRACKET.test(token.value)) {
              return "bracket";
            }

            if (
              token.type === "invalid" &&
              (token.value === "@" || token.value === "#")
            ) {
              return "punctuator";
            }

            return token.type;
          }

          function highlightTokens(defs, text) {
            return text.replace(_jsTokens().default, function(...args) {
              const type = getTokenType(args);
              const colorize = defs[type];

              if (colorize) {
                return args[0]
                  .split(NEWLINE)
                  .map(str => colorize(str))
                  .join("\n");
              } else {
                return args[0];
              }
            });
          }

          function shouldHighlight(options) {
            return _chalk().default.supportsColor || options.forceColor;
          }

          function getChalk(options) {
            let chalk = _chalk().default;

            if (options.forceColor) {
              chalk = new (_chalk()).default.constructor({
                enabled: true,
                level: 1,
              });
            }

            return chalk;
          }

          function highlight(code, options = {}) {
            if (shouldHighlight(options)) {
              const chalk = getChalk(options);
              const defs = getDefs(chalk);
              return highlightTokens(defs, code);
            } else {
              return code;
            }
          }
        },
        /* 368 */
        function(module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

          exports.matchToToken = function(match) {
            var token = {
              type: "invalid",
              value: match[0],
              closed: undefined,
            };
            if (match[1])
              (token.type = "string"),
                (token.closed = !!(match[3] || match[4]));
            else if (match[5]) token.type = "comment";
            else if (match[6])
              (token.type = "comment"), (token.closed = !!match[7]);
            else if (match[8]) token.type = "regex";
            else if (match[9]) token.type = "number";
            else if (match[10]) token.type = "name";
            else if (match[11]) token.type = "punctuator";
            else if (match[12]) token.type = "whitespace";
            return token;
          };
        },
        /* 369 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            const escapeStringRegexp = __webpack_require__(370);

            const ansiStyles = __webpack_require__(371);

            const stdoutColor = __webpack_require__(375).stdout;

            const template = __webpack_require__(376);

            const isSimpleWindowsTerm =
              process.platform === "win32" &&
              !(process.env.TERM || "").toLowerCase().startsWith("xterm");
            const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
            const skipModels = new Set(["gray"]);
            const styles = Object.create(null);

            function applyOptions(obj, options) {
              options = options || {};
              const scLevel = stdoutColor ? stdoutColor.level : 0;
              obj.level = options.level === undefined ? scLevel : options.level;
              obj.enabled =
                "enabled" in options ? options.enabled : obj.level > 0;
            }

            function Chalk(options) {
              if (!this || !(this instanceof Chalk) || this.template) {
                const chalk = {};
                applyOptions(chalk, options);

                chalk.template = function() {
                  const args = [].slice.call(arguments);
                  return chalkTag.apply(null, [chalk.template].concat(args));
                };

                Object.setPrototypeOf(chalk, Chalk.prototype);
                Object.setPrototypeOf(chalk.template, chalk);
                chalk.template.constructor = Chalk;
                return chalk.template;
              }

              applyOptions(this, options);
            }

            if (isSimpleWindowsTerm) {
              ansiStyles.blue.open = "\u001B[94m";
            }

            for (const key of Object.keys(ansiStyles)) {
              ansiStyles[key].closeRe = new RegExp(
                escapeStringRegexp(ansiStyles[key].close),
                "g"
              );
              styles[key] = {
                get() {
                  const codes = ansiStyles[key];
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    key
                  );
                },
              };
            }

            styles.visible = {
              get() {
                return build.call(this, this._styles || [], true, "visible");
              },
            };
            ansiStyles.color.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.color.close),
              "g"
            );

            for (const model of Object.keys(ansiStyles.color.ansi)) {
              if (skipModels.has(model)) {
                continue;
              }

              styles[model] = {
                get() {
                  const level = this.level;
                  return function() {
                    const open = ansiStyles.color[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    const codes = {
                      open,
                      close: ansiStyles.color.close,
                      closeRe: ansiStyles.color.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            }

            ansiStyles.bgColor.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.bgColor.close),
              "g"
            );

            for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
              if (skipModels.has(model)) {
                continue;
              }

              const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
              styles[bgModel] = {
                get() {
                  const level = this.level;
                  return function() {
                    const open = ansiStyles.bgColor[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    const codes = {
                      open,
                      close: ansiStyles.bgColor.close,
                      closeRe: ansiStyles.bgColor.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            }

            const proto = Object.defineProperties(() => {}, styles);

            function build(_styles, _empty, key) {
              const builder = function() {
                return applyStyle.apply(builder, arguments);
              };

              builder._styles = _styles;
              builder._empty = _empty;
              const self = this;
              Object.defineProperty(builder, "level", {
                enumerable: true,

                get() {
                  return self.level;
                },

                set(level) {
                  self.level = level;
                },
              });
              Object.defineProperty(builder, "enabled", {
                enumerable: true,

                get() {
                  return self.enabled;
                },

                set(enabled) {
                  self.enabled = enabled;
                },
              });
              builder.hasGrey =
                this.hasGrey || key === "gray" || key === "grey";
              builder.__proto__ = proto;
              return builder;
            }

            function applyStyle() {
              const args = arguments;
              const argsLen = args.length;
              let str = String(arguments[0]);

              if (argsLen === 0) {
                return "";
              }

              if (argsLen > 1) {
                for (let a = 1; a < argsLen; a++) {
                  str += " " + args[a];
                }
              }

              if (!this.enabled || this.level <= 0 || !str) {
                return this._empty ? "" : str;
              }

              const originalDim = ansiStyles.dim.open;

              if (isSimpleWindowsTerm && this.hasGrey) {
                ansiStyles.dim.open = "";
              }

              for (const code of this._styles.slice().reverse()) {
                str =
                  code.open + str.replace(code.closeRe, code.open) + code.close;
                str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
              }

              ansiStyles.dim.open = originalDim;
              return str;
            }

            function chalkTag(chalk, strings) {
              if (!Array.isArray(strings)) {
                return [].slice.call(arguments, 1).join(" ");
              }

              const args = [].slice.call(arguments, 2);
              const parts = [strings.raw[0]];

              for (let i = 1; i < strings.length; i++) {
                parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                parts.push(String(strings.raw[i]));
              }

              return template(chalk, parts.join(""));
            }

            Object.defineProperties(Chalk.prototype, styles);
            module.exports = Chalk();
            module.exports.supportsColor = stdoutColor;
            module.exports.default = module.exports;
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 370 */
        function(module, exports, __webpack_require__) {
          "use strict";

          var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

          module.exports = function(str) {
            if (typeof str !== "string") {
              throw new TypeError("Expected a string");
            }

            return str.replace(matchOperatorsRe, "\\$&");
          };
        },
        /* 371 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(module) {
            const colorConvert = __webpack_require__(372);

            const wrapAnsi16 = (fn, offset) =>
              function() {
                const code = fn.apply(colorConvert, arguments);
                return `\u001B[${code + offset}m`;
              };

            const wrapAnsi256 = (fn, offset) =>
              function() {
                const code = fn.apply(colorConvert, arguments);
                return `\u001B[${38 + offset};5;${code}m`;
              };

            const wrapAnsi16m = (fn, offset) =>
              function() {
                const rgb = fn.apply(colorConvert, arguments);
                return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
              };

            function assembleStyles() {
              const codes = new Map();
              const styles = {
                modifier: {
                  reset: [0, 0],
                  bold: [1, 22],
                  dim: [2, 22],
                  italic: [3, 23],
                  underline: [4, 24],
                  inverse: [7, 27],
                  hidden: [8, 28],
                  strikethrough: [9, 29],
                },
                color: {
                  black: [30, 39],
                  red: [31, 39],
                  green: [32, 39],
                  yellow: [33, 39],
                  blue: [34, 39],
                  magenta: [35, 39],
                  cyan: [36, 39],
                  white: [37, 39],
                  gray: [90, 39],
                  redBright: [91, 39],
                  greenBright: [92, 39],
                  yellowBright: [93, 39],
                  blueBright: [94, 39],
                  magentaBright: [95, 39],
                  cyanBright: [96, 39],
                  whiteBright: [97, 39],
                },
                bgColor: {
                  bgBlack: [40, 49],
                  bgRed: [41, 49],
                  bgGreen: [42, 49],
                  bgYellow: [43, 49],
                  bgBlue: [44, 49],
                  bgMagenta: [45, 49],
                  bgCyan: [46, 49],
                  bgWhite: [47, 49],
                  bgBlackBright: [100, 49],
                  bgRedBright: [101, 49],
                  bgGreenBright: [102, 49],
                  bgYellowBright: [103, 49],
                  bgBlueBright: [104, 49],
                  bgMagentaBright: [105, 49],
                  bgCyanBright: [106, 49],
                  bgWhiteBright: [107, 49],
                },
              };
              styles.color.grey = styles.color.gray;

              for (const groupName of Object.keys(styles)) {
                const group = styles[groupName];

                for (const styleName of Object.keys(group)) {
                  const style = group[styleName];
                  styles[styleName] = {
                    open: `\u001B[${style[0]}m`,
                    close: `\u001B[${style[1]}m`,
                  };
                  group[styleName] = styles[styleName];
                  codes.set(style[0], style[1]);
                }

                Object.defineProperty(styles, groupName, {
                  value: group,
                  enumerable: false,
                });
                Object.defineProperty(styles, "codes", {
                  value: codes,
                  enumerable: false,
                });
              }

              const ansi2ansi = n => n;

              const rgb2rgb = (r, g, b) => [r, g, b];

              styles.color.close = "\u001B[39m";
              styles.bgColor.close = "\u001B[49m";
              styles.color.ansi = {
                ansi: wrapAnsi16(ansi2ansi, 0),
              };
              styles.color.ansi256 = {
                ansi256: wrapAnsi256(ansi2ansi, 0),
              };
              styles.color.ansi16m = {
                rgb: wrapAnsi16m(rgb2rgb, 0),
              };
              styles.bgColor.ansi = {
                ansi: wrapAnsi16(ansi2ansi, 10),
              };
              styles.bgColor.ansi256 = {
                ansi256: wrapAnsi256(ansi2ansi, 10),
              };
              styles.bgColor.ansi16m = {
                rgb: wrapAnsi16m(rgb2rgb, 10),
              };

              for (let key of Object.keys(colorConvert)) {
                if (typeof colorConvert[key] !== "object") {
                  continue;
                }

                const suite = colorConvert[key];

                if (key === "ansi16") {
                  key = "ansi";
                }

                if ("ansi16" in suite) {
                  styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                  styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
                }

                if ("ansi256" in suite) {
                  styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                  styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
                }

                if ("rgb" in suite) {
                  styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                  styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
                }
              }

              return styles;
            }

            Object.defineProperty(module, "exports", {
              enumerable: true,
              get: assembleStyles,
            });
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(36)(module)));
        },
        /* 372 */
        function(module, exports, __webpack_require__) {
          var conversions = __webpack_require__(146);

          var route = __webpack_require__(374);

          var convert = {};
          var models = Object.keys(conversions);

          function wrapRaw(fn) {
            var wrappedFn = function(args) {
              if (args === undefined || args === null) {
                return args;
              }

              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }

              return fn(args);
            };

            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }

            return wrappedFn;
          }

          function wrapRounded(fn) {
            var wrappedFn = function(args) {
              if (args === undefined || args === null) {
                return args;
              }

              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }

              var result = fn(args);

              if (typeof result === "object") {
                for (var len = result.length, i = 0; i < len; i++) {
                  result[i] = Math.round(result[i]);
                }
              }

              return result;
            };

            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }

            return wrappedFn;
          }

          models.forEach(function(fromModel) {
            convert[fromModel] = {};
            Object.defineProperty(convert[fromModel], "channels", {
              value: conversions[fromModel].channels,
            });
            Object.defineProperty(convert[fromModel], "labels", {
              value: conversions[fromModel].labels,
            });
            var routes = route(fromModel);
            var routeModels = Object.keys(routes);
            routeModels.forEach(function(toModel) {
              var fn = routes[toModel];
              convert[fromModel][toModel] = wrapRounded(fn);
              convert[fromModel][toModel].raw = wrapRaw(fn);
            });
          });
          module.exports = convert;
        },
        /* 373 */
        function(module, exports, __webpack_require__) {
          "use strict";

          module.exports = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50],
          };
        },
        /* 374 */
        function(module, exports, __webpack_require__) {
          var conversions = __webpack_require__(146);

          function buildGraph() {
            var graph = {};
            var models = Object.keys(conversions);

            for (var len = models.length, i = 0; i < len; i++) {
              graph[models[i]] = {
                distance: -1,
                parent: null,
              };
            }

            return graph;
          }

          function deriveBFS(fromModel) {
            var graph = buildGraph();
            var queue = [fromModel];
            graph[fromModel].distance = 0;

            while (queue.length) {
              var current = queue.pop();
              var adjacents = Object.keys(conversions[current]);

              for (var len = adjacents.length, i = 0; i < len; i++) {
                var adjacent = adjacents[i];
                var node = graph[adjacent];

                if (node.distance === -1) {
                  node.distance = graph[current].distance + 1;
                  node.parent = current;
                  queue.unshift(adjacent);
                }
              }
            }

            return graph;
          }

          function link(from, to) {
            return function(args) {
              return to(from(args));
            };
          }

          function wrapConversion(toModel, graph) {
            var path = [graph[toModel].parent, toModel];
            var fn = conversions[graph[toModel].parent][toModel];
            var cur = graph[toModel].parent;

            while (graph[cur].parent) {
              path.unshift(graph[cur].parent);
              fn = link(conversions[graph[cur].parent][cur], fn);
              cur = graph[cur].parent;
            }

            fn.conversion = path;
            return fn;
          }

          module.exports = function(fromModel) {
            var graph = deriveBFS(fromModel);
            var conversion = {};
            var models = Object.keys(graph);

            for (var len = models.length, i = 0; i < len; i++) {
              var toModel = models[i];
              var node = graph[toModel];

              if (node.parent === null) {
                continue;
              }

              conversion[toModel] = wrapConversion(toModel, graph);
            }

            return conversion;
          };
        },
        /* 375 */
        function(module, exports, __webpack_require__) {
          "use strict";

          module.exports = {
            stdout: false,
            stderr: false,
          };
        },
        /* 376 */
        function(module, exports, __webpack_require__) {
          "use strict";

          const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
          const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
          const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
          const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
          const ESCAPES = new Map([
            ["n", "\n"],
            ["r", "\r"],
            ["t", "\t"],
            ["b", "\b"],
            ["f", "\f"],
            ["v", "\v"],
            ["0", "\0"],
            ["\\", "\\"],
            ["e", "\u001B"],
            ["a", "\u0007"],
          ]);

          function unescape(c) {
            if (
              (c[0] === "u" && c.length === 5) ||
              (c[0] === "x" && c.length === 3)
            ) {
              return String.fromCharCode(parseInt(c.slice(1), 16));
            }

            return ESCAPES.get(c) || c;
          }

          function parseArguments(name, args) {
            const results = [];
            const chunks = args.trim().split(/\s*,\s*/g);
            let matches;

            for (const chunk of chunks) {
              if (!isNaN(chunk)) {
                results.push(Number(chunk));
              } else if ((matches = chunk.match(STRING_REGEX))) {
                results.push(
                  matches[2].replace(ESCAPE_REGEX, (m, escape, chr) =>
                    escape ? unescape(escape) : chr
                  )
                );
              } else {
                throw new Error(
                  `Invalid Chalk template style argument: ${chunk} (in style '${name}')`
                );
              }
            }

            return results;
          }

          function parseStyle(style) {
            STYLE_REGEX.lastIndex = 0;
            const results = [];
            let matches;

            while ((matches = STYLE_REGEX.exec(style)) !== null) {
              const name = matches[1];

              if (matches[2]) {
                const args = parseArguments(name, matches[2]);
                results.push([name].concat(args));
              } else {
                results.push([name]);
              }
            }

            return results;
          }

          function buildStyle(chalk, styles) {
            const enabled = {};

            for (const layer of styles) {
              for (const style of layer.styles) {
                enabled[style[0]] = layer.inverse ? null : style.slice(1);
              }
            }

            let current = chalk;

            for (const styleName of Object.keys(enabled)) {
              if (Array.isArray(enabled[styleName])) {
                if (!(styleName in current)) {
                  throw new Error(`Unknown Chalk style: ${styleName}`);
                }

                if (enabled[styleName].length > 0) {
                  current = current[styleName].apply(
                    current,
                    enabled[styleName]
                  );
                } else {
                  current = current[styleName];
                }
              }
            }

            return current;
          }

          module.exports = (chalk, tmp) => {
            const styles = [];
            const chunks = [];
            let chunk = [];
            tmp.replace(
              TEMPLATE_REGEX,
              (m, escapeChar, inverse, style, close, chr) => {
                if (escapeChar) {
                  chunk.push(unescape(escapeChar));
                } else if (style) {
                  const str = chunk.join("");
                  chunk = [];
                  chunks.push(
                    styles.length === 0 ? str : buildStyle(chalk, styles)(str)
                  );
                  styles.push({
                    inverse,
                    styles: parseStyle(style),
                  });
                } else if (close) {
                  if (styles.length === 0) {
                    throw new Error(
                      "Found extraneous } in Chalk template literal"
                    );
                  }

                  chunks.push(buildStyle(chalk, styles)(chunk.join("")));
                  chunk = [];
                  styles.pop();
                } else {
                  chunk.push(chr);
                }
              }
            );
            chunks.push(chunk.join(""));

            if (styles.length > 0) {
              const errMsg = `Chalk template literal is missing ${
                styles.length
              } closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
              throw new Error(errMsg);
            }

            return chunks.join("");
          };
        },
        /* 377 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(global) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.evaluateTruthy = evaluateTruthy;
            exports.evaluate = evaluate;
            const VALID_CALLEES = ["String", "Number", "Math"];
            const INVALID_METHODS = ["random"];

            function evaluateTruthy() {
              const res = this.evaluate();
              if (res.confident) return !!res.value;
            }

            function deopt(path, state) {
              if (!state.confident) return;
              state.deoptPath = path;
              state.confident = false;
            }

            function evaluateCached(path, state) {
              const { node } = path;
              const { seen } = state;

              if (seen.has(node)) {
                const existing = seen.get(node);

                if (existing.resolved) {
                  return existing.value;
                } else {
                  deopt(path, state);
                  return;
                }
              } else {
                const item = {
                  resolved: false,
                };
                seen.set(node, item);

                const val = _evaluate(path, state);

                if (state.confident) {
                  item.resolved = true;
                  item.value = val;
                }

                return val;
              }
            }

            function _evaluate(path, state) {
              if (!state.confident) return;
              const { node } = path;

              if (path.isSequenceExpression()) {
                const exprs = path.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state);
              }

              if (
                path.isStringLiteral() ||
                path.isNumericLiteral() ||
                path.isBooleanLiteral()
              ) {
                return node.value;
              }

              if (path.isNullLiteral()) {
                return null;
              }

              if (path.isTemplateLiteral()) {
                return evaluateQuasis(path, node.quasis, state);
              }

              if (
                path.isTaggedTemplateExpression() &&
                path.get("tag").isMemberExpression()
              ) {
                const object = path.get("tag.object");
                const {
                  node: { name },
                } = object;
                const property = path.get("tag.property");

                if (
                  object.isIdentifier() &&
                  name === "String" &&
                  !path.scope.getBinding(name, true) &&
                  property.isIdentifier &&
                  property.node.name === "raw"
                ) {
                  return evaluateQuasis(path, node.quasi.quasis, state, true);
                }
              }

              if (path.isConditionalExpression()) {
                const testResult = evaluateCached(path.get("test"), state);
                if (!state.confident) return;

                if (testResult) {
                  return evaluateCached(path.get("consequent"), state);
                } else {
                  return evaluateCached(path.get("alternate"), state);
                }
              }

              if (path.isExpressionWrapper()) {
                return evaluateCached(path.get("expression"), state);
              }

              if (
                path.isMemberExpression() &&
                !path.parentPath.isCallExpression({
                  callee: node,
                })
              ) {
                const property = path.get("property");
                const object = path.get("object");

                if (object.isLiteral() && property.isIdentifier()) {
                  const value = object.node.value;
                  const type = typeof value;

                  if (type === "number" || type === "string") {
                    return value[property.node.name];
                  }
                }
              }

              if (path.isReferencedIdentifier()) {
                const binding = path.scope.getBinding(node.name);

                if (binding && binding.constantViolations.length > 0) {
                  return deopt(binding.path, state);
                }

                if (binding && path.node.start < binding.path.node.end) {
                  return deopt(binding.path, state);
                }

                if (binding && binding.hasValue) {
                  return binding.value;
                } else {
                  if (node.name === "undefined") {
                    return binding ? deopt(binding.path, state) : undefined;
                  } else if (node.name === "Infinity") {
                    return binding ? deopt(binding.path, state) : Infinity;
                  } else if (node.name === "NaN") {
                    return binding ? deopt(binding.path, state) : NaN;
                  }

                  const resolved = path.resolve();

                  if (resolved === path) {
                    return deopt(path, state);
                  } else {
                    return evaluateCached(resolved, state);
                  }
                }
              }

              if (
                path.isUnaryExpression({
                  prefix: true,
                })
              ) {
                if (node.operator === "void") {
                  return undefined;
                }

                const argument = path.get("argument");

                if (
                  node.operator === "typeof" &&
                  (argument.isFunction() || argument.isClass())
                ) {
                  return "function";
                }

                const arg = evaluateCached(argument, state);
                if (!state.confident) return;

                switch (node.operator) {
                  case "!":
                    return !arg;

                  case "+":
                    return +arg;

                  case "-":
                    return -arg;

                  case "~":
                    return ~arg;

                  case "typeof":
                    return typeof arg;
                }
              }

              if (path.isArrayExpression()) {
                const arr = [];
                const elems = path.get("elements");

                for (const elem of elems) {
                  const elemValue = elem.evaluate();

                  if (elemValue.confident) {
                    arr.push(elemValue.value);
                  } else {
                    return deopt(elem, state);
                  }
                }

                return arr;
              }

              if (path.isObjectExpression()) {
                const obj = {};
                const props = path.get("properties");

                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement()) {
                    return deopt(prop, state);
                  }

                  const keyPath = prop.get("key");
                  let key = keyPath;

                  if (prop.node.computed) {
                    key = key.evaluate();

                    if (!key.confident) {
                      return deopt(keyPath, state);
                    }

                    key = key.value;
                  } else if (key.isIdentifier()) {
                    key = key.node.name;
                  } else {
                    key = key.node.value;
                  }

                  const valuePath = prop.get("value");
                  let value = valuePath.evaluate();

                  if (!value.confident) {
                    return deopt(valuePath, state);
                  }

                  value = value.value;
                  obj[key] = value;
                }

                return obj;
              }

              if (path.isLogicalExpression()) {
                const wasConfident = state.confident;
                const left = evaluateCached(path.get("left"), state);
                const leftConfident = state.confident;
                state.confident = wasConfident;
                const right = evaluateCached(path.get("right"), state);
                const rightConfident = state.confident;

                switch (node.operator) {
                  case "||":
                    state.confident =
                      leftConfident && (!!left || rightConfident);
                    if (!state.confident) return;
                    return left || right;

                  case "&&":
                    state.confident =
                      leftConfident && (!left || rightConfident);
                    if (!state.confident) return;
                    return left && right;
                }
              }

              if (path.isBinaryExpression()) {
                const left = evaluateCached(path.get("left"), state);
                if (!state.confident) return;
                const right = evaluateCached(path.get("right"), state);
                if (!state.confident) return;

                switch (node.operator) {
                  case "-":
                    return left - right;

                  case "+":
                    return left + right;

                  case "/":
                    return left / right;

                  case "*":
                    return left * right;

                  case "%":
                    return left % right;

                  case "**":
                    return left ** right;

                  case "<":
                    return left < right;

                  case ">":
                    return left > right;

                  case "<=":
                    return left <= right;

                  case ">=":
                    return left >= right;

                  case "==":
                    return left == right;

                  case "!=":
                    return left != right;

                  case "===":
                    return left === right;

                  case "!==":
                    return left !== right;

                  case "|":
                    return left | right;

                  case "&":
                    return left & right;

                  case "^":
                    return left ^ right;

                  case "<<":
                    return left << right;

                  case ">>":
                    return left >> right;

                  case ">>>":
                    return left >>> right;
                }
              }

              if (path.isCallExpression()) {
                const callee = path.get("callee");
                let context;
                let func;

                if (
                  callee.isIdentifier() &&
                  !path.scope.getBinding(callee.node.name, true) &&
                  VALID_CALLEES.indexOf(callee.node.name) >= 0
                ) {
                  func = global[node.callee.name];
                }

                if (callee.isMemberExpression()) {
                  const object = callee.get("object");
                  const property = callee.get("property");

                  if (
                    object.isIdentifier() &&
                    property.isIdentifier() &&
                    VALID_CALLEES.indexOf(object.node.name) >= 0 &&
                    INVALID_METHODS.indexOf(property.node.name) < 0
                  ) {
                    context = global[object.node.name];
                    func = context[property.node.name];
                  }

                  if (object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;

                    if (type === "string" || type === "number") {
                      context = object.node.value;
                      func = context[property.node.name];
                    }
                  }
                }

                if (func) {
                  const args = path
                    .get("arguments")
                    .map(arg => evaluateCached(arg, state));
                  if (!state.confident) return;
                  return func.apply(context, args);
                }
              }

              deopt(path, state);
            }

            function evaluateQuasis(path, quasis, state, raw = false) {
              let str = "";
              let i = 0;
              const exprs = path.get("expressions");

              for (const elem of quasis) {
                if (!state.confident) break;
                str += raw ? elem.value.raw : elem.value.cooked;
                const expr = exprs[i++];
                if (expr) str += String(evaluateCached(expr, state));
              }

              if (!state.confident) return;
              return str;
            }

            function evaluate() {
              const state = {
                confident: true,
                deoptPath: null,
                seen: new Map(),
              };
              let value = evaluateCached(this, state);
              if (!state.confident) value = undefined;
              return {
                confident: state.confident,
                deopt: state.deoptPath,
                value: value,
              };
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(23)));
        },
        /* 378 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.toComputedKey = toComputedKey;
          exports.ensureBlock = ensureBlock;
          exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
          exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
          exports.arrowFunctionToExpression = arrowFunctionToExpression;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _babelHelperFunctionName() {
            const data = _interopRequireDefault(__webpack_require__(379));

            _babelHelperFunctionName = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function toComputedKey() {
            const node = this.node;
            let key;

            if (this.isMemberExpression()) {
              key = node.property;
            } else if (this.isProperty() || this.isMethod()) {
              key = node.key;
            } else {
              throw new ReferenceError("todo");
            }

            if (!node.computed) {
              if (t().isIdentifier(key)) key = t().stringLiteral(key.name);
            }

            return key;
          }

          function ensureBlock() {
            const body = this.get("body");
            const bodyNode = body.node;

            if (Array.isArray(body)) {
              throw new Error("Can't convert array path to a block statement");
            }

            if (!bodyNode) {
              throw new Error("Can't convert node without a body");
            }

            if (body.isBlockStatement()) {
              return bodyNode;
            }

            const statements = [];
            let stringPath = "body";
            let key;
            let listKey;

            if (body.isStatement()) {
              listKey = "body";
              key = 0;
              statements.push(body.node);
            } else {
              stringPath += ".body.0";

              if (this.isFunction()) {
                key = "argument";
                statements.push(t().returnStatement(body.node));
              } else {
                key = "expression";
                statements.push(t().expressionStatement(body.node));
              }
            }

            this.node.body = t().blockStatement(statements);
            const parentPath = this.get(stringPath);
            body.setup(
              parentPath,
              listKey ? parentPath.node[listKey] : parentPath.node,
              listKey,
              key
            );
            return this.node;
          }

          function arrowFunctionToShadowed() {
            if (!this.isArrowFunctionExpression()) return;
            this.arrowFunctionToExpression();
          }

          function unwrapFunctionEnvironment() {
            if (
              !this.isArrowFunctionExpression() &&
              !this.isFunctionExpression() &&
              !this.isFunctionDeclaration()
            ) {
              throw this.buildCodeFrameError(
                "Can only unwrap the environment of a function."
              );
            }

            hoistFunctionEnvironment(this);
          }

          function arrowFunctionToExpression({
            allowInsertArrow = true,
            specCompliant = false,
          } = {}) {
            if (!this.isArrowFunctionExpression()) {
              throw this.buildCodeFrameError(
                "Cannot convert non-arrow function to a function expression."
              );
            }

            const thisBinding = hoistFunctionEnvironment(
              this,
              specCompliant,
              allowInsertArrow
            );
            this.ensureBlock();
            this.node.type = "FunctionExpression";

            if (specCompliant) {
              const checkBinding = thisBinding
                ? null
                : this.parentPath.scope.generateUidIdentifier("arrowCheckId");

              if (checkBinding) {
                this.parentPath.scope.push({
                  id: checkBinding,
                  init: t().objectExpression([]),
                });
              }

              this.get("body").unshiftContainer(
                "body",
                t().expressionStatement(
                  t().callExpression(this.hub.addHelper("newArrowCheck"), [
                    t().thisExpression(),
                    checkBinding
                      ? t().identifier(checkBinding.name)
                      : t().identifier(thisBinding),
                  ])
                )
              );
              this.replaceWith(
                t().callExpression(
                  t().memberExpression(
                    (0, _babelHelperFunctionName().default)(this, true) ||
                      this.node,
                    t().identifier("bind")
                  ),
                  [
                    checkBinding
                      ? t().identifier(checkBinding.name)
                      : t().thisExpression(),
                  ]
                )
              );
            }
          }

          function hoistFunctionEnvironment(
            fnPath,
            specCompliant = false,
            allowInsertArrow = true
          ) {
            const thisEnvFn = fnPath.findParent(p => {
              return (
                (p.isFunction() && !p.isArrowFunctionExpression()) ||
                p.isProgram() ||
                p.isClassProperty({
                  static: false,
                })
              );
            });
            const inConstructor =
              thisEnvFn && thisEnvFn.node.kind === "constructor";

            if (thisEnvFn.isClassProperty()) {
              throw fnPath.buildCodeFrameError(
                "Unable to transform arrow inside class property"
              );
            }

            const {
              thisPaths,
              argumentsPaths,
              newTargetPaths,
              superProps,
              superCalls,
            } = getScopeInformation(fnPath);

            if (inConstructor && superCalls.length > 0) {
              if (!allowInsertArrow) {
                throw superCalls[0].buildCodeFrameError(
                  "Unable to handle nested super() usage in arrow"
                );
              }

              const allSuperCalls = [];
              thisEnvFn.traverse({
                Function(child) {
                  if (child.isArrowFunctionExpression()) return;
                  child.skip();
                },

                ClassProperty(child) {
                  if (child.node.static) return;
                  child.skip();
                },

                CallExpression(child) {
                  if (!child.get("callee").isSuper()) return;
                  allSuperCalls.push(child);
                },
              });
              const superBinding = getSuperBinding(thisEnvFn);
              allSuperCalls.forEach(superCall => {
                const callee = t().identifier(superBinding);
                callee.loc = superCall.node.callee.loc;
                superCall.get("callee").replaceWith(callee);
              });
            }

            let thisBinding;

            if (thisPaths.length > 0 || specCompliant) {
              thisBinding = getThisBinding(thisEnvFn, inConstructor);

              if (
                !specCompliant ||
                (inConstructor && hasSuperClass(thisEnvFn))
              ) {
                thisPaths.forEach(thisChild => {
                  const thisRef = thisChild.isJSX()
                    ? t().jsxIdentifier(thisBinding)
                    : t().identifier(thisBinding);
                  thisRef.loc = thisChild.node.loc;
                  thisChild.replaceWith(thisRef);
                });
                if (specCompliant) thisBinding = null;
              }
            }

            if (argumentsPaths.length > 0) {
              const argumentsBinding = getBinding(thisEnvFn, "arguments", () =>
                t().identifier("arguments")
              );
              argumentsPaths.forEach(argumentsChild => {
                const argsRef = t().identifier(argumentsBinding);
                argsRef.loc = argumentsChild.node.loc;
                argumentsChild.replaceWith(argsRef);
              });
            }

            if (newTargetPaths.length > 0) {
              const newTargetBinding = getBinding(thisEnvFn, "newtarget", () =>
                t().metaProperty(
                  t().identifier("new"),
                  t().identifier("target")
                )
              );
              newTargetPaths.forEach(targetChild => {
                const targetRef = t().identifier(newTargetBinding);
                targetRef.loc = targetChild.node.loc;
                targetChild.replaceWith(targetRef);
              });
            }

            if (superProps.length > 0) {
              if (!allowInsertArrow) {
                throw superProps[0].buildCodeFrameError(
                  "Unable to handle nested super.prop usage"
                );
              }

              const flatSuperProps = superProps.reduce(
                (acc, superProp) =>
                  acc.concat(standardizeSuperProperty(superProp)),
                []
              );
              flatSuperProps.forEach(superProp => {
                const key = superProp.node.computed
                  ? ""
                  : superProp.get("property").node.name;

                if (
                  superProp.parentPath.isCallExpression({
                    callee: superProp.node,
                  })
                ) {
                  const superBinding = getSuperPropCallBinding(thisEnvFn, key);

                  if (superProp.node.computed) {
                    const prop = superProp.get("property").node;
                    superProp.replaceWith(t().identifier(superBinding));
                    superProp.parentPath.node.arguments.unshift(prop);
                  } else {
                    superProp.replaceWith(t().identifier(superBinding));
                  }
                } else {
                  const isAssignment = superProp.parentPath.isAssignmentExpression(
                    {
                      left: superProp.node,
                    }
                  );
                  const superBinding = getSuperPropBinding(
                    thisEnvFn,
                    isAssignment,
                    key
                  );
                  const args = [];

                  if (superProp.node.computed) {
                    args.push(superProp.get("property").node);
                  }

                  if (isAssignment) {
                    const value = superProp.parentPath.node.right;
                    args.push(value);
                    superProp.parentPath.replaceWith(
                      t().callExpression(t().identifier(superBinding), args)
                    );
                  } else {
                    superProp.replaceWith(
                      t().callExpression(t().identifier(superBinding), args)
                    );
                  }
                }
              });
            }

            return thisBinding;
          }

          function standardizeSuperProperty(superProp) {
            if (
              superProp.parentPath.isAssignmentExpression() &&
              superProp.parentPath.node.operator !== "="
            ) {
              const assignmentPath = superProp.parentPath;
              const op = assignmentPath.node.operator.slice(0, -1);
              const value = assignmentPath.node.right;
              assignmentPath.node.operator = "=";

              if (superProp.node.computed) {
                const tmp = superProp.scope.generateDeclaredUidIdentifier(
                  "tmp"
                );
                assignmentPath
                  .get("left")
                  .replaceWith(
                    t().memberExpression(
                      superProp.node.object,
                      t().assignmentExpression(
                        "=",
                        tmp,
                        superProp.node.property
                      ),
                      true
                    )
                  );
                assignmentPath
                  .get("right")
                  .replaceWith(
                    t().binaryExpression(
                      op,
                      t().memberExpression(
                        superProp.node.object,
                        t().identifier(tmp.name),
                        true
                      ),
                      value
                    )
                  );
              } else {
                assignmentPath
                  .get("left")
                  .replaceWith(
                    t().memberExpression(
                      superProp.node.object,
                      superProp.node.property
                    )
                  );
                assignmentPath
                  .get("right")
                  .replaceWith(
                    t().binaryExpression(
                      op,
                      t().memberExpression(
                        superProp.node.object,
                        t().identifier(superProp.node.property.name)
                      ),
                      value
                    )
                  );
              }

              return [
                assignmentPath.get("left"),
                assignmentPath.get("right").get("left"),
              ];
            } else if (superProp.parentPath.isUpdateExpression()) {
              const updateExpr = superProp.parentPath;
              const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
              const computedKey = superProp.node.computed
                ? superProp.scope.generateDeclaredUidIdentifier("prop")
                : null;
              const parts = [
                t().assignmentExpression(
                  "=",
                  tmp,
                  t().memberExpression(
                    superProp.node.object,
                    computedKey
                      ? t().assignmentExpression(
                          "=",
                          computedKey,
                          superProp.node.property
                        )
                      : superProp.node.property,
                    superProp.node.computed
                  )
                ),
                t().assignmentExpression(
                  "=",
                  t().memberExpression(
                    superProp.node.object,
                    computedKey
                      ? t().identifier(computedKey.name)
                      : superProp.node.property,
                    superProp.node.computed
                  ),
                  t().binaryExpression(
                    "+",
                    t().identifier(tmp.name),
                    t().numericLiteral(1)
                  )
                ),
              ];

              if (!superProp.parentPath.node.prefix) {
                parts.push(t().identifier(tmp.name));
              }

              updateExpr.replaceWith(t().sequenceExpression(parts));
              const left = updateExpr.get("expressions.0.right");
              const right = updateExpr.get("expressions.1.left");
              return [left, right];
            }

            return [superProp];
          }

          function hasSuperClass(thisEnvFn) {
            return (
              thisEnvFn.isClassMethod() &&
              !!thisEnvFn.parentPath.parentPath.node.superClass
            );
          }

          function getThisBinding(thisEnvFn, inConstructor) {
            return getBinding(thisEnvFn, "this", thisBinding => {
              if (!inConstructor || !hasSuperClass(thisEnvFn))
                return t().thisExpression();
              const supers = new WeakSet();
              thisEnvFn.traverse({
                Function(child) {
                  if (child.isArrowFunctionExpression()) return;
                  child.skip();
                },

                ClassProperty(child) {
                  if (child.node.static) return;
                  child.skip();
                },

                CallExpression(child) {
                  if (!child.get("callee").isSuper()) return;
                  if (supers.has(child.node)) return;
                  supers.add(child.node);
                  child.replaceWithMultiple([
                    child.node,
                    t().assignmentExpression(
                      "=",
                      t().identifier(thisBinding),
                      t().identifier("this")
                    ),
                  ]);
                },
              });
            });
          }

          function getSuperBinding(thisEnvFn) {
            return getBinding(thisEnvFn, "supercall", () => {
              const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
              return t().arrowFunctionExpression(
                [t().restElement(argsBinding)],
                t().callExpression(t().super(), [
                  t().spreadElement(t().identifier(argsBinding.name)),
                ])
              );
            });
          }

          function getSuperPropCallBinding(thisEnvFn, propName) {
            return getBinding(
              thisEnvFn,
              `superprop_call:${propName || ""}`,
              () => {
                const argsBinding = thisEnvFn.scope.generateUidIdentifier(
                  "args"
                );
                const argsList = [t().restElement(argsBinding)];
                let fnBody;

                if (propName) {
                  fnBody = t().callExpression(
                    t().memberExpression(t().super(), t().identifier(propName)),
                    [t().spreadElement(t().identifier(argsBinding.name))]
                  );
                } else {
                  const method = thisEnvFn.scope.generateUidIdentifier("prop");
                  argsList.unshift(method);
                  fnBody = t().callExpression(
                    t().memberExpression(
                      t().super(),
                      t().identifier(method.name),
                      true
                    ),
                    [t().spreadElement(t().identifier(argsBinding.name))]
                  );
                }

                return t().arrowFunctionExpression(argsList, fnBody);
              }
            );
          }

          function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
            const op = isAssignment ? "set" : "get";
            return getBinding(
              thisEnvFn,
              `superprop_${op}:${propName || ""}`,
              () => {
                const argsList = [];
                let fnBody;

                if (propName) {
                  fnBody = t().memberExpression(
                    t().super(),
                    t().identifier(propName)
                  );
                } else {
                  const method = thisEnvFn.scope.generateUidIdentifier("prop");
                  argsList.unshift(method);
                  fnBody = t().memberExpression(
                    t().super(),
                    t().identifier(method.name),
                    true
                  );
                }

                if (isAssignment) {
                  const valueIdent = thisEnvFn.scope.generateUidIdentifier(
                    "value"
                  );
                  argsList.push(valueIdent);
                  fnBody = t().assignmentExpression(
                    "=",
                    fnBody,
                    t().identifier(valueIdent.name)
                  );
                }

                return t().arrowFunctionExpression(argsList, fnBody);
              }
            );
          }

          function getBinding(thisEnvFn, key, init) {
            const cacheKey = "binding:" + key;
            let data = thisEnvFn.getData(cacheKey);

            if (!data) {
              const id = thisEnvFn.scope.generateUidIdentifier(key);
              data = id.name;
              thisEnvFn.setData(cacheKey, data);
              thisEnvFn.scope.push({
                id: id,
                init: init(data),
              });
            }

            return data;
          }

          function getScopeInformation(fnPath) {
            const thisPaths = [];
            const argumentsPaths = [];
            const newTargetPaths = [];
            const superProps = [];
            const superCalls = [];
            fnPath.traverse({
              ClassProperty(child) {
                if (child.node.static) return;
                child.skip();
              },

              Function(child) {
                if (child.isArrowFunctionExpression()) return;
                child.skip();
              },

              ThisExpression(child) {
                thisPaths.push(child);
              },

              JSXIdentifier(child) {
                if (child.node.name !== "this") return;

                if (
                  !child.parentPath.isJSXMemberExpression({
                    object: child.node,
                  }) &&
                  !child.parentPath.isJSXOpeningElement({
                    name: child.node,
                  })
                ) {
                  return;
                }

                thisPaths.push(child);
              },

              CallExpression(child) {
                if (child.get("callee").isSuper()) superCalls.push(child);
              },

              MemberExpression(child) {
                if (child.get("object").isSuper()) superProps.push(child);
              },

              ReferencedIdentifier(child) {
                if (child.node.name !== "arguments") return;
                argumentsPaths.push(child);
              },

              MetaProperty(child) {
                if (
                  !child.get("meta").isIdentifier({
                    name: "new",
                  })
                )
                  return;
                if (
                  !child.get("property").isIdentifier({
                    name: "target",
                  })
                )
                  return;
                newTargetPaths.push(child);
              },
            });
            return {
              thisPaths,
              argumentsPaths,
              newTargetPaths,
              superProps,
              superCalls,
            };
          }
        },
        /* 379 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          function _babelHelperGetFunctionArity() {
            const data = _interopRequireDefault(__webpack_require__(380));

            _babelHelperGetFunctionArity = function() {
              return data;
            };

            return data;
          }

          function _babelTemplate() {
            const data = _interopRequireDefault(__webpack_require__(45));

            _babelTemplate = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const buildPropertyMethodAssignmentWrapper = (0,
          _babelTemplate().default)(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`);
          const buildGeneratorPropertyMethodAssignmentWrapper = (0,
          _babelTemplate().default)(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`);
          const visitor = {
            "ReferencedIdentifier|BindingIdentifier"(path, state) {
              if (path.node.name !== state.name) return;
              const localDeclar = path.scope.getBindingIdentifier(state.name);
              if (localDeclar !== state.outerDeclar) return;
              state.selfReference = true;
              path.stop();
            },
          };

          function getNameFromLiteralId(id) {
            if (t().isNullLiteral(id)) {
              return "null";
            }

            if (t().isRegExpLiteral(id)) {
              return `_${id.pattern}_${id.flags}`;
            }

            if (t().isTemplateLiteral(id)) {
              return id.quasis.map(quasi => quasi.value.raw).join("");
            }

            if (id.value !== undefined) {
              return id.value + "";
            }

            return "";
          }

          function wrap(state, method, id, scope) {
            if (state.selfReference) {
              if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
                scope.rename(id.name);
              } else {
                if (!t().isFunction(method)) return;
                let build = buildPropertyMethodAssignmentWrapper;

                if (method.generator) {
                  build = buildGeneratorPropertyMethodAssignmentWrapper;
                }

                const template = build({
                  FUNCTION: method,
                  FUNCTION_ID: id,
                  FUNCTION_KEY: scope.generateUidIdentifier(id.name),
                }).expression;
                const params = template.callee.body.body[0].params;

                for (
                  let i = 0,
                    len = (0, _babelHelperGetFunctionArity().default)(method);
                  i < len;
                  i++
                ) {
                  params.push(scope.generateUidIdentifier("x"));
                }

                return template;
              }
            }

            method.id = id;
            scope.getProgramParent().references[id.name] = true;
          }

          function visit(node, name, scope) {
            const state = {
              selfAssignment: false,
              selfReference: false,
              outerDeclar: scope.getBindingIdentifier(name),
              references: [],
              name: name,
            };
            const binding = scope.getOwnBinding(name);

            if (binding) {
              if (binding.kind === "param") {
                state.selfReference = true;
              } else {
              }
            } else if (state.outerDeclar || scope.hasGlobal(name)) {
              scope.traverse(node, visitor, state);
            }

            return state;
          }

          function _default({ node, parent, scope, id }, localBinding = false) {
            if (node.id) return;

            if (
              (t().isObjectProperty(parent) ||
                t().isObjectMethod(parent, {
                  kind: "method",
                })) &&
              (!parent.computed || t().isLiteral(parent.key))
            ) {
              id = parent.key;
            } else if (t().isVariableDeclarator(parent)) {
              id = parent.id;

              if (t().isIdentifier(id) && !localBinding) {
                const binding = scope.parent.getBinding(id.name);

                if (
                  binding &&
                  binding.constant &&
                  scope.getBinding(id.name) === binding
                ) {
                  node.id = t().cloneNode(id);
                  node.id[t().NOT_LOCAL_BINDING] = true;
                  return;
                }
              }
            } else if (t().isAssignmentExpression(parent)) {
              id = parent.left;
            } else if (!id) {
              return;
            }

            let name;

            if (id && t().isLiteral(id)) {
              name = getNameFromLiteralId(id);
            } else if (id && t().isIdentifier(id)) {
              name = id.name;
            }

            if (name === undefined) {
              return;
            }

            name = t().toBindingIdentifierName(name);
            id = t().identifier(name);
            id[t().NOT_LOCAL_BINDING] = true;
            const state = visit(node, name, scope);
            return wrap(state, node, id, scope) || node;
          }
        },
        /* 380 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _default(node) {
            const params = node.params;

            for (let i = 0; i < params.length; i++) {
              const param = params[i];

              if (t().isAssignmentPattern(param) || t().isRestElement(param)) {
                return i;
              }
            }

            return params.length;
          }
        },
        /* 381 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;

          function makeStatementFormatter(fn) {
            return {
              code: str => `/* @gerhobbelt/babel-template */;\n${str}`,
              validate: () => {},
              unwrap: ast => {
                return fn(ast.program.body.slice(1));
              },
            };
          }

          const smart = makeStatementFormatter(body => {
            if (body.length > 1) {
              return body;
            } else {
              return body[0];
            }
          });
          exports.smart = smart;
          const statements = makeStatementFormatter(body => body);
          exports.statements = statements;
          const statement = makeStatementFormatter(body => {
            if (body.length === 0) {
              throw new Error("Found nothing to return.");
            }

            if (body.length > 1) {
              throw new Error("Found multiple statements but wanted one");
            }

            return body[0];
          });
          exports.statement = statement;
          const expression = {
            code: str => `(\n${str}\n)`,
            validate: ({ program }) => {
              if (program.body.length > 1) {
                throw new Error("Found multiple statements but wanted one");
              }

              const expression = program.body[0].expression;

              if (expression.start === 0) {
                throw new Error("Parse result included parens.");
              }
            },
            unwrap: ast => ast.program.body[0].expression,
          };
          exports.expression = expression;
          const program = {
            code: str => str,
            validate: () => {},
            unwrap: ast => ast.program,
          };
          exports.program = program;
        },
        /* 382 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = createTemplateBuilder;

          var _options = __webpack_require__(81);

          var _string = _interopRequireDefault(__webpack_require__(383));

          var _literal = _interopRequireDefault(__webpack_require__(384));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const NO_PLACEHOLDER = (0, _options.validate)({
            placeholderPattern: false,
          });

          function createTemplateBuilder(formatter, defaultOpts) {
            const templateFnCache = new WeakMap();
            const templateAstCache = new WeakMap();
            const cachedOpts = defaultOpts || (0, _options.validate)(null);
            return Object.assign(
              (tpl, ...args) => {
                if (typeof tpl === "string") {
                  if (args.length > 1)
                    throw new Error("Unexpected extra params.");
                  return extendedTrace(
                    (0, _string.default)(
                      formatter,
                      tpl,
                      (0, _options.merge)(
                        cachedOpts,
                        (0, _options.validate)(args[0])
                      )
                    )
                  );
                } else if (Array.isArray(tpl)) {
                  let builder = templateFnCache.get(tpl);

                  if (!builder) {
                    builder = (0, _literal.default)(formatter, tpl, cachedOpts);
                    templateFnCache.set(tpl, builder);
                  }

                  return extendedTrace(builder(args));
                } else if (typeof tpl === "object" && tpl) {
                  if (args.length > 0)
                    throw new Error("Unexpected extra params.");
                  return createTemplateBuilder(
                    formatter,
                    (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl))
                  );
                }

                throw new Error(`Unexpected template param ${typeof tpl}`);
              },
              {
                ast: (tpl, ...args) => {
                  if (typeof tpl === "string") {
                    if (args.length > 1)
                      throw new Error("Unexpected extra params.");
                    return (0, _string.default)(
                      formatter,
                      tpl,
                      (0, _options.merge)(
                        (0, _options.merge)(
                          cachedOpts,
                          (0, _options.validate)(args[0])
                        ),
                        NO_PLACEHOLDER
                      )
                    )();
                  } else if (Array.isArray(tpl)) {
                    let builder = templateAstCache.get(tpl);

                    if (!builder) {
                      builder = (0, _literal.default)(
                        formatter,
                        tpl,
                        (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)
                      );
                      templateAstCache.set(tpl, builder);
                    }

                    return builder(args)();
                  }

                  throw new Error(`Unexpected template param ${typeof tpl}`);
                },
              }
            );
          }

          function extendedTrace(fn) {
            let rootStack = "";

            try {
              throw new Error();
            } catch (error) {
              if (error.stack) {
                rootStack = error.stack
                  .split("\n")
                  .slice(3)
                  .join("\n");
              }
            }

            return arg => {
              try {
                return fn(arg);
              } catch (err) {
                err.stack += `\n    =============\n${rootStack}`;
                throw err;
              }
            };
          }
        },
        /* 383 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = stringTemplate;

          var _options = __webpack_require__(81);

          var _parse = _interopRequireDefault(__webpack_require__(147));

          var _populate = _interopRequireDefault(__webpack_require__(148));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function stringTemplate(formatter, code, opts) {
            code = formatter.code(code);
            let metadata;
            return arg => {
              const replacements = (0, _options.normalizeReplacements)(arg);
              if (!metadata)
                metadata = (0, _parse.default)(formatter, code, opts);
              return formatter.unwrap(
                (0, _populate.default)(metadata, replacements)
              );
            };
          }
        },
        /* 384 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = literalTemplate;

          var _options = __webpack_require__(81);

          var _parse = _interopRequireDefault(__webpack_require__(147));

          var _populate = _interopRequireDefault(__webpack_require__(148));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function literalTemplate(formatter, tpl, opts) {
            const { metadata, names } = buildLiteralData(formatter, tpl, opts);
            return arg => {
              const defaultReplacements = arg.reduce((acc, replacement, i) => {
                acc[names[i]] = replacement;
                return acc;
              }, {});
              return arg => {
                const replacements = (0, _options.normalizeReplacements)(arg);

                if (replacements) {
                  Object.keys(replacements).forEach(key => {
                    if (
                      Object.prototype.hasOwnProperty.call(
                        defaultReplacements,
                        key
                      )
                    ) {
                      throw new Error("Unexpected replacement overlap.");
                    }
                  });
                }

                return formatter.unwrap(
                  (0, _populate.default)(
                    metadata,
                    replacements
                      ? Object.assign(replacements, defaultReplacements)
                      : defaultReplacements
                  )
                );
              };
            };
          }

          function buildLiteralData(formatter, tpl, opts) {
            let names;
            let nameSet;
            let metadata;
            let prefix = "";

            do {
              prefix += "$";
              const result = buildTemplateCode(tpl, prefix);
              names = result.names;
              nameSet = new Set(names);
              metadata = (0, _parse.default)(
                formatter,
                formatter.code(result.code),
                {
                  parser: opts.parser,
                  placeholderWhitelist: new Set(
                    result.names.concat(
                      opts.placeholderWhitelist
                        ? Array.from(opts.placeholderWhitelist)
                        : []
                    )
                  ),
                  placeholderPattern: opts.placeholderPattern,
                  preserveComments: opts.preserveComments,
                }
              );
            } while (
              metadata.placeholders.some(
                placeholder =>
                  placeholder.isDuplicate && nameSet.has(placeholder.name)
              )
            );

            return {
              metadata,
              names,
            };
          }

          function buildTemplateCode(tpl, prefix) {
            const names = [];
            let code = tpl[0];

            for (let i = 1; i < tpl.length; i++) {
              const value = `${prefix}${i - 1}`;
              names.push(value);
              code += value + tpl[i];
            }

            return {
              names,
              code,
            };
          }
        },
        /* 385 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.matchesPattern = matchesPattern;
          exports.has = has;
          exports.isStatic = isStatic;
          exports.isnt = isnt;
          exports.equals = equals;
          exports.isNodeType = isNodeType;
          exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
          exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
          exports.isCompletionRecord = isCompletionRecord;
          exports.isStatementOrBlock = isStatementOrBlock;
          exports.referencesImport = referencesImport;
          exports.getSource = getSource;
          exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
          exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
          exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
          exports.resolve = resolve;
          exports._resolve = _resolve;
          exports.isConstantExpression = isConstantExpression;
          exports.isInStrictMode = isInStrictMode;
          exports.is = void 0;

          function _includes() {
            const data = _interopRequireDefault(__webpack_require__(74));

            _includes = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function matchesPattern(pattern, allowPartial) {
            return t().matchesPattern(this.node, pattern, allowPartial);
          }

          function has(key) {
            const val = this.node && this.node[key];

            if (val && Array.isArray(val)) {
              return !!val.length;
            } else {
              return !!val;
            }
          }

          function isStatic() {
            return this.scope.isStatic(this.node);
          }

          const is = has;
          exports.is = is;

          function isnt(key) {
            return !this.has(key);
          }

          function equals(key, value) {
            return this.node[key] === value;
          }

          function isNodeType(type) {
            return t().isType(this.type, type);
          }

          function canHaveVariableDeclarationOrExpression() {
            return (
              (this.key === "init" || this.key === "left") &&
              this.parentPath.isFor()
            );
          }

          function canSwapBetweenExpressionAndStatement(replacement) {
            if (
              this.key !== "body" ||
              !this.parentPath.isArrowFunctionExpression()
            ) {
              return false;
            }

            if (this.isExpression()) {
              return t().isBlockStatement(replacement);
            } else if (this.isBlockStatement()) {
              return t().isExpression(replacement);
            }

            return false;
          }

          function isCompletionRecord(allowInsideFunction) {
            let path = this;
            let first = true;

            do {
              const container = path.container;

              if (path.isFunction() && !first) {
                return !!allowInsideFunction;
              }

              first = false;

              if (
                Array.isArray(container) &&
                path.key !== container.length - 1
              ) {
                return false;
              }
            } while ((path = path.parentPath) && !path.isProgram());

            return true;
          }

          function isStatementOrBlock() {
            if (
              this.parentPath.isLabeledStatement() ||
              t().isBlockStatement(this.container)
            ) {
              return false;
            } else {
              return (0, _includes().default)(
                t().STATEMENT_OR_BLOCK_KEYS,
                this.key
              );
            }
          }

          function referencesImport(moduleSource, importName) {
            if (!this.isReferencedIdentifier()) return false;
            const binding = this.scope.getBinding(this.node.name);
            if (!binding || binding.kind !== "module") return false;
            const path = binding.path;
            const parent = path.parentPath;
            if (!parent.isImportDeclaration()) return false;

            if (parent.node.source.value === moduleSource) {
              if (!importName) return true;
            } else {
              return false;
            }

            if (path.isImportDefaultSpecifier() && importName === "default") {
              return true;
            }

            if (path.isImportNamespaceSpecifier() && importName === "*") {
              return true;
            }

            if (
              path.isImportSpecifier() &&
              path.node.imported.name === importName
            ) {
              return true;
            }

            return false;
          }

          function getSource() {
            const node = this.node;

            if (node.end) {
              const code = this.hub.getCode();
              if (code) return code.slice(node.start, node.end);
            }

            return "";
          }

          function willIMaybeExecuteBefore(target) {
            return this._guessExecutionStatusRelativeTo(target) !== "after";
          }

          function _guessExecutionStatusRelativeTo(target) {
            const targetFuncParent =
              target.scope.getFunctionParent() ||
              target.scope.getProgramParent();
            const selfFuncParent =
              this.scope.getFunctionParent() || target.scope.getProgramParent();

            if (targetFuncParent.node !== selfFuncParent.node) {
              const status = this._guessExecutionStatusRelativeToDifferentFunctions(
                targetFuncParent
              );

              if (status) {
                return status;
              } else {
                target = targetFuncParent.path;
              }
            }

            const targetPaths = target.getAncestry();
            if (targetPaths.indexOf(this) >= 0) return "after";
            const selfPaths = this.getAncestry();
            let commonPath;
            let targetIndex;
            let selfIndex;

            for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
              const selfPath = selfPaths[selfIndex];
              targetIndex = targetPaths.indexOf(selfPath);

              if (targetIndex >= 0) {
                commonPath = selfPath;
                break;
              }
            }

            if (!commonPath) {
              return "before";
            }

            const targetRelationship = targetPaths[targetIndex - 1];
            const selfRelationship = selfPaths[selfIndex - 1];

            if (!targetRelationship || !selfRelationship) {
              return "before";
            }

            if (
              targetRelationship.listKey &&
              targetRelationship.container === selfRelationship.container
            ) {
              return targetRelationship.key > selfRelationship.key
                ? "before"
                : "after";
            }

            const keys = t().VISITOR_KEYS[commonPath.type];
            const targetKeyPosition = keys.indexOf(targetRelationship.key);
            const selfKeyPosition = keys.indexOf(selfRelationship.key);
            return targetKeyPosition > selfKeyPosition ? "before" : "after";
          }

          function _guessExecutionStatusRelativeToDifferentFunctions(
            targetFuncParent
          ) {
            const targetFuncPath = targetFuncParent.path;
            if (!targetFuncPath.isFunctionDeclaration()) return;
            const binding = targetFuncPath.scope.getBinding(
              targetFuncPath.node.id.name
            );
            if (!binding.references) return "before";
            const referencePaths = binding.referencePaths;

            for (const path of referencePaths) {
              if (
                path.key !== "callee" ||
                !path.parentPath.isCallExpression()
              ) {
                return;
              }
            }

            let allStatus;

            for (const path of referencePaths) {
              const childOfFunction = !!path.find(
                path => path.node === targetFuncPath.node
              );
              if (childOfFunction) continue;

              const status = this._guessExecutionStatusRelativeTo(path);

              if (allStatus) {
                if (allStatus !== status) return;
              } else {
                allStatus = status;
              }
            }

            return allStatus;
          }

          function resolve(dangerous, resolved) {
            return this._resolve(dangerous, resolved) || this;
          }

          function _resolve(dangerous, resolved) {
            if (resolved && resolved.indexOf(this) >= 0) return;
            resolved = resolved || [];
            resolved.push(this);

            if (this.isVariableDeclarator()) {
              if (this.get("id").isIdentifier()) {
                return this.get("init").resolve(dangerous, resolved);
              } else {
              }
            } else if (this.isReferencedIdentifier()) {
              const binding = this.scope.getBinding(this.node.name);
              if (!binding) return;
              if (!binding.constant) return;
              if (binding.kind === "module") return;

              if (binding.path !== this) {
                const ret = binding.path.resolve(dangerous, resolved);
                if (this.find(parent => parent.node === ret.node)) return;
                return ret;
              }
            } else if (this.isTypeCastExpression()) {
              return this.get("expression").resolve(dangerous, resolved);
            } else if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!t().isLiteral(targetKey)) return;
              const targetName = targetKey.value;
              const target = this.get("object").resolve(dangerous, resolved);

              if (target.isObjectExpression()) {
                const props = target.get("properties");

                for (const prop of props) {
                  if (!prop.isProperty()) continue;
                  const key = prop.get("key");
                  let match =
                    prop.isnt("computed") &&
                    key.isIdentifier({
                      name: targetName,
                    });
                  match =
                    match ||
                    key.isLiteral({
                      value: targetName,
                    });
                  if (match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elems = target.get("elements");
                const elem = elems[targetName];
                if (elem) return elem.resolve(dangerous, resolved);
              }
            }
          }

          function isConstantExpression() {
            if (this.isIdentifier()) {
              const binding = this.scope.getBinding(this.node.name);
              if (!binding) return false;
              return binding.constant;
            }

            if (this.isLiteral()) {
              if (this.isRegExpLiteral()) {
                return false;
              }

              if (this.isTemplateLiteral()) {
                return this.get("expressions").every(expression =>
                  expression.isConstantExpression()
                );
              }

              return true;
            }

            if (this.isUnaryExpression()) {
              if (this.get("operator").node !== "void") {
                return false;
              }

              return this.get("argument").isConstantExpression();
            }

            if (this.isBinaryExpression()) {
              return (
                this.get("left").isConstantExpression() &&
                this.get("right").isConstantExpression()
              );
            }

            return false;
          }

          function isInStrictMode() {
            const start = this.isProgram() ? this : this.parentPath;
            const strictParent = start.find(path => {
              if (
                path.isProgram({
                  sourceType: "module",
                })
              )
                return true;
              if (path.isClass()) return true;
              if (!path.isProgram() && !path.isFunction()) return false;

              if (
                path.isArrowFunctionExpression() &&
                !path.get("body").isBlockStatement()
              ) {
                return false;
              }

              let { node } = path;
              if (path.isFunction()) node = node.body;

              for (const directive of node.directives) {
                if (directive.value.value === "use strict") {
                  return true;
                }
              }
            });
            return !!strictParent;
          }
        },
        /* 386 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.call = call;
          exports._call = _call;
          exports.isBlacklisted = isBlacklisted;
          exports.visit = visit;
          exports.skip = skip;
          exports.skipKey = skipKey;
          exports.stop = stop;
          exports.setScope = setScope;
          exports.setContext = setContext;
          exports.resync = resync;
          exports._resyncParent = _resyncParent;
          exports._resyncKey = _resyncKey;
          exports._resyncList = _resyncList;
          exports._resyncRemoved = _resyncRemoved;
          exports.popContext = popContext;
          exports.pushContext = pushContext;
          exports.setup = setup;
          exports.setKey = setKey;
          exports.requeue = requeue;
          exports._getQueueContexts = _getQueueContexts;

          var _index = _interopRequireDefault(__webpack_require__(8));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function call(key) {
            const opts = this.opts;
            this.debug(key);

            if (this.node) {
              if (this._call(opts[key])) return true;
            }

            if (this.node) {
              return this._call(
                opts[this.node.type] && opts[this.node.type][key]
              );
            }

            return false;
          }

          function _call(fns) {
            if (!fns) return false;

            for (const fn of fns) {
              if (!fn) continue;
              const node = this.node;
              if (!node) return true;
              const ret = fn.call(this.state, this, this.state);

              if (
                ret &&
                typeof ret === "object" &&
                typeof ret.then === "function"
              ) {
                throw new Error(
                  `You appear to be using a plugin with an async traversal visitor, ` +
                    `which your current version of Babel does not support.` +
                    `If you're using a published plugin, you may need to upgrade ` +
                    `your @gerhobbelt/babel-core version.`
                );
              }

              if (ret) {
                throw new Error(
                  `Unexpected return value from visitor method ${fn}`
                );
              }

              if (this.node !== node) return true;
              if (this.shouldStop || this.shouldSkip || this.removed)
                return true;
            }

            return false;
          }

          function isBlacklisted() {
            const blacklist = this.opts.blacklist;
            return blacklist && blacklist.indexOf(this.node.type) > -1;
          }

          function visit() {
            if (!this.node) {
              return false;
            }

            if (this.isBlacklisted()) {
              return false;
            }

            if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
              return false;
            }

            if (this.call("enter") || this.shouldSkip) {
              this.debug("Skip...");
              return this.shouldStop;
            }

            this.debug("Recursing into...");

            _index.default.node(
              this.node,
              this.opts,
              this.scope,
              this.state,
              this,
              this.skipKeys
            );

            this.call("exit");
            return this.shouldStop;
          }

          function skip() {
            this.shouldSkip = true;
          }

          function skipKey(key) {
            this.skipKeys[key] = true;
          }

          function stop() {
            this.shouldStop = true;
            this.shouldSkip = true;
          }

          function setScope() {
            if (this.opts && this.opts.noScope) return;
            let path = this.parentPath;
            let target;

            while (path && !target) {
              if (path.opts && path.opts.noScope) return;
              target = path.scope;
              path = path.parentPath;
            }

            this.scope = this.getScope(target);
            if (this.scope) this.scope.init();
          }

          function setContext(context) {
            this.shouldSkip = false;
            this.shouldStop = false;
            this.removed = false;
            this.skipKeys = {};

            if (context) {
              this.context = context;
              this.state = context.state;
              this.opts = context.opts;
            }

            this.setScope();
            return this;
          }

          function resync() {
            if (this.removed) return;

            this._resyncParent();

            this._resyncList();

            this._resyncKey();
          }

          function _resyncParent() {
            if (this.parentPath) {
              this.parent = this.parentPath.node;
            }
          }

          function _resyncKey() {
            if (!this.container) return;
            if (this.node === this.container[this.key]) return;

            if (Array.isArray(this.container)) {
              for (let i = 0; i < this.container.length; i++) {
                if (this.container[i] === this.node) {
                  return this.setKey(i);
                }
              }
            } else {
              for (const key in this.container) {
                if (this.container[key] === this.node) {
                  return this.setKey(key);
                }
              }
            }

            this.key = null;
          }

          function _resyncList() {
            if (!this.parent || !this.inList) return;
            const newContainer = this.parent[this.listKey];
            if (this.container === newContainer) return;
            this.container = newContainer || null;
          }

          function _resyncRemoved() {
            if (
              this.key == null ||
              !this.container ||
              this.container[this.key] !== this.node
            ) {
              this._markRemoved();
            }
          }

          function popContext() {
            this.contexts.pop();

            if (this.contexts.length > 0) {
              this.setContext(this.contexts[this.contexts.length - 1]);
            } else {
              this.setContext(undefined);
            }
          }

          function pushContext(context) {
            this.contexts.push(context);
            this.setContext(context);
          }

          function setup(parentPath, container, listKey, key) {
            this.inList = !!listKey;
            this.listKey = listKey;
            this.parentKey = listKey || key;
            this.container = container;
            this.parentPath = parentPath || this.parentPath;
            this.setKey(key);
          }

          function setKey(key) {
            this.key = key;
            this.node = this.container[this.key];
            this.type = this.node && this.node.type;
          }

          function requeue(pathToQueue = this) {
            if (pathToQueue.removed) return;
            const contexts = this.contexts;

            for (const context of contexts) {
              context.maybeQueue(pathToQueue);
            }
          }

          function _getQueueContexts() {
            let path = this;
            let contexts = this.contexts;

            while (!contexts.length) {
              path = path.parentPath;
              if (!path) break;
              contexts = path.contexts;
            }

            return contexts;
          }
        },
        /* 387 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.remove = remove;
          exports._removeFromScope = _removeFromScope;
          exports._callRemovalHooks = _callRemovalHooks;
          exports._remove = _remove;
          exports._markRemoved = _markRemoved;
          exports._assertUnremoved = _assertUnremoved;

          var _removalHooks = __webpack_require__(388);

          function remove() {
            this._assertUnremoved();

            this.resync();

            this._removeFromScope();

            if (this._callRemovalHooks()) {
              this._markRemoved();

              return;
            }

            this.shareCommentsWithSiblings();

            this._remove();

            this._markRemoved();
          }

          function _removeFromScope() {
            const bindings = this.getBindingIdentifiers();
            Object.keys(bindings).forEach(name =>
              this.scope.removeBinding(name)
            );
          }

          function _callRemovalHooks() {
            for (const fn of _removalHooks.hooks) {
              if (fn(this, this.parentPath)) return true;
            }
          }

          function _remove() {
            if (Array.isArray(this.container)) {
              this.container.splice(this.key, 1);
              this.updateSiblingKeys(this.key, -1);
            } else {
              this._replaceWith(null);
            }
          }

          function _markRemoved() {
            this.shouldSkip = true;
            this.removed = true;
            this.node = null;
          }

          function _assertUnremoved() {
            if (this.removed) {
              throw this.buildCodeFrameError(
                "NodePath has been removed so is read-only."
              );
            }
          }
        },
        /* 388 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.hooks = void 0;
          const hooks = [
            function(self, parent) {
              const removeParent =
                (self.key === "test" &&
                  (parent.isWhile() || parent.isSwitchCase())) ||
                (self.key === "declaration" && parent.isExportDeclaration()) ||
                (self.key === "body" && parent.isLabeledStatement()) ||
                (self.listKey === "declarations" &&
                  parent.isVariableDeclaration() &&
                  parent.node.declarations.length === 1) ||
                (self.key === "expression" && parent.isExpressionStatement());

              if (removeParent) {
                parent.remove();
                return true;
              }
            },
            function(self, parent) {
              if (
                parent.isSequenceExpression() &&
                parent.node.expressions.length === 1
              ) {
                parent.replaceWith(parent.node.expressions[0]);
                return true;
              }
            },
            function(self, parent) {
              if (parent.isBinary()) {
                if (self.key === "left") {
                  parent.replaceWith(parent.node.right);
                } else {
                  parent.replaceWith(parent.node.left);
                }

                return true;
              }
            },
            function(self, parent) {
              if (
                (parent.isIfStatement() &&
                  (self.key === "consequent" || self.key === "alternate")) ||
                (self.key === "body" &&
                  (parent.isLoop() || parent.isArrowFunctionExpression()))
              ) {
                self.replaceWith({
                  type: "BlockStatement",
                  body: [],
                });
                return true;
              }
            },
          ];
          exports.hooks = hooks;
        },
        /* 389 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.insertBefore = insertBefore;
          exports._containerInsert = _containerInsert;
          exports._containerInsertBefore = _containerInsertBefore;
          exports._containerInsertAfter = _containerInsertAfter;
          exports.insertAfter = insertAfter;
          exports.updateSiblingKeys = updateSiblingKeys;
          exports._verifyNodeList = _verifyNodeList;
          exports.unshiftContainer = unshiftContainer;
          exports.pushContainer = pushContainer;
          exports.hoist = hoist;

          var _cache = __webpack_require__(42);

          var _hoister = _interopRequireDefault(__webpack_require__(390));

          var _index = _interopRequireDefault(__webpack_require__(20));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function insertBefore(nodes) {
            this._assertUnremoved();

            nodes = this._verifyNodeList(nodes);
            const { parentPath } = this;

            if (
              parentPath.isExpressionStatement() ||
              parentPath.isLabeledStatement() ||
              parentPath.isExportNamedDeclaration() ||
              (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            ) {
              return parentPath.insertBefore(nodes);
            } else if (
              (this.isNodeType("Expression") &&
                this.listKey !== "params" &&
                this.listKey !== "arguments") ||
              (parentPath.isForStatement() && this.key === "init")
            ) {
              if (this.node) nodes.push(this.node);
              return this.replaceExpressionWithStatements(nodes);
            } else if (Array.isArray(this.container)) {
              return this._containerInsertBefore(nodes);
            } else if (this.isStatementOrBlock()) {
              const shouldInsertCurrentNode =
                this.node &&
                (!this.isExpressionStatement() || this.node.expression != null);
              this.replaceWith(
                t().blockStatement(shouldInsertCurrentNode ? [this.node] : [])
              );
              return this.unshiftContainer("body", nodes);
            } else {
              throw new Error(
                "We don't know what to do with this node type. " +
                  "We were previously a Statement but we can't fit in here?"
              );
            }
          }

          function _containerInsert(from, nodes) {
            this.updateSiblingKeys(from, nodes.length);
            const paths = [];
            this.container.splice(from, 0, ...nodes);

            for (let i = 0; i < nodes.length; i++) {
              const to = from + i;
              const path = this.getSibling(to);
              paths.push(path);

              if (this.context && this.context.queue) {
                path.pushContext(this.context);
              }
            }

            const contexts = this._getQueueContexts();

            for (const path of paths) {
              path.setScope();
              path.debug("Inserted.");

              for (const context of contexts) {
                context.maybeQueue(path, true);
              }
            }

            return paths;
          }

          function _containerInsertBefore(nodes) {
            return this._containerInsert(this.key, nodes);
          }

          function _containerInsertAfter(nodes) {
            return this._containerInsert(this.key + 1, nodes);
          }

          function insertAfter(nodes) {
            this._assertUnremoved();

            nodes = this._verifyNodeList(nodes);
            const { parentPath } = this;

            if (
              parentPath.isExpressionStatement() ||
              parentPath.isLabeledStatement() ||
              parentPath.isExportNamedDeclaration() ||
              (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            ) {
              return parentPath.insertAfter(
                nodes.map(node => {
                  return t().isExpression(node)
                    ? t().expressionStatement(node)
                    : node;
                })
              );
            } else if (
              (this.isNodeType("Expression") && !this.isJSXElement()) ||
              (parentPath.isForStatement() && this.key === "init")
            ) {
              if (this.node) {
                let { scope } = this;

                if (
                  parentPath.isMethod({
                    computed: true,
                    key: this.node,
                  })
                ) {
                  scope = scope.parent;
                }

                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(
                  t().expressionStatement(
                    t().assignmentExpression(
                      "=",
                      t().cloneNode(temp),
                      this.node
                    )
                  )
                );
                nodes.push(t().expressionStatement(t().cloneNode(temp)));
              }

              return this.replaceExpressionWithStatements(nodes);
            } else if (Array.isArray(this.container)) {
              return this._containerInsertAfter(nodes);
            } else if (this.isStatementOrBlock()) {
              const shouldInsertCurrentNode =
                this.node &&
                (!this.isExpressionStatement() || this.node.expression != null);
              this.replaceWith(
                t().blockStatement(shouldInsertCurrentNode ? [this.node] : [])
              );
              return this.pushContainer("body", nodes);
            } else {
              throw new Error(
                "We don't know what to do with this node type. " +
                  "We were previously a Statement but we can't fit in here?"
              );
            }
          }

          function updateSiblingKeys(fromIndex, incrementBy) {
            if (!this.parent) return;

            const paths = _cache.path.get(this.parent);

            for (let i = 0; i < paths.length; i++) {
              const path = paths[i];

              if (path.key >= fromIndex) {
                path.key += incrementBy;
              }
            }
          }

          function _verifyNodeList(nodes) {
            if (!nodes) {
              return [];
            }

            if (nodes.constructor !== Array) {
              nodes = [nodes];
            }

            for (let i = 0; i < nodes.length; i++) {
              const node = nodes[i];
              let msg;

              if (!node) {
                msg = "has falsy node";
              } else if (typeof node !== "object") {
                msg = "contains a non-object node";
              } else if (!node.type) {
                msg = "without a type";
              } else if (node instanceof _index.default) {
                msg = "has a NodePath when it expected a raw object";
              }

              if (msg) {
                const type = Array.isArray(node) ? "array" : typeof node;
                throw new Error(
                  `Node list ${msg} with the index of ${i} and type of ${type}`
                );
              }
            }

            return nodes;
          }

          function unshiftContainer(listKey, nodes) {
            this._assertUnremoved();

            nodes = this._verifyNodeList(nodes);

            const path = _index.default.get({
              parentPath: this,
              parent: this.node,
              container: this.node[listKey],
              listKey,
              key: 0,
            });

            return path.insertBefore(nodes);
          }

          function pushContainer(listKey, nodes) {
            this._assertUnremoved();

            nodes = this._verifyNodeList(nodes);
            const container = this.node[listKey];

            const path = _index.default.get({
              parentPath: this,
              parent: this.node,
              container: container,
              listKey,
              key: container.length,
            });

            return path.replaceWithMultiple(nodes);
          }

          function hoist(scope = this.scope) {
            const hoister = new _hoister.default(this, scope);
            return hoister.run();
          }
        },
        /* 390 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const referenceVisitor = {
            ReferencedIdentifier(path, state) {
              if (
                path.isJSXIdentifier() &&
                t().react.isCompatTag(path.node.name) &&
                !path.parentPath.isJSXMemberExpression()
              ) {
                return;
              }

              if (path.node.name === "this") {
                let scope = path.scope;

                do {
                  if (
                    scope.path.isFunction() &&
                    !scope.path.isArrowFunctionExpression()
                  ) {
                    break;
                  }
                } while ((scope = scope.parent));

                if (scope) state.breakOnScopePaths.push(scope.path);
              }

              const binding = path.scope.getBinding(path.node.name);
              if (!binding) return;
              if (binding !== state.scope.getBinding(path.node.name)) return;
              state.bindings[path.node.name] = binding;
            },
          };

          class PathHoister {
            constructor(path, scope) {
              this.breakOnScopePaths = [];
              this.bindings = {};
              this.scopes = [];
              this.scope = scope;
              this.path = path;
              this.attachAfter = false;
            }

            isCompatibleScope(scope) {
              for (const key in this.bindings) {
                const binding = this.bindings[key];

                if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
                  return false;
                }
              }

              return true;
            }

            getCompatibleScopes() {
              let scope = this.path.scope;

              do {
                if (this.isCompatibleScope(scope)) {
                  this.scopes.push(scope);
                } else {
                  break;
                }

                if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
                  break;
                }
              } while ((scope = scope.parent));
            }

            getAttachmentPath() {
              let path = this._getAttachmentPath();

              if (!path) return;
              let targetScope = path.scope;

              if (targetScope.path === path) {
                targetScope = path.scope.parent;
              }

              if (
                targetScope.path.isProgram() ||
                targetScope.path.isFunction()
              ) {
                for (const name in this.bindings) {
                  if (!targetScope.hasOwnBinding(name)) continue;
                  const binding = this.bindings[name];

                  if (
                    binding.kind === "param" ||
                    binding.path.parentKey === "params"
                  ) {
                    continue;
                  }

                  const bindingParentPath = this.getAttachmentParentForPath(
                    binding.path
                  );

                  if (bindingParentPath.key >= path.key) {
                    this.attachAfter = true;
                    path = binding.path;

                    for (const violationPath of binding.constantViolations) {
                      if (
                        this.getAttachmentParentForPath(violationPath).key >
                        path.key
                      ) {
                        path = violationPath;
                      }
                    }
                  }
                }
              }

              return path;
            }

            _getAttachmentPath() {
              const scopes = this.scopes;
              const scope = scopes.pop();
              if (!scope) return;

              if (scope.path.isFunction()) {
                if (this.hasOwnParamBindings(scope)) {
                  if (this.scope === scope) return;
                  const bodies = scope.path.get("body").get("body");

                  for (let i = 0; i < bodies.length; i++) {
                    if (bodies[i].node._blockHoist) continue;
                    return bodies[i];
                  }
                } else {
                  return this.getNextScopeAttachmentParent();
                }
              } else if (scope.path.isProgram()) {
                return this.getNextScopeAttachmentParent();
              }
            }

            getNextScopeAttachmentParent() {
              const scope = this.scopes.pop();
              if (scope) return this.getAttachmentParentForPath(scope.path);
            }

            getAttachmentParentForPath(path) {
              do {
                if (
                  !path.parentPath ||
                  (Array.isArray(path.container) && path.isStatement())
                ) {
                  return path;
                }
              } while ((path = path.parentPath));
            }

            hasOwnParamBindings(scope) {
              for (const name in this.bindings) {
                if (!scope.hasOwnBinding(name)) continue;
                const binding = this.bindings[name];
                if (binding.kind === "param" && binding.constant) return true;
              }

              return false;
            }

            run() {
              this.path.traverse(referenceVisitor, this);
              this.getCompatibleScopes();
              const attachTo = this.getAttachmentPath();
              if (!attachTo) return;
              if (
                attachTo.getFunctionParent() === this.path.getFunctionParent()
              )
                return;
              let uid = attachTo.scope.generateUidIdentifier("ref");
              const declarator = t().variableDeclarator(uid, this.path.node);
              const insertFn = this.attachAfter
                ? "insertAfter"
                : "insertBefore";
              const [attached] = attachTo[insertFn]([
                attachTo.isVariableDeclarator()
                  ? declarator
                  : t().variableDeclaration("var", [declarator]),
              ]);
              const parent = this.path.parentPath;

              if (
                parent.isJSXElement() &&
                this.path.container === parent.node.children
              ) {
                uid = t().JSXExpressionContainer(uid);
              }

              this.path.replaceWith(t().cloneNode(uid));
              return attachTo.isVariableDeclarator()
                ? attached.get("init")
                : attached.get("declarations.0.init");
            }
          }

          exports.default = PathHoister;
        },
        /* 391 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.getOpposite = getOpposite;
          exports.getCompletionRecords = getCompletionRecords;
          exports.getSibling = getSibling;
          exports.getPrevSibling = getPrevSibling;
          exports.getNextSibling = getNextSibling;
          exports.getAllNextSiblings = getAllNextSiblings;
          exports.getAllPrevSiblings = getAllPrevSiblings;
          exports.get = get;
          exports._getKey = _getKey;
          exports._getPattern = _getPattern;
          exports.getBindingIdentifiers = getBindingIdentifiers;
          exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
          exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
          exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;

          var _index = _interopRequireDefault(__webpack_require__(20));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function getOpposite() {
            if (this.key === "left") {
              return this.getSibling("right");
            } else if (this.key === "right") {
              return this.getSibling("left");
            }
          }

          function addCompletionRecords(path, paths) {
            if (path) return paths.concat(path.getCompletionRecords());
            return paths;
          }

          function getCompletionRecords() {
            let paths = [];

            if (this.isIfStatement()) {
              paths = addCompletionRecords(this.get("consequent"), paths);
              paths = addCompletionRecords(this.get("alternate"), paths);
            } else if (
              this.isDoExpression() ||
              this.isFor() ||
              this.isWhile()
            ) {
              paths = addCompletionRecords(this.get("body"), paths);
            } else if (this.isProgram() || this.isBlockStatement()) {
              paths = addCompletionRecords(this.get("body").pop(), paths);
            } else if (this.isFunction()) {
              return this.get("body").getCompletionRecords();
            } else if (this.isTryStatement()) {
              paths = addCompletionRecords(this.get("block"), paths);
              paths = addCompletionRecords(this.get("handler"), paths);
              paths = addCompletionRecords(this.get("finalizer"), paths);
            } else if (this.isCatchClause()) {
              paths = addCompletionRecords(this.get("body"), paths);
            } else {
              paths.push(this);
            }

            return paths;
          }

          function getSibling(key) {
            return _index.default.get({
              parentPath: this.parentPath,
              parent: this.parent,
              container: this.container,
              listKey: this.listKey,
              key: key,
            });
          }

          function getPrevSibling() {
            return this.getSibling(this.key - 1);
          }

          function getNextSibling() {
            return this.getSibling(this.key + 1);
          }

          function getAllNextSiblings() {
            let _key = this.key;
            let sibling = this.getSibling(++_key);
            const siblings = [];

            while (sibling.node) {
              siblings.push(sibling);
              sibling = this.getSibling(++_key);
            }

            return siblings;
          }

          function getAllPrevSiblings() {
            let _key = this.key;
            let sibling = this.getSibling(--_key);
            const siblings = [];

            while (sibling.node) {
              siblings.push(sibling);
              sibling = this.getSibling(--_key);
            }

            return siblings;
          }

          function get(key, context) {
            if (context === true) context = this.context;
            const parts = key.split(".");

            if (parts.length === 1) {
              return this._getKey(key, context);
            } else {
              return this._getPattern(parts, context);
            }
          }

          function _getKey(key, context) {
            const node = this.node;
            const container = node[key];

            if (Array.isArray(container)) {
              return container.map((_, i) => {
                return _index.default
                  .get({
                    listKey: key,
                    parentPath: this,
                    parent: node,
                    container: container,
                    key: i,
                  })
                  .setContext(context);
              });
            } else {
              return _index.default
                .get({
                  parentPath: this,
                  parent: node,
                  container: node,
                  key: key,
                })
                .setContext(context);
            }
          }

          function _getPattern(parts, context) {
            let path = this;

            for (const part of parts) {
              if (part === ".") {
                path = path.parentPath;
              } else {
                if (Array.isArray(path)) {
                  path = path[part];
                } else {
                  path = path.get(part, context);
                }
              }
            }

            return path;
          }

          function getBindingIdentifiers(duplicates) {
            return t().getBindingIdentifiers(this.node, duplicates);
          }

          function getOuterBindingIdentifiers(duplicates) {
            return t().getOuterBindingIdentifiers(this.node, duplicates);
          }

          function getBindingIdentifierPaths(
            duplicates = false,
            outerOnly = false
          ) {
            const path = this;
            let search = [].concat(path);
            const ids = Object.create(null);

            while (search.length) {
              const id = search.shift();
              if (!id) continue;
              if (!id.node) continue;
              const keys = t().getBindingIdentifiers.keys[id.node.type];

              if (id.isIdentifier()) {
                if (duplicates) {
                  const _ids = (ids[id.node.name] = ids[id.node.name] || []);

                  _ids.push(id);
                } else {
                  ids[id.node.name] = id;
                }

                continue;
              }

              if (id.isExportDeclaration()) {
                const declaration = id.get("declaration");

                if (declaration.isDeclaration()) {
                  search.push(declaration);
                }

                continue;
              }

              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }

                if (id.isFunctionExpression()) {
                  continue;
                }
              }

              if (keys) {
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i];
                  const child = id.get(key);

                  if (Array.isArray(child) || child.node) {
                    search = search.concat(child);
                  }
                }
              }
            }

            return ids;
          }

          function getOuterBindingIdentifierPaths(duplicates) {
            return this.getBindingIdentifierPaths(duplicates, true);
          }
        },
        /* 392 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
          exports.addComment = addComment;
          exports.addComments = addComments;

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function shareCommentsWithSiblings() {
            if (typeof this.key === "string") return;
            const node = this.node;
            if (!node) return;
            const trailing = node.trailingComments;
            const leading = node.leadingComments;
            if (!trailing && !leading) return;
            const prev = this.getSibling(this.key - 1);
            const next = this.getSibling(this.key + 1);
            const hasPrev = Boolean(prev.node);
            const hasNext = Boolean(next.node);

            if (hasPrev && hasNext) {
            } else if (hasPrev) {
              prev.addComments("trailing", trailing);
            } else if (hasNext) {
              next.addComments("leading", leading);
            }
          }

          function addComment(type, content, line) {
            t().addComment(this.node, type, content, line);
          }

          function addComments(type, comments) {
            t().addComments(this.node, type, comments);
          }
        },
        /* 393 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.explode = explode;
          exports.verify = verify;
          exports.merge = merge;

          var virtualTypes = _interopRequireWildcard(__webpack_require__(134));

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _clone() {
            const data = _interopRequireDefault(__webpack_require__(88));

            _clone = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function explode(visitor) {
            if (visitor._exploded) return visitor;
            visitor._exploded = true;

            for (const nodeType in visitor) {
              if (shouldIgnoreKey(nodeType)) continue;
              const parts = nodeType.split("|");
              if (parts.length === 1) continue;
              const fns = visitor[nodeType];
              delete visitor[nodeType];

              for (const part of parts) {
                visitor[part] = fns;
              }
            }

            verify(visitor);
            delete visitor.__esModule;
            ensureEntranceObjects(visitor);
            ensureCallbackArrays(visitor);

            for (const nodeType of Object.keys(visitor)) {
              if (shouldIgnoreKey(nodeType)) continue;
              const wrapper = virtualTypes[nodeType];
              if (!wrapper) continue;
              const fns = visitor[nodeType];

              for (const type in fns) {
                fns[type] = wrapCheck(wrapper, fns[type]);
              }

              delete visitor[nodeType];

              if (wrapper.types) {
                for (const type of wrapper.types) {
                  if (visitor[type]) {
                    mergePair(visitor[type], fns);
                  } else {
                    visitor[type] = fns;
                  }
                }
              } else {
                mergePair(visitor, fns);
              }
            }

            for (const nodeType in visitor) {
              if (shouldIgnoreKey(nodeType)) continue;
              const fns = visitor[nodeType];
              let aliases = t().FLIPPED_ALIAS_KEYS[nodeType];
              const deprecratedKey = t().DEPRECATED_KEYS[nodeType];

              if (deprecratedKey) {
                console.trace(
                  `Visitor defined for ${nodeType} but it has been renamed to ${deprecratedKey}`
                );
                aliases = [deprecratedKey];
              }

              if (!aliases) continue;
              delete visitor[nodeType];

              for (const alias of aliases) {
                const existing = visitor[alias];

                if (existing) {
                  mergePair(existing, fns);
                } else {
                  visitor[alias] = (0, _clone().default)(fns);
                }
              }
            }

            for (const nodeType in visitor) {
              if (shouldIgnoreKey(nodeType)) continue;
              ensureCallbackArrays(visitor[nodeType]);
            }

            return visitor;
          }

          function verify(visitor) {
            if (visitor._verified) return;

            if (typeof visitor === "function") {
              throw new Error(
                "You passed `traverse()` a function when it expected a visitor object, " +
                  "are you sure you didn't mean `{ enter: Function }`?"
              );
            }

            for (const nodeType in visitor) {
              if (nodeType === "enter" || nodeType === "exit") {
                validateVisitorMethods(nodeType, visitor[nodeType]);
              }

              if (shouldIgnoreKey(nodeType)) continue;

              if (t().TYPES.indexOf(nodeType) < 0) {
                throw new Error(
                  `You gave us a visitor for the node type ${nodeType} but it's not a valid type`
                );
              }

              const visitors = visitor[nodeType];

              if (typeof visitors === "object") {
                for (const visitorKey in visitors) {
                  if (visitorKey === "enter" || visitorKey === "exit") {
                    validateVisitorMethods(
                      `${nodeType}.${visitorKey}`,
                      visitors[visitorKey]
                    );
                  } else {
                    throw new Error(
                      "You passed `traverse()` a visitor object with the property " +
                        `${nodeType} that has the invalid property ${visitorKey}`
                    );
                  }
                }
              }
            }

            visitor._verified = true;
          }

          function validateVisitorMethods(path, val) {
            const fns = [].concat(val);

            for (const fn of fns) {
              if (typeof fn !== "function") {
                throw new TypeError(
                  `Non-function found defined in ${path} with type ${typeof fn}`
                );
              }
            }
          }

          function merge(visitors, states = [], wrapper) {
            const rootVisitor = {};

            for (let i = 0; i < visitors.length; i++) {
              const visitor = visitors[i];
              const state = states[i];
              explode(visitor);

              for (const type in visitor) {
                let visitorType = visitor[type];

                if (state || wrapper) {
                  visitorType = wrapWithStateOrWrapper(
                    visitorType,
                    state,
                    wrapper
                  );
                }

                const nodeVisitor = (rootVisitor[type] =
                  rootVisitor[type] || {});
                mergePair(nodeVisitor, visitorType);
              }
            }

            return rootVisitor;
          }

          function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
            const newVisitor = {};

            for (const key in oldVisitor) {
              let fns = oldVisitor[key];
              if (!Array.isArray(fns)) continue;
              fns = fns.map(function(fn) {
                let newFn = fn;

                if (state) {
                  newFn = function(path) {
                    return fn.call(state, path, state);
                  };
                }

                if (wrapper) {
                  newFn = wrapper(state.key, key, newFn);
                }

                return newFn;
              });
              newVisitor[key] = fns;
            }

            return newVisitor;
          }

          function ensureEntranceObjects(obj) {
            for (const key in obj) {
              if (shouldIgnoreKey(key)) continue;
              const fns = obj[key];

              if (typeof fns === "function") {
                obj[key] = {
                  enter: fns,
                };
              }
            }
          }

          function ensureCallbackArrays(obj) {
            if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
            if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
          }

          function wrapCheck(wrapper, fn) {
            const newFn = function(path) {
              if (wrapper.checkPath(path)) {
                return fn.apply(this, arguments);
              }
            };

            newFn.toString = () => fn.toString();

            return newFn;
          }

          function shouldIgnoreKey(key) {
            if (key[0] === "_") return true;
            if (key === "enter" || key === "exit" || key === "shouldSkip")
              return true;

            if (
              key === "blacklist" ||
              key === "noScope" ||
              key === "skipKeys"
            ) {
              return true;
            }

            return false;
          }

          function mergePair(dest, src) {
            for (const key in src) {
              dest[key] = [].concat(dest[key] || [], src[key]);
            }
          }
        },
        /* 394 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          class Hub {
            getCode() {}

            getScope() {}

            addHelper() {
              throw new Error("Helpers are not supported by the default hub.");
            }

            buildError(node, msg, Error = TypeError) {
              return new Error(msg);
            }
          }

          exports.default = Hub;
        },
        /* 395 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _babelTemplate() {
            const data = _interopRequireDefault(__webpack_require__(45));

            _babelTemplate = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const helpers = Object.create(null);
          var _default = helpers;
          exports.default = _default;

          const helper = minVersion => tpl => ({
            minVersion,
            ast: () => _babelTemplate().default.program.ast(tpl),
          });

          helpers.typeof = helper("7.0.0-beta.0")`
  export default function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) { return typeof obj; };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype
          ? "symbol"
          : typeof obj;
      };
    }

    return _typeof(obj);
  }
`;
          helpers.jsx = helper("7.0.0-beta.0")`
  var REACT_ELEMENT_TYPE;

  export default function _createRawReactElement(type, props, key, children) {
    if (!REACT_ELEMENT_TYPE) {
      REACT_ELEMENT_TYPE = (
        typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")
      ) || 0xeac7;
    }

    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;

    if (!props && childrenLength !== 0) {
      // If we're going to assign props.children, we create a new object now
      // to avoid mutating defaultProps.
      props = {
        children: void 0,
      };
    }
    if (props && defaultProps) {
      for (var propName in defaultProps) {
        if (props[propName] === void 0) {
          props[propName] = defaultProps[propName];
        }
      }
    } else if (!props) {
      props = defaultProps || {};
    }

    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = new Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 3];
      }
      props.children = childArray;
    }

    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key === undefined ? null : '' + key,
      ref: null,
      props: props,
      _owner: null,
    };
  }
`;
          helpers.asyncIterator = helper("7.0.0-beta.0")`
  export default function _asyncIterator(iterable) {
    var method
    if (typeof Symbol === "function") {
      if (Symbol.asyncIterator) {
        method = iterable[Symbol.asyncIterator]
        if (method != null) return method.call(iterable);
      }
      if (Symbol.iterator) {
        method = iterable[Symbol.iterator]
        if (method != null) return method.call(iterable);
      }
    }
    throw new TypeError("Object is not async iterable");
  }
`;
          helpers.AwaitValue = helper("7.0.0-beta.0")`
  export default function _AwaitValue(value) {
    this.wrapped = value;
  }
`;
          helpers.AsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null,
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg)
        var value = result.value;
        var wrappedAwait = value instanceof AwaitValue;

        Promise.resolve(wrappedAwait ? value.wrapped : value).then(
          function (arg) {
            if (wrappedAwait) {
              resume("next", arg);
              return
            }

            settle(result.done ? "return" : "normal", arg);
          },
          function (err) { resume("throw", err); });
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({ value: value, done: true });
          break;
        case "throw":
          front.reject(value);
          break;
        default:
          front.resolve({ value: value, done: false });
          break;
      }

      front = front.next;
      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    // Hide "return" method if generator return is not supported
    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; };
  }

  AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };
  AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };
  AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };
`;
          helpers.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`;
          helpers.awaitAsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function _awaitAsyncGenerator(value) {
    return new AwaitValue(value);
  }
`;
          helpers.asyncGeneratorDelegate = helper("7.0.0-beta.0")`
  export default function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {}, waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) { resolve(inner[key](value)); });
      return { done: false, value: awaitWrap(value) };
    };

    if (typeof Symbol === "function" && Symbol.iterator) {
      iter[Symbol.iterator] = function () { return this; };
    }

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }
      return pump("next", value);
    };

    if (typeof inner.throw === "function") {
      iter.throw = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }
        return pump("throw", value);
      };
    }

    if (typeof inner.return === "function") {
      iter.return = function (value) {
        return pump("return", value);
      };
    }

    return iter;
  }
`;
          helpers.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`;
          helpers.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`;
          helpers.createClass = helper("7.0.0-beta.0")`
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
`;
          helpers.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`;
          helpers.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`;
          helpers.defineProperty = helper("7.0.0-beta.0")`
  export default function _defineProperty(obj, key, value) {
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`;
          helpers.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`;
          helpers.objectSpread = helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? arguments[i] : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`;
          helpers.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`;
          helpers.inheritsLoose = helper("7.0.0-beta.0")`
  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
`;
          helpers.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`;
          helpers.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
`;
          helpers.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Date object.
      // Date#toString is generic in ES2015 [1] and it doesn't throw, so we also
      // check Map#get (which on the other hand doesn't exist in ES5 browsers).
      //
      // [1]: https://github.com/tc39/ecma262/issues/1268#issuecomment-410104832

      Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
      if (typeof Map === "function") {
        Map.prototype.get.call(Reflect.construct(Map, [], function() {}));
      }
      return true;
    } catch (e) {
      return false;
    }
  }

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`;
          helpers.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`;
          helpers.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`;
          helpers.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`;
          helpers.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`;
          helpers.interopRequireWildcard = helper("7.0.0-beta.0")`
  export default function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor
              ? Object.getOwnPropertyDescriptor(obj, key)
              : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
`;
          helpers.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`;
          helpers.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  }
`;
          helpers.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`;
          helpers.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`;
          helpers.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`;
          helpers.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return assertThisInitialized(self);
  }
`;
          helpers.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`;
          helpers.get = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import superPropBase from "superPropBase";

  export default function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }
    return _get(target, property, receiver || target);
  }
`;
          helpers.set = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }
`;
          helpers.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`;
          helpers.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`;
          helpers.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";

  export default function _temporalRef(val, name) {
    if (val === undef) {
      throw new ReferenceError(name + " is not defined - temporal dead zone");
    } else {
      return val;
    }
  }
`;
          helpers.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new Error("\\"" + name + "\\" is read-only");
  }
`;
          helpers.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`;
          helpers.temporalUndefined = helper("7.0.0-beta.0")`
  export default {};
`;
          helpers.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }
`;
          helpers.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimitLoose(arr, i) || nonIterableRest();
  }
`;
          helpers.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();
  }
`;
          helpers.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }
`;
          helpers.arrayWithoutHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
      return arr2;
    }
  }
`;
          helpers.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`;
          helpers.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (
      Symbol.iterator in Object(iter) ||
      Object.prototype.toString.call(iter) === "[object Arguments]"
    ) return Array.from(iter);
  }
`;
          helpers.iterableToArrayLimit = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimit(arr, i) {
    // this is an expanded form of \`for...of\` that properly supports abrupt completions of
    // iterators etc. variable names have been minimised to reduce the size of this massive
    // helper. sometimes spec compliancy is annoying :(
    //
    // _n = _iteratorNormalCompletion
    // _d = _didIteratorError
    // _e = _iteratorError
    // _i = _iterator
    // _s = _step

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
`;
          helpers.iterableToArrayLimitLoose = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimitLoose(arr, i) {
    var _arr = [];
    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      _arr.push(_step.value);
      if (i && _arr.length === i) break;
    }
    return _arr;
  }
`;
          helpers.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }
`;
          helpers.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
`;
          helpers.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`;
          helpers.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`;
          helpers.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`;
          helpers.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and set to use loose mode. ' +
          'To use proposal-class-properties in spec mode with decorators, wait for ' +
          'the next major version of decorators in stage 2.'
        );
    }
`;
          helpers.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`;
          helpers.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            // This is a hack to avoid this being processed by 'transform-runtime'.
            // See issue #9.
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }
`;
          helpers.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`;
          helpers.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`;
          helpers.classPrivateFieldGet = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver).value;
  }
`;
          helpers.classPrivateFieldSet = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }
    var descriptor = privateMap.get(receiver);
    if (!descriptor.writable) {
      // This should only throw in strict mode, but class bodies are
      // always strict and private fields can only be used inside
      // class bodies.
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
    return value;
  }
`;
          helpers.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
    return descriptor.value;
  }
`;
          helpers.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
    if (!descriptor.writable) {
      // This should only throw in strict mode, but class bodies are
      // always strict and private fields can only be used inside
      // class bodies.
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
    return value;
  }
  
`;
          helpers.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
  ) /*: Class<*> */ {
    var r = factory(function initialize(O) {
      _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    _initializeClassElements(r.F, decorated.elements);

    return _runClassFinishers(r.F, decorated.finishers);
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
      Object.defineProperty(def.value, "name", {
        value: typeof key === "symbol" ? "" : key,
        configurable: true,
      });
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
          ? "own"
          : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(other /*: ElementDescriptor */) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  // InitializeClassElements
  function _initializeClassElements /*::<C>*/(
    F /*: Class<C> */,
    elements /*: ElementDescriptor[] */,
  ) {
    var proto = F.prototype;

    ["method", "field"].forEach(function(kind) {
      elements.forEach(function(element /*: ElementDescriptor */) {
        var placement = element.placement;
        if (
          element.kind === kind &&
          (placement === "static" || placement === "prototype")
        ) {
          var receiver = placement === "static" ? F : proto;
          _defineClassElement(receiver, element);
        }
      });
    });
  }

  // InitializeInstanceElements
  function _initializeInstanceElements /*::<C>*/(
    O /*: C */,
    elements /*: ElementDescriptor[] */,
  ) {
    ["method", "field"].forEach(function(kind) {
      elements.forEach(function(element /*: ElementDescriptor */) {
        if (element.kind === kind && element.placement === "own") {
          _defineClassElement(O, element);
        }
      });
    });
  }

  // DefineClassElement
  function _defineClassElement /*::<C>*/(
    receiver /*: C | Class<C> */,
    element /*: ElementDescriptor */,
  ) {
    var descriptor /*: PropertyDescriptor */ = element.descriptor;
    if (element.kind === "field") {
      var initializer = element.initializer;
      descriptor = {
        enumerable: descriptor.enumerable,
        writable: descriptor.writable,
        configurable: descriptor.configurable,
        value: initializer === void 0 ? void 0 : initializer.call(receiver),
      };
    }
    Object.defineProperty(receiver, element.key, descriptor);
  }

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // DecorateClass
  function _decorateClass(
    elements /*: ElementDescriptor[] */,
    decorators /*: ClassDecorator[] */,
  ) /*: ElementsFinishers */ {
    var newElements /*: ElementDescriptor[] */ = [];
    var finishers /*: ClassFinisher[] */ = [];
    var placements /*: Placements */ = { static: [], prototype: [], own: [] };

    elements.forEach(function(element /*: ElementDescriptor */) {
      _addElementPlacement(element, placements);
    });

    elements.forEach(function(element /*: ElementDescriptor */) {
      if (!_hasDecorators(element)) return newElements.push(element);

      var elementFinishersExtras /*: ElementFinishersExtras */ = _decorateElement(
        element,
        placements,
      );
      newElements.push(elementFinishersExtras.element);
      newElements.push.apply(newElements, elementFinishersExtras.extras);
      finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });

    if (!decorators) {
      return { elements: newElements, finishers: finishers };
    }

    var result /*: ElementsFinishers */ = _decorateConstructor(
      newElements,
      decorators,
    );
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;

    return result;
  }

  // AddElementPlacement
  function _addElementPlacement(
    element /*: ElementDescriptor */,
    placements /*: Placements */,
    silent /*: boolean */,
  ) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
      throw new TypeError("Duplicated element (" + element.key + ")");
    }
    keys.push(element.key);
  }

  // DecorateElement
  function _decorateElement(
    element /*: ElementDescriptor */,
    placements /*: Placements */,
  ) /*: ElementFinishersExtras */ {
    var extras /*: ElementDescriptor[] */ = [];
    var finishers /*: ClassFinisher[] */ = [];

    for (
      var decorators = element.decorators, i = decorators.length - 1;
      i >= 0;
      i--
    ) {
      // (inlined) RemoveElementPlacement
      var keys = placements[element.placement];
      keys.splice(keys.indexOf(element.key), 1);

      var elementObject /*: ElementObjectInput */ = _fromElementDescriptor(
        element,
      );
      var elementFinisherExtras /*: ElementFinisherExtras */ = _toElementFinisherExtras(
        (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
          elementObject,
      );

      element = elementFinisherExtras.element;
      _addElementPlacement(element, placements);

      if (elementFinisherExtras.finisher) {
        finishers.push(elementFinisherExtras.finisher);
      }

      var newExtras /*: ElementDescriptor[] | void */ =
        elementFinisherExtras.extras;
      if (newExtras) {
        for (var j = 0; j < newExtras.length; j++) {
          _addElementPlacement(newExtras[j], placements);
        }
        extras.push.apply(extras, newExtras);
      }
    }

    return { element: element, finishers: finishers, extras: extras };
  }

  // DecorateConstructor
  function _decorateConstructor(
    elements /*: ElementDescriptor[] */,
    decorators /*: ClassDecorator[] */,
  ) /*: ElementsFinishers */ {
    var finishers /*: ClassFinisher[] */ = [];

    for (var i = decorators.length - 1; i >= 0; i--) {
      var obj /*: ClassObject */ = _fromClassDescriptor(elements);
      var elementsAndFinisher /*: ElementsFinisher */ = _toClassDescriptor(
        (0, decorators[i])(obj) /*: ClassObject */ || obj,
      );

      if (elementsAndFinisher.finisher !== undefined) {
        finishers.push(elementsAndFinisher.finisher);
      }

      if (elementsAndFinisher.elements !== undefined) {
        elements = elementsAndFinisher.elements;

        for (var j = 0; j < elements.length - 1; j++) {
          for (var k = j + 1; k < elements.length; k++) {
            if (
              elements[j].key === elements[k].key &&
              elements[j].placement === elements[k].placement
            ) {
              throw new TypeError("Duplicated element (" + elements[j].key + ")");
            }
          }
        }
      }
    }

    return { elements: elements, finishers: finishers };
  }

  // FromElementDescriptor
  function _fromElementDescriptor(
    element /*: ElementDescriptor */,
  ) /*: ElementObject */ {
    var obj /*: ElementObject */ = {
      kind: element.kind,
      key: element.key,
      placement: element.placement,
      descriptor: element.descriptor,
    };

    var desc = {
      value: "Descriptor",
      configurable: true,
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);

    if (element.kind === "field") obj.initializer = element.initializer;

    return obj;
  }

  // ToElementDescriptors
  function _toElementDescriptors(
    elementObjects /*: ElementObject[] */,
  ) /*: ElementDescriptor[] */ {
    if (elementObjects === undefined) return;
    return toArray(elementObjects).map(function(elementObject) {
      var element = _toElementDescriptor(elementObject);
      _disallowProperty(elementObject, "finisher", "An element descriptor");
      _disallowProperty(elementObject, "extras", "An element descriptor");
      return element;
    });
  }

  // ToElementDescriptor
  function _toElementDescriptor(
    elementObject /*: ElementObject */,
  ) /*: ElementDescriptor */ {
    var kind = String(elementObject.kind);
    if (kind !== "method" && kind !== "field") {
      throw new TypeError(
        'An element descriptor\\'s .kind property must be either "method" or' +
          ' "field", but a decorator created an element descriptor with' +
          ' .kind "' +
          kind +
          '"',
      );
    }

    var key = toPropertyKey(elementObject.key);

    var placement = String(elementObject.placement);
    if (
      placement !== "static" &&
      placement !== "prototype" &&
      placement !== "own"
    ) {
      throw new TypeError(
        'An element descriptor\\'s .placement property must be one of "static",' +
          ' "prototype" or "own", but a decorator created an element descriptor' +
          ' with .placement "' +
          placement +
          '"',
      );
    }

    var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

    _disallowProperty(elementObject, "elements", "An element descriptor");

    var element /*: ElementDescriptor */ = {
      kind: kind,
      key: key,
      placement: placement,
      descriptor: Object.assign({}, descriptor),
    };

    if (kind !== "field") {
      _disallowProperty(elementObject, "initializer", "A method descriptor");
    } else {
      _disallowProperty(
        descriptor,
        "get",
        "The property descriptor of a field descriptor",
      );
      _disallowProperty(
        descriptor,
        "set",
        "The property descriptor of a field descriptor",
      );
      _disallowProperty(
        descriptor,
        "value",
        "The property descriptor of a field descriptor",
      );

      element.initializer = elementObject.initializer;
    }

    return element;
  }

  function _toElementFinisherExtras(
    elementObject /*: ElementObject */,
  ) /*: ElementFinisherExtras */ {
    var element /*: ElementDescriptor */ = _toElementDescriptor(elementObject);
    var finisher /*: ClassFinisher */ = _optionalCallableProperty(
      elementObject,
      "finisher",
    );
    var extras /*: ElementDescriptors[] */ = _toElementDescriptors(
      elementObject.extras,
    );

    return { element: element, finisher: finisher, extras: extras };
  }

  // FromClassDescriptor
  function _fromClassDescriptor(
    elements /*: ElementDescriptor[] */,
  ) /*: ClassObject */ {
    var obj = {
      kind: "class",
      elements: elements.map(_fromElementDescriptor),
    };

    var desc = { value: "Descriptor", configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);

    return obj;
  }

  // ToClassDescriptor
  function _toClassDescriptor(obj /*: ClassObject */) /*: ElementsFinisher */ {
    var kind = String(obj.kind);
    if (kind !== "class") {
      throw new TypeError(
        'A class descriptor\\'s .kind property must be "class", but a decorator' +
          ' created a class descriptor with .kind "' +
          kind +
          '"',
      );
    }

    _disallowProperty(obj, "key", "A class descriptor");
    _disallowProperty(obj, "placement", "A class descriptor");
    _disallowProperty(obj, "descriptor", "A class descriptor");
    _disallowProperty(obj, "initializer", "A class descriptor");
    _disallowProperty(obj, "extras", "A class descriptor");

    var finisher = _optionalCallableProperty(obj, "finisher");
    var elements = _toElementDescriptors(obj.elements);

    return { elements: elements, finisher: finisher };
  }

  function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
      throw new TypeError(objectType + " can't have a ." + name + " property.");
    }
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

  // RunClassFinishers
  function _runClassFinishers(
    constructor /*: Class<*> */,
    finishers /*: ClassFinisher[] */,
  ) /*: Class<*> */ {
    for (var i = 0; i < finishers.length; i++) {
      var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
      if (newConstructor !== undefined) {
        // NOTE: This should check if IsConstructor(newConstructor) is false.
        if (typeof newConstructor !== "function") {
          throw new TypeError("Finishers must return a constructor.");
        }
        constructor = newConstructor;
      }
    }
    return constructor;
  }
`;
          helpers.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`;
          helpers.classPrivateMethodSet = helper("7.1.6")`
  export default function _classPrivateMethodSet() {
    throw new TypeError("attempted to reassign private method");
  }
`;
        },
        /* 396 */
        function(module, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function() {
              return unify;
            }
          );
          const reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

          function escapeRegExp(string) {
            return string.replace(reRegExpChar, "\\$&");
          }

          const baseReStr = /(^|[^\w_\\/:])((?!http|s?ftp|uri)\w+:)?[\\/]+([\w_\\/-]+?[\\/]+)?X[\\/]+([\w_\\/-]+)/
            .source;
          const genericAbsReStr = /(^|[^\w_\\/:])((?!http|s?ftp|uri)\w+:)?([\\/]+[\w_-]+[\\/]+)([\w_\\/-]+)/g;
          function unify(input, options = {}) {
            let text = "" + input;

            if (options.hasExplicitEscapes) {
              text = text.replace(/(?=\\[^uxwbn])\\\\?/g, "/");
            } else {
              text = text.replace(/\\/g, "/");
            }

            let cwdPathPrefix = (options.cwdPathPrefix || "").replace(
              /\\/g,
              "/"
            );
            let cwdReplacement = "<CWD>";

            while (cwdPathPrefix) {
              let re = RegExp(escapeRegExp(cwdPathPrefix), "g");
              text = text.replace(re, cwdReplacement);
              cwdPathPrefix = cwdPathPrefix.replace(/\/[^/]+$/, "");
              cwdReplacement += "/..";
              if (cwdPathPrefix.indexOf("/") < 0) break;
            }

            if (options.reducePaths) {
              let arr = Array.isArray(options.reducePaths)
                ? options.reducePaths
                : [options.reducePaths];

              for (let i = 0, len = arr.length; i < len; i++) {
                let el = arr[i];
                if (!el) continue;
                let id, replacement;

                if (el.id) {
                  id = el.id;
                  replacement = el.replacement;
                  if (replacement == null) replacement = id;
                } else {
                  id = "" + el;
                  replacement = id;
                }

                let re = RegExp(baseReStr.replace("X", escapeRegExp(id)), "g");
                text = text.replace(re, function(m, prefix, uri, path1, path2) {
                  if (!uri || uri.length <= 2) uri = "";
                  return `${prefix}${uri}/${replacement}/${path2.replace(/\\/g, "/")}`;
                });
              }
            }

            let re = genericAbsReStr;
            text = text.replace(re, function(m, prefix, uri, path1, path2) {
              if (!uri || uri.length <= 2) uri = "";
              return `${prefix}${uri}${path1.replace(/\\/g, "/")}${path2.replace(/\\/g, "/")}`;
            });
            return text;
          }
        },
        /* 397 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = _default;

          function helpers() {
            const data = _interopRequireWildcard(__webpack_require__(133));

            helpers = function() {
              return data;
            };

            return data;
          }

          function _babelGenerator() {
            const data = _interopRequireDefault(__webpack_require__(79));

            _babelGenerator = function() {
              return data;
            };

            return data;
          }

          function _babelTemplate() {
            const data = _interopRequireDefault(__webpack_require__(45));

            _babelTemplate = function() {
              return data;
            };

            return data;
          }

          function t() {
            const data = _interopRequireWildcard(__webpack_require__(0));

            t = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          const buildUmdWrapper = replacements =>
            _babelTemplate().default`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);

          function buildGlobal(whitelist) {
            const namespace = t().identifier("babelHelpers");
            const body = [];
            const container = t().functionExpression(
              null,
              [t().identifier("global")],
              t().blockStatement(body)
            );
            const tree = t().program([
              t().expressionStatement(
                t().callExpression(container, [
                  t().conditionalExpression(
                    t().binaryExpression(
                      "===",
                      t().unaryExpression("typeof", t().identifier("global")),
                      t().stringLiteral("undefined")
                    ),
                    t().identifier("self"),
                    t().identifier("global")
                  ),
                ])
              ),
            ]);
            body.push(
              t().variableDeclaration("var", [
                t().variableDeclarator(
                  namespace,
                  t().assignmentExpression(
                    "=",
                    t().memberExpression(t().identifier("global"), namespace),
                    t().objectExpression([])
                  )
                ),
              ])
            );
            buildHelpers(body, namespace, whitelist);
            return tree;
          }

          function buildModule(whitelist) {
            const body = [];
            const refs = buildHelpers(body, null, whitelist);
            body.unshift(
              t().exportNamedDeclaration(
                null,
                Object.keys(refs).map(name => {
                  return t().exportSpecifier(
                    t().cloneNode(refs[name]),
                    t().identifier(name)
                  );
                })
              )
            );
            return t().program(body, [], "module");
          }

          function buildUmd(whitelist) {
            const namespace = t().identifier("babelHelpers");
            const body = [];
            body.push(
              t().variableDeclaration("var", [
                t().variableDeclarator(namespace, t().identifier("global")),
              ])
            );
            buildHelpers(body, namespace, whitelist);
            return t().program([
              buildUmdWrapper({
                FACTORY_PARAMETERS: t().identifier("global"),
                BROWSER_ARGUMENTS: t().assignmentExpression(
                  "=",
                  t().memberExpression(t().identifier("root"), namespace),
                  t().objectExpression([])
                ),
                COMMON_ARGUMENTS: t().identifier("exports"),
                AMD_ARGUMENTS: t().arrayExpression([
                  t().stringLiteral("exports"),
                ]),
                FACTORY_BODY: body,
                UMD_ROOT: t().identifier("this"),
              }),
            ]);
          }

          function buildVar(whitelist) {
            const namespace = t().identifier("babelHelpers");
            const body = [];
            body.push(
              t().variableDeclaration("var", [
                t().variableDeclarator(namespace, t().objectExpression([])),
              ])
            );
            const tree = t().program(body);
            buildHelpers(body, namespace, whitelist);
            body.push(t().expressionStatement(namespace));
            return tree;
          }

          function buildHelpers(body, namespace, whitelist) {
            const getHelperReference = name => {
              return namespace
                ? t().memberExpression(namespace, t().identifier(name))
                : t().identifier(`_${name}`);
            };

            const refs = {};
            helpers().list.forEach(function(name) {
              if (whitelist && whitelist.indexOf(name) < 0) return;
              const ref = (refs[name] = getHelperReference(name));
              const { nodes } = helpers().get(name, getHelperReference, ref);
              body.push(...nodes);
            });
            return refs;
          }

          function _default(whitelist, outputType = "global") {
            let tree;
            const build = {
              global: buildGlobal,
              module: buildModule,
              umd: buildUmd,
              var: buildVar,
            }[outputType];

            if (build) {
              tree = build(whitelist);
            } else {
              throw new Error(`Unsupported output type ${outputType}`);
            }

            return (0, _babelGenerator().default)(tree).code;
          }
        },
        /* 398 */
        function(module) {
          module.exports = {
            name: "@gerhobbelt/babel-core",
            version: "7.2.2-27",
            description: "Babel compiler core.",
            main: "lib/index.js",
            author: "Sebastian McKenzie <sebmck@gmail.com>",
            homepage: "https://babeljs.io/",
            license: "MIT",
            publishConfig: { access: "public" },
            repository:
              "https://github.com/babel/babel/tree/master/packages/babel-core",
            keywords: [
              "6to5",
              "babel",
              "classes",
              "const",
              "es6",
              "harmony",
              "let",
              "modules",
              "transpile",
              "transpiler",
              "var",
              "babel-core",
              "compiler",
            ],
            engines: { node: ">=6.9.0" },
            browser: {
              "./lib/config/files/index.js":
                "./lib/config/files/index-browser.js",
              "./lib/transform-file.js": "./lib/transform-file-browser.js",
            },
            dependencies: {
              "@gerhobbelt/babel-code-frame": "7.2.2-27",
              "@gerhobbelt/babel-generator": "7.2.2-27",
              "@gerhobbelt/babel-helpers": "7.2.2-27",
              "@gerhobbelt/babel-parser": "7.2.2-27",
              "@gerhobbelt/babel-template": "7.2.2-27",
              "@gerhobbelt/babel-traverse": "7.2.2-27",
              "@gerhobbelt/babel-types": "7.2.2-27",
              "convert-source-map": "^1.1.0",
              debug: "^4.1.0",
              json5: "^2.1.0",
              lodash: "^4.17.10",
              resolve: "^1.3.2",
              semver: "^5.4.1",
              "source-map": "^0.5.0",
            },
            devDependencies: {
              "@gerhobbelt/babel-helper-transform-fixture-test-runner":
                "7.2.2-27",
              "@gerhobbelt/babel-register": "7.2.2-27",
            },
          };
        },
        /* 399 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = loadFullConfig;

          var _util = __webpack_require__(151);

          var context = _interopRequireWildcard(__webpack_require__(72));

          var _plugin = _interopRequireDefault(__webpack_require__(82));

          var _item = __webpack_require__(47);

          var _configChain = __webpack_require__(152);

          function _babelTraverse() {
            const data = _interopRequireDefault(__webpack_require__(8));

            _babelTraverse = function() {
              return data;
            };

            return data;
          }

          var _caching = __webpack_require__(48);

          var _options = __webpack_require__(83);

          var _plugins = __webpack_require__(403);

          var _configApi = _interopRequireDefault(__webpack_require__(404));

          var _partial = _interopRequireDefault(__webpack_require__(154));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function loadFullConfig(inputOpts) {
            const result = (0, _partial.default)(inputOpts);

            if (!result) {
              return null;
            }

            const { options, context } = result;
            const optionDefaults = {};
            const passes = [[]];

            try {
              const { plugins, presets } = options;

              if (!plugins || !presets) {
                throw new Error(
                  "Assertion failure - plugins and presets exist"
                );
              }

              const ignored = (function recurseDescriptors(config, pass) {
                const plugins = config.plugins.reduce((acc, descriptor) => {
                  if (descriptor.options !== false) {
                    acc.push(loadPluginDescriptor(descriptor, context));
                  }

                  return acc;
                }, []);
                const presets = config.presets.reduce((acc, descriptor) => {
                  if (descriptor.options !== false) {
                    acc.push({
                      preset: loadPresetDescriptor(descriptor, context),
                      pass: descriptor.ownPass ? [] : pass,
                    });
                  }

                  return acc;
                }, []);

                if (presets.length > 0) {
                  passes.splice(
                    1,
                    0,
                    ...presets.map(o => o.pass).filter(p => p !== pass)
                  );

                  for (const _ref of presets) {
                    const { preset, pass } = _ref;
                    if (!preset) return true;
                    const ignored = recurseDescriptors(
                      {
                        plugins: preset.plugins,
                        presets: preset.presets,
                      },
                      pass
                    );
                    if (ignored) return true;
                    preset.options.forEach(opts => {
                      (0, _util.mergeOptions)(optionDefaults, opts);
                    });
                  }
                }

                if (plugins.length > 0) {
                  pass.unshift(...plugins);
                }
              })(
                {
                  plugins: plugins.map(item => {
                    const desc = (0, _item.getItemDescriptor)(item);

                    if (!desc) {
                      throw new Error(
                        "Assertion failure - must be config item"
                      );
                    }

                    return desc;
                  }),
                  presets: presets.map(item => {
                    const desc = (0, _item.getItemDescriptor)(item);

                    if (!desc) {
                      throw new Error(
                        "Assertion failure - must be config item"
                      );
                    }

                    return desc;
                  }),
                },
                passes[0]
              );

              if (ignored) return null;
            } catch (e) {
              if (!/^\[BABEL\]/.test(e.message)) {
                e.message = `[BABEL] ${context.filename || "unknown"}: ${
                  e.message
                }`;
              }

              throw e;
            }

            const opts = optionDefaults;
            (0, _util.mergeOptions)(opts, options);
            opts.plugins = passes[0];
            opts.presets = passes
              .slice(1)
              .filter(plugins => plugins.length > 0)
              .map(plugins => ({
                plugins,
              }));
            opts.passPerPreset = opts.presets.length > 0;
            return {
              options: opts,
              passes: passes,
            };
          }

          const loadDescriptor = (0, _caching.makeWeakCache)(
            ({ value, options, dirname, alias }, cache) => {
              if (options === false) throw new Error("Assertion failure");
              options = options || {};
              let item = value;

              if (typeof value === "function") {
                const api = Object.assign(
                  {},
                  context,
                  (0, _configApi.default)(cache)
                );

                try {
                  item = value(api, options, dirname);
                } catch (e) {
                  if (alias) {
                    e.message += ` (While processing: ${JSON.stringify(
                      alias
                    )})`;
                  }

                  throw e;
                }
              }

              if (!item || typeof item !== "object") {
                throw new Error("Plugin/Preset did not return an object.");
              }

              if (typeof item.then === "function") {
                throw new Error(
                  `You appear to be using an async plugin, ` +
                    `which your current version of Babel does not support.` +
                    `If you're using a published plugin, ` +
                    `you may need to upgrade your @gerhobbelt/babel-core version.`
                );
              }

              return {
                value: item,
                options,
                dirname,
                alias,
              };
            }
          );

          function loadPluginDescriptor(descriptor, context) {
            if (descriptor.value instanceof _plugin.default) {
              if (descriptor.options) {
                throw new Error(
                  "Passed options to an existing Plugin instance will not work."
                );
              }

              return descriptor.value;
            }

            return instantiatePlugin(
              loadDescriptor(descriptor, context),
              context
            );
          }

          const instantiatePlugin = (0, _caching.makeWeakCache)(
            ({ value, options, dirname, alias }, cache) => {
              const pluginObj = (0, _plugins.validatePluginObject)(value);
              const plugin = Object.assign({}, pluginObj);

              if (plugin.visitor) {
                plugin.visitor = _babelTraverse().default.explode(
                  Object.assign({}, plugin.visitor)
                );
              }

              if (plugin.inherits) {
                const inheritsDescriptor = {
                  name: undefined,
                  alias: `${alias}$inherits`,
                  value: plugin.inherits,
                  options,
                  dirname,
                };
                const inherits = cache.invalidate(data =>
                  loadPluginDescriptor(inheritsDescriptor, data)
                );
                plugin.pre = chain(inherits.pre, plugin.pre);
                plugin.post = chain(inherits.post, plugin.post);
                plugin.manipulateOptions = chain(
                  inherits.manipulateOptions,
                  plugin.manipulateOptions
                );
                plugin.visitor = _babelTraverse().default.visitors.merge([
                  inherits.visitor || {},
                  plugin.visitor || {},
                ]);
              }

              return new _plugin.default(plugin, options, alias);
            }
          );

          const loadPresetDescriptor = (descriptor, context) => {
            return (0, _configChain.buildPresetChain)(
              instantiatePreset(loadDescriptor(descriptor, context)),
              context
            );
          };

          const instantiatePreset = (0, _caching.makeWeakCache)(
            ({ value, dirname, alias }) => {
              return {
                options: (0, _options.validate)("preset", value),
                alias,
                dirname,
              };
            }
          );

          function chain(a, b) {
            const fns = [a, b].filter(Boolean);
            if (fns.length <= 1) return fns[0];
            return function(...args) {
              for (const fn of fns) {
                fn.apply(this, args);
              }
            };
          }
        },
        /* 400 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;
          var _default = {
            auxiliaryComment: {
              message:
                "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`",
            },
            blacklist: {
              message:
                "Put the specific transforms you want in the `plugins` option",
            },
            breakConfig: {
              message: "This is not a necessary option in Babel 6",
            },
            experimental: {
              message:
                "Put the specific transforms you want in the `plugins` option",
            },
            externalHelpers: {
              message:
                "Use the `external-helpers` plugin instead. " +
                "Check out http://babeljs.io/docs/plugins/external-helpers/",
            },
            extra: {
              message: "",
            },
            jsxPragma: {
              message:
                "use the `pragma` option in the `react-jsx` plugin. " +
                "Check out http://babeljs.io/docs/plugins/transform-react-jsx/",
            },
            loose: {
              message:
                "Specify the `loose` option for the relevant plugin you are using " +
                "or use a preset that sets the option.",
            },
            metadataUsedHelpers: {
              message: "Not required anymore as this is enabled by default",
            },
            modules: {
              message:
                "Use the corresponding module transform plugin in the `plugins` option. " +
                "Check out http://babeljs.io/docs/plugins/#modules",
            },
            nonStandard: {
              message:
                "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " +
                "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/",
            },
            optional: {
              message:
                "Put the specific transforms you want in the `plugins` option",
            },
            sourceMapName: {
              message:
                "The `sourceMapName` option has been removed because it makes more sense for the " +
                "tooling that calls Babel to assign `map.file` themselves.",
            },
            stage: {
              message:
                "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets",
            },
            whitelist: {
              message:
                "Put the specific transforms you want in the `plugins` option",
            },
            resolveModuleSource: {
              version: 6,
              message:
                "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options",
            },
            metadata: {
              version: 6,
              message:
                "Generated plugin metadata is always included in the output result",
            },
            sourceMapTarget: {
              version: 6,
              message:
                "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " +
                "that calls Babel to assign `map.file` themselves.",
            },
          };
          exports.default = _default;
        },
        /* 401 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = pathToPattern;

          function _path() {
            const data = _interopRequireDefault(__webpack_require__(14));

            _path = function() {
              return data;
            };

            return data;
          }

          function _escapeRegExp() {
            const data = _interopRequireDefault(__webpack_require__(402));

            _escapeRegExp = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          const sep = `\\${_path().default.sep}`;
          const endSep = `(?:${sep}|$)`;
          const substitution = `[^${sep}]+`;
          const starPat = `(?:${substitution}${sep})`;
          const starPatLast = `(?:${substitution}${endSep})`;
          const starStarPat = `${starPat}*?`;
          const starStarPatLast = `${starPat}*?${starPatLast}?`;

          function pathToPattern(pattern, dirname) {
            const parts = _path()
              .default.resolve(dirname, pattern)
              .split(_path().default.sep);

            return new RegExp(
              [
                "^",
                ...parts.map((part, i) => {
                  const last = i === parts.length - 1;
                  if (part === "**")
                    return last ? starStarPatLast : starStarPat;
                  if (part === "*") return last ? starPatLast : starPat;

                  if (part.indexOf("*.") === 0) {
                    return (
                      substitution +
                      (0, _escapeRegExp().default)(part.slice(1)) +
                      (last ? endSep : sep)
                    );
                  }

                  return (
                    (0, _escapeRegExp().default)(part) + (last ? endSep : sep)
                  );
                }),
              ].join("")
            );
          }
        },
        /* 402 */
        function(module, exports, __webpack_require__) {
          var toString = __webpack_require__(78);

          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string)
              ? string.replace(reRegExpChar, "\\$&")
              : string;
          }

          module.exports = escapeRegExp;
        },
        /* 403 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.validatePluginObject = validatePluginObject;

          var _optionAssertions = __webpack_require__(153);

          const VALIDATORS = {
            name: _optionAssertions.assertString,
            manipulateOptions: _optionAssertions.assertFunction,
            pre: _optionAssertions.assertFunction,
            post: _optionAssertions.assertFunction,
            inherits: _optionAssertions.assertFunction,
            visitor: assertVisitorMap,
            parserOverride: _optionAssertions.assertFunction,
            generatorOverride: _optionAssertions.assertFunction,
          };

          function assertVisitorMap(key, value) {
            const obj = (0, _optionAssertions.assertObject)(key, value);

            if (obj) {
              Object.keys(obj).forEach(prop =>
                assertVisitorHandler(prop, obj[prop])
              );

              if (obj.enter || obj.exit) {
                throw new Error(
                  `.${key} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`
                );
              }
            }

            return obj;
          }

          function assertVisitorHandler(key, value) {
            if (value && typeof value === "object") {
              Object.keys(value).forEach(handler => {
                if (handler !== "enter" && handler !== "exit") {
                  throw new Error(
                    `.visitor["${key}"] may only have .enter and/or .exit handlers.`
                  );
                }
              });
            } else if (typeof value !== "function") {
              throw new Error(`.visitor["${key}"] must be a function`);
            }

            return value;
          }

          function validatePluginObject(obj) {
            Object.keys(obj).forEach(key => {
              const validator = VALIDATORS[key];
              if (validator) validator(key, obj[key]);
              else throw new Error(`.${key} is not a valid Plugin property`);
            });
            return obj;
          }
        },
        /* 404 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = makeAPI;

          function _semver() {
            const data = _interopRequireDefault(__webpack_require__(15));

            _semver = function() {
              return data;
            };

            return data;
          }

          var _ = __webpack_require__(72);

          var _caching = __webpack_require__(48);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function makeAPI(cache) {
            const env = value =>
              cache.using(data => {
                if (typeof value === "undefined") return data.envName;

                if (typeof value === "function") {
                  return (0, _caching.assertSimpleType)(value(data.envName));
                }

                if (!Array.isArray(value)) value = [value];
                return value.some(entry => {
                  if (typeof entry !== "string") {
                    throw new Error("Unexpected non-string value");
                  }

                  return entry === data.envName;
                });
              });

            const caller = cb =>
              cache.using(data =>
                (0, _caching.assertSimpleType)(cb(data.caller))
              );

            return {
              version: _.version,
              cache: cache.simple(),
              env,
              async: () => false,
              caller,
              assertVersion,
              tokTypes: undefined,
            };
          }

          function assertVersion(range) {
            if (typeof range === "number") {
              if (!Number.isInteger(range)) {
                throw new Error("Expected string or integer value.");
              }

              const cv = _semver().default.parse(_.version);

              if (cv.major === range) return;
            } else {
              if (typeof range !== "string") {
                throw new Error("Expected string or integer value.");
              }

              if (_semver().default.satisfies(_.version, range)) return;
            }

            const limit = Error.stackTraceLimit;

            if (typeof limit === "number" && limit < 25) {
              Error.stackTraceLimit = 25;
            }

            const err = new Error(
              `Requires Babel "${range}", but was loaded with "${
                _.version
              }". ` +
                `If you are sure you have a compatible version of @gerhobbelt/babel-core, ` +
                `it is likely that something in your build process is loading the ` +
                `wrong version. Inspect the stack trace of this error to look for ` +
                `the first entry that doesn't mention "@gerhobbelt/babel-core" or "babel-core" ` +
                `to see what is calling Babel.`
            );

            if (typeof limit === "number") {
              Error.stackTraceLimit = limit;
            }

            throw Object.assign(err, {
              code: "BABEL_VERSION_UNSUPPORTED",
              version: _.version,
              range,
            });
          }
        },
        /* 405 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.transformSync = transformSync;
            exports.transformAsync = transformAsync;
            exports.transform = void 0;

            var _config = _interopRequireDefault(__webpack_require__(30));

            var _transformation = __webpack_require__(155);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            const transform = function transform(code, opts, callback) {
              if (typeof opts === "function") {
                callback = opts;
                opts = undefined;
              }

              if (callback === undefined) return transformSync(code, opts);
              const cb = callback;
              process.nextTick(() => {
                let cfg;

                try {
                  cfg = (0, _config.default)(opts);
                  if (cfg === null) return cb(null, null);
                } catch (err) {
                  return cb(err);
                }

                (0, _transformation.runAsync)(cfg, code, null, cb);
              });
            };

            exports.transform = transform;

            function transformSync(code, opts) {
              const config = (0, _config.default)(opts);
              if (config === null) return null;
              return (0, _transformation.runSync)(config, code);
            }

            function transformAsync(code, opts) {
              return new Promise((res, rej) => {
                transform(code, opts, (err, result) => {
                  if (err == null) res(result);
                  else rej(err);
                });
              });
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 406 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          class PluginPass {
            constructor(file, key, options) {
              this.key = key;
              this.file = file;
              this.opts = options || {};
              this.cwd = file.opts.cwd;
              this.filename = file.opts.filename;
              this._map = new Map();
            }

            set(key, val) {
              this._map.set(key, val);
            }

            get(key) {
              return this._map.get(key);
            }

            availableHelper(name, versionRange) {
              return this.file.availableHelper(name, versionRange);
            }

            addHelper(name) {
              return this.file.addHelper(name);
            }

            addImport() {
              return this.file.addImport();
            }

            getModuleName() {
              return this.file.getModuleName();
            }

            buildCodeFrameError(node, msg, Error) {
              return this.file.buildCodeFrameError(node, msg, Error);
            }
          }

          exports.default = PluginPass;
        },
        /* 407 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = loadBlockHoistPlugin;

          function _sortBy() {
            const data = _interopRequireDefault(__webpack_require__(408));

            _sortBy = function() {
              return data;
            };

            return data;
          }

          var _config = _interopRequireDefault(__webpack_require__(30));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          let LOADED_PLUGIN;

          function loadBlockHoistPlugin() {
            if (!LOADED_PLUGIN) {
              const config = (0, _config.default)({
                babelrc: false,
                configFile: false,
                plugins: [blockHoistPlugin],
              });
              LOADED_PLUGIN = config ? config.passes[0][0] : undefined;
              if (!LOADED_PLUGIN) throw new Error("Assertion failure");
            }

            return LOADED_PLUGIN;
          }

          const blockHoistPlugin = {
            name: "internal.blockHoist",
            visitor: {
              Block: {
                exit({ node }) {
                  let hasChange = false;

                  for (let i = 0; i < node.body.length; i++) {
                    const bodyNode = node.body[i];

                    if (bodyNode && bodyNode._blockHoist != null) {
                      hasChange = true;
                      break;
                    }
                  }

                  if (!hasChange) return;
                  node.body = (0, _sortBy().default)(node.body, function(
                    bodyNode
                  ) {
                    let priority = bodyNode && bodyNode._blockHoist;
                    if (priority == null) priority = 1;
                    if (priority === true) priority = 2;
                    return -1 * priority;
                  });
                },
              },
            },
          };
        },
        /* 408 */
        function(module, exports, __webpack_require__) {
          var baseFlatten = __webpack_require__(409),
            baseOrderBy = __webpack_require__(411),
            baseRest = __webpack_require__(138),
            isIterateeCall = __webpack_require__(77);

          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }

            var length = iteratees.length;

            if (
              length > 1 &&
              isIterateeCall(collection, iteratees[0], iteratees[1])
            ) {
              iteratees = [];
            } else if (
              length > 2 &&
              isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
            ) {
              iteratees = [iteratees[0]];
            }

            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          module.exports = sortBy;
        },
        /* 409 */
        function(module, exports, __webpack_require__) {
          var arrayPush = __webpack_require__(62),
            isFlattenable = __webpack_require__(410);

          function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1,
              length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);

            while (++index < length) {
              var value = array[index];

              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result);
                } else {
                  arrayPush(result, value);
                }
              } else if (!isStrict) {
                result[result.length] = value;
              }
            }

            return result;
          }

          module.exports = baseFlatten;
        },
        /* 410 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17),
            isArguments = __webpack_require__(55),
            isArray = __webpack_require__(4);

          var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

          function isFlattenable(value) {
            return (
              isArray(value) ||
              isArguments(value) ||
              !!(spreadableSymbol && value && value[spreadableSymbol])
            );
          }

          module.exports = isFlattenable;
        },
        /* 411 */
        function(module, exports, __webpack_require__) {
          var arrayMap = __webpack_require__(76),
            baseIteratee = __webpack_require__(412),
            baseMap = __webpack_require__(432),
            baseSortBy = __webpack_require__(438),
            baseUnary = __webpack_require__(25),
            compareMultiple = __webpack_require__(439),
            identity = __webpack_require__(41);

          function baseOrderBy(collection, iteratees, orders) {
            var index = -1;
            iteratees = arrayMap(
              iteratees.length ? iteratees : [identity],
              baseUnary(baseIteratee)
            );
            var result = baseMap(collection, function(value, key, collection) {
              var criteria = arrayMap(iteratees, function(iteratee) {
                return iteratee(value);
              });
              return {
                criteria: criteria,
                index: ++index,
                value: value,
              };
            });
            return baseSortBy(result, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }

          module.exports = baseOrderBy;
        },
        /* 412 */
        function(module, exports, __webpack_require__) {
          var baseMatches = __webpack_require__(413),
            baseMatchesProperty = __webpack_require__(421),
            identity = __webpack_require__(41),
            isArray = __webpack_require__(4),
            property = __webpack_require__(429);

          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }

            if (value == null) {
              return identity;
            }

            if (typeof value == "object") {
              return isArray(value)
                ? baseMatchesProperty(value[0], value[1])
                : baseMatches(value);
            }

            return property(value);
          }

          module.exports = baseIteratee;
        },
        /* 413 */
        function(module, exports, __webpack_require__) {
          var baseIsMatch = __webpack_require__(414),
            getMatchData = __webpack_require__(420),
            matchesStrictComparable = __webpack_require__(159);

          function baseMatches(source) {
            var matchData = getMatchData(source);

            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }

            return function(object) {
              return (
                object === source || baseIsMatch(object, source, matchData)
              );
            };
          }

          module.exports = baseMatches;
        },
        /* 414 */
        function(module, exports, __webpack_require__) {
          var Stack = __webpack_require__(52),
            baseIsEqual = __webpack_require__(156);

          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
              length = index,
              noCustomizer = !customizer;

            if (object == null) {
              return !length;
            }

            object = Object(object);

            while (index--) {
              var data = matchData[index];

              if (
                noCustomizer && data[2]
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
              ) {
                return false;
              }
            }

            while (++index < length) {
              data = matchData[index];
              var key = data[0],
                objValue = object[key],
                srcValue = data[1];

              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();

                if (customizer) {
                  var result = customizer(
                    objValue,
                    srcValue,
                    key,
                    object,
                    source,
                    stack
                  );
                }

                if (
                  !(result === undefined
                    ? baseIsEqual(
                        srcValue,
                        objValue,
                        COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                        customizer,
                        stack
                      )
                    : result)
                ) {
                  return false;
                }
              }
            }

            return true;
          }

          module.exports = baseIsMatch;
        },
        /* 415 */
        function(module, exports, __webpack_require__) {
          var Stack = __webpack_require__(52),
            equalArrays = __webpack_require__(157),
            equalByTag = __webpack_require__(417),
            equalObjects = __webpack_require__(419),
            getTag = __webpack_require__(38),
            isArray = __webpack_require__(4),
            isBuffer = __webpack_require__(56),
            isTypedArray = __webpack_require__(97);

          var COMPARE_PARTIAL_FLAG = 1;
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            objectTag = "[object Object]";
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function baseIsEqualDeep(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;

            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }

              objIsArr = true;
              objIsObj = false;
            }

            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object)
                ? equalArrays(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  )
                : equalByTag(
                    object,
                    other,
                    objTag,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
            }

            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped =
                  objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                othIsWrapped =
                  othIsObj && hasOwnProperty.call(other, "__wrapped__");

              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(
                  objUnwrapped,
                  othUnwrapped,
                  bitmask,
                  customizer,
                  stack
                );
              }
            }

            if (!isSameTag) {
              return false;
            }

            stack || (stack = new Stack());
            return equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            );
          }

          module.exports = baseIsEqualDeep;
        },
        /* 416 */
        function(module, exports) {
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }

            return false;
          }

          module.exports = arraySome;
        },
        /* 417 */
        function(module, exports, __webpack_require__) {
          var Symbol = __webpack_require__(17),
            Uint8Array = __webpack_require__(104),
            eq = __webpack_require__(24),
            equalArrays = __webpack_require__(157),
            mapToArray = __webpack_require__(418),
            setToArray = __webpack_require__(70);

          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;
          var boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            errorTag = "[object Error]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]";
          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]";
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

          function equalByTag(
            object,
            other,
            tag,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            switch (tag) {
              case dataViewTag:
                if (
                  object.byteLength != other.byteLength ||
                  object.byteOffset != other.byteOffset
                ) {
                  return false;
                }

                object = object.buffer;
                other = other.buffer;

              case arrayBufferTag:
                if (
                  object.byteLength != other.byteLength ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))
                ) {
                  return false;
                }

                return true;

              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);

              case errorTag:
                return (
                  object.name == other.name && object.message == other.message
                );

              case regexpTag:
              case stringTag:
                return object == other + "";

              case mapTag:
                var convert = mapToArray;

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);

                if (object.size != other.size && !isPartial) {
                  return false;
                }

                var stacked = stack.get(object);

                if (stacked) {
                  return stacked == other;
                }

                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result = equalArrays(
                  convert(object),
                  convert(other),
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
                stack["delete"](object);
                return result;

              case symbolTag:
                if (symbolValueOf) {
                  return (
                    symbolValueOf.call(object) == symbolValueOf.call(other)
                  );
                }
            }

            return false;
          }

          module.exports = equalByTag;
        },
        /* 418 */
        function(module, exports) {
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);
            map.forEach(function(value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          module.exports = mapToArray;
        },
        /* 419 */
        function(module, exports, __webpack_require__) {
          var getAllKeys = __webpack_require__(101);

          var COMPARE_PARTIAL_FLAG = 1;
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;

          function equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
              return false;
            }

            var index = objLength;

            while (index--) {
              var key = objProps[index];

              if (
                !(isPartial ? key in other : hasOwnProperty.call(other, key))
              ) {
                return false;
              }
            }

            var stacked = stack.get(object);

            if (stacked && stack.get(other)) {
              return stacked == other;
            }

            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;

            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key],
                othValue = other[key];

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, objValue, key, other, object, stack)
                  : customizer(objValue, othValue, key, object, other, stack);
              }

              if (
                !(compared === undefined
                  ? objValue === othValue ||
                    equalFunc(objValue, othValue, bitmask, customizer, stack)
                  : compared)
              ) {
                result = false;
                break;
              }

              skipCtor || (skipCtor = key == "constructor");
            }

            if (result && !skipCtor) {
              var objCtor = object.constructor,
                othCtor = other.constructor;

              if (
                objCtor != othCtor &&
                "constructor" in object &&
                "constructor" in other &&
                !(
                  typeof objCtor == "function" &&
                  objCtor instanceof objCtor &&
                  typeof othCtor == "function" &&
                  othCtor instanceof othCtor
                )
              ) {
                result = false;
              }
            }

            stack["delete"](object);
            stack["delete"](other);
            return result;
          }

          module.exports = equalObjects;
        },
        /* 420 */
        function(module, exports, __webpack_require__) {
          var isStrictComparable = __webpack_require__(158),
            keys = __webpack_require__(18);

          function getMatchData(object) {
            var result = keys(object),
              length = result.length;

            while (length--) {
              var key = result[length],
                value = object[key];
              result[length] = [key, value, isStrictComparable(value)];
            }

            return result;
          }

          module.exports = getMatchData;
        },
        /* 421 */
        function(module, exports, __webpack_require__) {
          var baseIsEqual = __webpack_require__(156),
            get = __webpack_require__(422),
            hasIn = __webpack_require__(426),
            isKey = __webpack_require__(84),
            isStrictComparable = __webpack_require__(158),
            matchesStrictComparable = __webpack_require__(159),
            toKey = __webpack_require__(49);

          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }

            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined && objValue === srcValue
                ? hasIn(object, path)
                : baseIsEqual(
                    srcValue,
                    objValue,
                    COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                  );
            };
          }

          module.exports = baseMatchesProperty;
        },
        /* 422 */
        function(module, exports, __webpack_require__) {
          var baseGet = __webpack_require__(160);

          function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
          }

          module.exports = get;
        },
        /* 423 */
        function(module, exports, __webpack_require__) {
          var memoizeCapped = __webpack_require__(424);

          var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
          var reEscapeChar = /\\(\\)?/g;
          var stringToPath = memoizeCapped(function(string) {
            var result = [];

            if (string.charCodeAt(0) === 46) {
              result.push("");
            }

            string.replace(rePropName, function(
              match,
              number,
              quote,
              subString
            ) {
              result.push(
                quote ? subString.replace(reEscapeChar, "$1") : number || match
              );
            });
            return result;
          });
          module.exports = stringToPath;
        },
        /* 424 */
        function(module, exports, __webpack_require__) {
          var memoize = __webpack_require__(425);

          var MAX_MEMOIZE_SIZE = 500;

          function memoizeCapped(func) {
            var result = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }

              return key;
            });
            var cache = result.cache;
            return result;
          }

          module.exports = memoizeCapped;
        },
        /* 425 */
        function(module, exports, __webpack_require__) {
          var MapCache = __webpack_require__(54);

          var FUNC_ERROR_TEXT = "Expected a function";

          function memoize(func, resolver) {
            if (
              typeof func != "function" ||
              (resolver != null && typeof resolver != "function")
            ) {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            var memoized = function() {
              var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

              if (cache.has(key)) {
                return cache.get(key);
              }

              var result = func.apply(this, args);
              memoized.cache = cache.set(key, result) || cache;
              return result;
            };

            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }

          memoize.Cache = MapCache;
          module.exports = memoize;
        },
        /* 426 */
        function(module, exports, __webpack_require__) {
          var baseHasIn = __webpack_require__(427),
            hasPath = __webpack_require__(428);

          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }

          module.exports = hasIn;
        },
        /* 427 */
        function(module, exports) {
          function baseHasIn(object, key) {
            return object != null && key in Object(object);
          }

          module.exports = baseHasIn;
        },
        /* 428 */
        function(module, exports, __webpack_require__) {
          var castPath = __webpack_require__(161),
            isArguments = __webpack_require__(55),
            isArray = __webpack_require__(4),
            isIndex = __webpack_require__(57),
            isLength = __webpack_require__(58),
            toKey = __webpack_require__(49);

          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1,
              length = path.length,
              result = false;

            while (++index < length) {
              var key = toKey(path[index]);

              if (!(result = object != null && hasFunc(object, key))) {
                break;
              }

              object = object[key];
            }

            if (result || ++index != length) {
              return result;
            }

            length = object == null ? 0 : object.length;
            return (
              !!length &&
              isLength(length) &&
              isIndex(key, length) &&
              (isArray(object) || isArguments(object))
            );
          }

          module.exports = hasPath;
        },
        /* 429 */
        function(module, exports, __webpack_require__) {
          var baseProperty = __webpack_require__(430),
            basePropertyDeep = __webpack_require__(431),
            isKey = __webpack_require__(84),
            toKey = __webpack_require__(49);

          function property(path) {
            return isKey(path)
              ? baseProperty(toKey(path))
              : basePropertyDeep(path);
          }

          module.exports = property;
        },
        /* 430 */
        function(module, exports) {
          function baseProperty(key) {
            return function(object) {
              return object == null ? undefined : object[key];
            };
          }

          module.exports = baseProperty;
        },
        /* 431 */
        function(module, exports, __webpack_require__) {
          var baseGet = __webpack_require__(160);

          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }

          module.exports = basePropertyDeep;
        },
        /* 432 */
        function(module, exports, __webpack_require__) {
          var baseEach = __webpack_require__(433),
            isArrayLike = __webpack_require__(19);

          function baseMap(collection, iteratee) {
            var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
              result[++index] = iteratee(value, key, collection);
            });
            return result;
          }

          module.exports = baseMap;
        },
        /* 433 */
        function(module, exports, __webpack_require__) {
          var baseForOwn = __webpack_require__(434),
            createBaseEach = __webpack_require__(437);

          var baseEach = createBaseEach(baseForOwn);
          module.exports = baseEach;
        },
        /* 434 */
        function(module, exports, __webpack_require__) {
          var baseFor = __webpack_require__(435),
            keys = __webpack_require__(18);

          function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
          }

          module.exports = baseForOwn;
        },
        /* 435 */
        function(module, exports, __webpack_require__) {
          var createBaseFor = __webpack_require__(436);

          var baseFor = createBaseFor();
          module.exports = baseFor;
        },
        /* 436 */
        function(module, exports) {
          function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
              var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

              while (length--) {
                var key = props[fromRight ? length : ++index];

                if (iteratee(iterable[key], key, iterable) === false) {
                  break;
                }
              }

              return object;
            };
          }

          module.exports = createBaseFor;
        },
        /* 437 */
        function(module, exports, __webpack_require__) {
          var isArrayLike = __webpack_require__(19);

          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
              if (collection == null) {
                return collection;
              }

              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee);
              }

              var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);

              while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break;
                }
              }

              return collection;
            };
          }

          module.exports = createBaseEach;
        },
        /* 438 */
        function(module, exports) {
          function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);

            while (length--) {
              array[length] = array[length].value;
            }

            return array;
          }

          module.exports = baseSortBy;
        },
        /* 439 */
        function(module, exports, __webpack_require__) {
          var compareAscending = __webpack_require__(440);

          function compareMultiple(object, other, orders) {
            var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;

            while (++index < length) {
              var result = compareAscending(
                objCriteria[index],
                othCriteria[index]
              );

              if (result) {
                if (index >= ordersLength) {
                  return result;
                }

                var order = orders[index];
                return result * (order == "desc" ? -1 : 1);
              }
            }

            return object.index - other.index;
          }

          module.exports = compareMultiple;
        },
        /* 440 */
        function(module, exports, __webpack_require__) {
          var isSymbol = __webpack_require__(28);

          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);

              if (
                (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol &&
                  othIsDefined &&
                  othIsReflexive &&
                  !othIsNull &&
                  !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive
              ) {
                return 1;
              }

              if (
                (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol &&
                  valIsDefined &&
                  valIsReflexive &&
                  !valIsNull &&
                  !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive
              ) {
                return -1;
              }
            }

            return 0;
          }

          module.exports = compareAscending;
        },
        /* 441 */
        function(module, exports, __webpack_require__) {
          var baseClone = __webpack_require__(89);

          var CLONE_DEEP_FLAG = 1,
            CLONE_SYMBOLS_FLAG = 4;

          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }

          module.exports = cloneDeep;
        },
        /* 442 */
        function(module, exports) {},
        /* 443 */
        function(module, exports, __webpack_require__) {
          var buffer = __webpack_require__(145);

          var Buffer = buffer.Buffer;

          function copyProps(src, dst) {
            for (var key in src) {
              dst[key] = src[key];
            }
          }

          if (
            Buffer.from &&
            Buffer.alloc &&
            Buffer.allocUnsafe &&
            Buffer.allocUnsafeSlow
          ) {
            module.exports = buffer;
          } else {
            copyProps(buffer, exports);
            exports.Buffer = SafeBuffer;
          }

          function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length);
          }

          copyProps(Buffer, SafeBuffer);

          SafeBuffer.from = function(arg, encodingOrOffset, length) {
            if (typeof arg === "number") {
              throw new TypeError("Argument must not be a number");
            }

            return Buffer(arg, encodingOrOffset, length);
          };

          SafeBuffer.alloc = function(size, fill, encoding) {
            if (typeof size !== "number") {
              throw new TypeError("Argument must be a number");
            }

            var buf = Buffer(size);

            if (fill !== undefined) {
              if (typeof encoding === "string") {
                buf.fill(fill, encoding);
              } else {
                buf.fill(fill);
              }
            } else {
              buf.fill(0);
            }

            return buf;
          };

          SafeBuffer.allocUnsafe = function(size) {
            if (typeof size !== "number") {
              throw new TypeError("Argument must be a number");
            }

            return Buffer(size);
          };

          SafeBuffer.allocUnsafeSlow = function(size) {
            if (typeof size !== "number") {
              throw new TypeError("Argument must be a number");
            }

            return buffer.SlowBuffer(size);
          };
        },
        /* 444 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = generateMissingPluginMessage;
          const pluginNameMap = {
            classProperties: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-class-properties",
                url: "https://git.io/vb4yQ",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-class-properties",
                url: "https://git.io/vb4SL",
              },
            },
            decorators: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-decorators",
                url: "https://git.io/vb4y9",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-decorators",
                url: "https://git.io/vb4ST",
              },
            },
            doExpressions: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-do-expressions",
                url: "https://git.io/vb4yh",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-do-expressions",
                url: "https://git.io/vb4S3",
              },
            },
            dynamicImport: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-dynamic-import",
                url: "https://git.io/vb4Sv",
              },
            },
            exportDefaultFrom: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-export-default-from",
                url: "https://git.io/vb4SO",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-export-default-from",
                url: "https://git.io/vb4yH",
              },
            },
            exportNamespaceFrom: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-export-namespace-from",
                url: "https://git.io/vb4Sf",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-export-namespace-from",
                url: "https://git.io/vb4SG",
              },
            },
            flow: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-flow",
                url: "https://git.io/vb4yb",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-transform-flow-strip-types",
                url: "https://git.io/vb49g",
              },
            },
            functionBind: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-function-bind",
                url: "https://git.io/vb4y7",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-function-bind",
                url: "https://git.io/vb4St",
              },
            },
            functionSent: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-function-sent",
                url: "https://git.io/vb4yN",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-function-sent",
                url: "https://git.io/vb4SZ",
              },
            },
            importMeta: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-import-meta",
                url: "https://git.io/vbKK6",
              },
            },
            jsx: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-jsx",
                url: "https://git.io/vb4yA",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-transform-react-jsx",
                url: "https://git.io/vb4yd",
              },
            },
            logicalAssignment: {
              syntax: {
                name:
                  "@gerhobbelt/babel-plugin-syntax-logical-assignment-operators",
                url: "https://git.io/vAlBp",
              },
              transform: {
                name:
                  "@gerhobbelt/babel-plugin-proposal-logical-assignment-operators",
                url: "https://git.io/vAlRe",
              },
            },
            nullishCoalescingOperator: {
              syntax: {
                name:
                  "@gerhobbelt/babel-plugin-syntax-nullish-coalescing-operator",
                url: "https://git.io/vb4yx",
              },
              transform: {
                name:
                  "@gerhobbelt/babel-plugin-proposal-nullish-coalescing-operator",
                url: "https://git.io/vb4Se",
              },
            },
            numericSeparator: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-numeric-separator",
                url: "https://git.io/vb4Sq",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-numeric-separator",
                url: "https://git.io/vb4yS",
              },
            },
            optionalChaining: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-optional-chaining",
                url: "https://git.io/vb4Sc",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-optional-chaining",
                url: "https://git.io/vb4Sk",
              },
            },
            pipelineOperator: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-pipeline-operator",
                url: "https://git.io/vb4yj",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-pipeline-operator",
                url: "https://git.io/vb4SU",
              },
            },
            throwExpressions: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-throw-expressions",
                url: "https://git.io/vb4SJ",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-throw-expressions",
                url: "https://git.io/vb4yF",
              },
            },
            typescript: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-typescript",
                url: "https://git.io/vb4SC",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-transform-typescript",
                url: "https://git.io/vb4Sm",
              },
            },
            asyncGenerators: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-async-generators",
                url: "https://git.io/vb4SY",
              },
              transform: {
                name:
                  "@gerhobbelt/babel-plugin-proposal-async-generator-functions",
                url: "https://git.io/vb4yp",
              },
            },
            objectRestSpread: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-object-rest-spread",
                url: "https://git.io/vb4y5",
              },
              transform: {
                name: "@gerhobbelt/babel-plugin-proposal-object-rest-spread",
                url: "https://git.io/vb4Ss",
              },
            },
            optionalCatchBinding: {
              syntax: {
                name: "@gerhobbelt/babel-plugin-syntax-optional-catch-binding",
                url: "https://git.io/vb4Sn",
              },
              transform: {
                name:
                  "@gerhobbelt/babel-plugin-proposal-optional-catch-binding",
                url: "https://git.io/vb4SI",
              },
            },
          };

          const getNameURLCombination = ({ name, url }) => `${name} (${url})`;

          function generateMissingPluginMessage(
            missingPluginName,
            loc,
            codeFrame
          ) {
            let helpMessage =
              `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` +
              `(${loc.line}:${loc.column + 1}):\n\n` +
              codeFrame;
            const pluginInfo = pluginNameMap[missingPluginName];

            if (pluginInfo) {
              const {
                syntax: syntaxPlugin,
                transform: transformPlugin,
              } = pluginInfo;

              if (syntaxPlugin) {
                if (transformPlugin) {
                  const transformPluginInfo = getNameURLCombination(
                    transformPlugin
                  );
                  helpMessage +=
                    `\n\nAdd ${transformPluginInfo} to the 'plugins' section of your Babel config ` +
                    `to enable transformation.`;
                } else {
                  const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
                  helpMessage +=
                    `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` +
                    `to enable parsing.`;
                }
              }
            }

            return helpMessage;
          }
        },
        /* 445 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = generateCode;

          function _convertSourceMap() {
            const data = _interopRequireDefault(__webpack_require__(164));

            _convertSourceMap = function() {
              return data;
            };

            return data;
          }

          function _babelGenerator() {
            const data = _interopRequireDefault(__webpack_require__(79));

            _babelGenerator = function() {
              return data;
            };

            return data;
          }

          var _mergeMap = _interopRequireDefault(__webpack_require__(446));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function generateCode(pluginPasses, file) {
            const { opts, ast, code, inputMap } = file;
            const results = [];

            for (const plugins of pluginPasses) {
              for (const plugin of plugins) {
                const { generatorOverride } = plugin;

                if (generatorOverride) {
                  const result = generatorOverride(
                    ast,
                    opts.generatorOpts,
                    code,
                    _babelGenerator().default
                  );
                  if (result !== undefined) results.push(result);
                }
              }
            }

            let result;

            if (results.length === 0) {
              result = (0, _babelGenerator().default)(
                ast,
                opts.generatorOpts,
                code
              );
            } else if (results.length === 1) {
              result = results[0];

              if (typeof result.then === "function") {
                throw new Error(
                  `You appear to be using an async parser plugin, ` +
                    `which your current version of Babel does not support. ` +
                    `If you're using a published plugin, ` +
                    `you may need to upgrade your @gerhobbelt/babel-core version.`
                );
              }
            } else {
              throw new Error(
                "More than one plugin attempted to override codegen."
              );
            }

            let { code: outputCode, map: outputMap } = result;

            if (outputMap && inputMap) {
              outputMap = (0, _mergeMap.default)(
                inputMap.toObject(),
                outputMap
              );
            }

            if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
              outputCode +=
                "\n" +
                _convertSourceMap()
                  .default.fromObject(outputMap)
                  .toComment();
            }

            if (opts.sourceMaps === "inline") {
              outputMap = null;
            }

            return {
              outputCode,
              outputMap,
            };
          }
        },
        /* 446 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = mergeSourceMap;

          function _sourceMap() {
            const data = _interopRequireDefault(__webpack_require__(139));

            _sourceMap = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          function mergeSourceMap(inputMap, map) {
            const input = buildMappingData(inputMap);
            const output = buildMappingData(map);
            const mergedGenerator = new (_sourceMap()).default.SourceMapGenerator();

            for (const _ref of input.sources) {
              const { source } = _ref;

              if (typeof source.content === "string") {
                mergedGenerator.setSourceContent(source.path, source.content);
              }
            }

            if (output.sources.length === 1) {
              const defaultSource = output.sources[0];
              const insertedMappings = new Map();
              eachInputGeneratedRange(input, (generated, original, source) => {
                eachOverlappingGeneratedOutputRange(
                  defaultSource,
                  generated,
                  item => {
                    const key = makeMappingKey(item);
                    if (insertedMappings.has(key)) return;
                    insertedMappings.set(key, item);
                    mergedGenerator.addMapping({
                      source: source.path,
                      original: {
                        line: original.line,
                        column: original.columnStart,
                      },
                      generated: {
                        line: item.line,
                        column: item.columnStart,
                      },
                      name: original.name,
                    });
                  }
                );
              });

              for (const item of insertedMappings.values()) {
                if (item.columnEnd === Infinity) {
                  continue;
                }

                const clearItem = {
                  line: item.line,
                  columnStart: item.columnEnd,
                };
                const key = makeMappingKey(clearItem);

                if (insertedMappings.has(key)) {
                  continue;
                }

                mergedGenerator.addMapping({
                  generated: {
                    line: clearItem.line,
                    column: clearItem.columnStart,
                  },
                });
              }
            }

            const result = mergedGenerator.toJSON();

            if (typeof input.sourceRoot === "string") {
              result.sourceRoot = input.sourceRoot;
            }

            return result;
          }

          function makeMappingKey(item) {
            return `${item.line}/${item.columnStart}`;
          }

          function eachOverlappingGeneratedOutputRange(
            outputFile,
            inputGeneratedRange,
            callback
          ) {
            const overlappingOriginal = filterApplicableOriginalRanges(
              outputFile,
              inputGeneratedRange
            );

            for (const _ref2 of overlappingOriginal) {
              const { generated } = _ref2;

              for (const item of generated) {
                callback(item);
              }
            }
          }

          function filterApplicableOriginalRanges(
            { mappings },
            { line, columnStart, columnEnd }
          ) {
            return filterSortedArray(mappings, ({ original: outOriginal }) => {
              if (line > outOriginal.line) return -1;
              if (line < outOriginal.line) return 1;
              if (columnStart >= outOriginal.columnEnd) return -1;
              if (columnEnd <= outOriginal.columnStart) return 1;
              return 0;
            });
          }

          function eachInputGeneratedRange(map, callback) {
            for (const _ref3 of map.sources) {
              const { source, mappings } = _ref3;

              for (const _ref4 of mappings) {
                const { original, generated } = _ref4;

                for (const item of generated) {
                  callback(item, original, source);
                }
              }
            }
          }

          function buildMappingData(map) {
            const consumer = new (_sourceMap()).default.SourceMapConsumer(
              Object.assign({}, map, {
                sourceRoot: null,
              })
            );
            const sources = new Map();
            const mappings = new Map();
            let last = null;
            consumer.computeColumnSpans();
            consumer.eachMapping(
              m => {
                if (m.originalLine === null) return;
                let source = sources.get(m.source);

                if (!source) {
                  source = {
                    path: m.source,
                    content: consumer.sourceContentFor(m.source, true),
                  };
                  sources.set(m.source, source);
                }

                let sourceData = mappings.get(source);

                if (!sourceData) {
                  sourceData = {
                    source,
                    mappings: [],
                  };
                  mappings.set(source, sourceData);
                }

                const obj = {
                  line: m.originalLine,
                  columnStart: m.originalColumn,
                  columnEnd: Infinity,
                  name: m.name,
                };

                if (
                  last &&
                  last.source === source &&
                  last.mapping.line === m.originalLine
                ) {
                  last.mapping.columnEnd = m.originalColumn;
                }

                last = {
                  source,
                  mapping: obj,
                };
                sourceData.mappings.push({
                  original: obj,
                  generated: consumer
                    .allGeneratedPositionsFor({
                      source: m.source,
                      line: m.originalLine,
                      column: m.originalColumn,
                    })
                    .map(item => ({
                      line: item.line,
                      columnStart: item.column,
                      columnEnd: item.lastColumn + 1,
                    })),
                });
              },
              null,
              _sourceMap().default.SourceMapConsumer.ORIGINAL_ORDER
            );
            return {
              file: map.file,
              sourceRoot: map.sourceRoot,
              sources: Array.from(mappings.values()),
            };
          }

          function findInsertionLocation(array, callback) {
            let left = 0;
            let right = array.length;

            while (left < right) {
              const mid = Math.floor((left + right) / 2);
              const item = array[mid];
              const result = callback(item);

              if (result === 0) {
                left = mid;
                break;
              }

              if (result >= 0) {
                right = mid;
              } else {
                left = mid + 1;
              }
            }

            let i = left;

            if (i < array.length) {
              while (i >= 0 && callback(array[i]) >= 0) {
                i--;
              }

              return i + 1;
            }

            return i;
          }

          function filterSortedArray(array, callback) {
            const start = findInsertionLocation(array, callback);
            const results = [];

            for (
              let i = start;
              i < array.length && callback(array[i]) === 0;
              i++
            ) {
              results.push(array[i]);
            }

            return results;
          }
        },
        /* 447 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.transformFileSync = transformFileSync;
          exports.transformFileAsync = transformFileAsync;
          exports.transformFile = void 0;

          const transformFile = function transformFile(
            filename,
            opts,
            callback
          ) {
            if (typeof opts === "function") {
              callback = opts;
            }

            callback(
              new Error("Transforming files is not supported in browsers"),
              null
            );
          };

          exports.transformFile = transformFile;

          function transformFileSync() {
            throw new Error("Transforming files is not supported in browsers");
          }

          function transformFileAsync() {
            return Promise.reject(
              new Error("Transforming files is not supported in browsers")
            );
          }
        },
        /* 448 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.transformFromAstSync = transformFromAstSync;
            exports.transformFromAstAsync = transformFromAstAsync;
            exports.transformFromAst = void 0;

            var _config = _interopRequireDefault(__webpack_require__(30));

            var _transformation = __webpack_require__(155);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            const transformFromAst = function transformFromAst(
              ast,
              code,
              opts,
              callback
            ) {
              if (typeof opts === "function") {
                callback = opts;
                opts = undefined;
              }

              if (callback === undefined)
                return transformFromAstSync(ast, code, opts);
              const cb = callback;
              process.nextTick(() => {
                let cfg;

                try {
                  cfg = (0, _config.default)(opts);
                  if (cfg === null) return cb(null, null);
                } catch (err) {
                  return cb(err);
                }

                if (!ast) return cb(new Error("No AST given"));
                (0, _transformation.runAsync)(cfg, code, ast, cb);
              });
            };

            exports.transformFromAst = transformFromAst;

            function transformFromAstSync(ast, code, opts) {
              const config = (0, _config.default)(opts);
              if (config === null) return null;
              if (!ast) throw new Error("No AST given");
              return (0, _transformation.runSync)(config, code, ast);
            }

            function transformFromAstAsync(ast, code, opts) {
              return new Promise((res, rej) => {
                transformFromAst(ast, code, opts, (err, result) => {
                  if (err == null) res(result);
                  else rej(err);
                });
              });
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 449 */
        function(module, exports, __webpack_require__) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function(process) {
            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.parseSync = parseSync;
            exports.parseAsync = parseAsync;
            exports.parse = void 0;

            var _config = _interopRequireDefault(__webpack_require__(30));

            var _normalizeFile = _interopRequireDefault(
              __webpack_require__(163)
            );

            var _normalizeOpts = _interopRequireDefault(
              __webpack_require__(162)
            );

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            const parse = function parse(code, opts, callback) {
              if (typeof opts === "function") {
                callback = opts;
                opts = undefined;
              }

              if (callback === undefined) return parseSync(code, opts);
              const config = (0, _config.default)(opts);

              if (config === null) {
                return null;
              }

              const cb = callback;
              process.nextTick(() => {
                let ast = null;

                try {
                  const cfg = (0, _config.default)(opts);
                  if (cfg === null) return cb(null, null);
                  ast = (0, _normalizeFile.default)(
                    cfg.passes,
                    (0, _normalizeOpts.default)(cfg),
                    code
                  ).ast;
                } catch (err) {
                  return cb(err);
                }

                cb(null, ast);
              });
            };

            exports.parse = parse;

            function parseSync(code, opts) {
              const config = (0, _config.default)(opts);

              if (config === null) {
                return null;
              }

              return (0, _normalizeFile.default)(
                config.passes,
                (0, _normalizeOpts.default)(config),
                code
              ).ast;
            }

            function parseAsync(code, opts) {
              return new Promise((res, rej) => {
                parse(code, opts, (err, result) => {
                  if (err == null) res(result);
                  else rej(err);
                });
              });
            }
            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__(2)));
        },
        /* 450 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _babelHelperPluginUtils() {
            const data = __webpack_require__(40);

            _babelHelperPluginUtils = function() {
              return data;
            };

            return data;
          }

          function _babelPluginSyntaxJsonStrings() {
            const data = _interopRequireDefault(__webpack_require__(451));

            _babelPluginSyntaxJsonStrings = function() {
              return data;
            };

            return data;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj,
                };
          }

          var _default = (0, _babelHelperPluginUtils().declare)(api => {
            api.assertVersion(7);
            const regex = /(\\*)([\u2028\u2029])/g;

            function replace(match, escapes, separator) {
              const isEscaped = escapes.length % 2 === 1;
              if (isEscaped) return match;
              return `${escapes}\\u${separator.charCodeAt(0).toString(16)}`;
            }

            return {
              name: "proposal-json-strings",
              inherits: _babelPluginSyntaxJsonStrings().default,
              visitor: {
                "DirectiveLiteral|StringLiteral"({ node }) {
                  const { extra } = node;
                  if (!extra || !extra.raw) return;
                  extra.raw = extra.raw.replace(regex, replace);
                },
              },
            };
          });

          exports.default = _default;
        },
        /* 451 */
        function(module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          exports.default = void 0;

          function _babelHelperPluginUtils() {
            const data = __webpack_require__(40);

            _babelHelperPluginUtils = function() {
              return data;
            };

            return data;
          }

          var _default = (0, _babelHelperPluginUtils().declare)(api => {
            api.assertVersion(7);
            return {
              name: "syntax-json-strings",

              manipulateOptions(opts, parserOpts) {
                parserOpts.plugins.push("jsonStrings");
              },
            };
          });

          exports.default = _default;
        },
      ]
    );
  }
);
